(self.webpackChunksam_design_system=self.webpackChunksam_design_system||[]).push([[374],{"./libs/packages/sam-formly/src/lib/formly/types/fileinfo.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=CiAgICAgIC5zZHMtY2FyZC1zZWxlY3RlZCB7CiAgICAgICAgYm9yZGVyLWNvbG9yOiAjMjY3MmRlICFpbXBvcnRhbnQ7CiAgICAgICAgYm9yZGVyLXdpZHRoOiAycHggIWltcG9ydGFudDsKICAgICAgfQogICAg!./libs/packages/sam-formly/src/lib/formly/types/fileinfo.ts":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"\n      .sds-card-selected {\n        border-color: #2672de !important;\n        border-width: 2px !important;\n      }\n    ",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=Lm1hdC1kYXRlLXJhbmdlLWlucHV0LWVuZC13cmFwcGVyIHtmbGV4LWdyb3c6IHVuc2V0ICFpbXBvcnRhbnQ7IH0%3D!./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".mat-date-range-input-end-wrapper {flex-grow: unset !important; }",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=Lm1hdC1kYXRlLXJhbmdlLWlucHV0LXN0YXJ0LXdyYXBwZXIge292ZXJmbG93OiB1bnNldCAhaW1wb3J0YW50OyB9!./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".mat-date-range-input-start-wrapper {overflow: unset !important; }",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/packages/sam-formly/src/lib/formly/types/datepicker.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=dGFibGUubWF0LWNhbGVuZGFyLXRhYmxlIHRkLCB0YWJsZS5tYXQtY2FsZW5kYXItdGFibGUgdGgge2JvcmRlci1zdHlsZTogbm9uZTsgYmFja2dyb3VuZC1jb2xvcjogdW5zZXQ7IH0%3D!./libs/packages/sam-formly/src/lib/formly/types/datepicker.ts":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"table.mat-calendar-table td, table.mat-calendar-table th {border-style: none; background-color: unset; }",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=dGFibGUubWF0LWNhbGVuZGFyLXRhYmxlIHRkLCB0YWJsZS5tYXQtY2FsZW5kYXItdGFibGUgdGgge2JvcmRlci1zdHlsZTogbm9uZTsgYmFja2dyb3VuZC1jb2xvcjogdW5zZXQ7IH0%3D!./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"table.mat-calendar-table td, table.mat-calendar-table th {border-style: none; background-color: unset; }",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/packages/sam-formly/src/lib/formly-filters/advanced-filters/advanced-filters.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".usa-button--unstyled {\n  padding-left: 0;\n  width: initial;\n  text-decoration: none;\n  font-weight: 600;\n}\n.usa-button--unstyled:hover, .usa-button--unstyled:active {\n  background: transparent;\n  background: initial;\n  color: initial;\n  text-decoration: underline;\n}\n\n.icon-filter {\n  font-size: 20px;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/packages/sam-formly/src/lib/formly-reset/formly-reset.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".usa-button--unstyled {\n  padding-right: 0;\n  width: initial;\n  text-decoration: none;\n  font-weight: 600;\n}\n.usa-button--unstyled:hover, .usa-button--unstyled:active {\n  background: transparent;\n  background: initial;\n  color: initial;\n  text-decoration: underline;\n}\n\n.icon-reset {\n  font-size: 20px;\n}\n\nbutton {\n  display: inline-flex;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/packages/sam-formly/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{um:()=>FormlyUtilsService,IO:()=>SdsFiltersModule,$H:()=>SdsFormlyDialogComponent,ih:()=>SdsFormlyDialogModule,qt:()=>SdsFormlyModule,XW:()=>SdsFormlyTypes,nj:()=>SdsReadonlyModule,Ed:()=>SdsStepper,wZ:()=>SdsStepperModule,ex:()=>multiCheckboxRequired});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),ngx_formly_core=__webpack_require__("./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core.mjs"),ngx_formly_core_select=__webpack_require__("./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core-select.mjs"),fesm2022_core=__webpack_require__("./node_modules/@angular/material/fesm2022/core.mjs"),datepicker=__webpack_require__("./node_modules/@angular/material/fesm2022/datepicker.mjs"),src=__webpack_require__("./libs/packages/sam-material-extensions/src/index.ts"),components_src=__webpack_require__("./libs/packages/components/src/index.ts");let FormlyWrapperFormFieldComponent=class FormlyWrapperFormFieldComponent extends ngx_formly_core.cm{static#_=this.propDecorators={fieldComponent:[{type:core.ViewChild,args:["fieldComponent",{read:core.ViewContainerRef}]}]}};FormlyWrapperFormFieldComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-wrapper-form-field",template:'\n    <div class="usa-form-group" [class.usa-form-group--error]="showError">\n      <label\n        class="usa-label"\n        *ngIf="props.label && props.hideLabel !== true"\n        [attr.for]="id"\n        [ngClass]="props.labelClass"\n      >\n        <span\n          *ngIf="props.tagText"\n          class="usa-tag"\n          [ngClass]="props.tagClass ? props.tagClass : \'sds-tag--info-white\'"\n          >{{ props.tagText }}</span\n        >\n        <span>{{ props.label }}</span>\n        <span *ngIf="!props.required && !props.hideOptional"> (Optional)</span>\n      </label>\n      <div *ngIf="props.description" class="usa-label--description">\n        {{ props.description }}\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div *ngIf="showError" class="usa-error-message" [style.display]="\'block\'">\n        <formly-validation-message [field]="field"></formly-validation-message>\n      </div>\n    </div>\n  '})],FormlyWrapperFormFieldComponent);var lib=__webpack_require__("./node_modules/qs/lib/index.js"),gsa_sam_ngx_uswds=__webpack_require__("./node_modules/@gsa-sam/ngx-uswds/fesm2022/gsa-sam-ngx-uswds.mjs");let FormlyAccordianFormFieldComponent=class FormlyAccordianFormFieldComponent extends ngx_formly_core.cm{constructor(){super(),this.multi=!0}ngAfterViewInit(){"accordion"==this.props.group&&this.accordion&&(this.resetAllSubscription=this.field.options.fieldChanges.subscribe((({type})=>{"resetAll"===type&&this.accordionItem.expanded&&(this.modelHasValue()||this.accordion.collapse(this.accordionItem.id))})))}ngOnDestroy(){this.resetAllSubscription&&this.resetAllSubscription.unsubscribe()}modelHasValue(){if(this.props.hasOwnProperty("expand"))return this.props.expand;return!(!(this.formControl.value instanceof Object?lib.stringify(this.formControl.value,{skipNulls:!0}):this.formControl.value)&&!this.formControl.dirty)}static#_=this.ctorParameters=()=>[];static#_2=this.propDecorators={fieldComponent:[{type:core.ViewChild,args:["fieldComponent",{read:core.ViewContainerRef}]}],accordion:[{type:core.ViewChild,args:["groupAccordion"]}],accordionItem:[{type:core.ViewChild,args:[gsa_sam_ngx_uswds.Tv]}]}};FormlyAccordianFormFieldComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sam-formly-accordian-form-field",template:'\n    <usa-accordion #groupAccordion [singleSelect]="!multi" class="sds-accordion--filters">\n      <usa-accordion-item [expanded]="modelHasValue()" ]>\n        <ng-template UsaAccordionHeader>\n          <span [attr.class]="props.labelClass">{{ props.label }}</span>\n        </ng-template>\n        <ng-template UsaAccordionContent>\n          <ng-container #fieldComponent></ng-container>\n        </ng-template>\n      </usa-accordion-item>\n    </usa-accordion>\n  '})],FormlyAccordianFormFieldComponent);let FormlyFormFieldFilterWrapperComponent=class FormlyFormFieldFilterWrapperComponent extends ngx_formly_core.cm{static#_=this.propDecorators={fieldComponent:[{type:core.ViewChild,args:["fieldComponent",{read:core.ViewContainerRef}]}]}};FormlyFormFieldFilterWrapperComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sam-formly-filter-wrapper-form-field",template:'\n    <div class="wrapper-body">\n      <div class="sds-accordion__trigger header-label" [attr.aria-hidden]="props.ariaHidden ? \'false\' : \'true\'">\n        {{ props.label }}\n      </div>\n      <ng-container #fieldComponent></ng-container>\n    </div>\n  '})],FormlyFormFieldFilterWrapperComponent);let FormlyFieldInputComponent=class FormlyFieldInputComponent extends ngx_formly_core.PU{onClear(){this.field.formControl.setValue(""),this.field.focus=!0,this.field.formControl.markAsDirty()}onSuffixClick(ev){this.props.onSuffixClick&&this.props.onSuffixClick(ev)}onPrefixClick(ev){this.props.onPrefixClick&&this.props.onPrefixClick(ev)}};FormlyFieldInputComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-input",template:'\n    <div class="usa-input-group maxw-mobile-lg">\n      <div *ngIf="props.prefix || props.prefixIcon" class="usa-input-prefix" aria-hidden="true">\n        <span *ngIf="props.prefixIcon && !props.prefix" (click)="onPrefixClick($event)">\n          <usa-icon [icon]="props.prefixIcon" size="lg" class="font-sans-xs"></usa-icon>\n        </span>\n      </div>\n      <input\n        [id]="id"\n        class="usa-input"\n        [ngClass]="{\n          \'usa-input--disabled\': props.disabled,\n          \'usa-input--error\': showError\n        }"\n        [formlyAttributes]="field"\n        [type]="props.inputType ? props.inputType : \'text\'"\n        [formControl]="formControl"\n        [attr.aria-describedby]="props.description ? id + \'-description\' : undefined"\n      />\n      <div\n        *ngIf="props.suffix || props.suffixIcon || field.formControl.value"\n        class="usa-input-suffix"\n        aria-hidden="true"\n      >\n        <span *ngIf="props.suffix && !props.suffixIcon" (click)="onSuffixClick($event)">{{ props.suffix }}</span>\n        <span *ngIf="props.suffixIcon && !props.suffix" (click)="onSuffixClick($event)">\n          <usa-icon [icon]="props.suffixIcon" size="lg" class="font-sans-xs"></usa-icon>\n        </span>\n        <span\n          *ngIf="field.formControl.value && !props.disabled"\n          role="button"\n          aria-label="Clear input"\n          (click)="onClear()"\n          (keyup.enter)="onClear()"\n          tabindex="0"\n          class="icon-container"\n        >\n          <usa-icon [icon]="\'x\'" size="lg" class="font-sans-xs"></usa-icon>\n        </span>\n      </div>\n    </div>\n  '})],FormlyFieldInputComponent);let FormlyFieldSelectComponent=class FormlyFieldSelectComponent extends ngx_formly_core.PU{constructor(){super(...arguments),this.defaultOptions={props:{options:[]}}}};FormlyFieldSelectComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-select",template:'\n    <select\n      *ngIf="props.multiple; else singleSelect"\n      multiple\n      [class.custom-select]="props.customSelect"\n      [formControl]="formControl"\n      [class.is-invalid]="showError"\n      [formlyAttributes]="field"\n    >\n      <ng-container *ngFor="let item of props.options | formlySelectOptions: field | async">\n        <optgroup *ngIf="item.group" label="{{ item.label }}">\n          <option *ngFor="let child of item.group" [ngValue]="child.value" [disabled]="child.disabled">\n            {{ child.label }}\n          </option>\n        </optgroup>\n        <option *ngIf="!item.group" [ngValue]="item.value" [disabled]="item.disabled">{{ item.label }}</option>\n      </ng-container>\n    </select>\n    <ng-template #singleSelect>\n      <select\n        class="usa-select"\n        [formControl]="formControl"\n        [class.custom-select]="props.customSelect"\n        [class.is-invalid]="showError"\n        [formlyAttributes]="field"\n      >\n        <option *ngIf="props.placeholder" [ngValue]="null">{{ props.placeholder }}</option>\n        <ng-container *ngFor="let item of props.options | formlySelectOptions: field | async">\n          <optgroup *ngIf="item.group" label="{{ item.label }}">\n            <option *ngFor="let child of item.group" [ngValue]="child.value" [disabled]="child.disabled">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf="!item.group" [ngValue]="item.value" [disabled]="item.disabled">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  '})],FormlyFieldSelectComponent);let FormlyFieldRadioComponent=class FormlyFieldRadioComponent extends ngx_formly_core.PU{constructor(){super(...arguments),this.displayedTemplate=null,this.defaultOptions={props:{options:[]}}}getClassName(index){let cls="";return 0===index&&(cls="margin-top-0"),`${this.props.optionsClass} ${cls}`}ngAfterViewInit(){const passedIn=this.props.template;setTimeout((()=>{this.displayedTemplate=passedIn||this.defaultTemplate}))}static#_=this.propDecorators={defaultTemplate:[{type:core.ViewChild,args:["defaultTemplate"]}]}};FormlyFieldRadioComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-radio",template:'<form\n  class="usa-radio"\n  [id]="id"\n  [attr.aria-label]="props.ariaLabel? props.ariaLabel : props.label"\n  [attr.aria-describedby]="props.description ? id + \'-description\' : undefined"\n  [ngClass]="{\'horizontal\': props.horizontal, \'grid-row\': props.horizontal}"\n>\n  <div *ngIf="props.options">\n    <ng-container\n      *ngFor="\n  let option of props.options | formlySelectOptions: field | async;\n  let i = index"\n      [ngTemplateOutlet]="(props.template ? props.template : defaultTemplate)"\n      [ngTemplateOutletContext]="{\n    $implicit: option,\n    i: i,\n    props:props,\n    field: field,\n    id: id,\n    showError: showError,\n    formControl: formControl\n  }"\n    >\n    </ng-container>\n  </div>\n\n  <div *ngIf="props.groupOptions">\n    <fieldset class="usa-fieldset">\n      <ng-container class="grid-row" *ngFor="let option of (props.groupOptions |  keyvalue); let i = index">\n        <div>\n          <legend>\n            <span class="text-bold display-block margin-top-1 margin-bottom-05">{{option.key}}</span>\n          </legend>\n\n          <ng-container\n            class="grid-row"\n            *ngFor="let opt of option.value | formlySelectOptions: field | async; let j = index"\n          >\n            <div class="grid-row" [ngClass]="{\'horizontal-option\': props.horizontal}">\n              <div>\n                <input\n                  class="usa-radio__input"\n                  [ngClass]="{\'usa-radio__input--tile\': props.tile, \'usa-input--error\': !showError}"\n                  [formlyAttributes]="field"\n                  [id]="id + \'_\' + i+ \'_\'+ j"\n                  type="radio"\n                  [name]="option.value"\n                  checked="checked"\n                  [formControl]="formControl"\n                  [value]="opt.value"\n                />\n\n                <label class="usa-radio__label" [ngClass]="getClassName(j)" [for]="id + \'_\' + i+ \'_\'+ j">\n                  <span [innerHtml]="opt.label"></span>\n                  <ng-container *ngIf="option.value[j].description && option.value[j].description.length">\n                    <div class="usa-checkbox__label-description">\n                      <span\n                        class="display-block"\n                        *ngFor="let description of option.value[j].description"\n                        [innerHtml]="description"\n                      ></span>\n                    </div>\n                  </ng-container>\n                </label>\n              </div>\n\n              <div class="margin-left-1" *ngIf="option.value[j].tooltipText">\n                <ng-template #tipContent>\n                  <p\n                    [ngClass]="option.value[j].tooltipClass"\n                    class="margin-1"\n                    [innerHTML]="option.value[j].tooltipText"\n                  ></p>\n                </ng-template>\n                <usa-icon\n                  class="text-secondary"\n                  [position]="option.value[j].tooltipPosition ? option.value[j].tooltipPosition :\'right\'"\n                  [sdsTooltip]="tipContent"\n                  [size]="\'lg\'"\n                  [icon]="\'info-circle\'"\n                ></usa-icon>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </fieldset>\n  </div>\n</form>\n\n<ng-template let-option let-i="i" let-props="props" #defaultTemplate>\n  <div class="grid-row" [ngClass]="{\'horizontal-option\': props.horizontal ,\'margin-top-1\': props.description && i==0 }">\n    <div>\n      <input\n        class="usa-radio__input"\n        [ngClass]="{\'usa-radio__input--tile\': props.tile, \'usa-input--error\': !showError}"\n        [formlyAttributes]="field"\n        [id]="id + \'_\' + i"\n        type="radio"\n        [name]="id"\n        checked="checked"\n        [formControl]="formControl"\n        [value]="option.value"\n        tabindex="0"\n      />\n\n      <label class="usa-radio__label" [ngClass]="getClassName(i)" [for]="id + \'_\' + i">\n        <span [innerHtml]="option.label"></span>\n        <ng-container *ngIf="props.options[i].description && props.options[i].description.length">\n          <div class="usa-checkbox__label-description">\n            <span\n              class="display-block"\n              *ngFor="let description of props.options[i].description"\n              [innerHtml]="description"\n            ></span>\n          </div>\n        </ng-container>\n      </label>\n    </div>\n\n    <div class="margin-left-1" *ngIf="props.options[i].tooltipText">\n      <ng-template #tipContent>\n        <p [ngClass]="props.options[i].tooltipClass" class="margin-1" [innerHTML]="props.options[i].tooltipText"></p>\n      </ng-template>\n      <usa-icon\n        class="text-secondary"\n        [position]="props.options[i].tooltipPosition ? props.options[i].tooltipPosition :\'right\'"\n        [sdsTooltip]="tipContent"\n        [size]="\'lg\'"\n        [icon]="\'info-circle\'"\n      ></usa-icon>\n    </div>\n  </div>\n</ng-template>\n'})],FormlyFieldRadioComponent);let FormlyFieldCheckboxComponent=class FormlyFieldCheckboxComponent extends ngx_formly_core.PU{constructor(){super(...arguments),this.displayedTemplate=null,this.defaultOptions={props:{indeterminate:!0,hideLabel:!0}}}ngAfterViewInit(){const passedIn=this.props.template;setTimeout((()=>{this.displayedTemplate=passedIn||this.defaultTemplate}))}static#_=this.propDecorators={defaultTemplate:[{type:core.ViewChild,args:["defaultTemplate"]}]}};FormlyFieldCheckboxComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-checkbox",template:'<div class="grid-row">\n  <ng-container *ngIf="props.template; else defaultTemplate">\n    <div class="grid-row">\n      <ng-container\n        [ngTemplateOutlet]="(props.template)"\n        [ngTemplateOutletContext]="{\n        $implicit: props,\n        showError: showError,\n        formControl: formControl,\n        field: field,\n        id: id\n      }"\n      >\n      </ng-container>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #defaultTemplate>\n  <div class="usa-checkbox" [class.text-align-end]="props.textAlignEnd">\n    <input\n      class="usa-checkbox__input"\n      type="checkbox"\n      [class.is-invalid]="showError"\n      [indeterminate]="props.indeterminate && formControl.value === null"\n      [formControl]="formControl"\n      [formlyAttributes]="field"\n      [attr.aria-describedby]="props.description ? id + \'-description\' : undefined"\n    />\n    <label class="usa-checkbox__label" [for]="id">\n      <span [innerHtml]="props.label"></span>\n      <span *ngIf="!props.required && !props.hideOptional"> (Optional)</span>\n    </label>\n  </div>\n\n  <div *ngIf="props.tooltipText" class="padding-top-105 margin-left-1">\n    <ng-template #tipContent>\n      <p [ngClass]="props.tooltipClass" class="margin-1" [innerHTML]="props.tooltipText"></p>\n    </ng-template>\n    <usa-icon\n      class="text-secondary"\n      [position]="props.tooltipPosition ? props.tooltipPosition :\'right\'"\n      [sdsTooltip]="tipContent"\n      [size]="\'lg\'"\n      [icon]="\'info-circle\'"\n    ></usa-icon>\n  </div>\n</ng-template>\n'})],FormlyFieldCheckboxComponent);let FormlyFieldMultiCheckboxComponent=class FormlyFieldMultiCheckboxComponent extends ngx_formly_core.PU{constructor(cdr){super(),this.cdr=cdr,this.defaultOptions={props:{options:[],expandableOptions:!1,expandedOptions:!1}},this.ariaChecked="",this.mainOptionAriaChecked=[],this.subOptionAriaChecked=[]}ngOnInit(){this.subOptionAriaChecked.fill("false"),this.mainOptionAriaChecked.fill("false")}checkSubOption(allSubOptions,index){let allKeys=allSubOptions.map((opt=>opt.value));const uniqValues={};if(this.formControl.value)return this.formControl.value.forEach((i=>uniqValues[i]=!0)),allKeys.every((val=>uniqValues[val]))?(this.subOptionAriaChecked[index]="true",!0):allKeys.some((val=>uniqValues[val]))?(this.subOptionAriaChecked[index]="mixed",!0):(this.subOptionAriaChecked[index]="false",!1)}checkMainOption(id,allSubOptions){let index=this.getIndex(id),allKeys=[];allSubOptions.map((opt=>{allKeys.push(opt.value),opt.props&&opt.props.options&&opt.props.options.map((subOpt=>allKeys.push(subOpt.value)))}));let uniqValues={};return this.formControl.value&&Array.isArray(this.formControl.value)?this.formControl.value.forEach((i=>uniqValues[i]=!0)):this.formControl.value&&"object"==typeof this.formControl.value&&(uniqValues=this.formControl.value),allKeys.every((val=>uniqValues[val]))?(this.mainOptionAriaChecked[index]="true",!0):allKeys.some((val=>uniqValues[val]))?(this.mainOptionAriaChecked[index]="mixed",!0):(this.mainOptionAriaChecked[index]="false",!1)}onSubOptionChange(subOption,checked,allSubOptions,index){this.onChange(subOption.value,checked);let checkedValues=[];allSubOptions.forEach((subOpt=>{checkedValues.push(this.isChecked(subOpt))})),checkedValues.every(((val,i,arr)=>val===arr[0]))?this.subOptionAriaChecked[index]=checkedValues[0]?"true":"false":this.subOptionAriaChecked[index]="mixed"}onMainOptionChange(value,checked,mainOptions,id){this.onChange(value,checked);let checkedValues=[],i=this.getIndex(id);mainOptions.forEach((mainOpt=>{checkedValues.push(this.isChecked(mainOpt)),mainOpt.props&&(mainOpt.props.options.forEach((subOpt=>{checkedValues.push(this.isChecked(subOpt))})),mainOpt.value===value&&this.setAllSubList(checked,mainOpt,i))})),checkedValues.every(((val,_i,arr)=>val===arr[0]))?this.mainOptionAriaChecked[i]=checkedValues[0]?"true":"false":this.mainOptionAriaChecked[i]="mixed"}onChange(value,checked){"array"===this.props.type?this.formControl.patchValue(checked?[...this.formControl.value||[],value]:[...this.formControl.value||[]].filter((o=>o!==value))):this.formControl.patchValue({...this.formControl.value,[value]:checked}),this.formControl.markAsTouched(),this.cdr.detectChanges()}isChecked(option){return!!this.formControl.value&&("array"===this.props.type?this.formControl.value.includes(option.value)&&"false"!=option.value:this.props.groupOptions&&this.formControl.value[option.value]||this.formControl.value[option.value]?this.formControl.value[option.value]&&"false"!=this.formControl.value[option.value]:void 0)}setAllSubList(checked,subList,index){this.subOptionAriaChecked[index]=checked?"true":"false",Array.isArray(subList.props.options)&&this.field.props.options.forEach((subOption=>{subOption.value===subList.value&&subOption.props.options.map((item=>{this.onChange(item.value,checked)}))}))}getIndex(id){return id.substring(id.length-1)}setAll(ev){let id=ev.target.id,i=this.getIndex(id);this.mainOptionAriaChecked[i]=ev.target.checked,Array.isArray(this.field.props.options)&&(this.formControl.setValue([]),this.field.props.options.map(((option,index)=>{this.onChange(option.value,ev.target.checked),option.props&&this.setAllSubList(ev.target.checked,option,index)})))}_getAriaChecked(value){let i=this.getIndex(this.id);Array.isArray(this.field.props.options)&&(this.allComplete=value===this.field.props.options.length),this.mainOptionAriaChecked[i]=0===value?"false":value>0&&!this.allComplete?"mixed":"true"}static#_=this.ctorParameters=()=>[{type:core.ChangeDetectorRef}]};FormlyFieldMultiCheckboxComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-multicheckbox",template:'<fieldset class="usa-fieldset" [ngClass]="{ \'margin-top-1\': props.description }">\n  <legend class="usa-sr-only">{{ props.label }}</legend>\n\n  <fieldset *ngIf="props.groupOptions" class="usa-fieldset">\n    <ul class="sds-list sds-list--no-bullets margin-y-0">\n      <li class="grid-row" *ngFor=" let option of (props.groupOptions | keyvalue); let i=index">\n        <div>\n          <legend>\n            <span class="text-bold display-block">{{option.key}}</span>\n          </legend>\n          <li\n            class="grid-row margin-bottom-0"\n            *ngFor="let opt of option.value | formlySelectOptions: field | async; let j = index"\n          >\n            <div class="usa-checkbox" [class.text-align-end]="props.textAlignEnd">\n              <input\n                class="usa-checkbox__input"\n                [id]="id + \'_\' + i + j"\n                type="checkbox"\n                [name]="id + \'_name_\' + i + j"\n                [disabled]="opt.disabled"\n                [value]="opt.label"\n                [formlyAttributes]="field"\n                (change)="onChange(opt.value, $event.target.checked)"\n                [checked]="isChecked(opt)"\n              />\n              <label class="usa-checkbox__label" [for]="id + \'_\' + i + j">\n                <span\n                  *ngIf="option.value[j].tagText"\n                  class="usa-tag"\n                  [ngClass]="option.value[j].tagClass ? option.value[j].tagClass : \'sds-tag--info-white\'"\n                >\n                  {{option.value[j].tagText}}\n                </span>\n                <span [innerHtml]="opt.label"></span>\n              </label>\n            </div>\n            <div *ngIf="option.value[j].tooltipText" class="margin-left-1">\n              <ng-template #tipContent>\n                <p\n                  [ngClass]="option.value[j].tooltipClass"\n                  class="margin-1"\n                  [innerHTML]="option.value[j].tooltipText"\n                ></p>\n              </ng-template>\n              <usa-icon\n                class="text-secondary"\n                [position]="option.value[j].tooltipPosition ? option.value[j].tooltipPosition :\'right\'"\n                [sdsTooltip]="tipContent"\n                [size]="\'sm\'"\n                [icon]="\'info-circle\'"\n              ></usa-icon>\n            </div>\n          </li>\n        </div>\n      </li>\n    </ul>\n  </fieldset>\n\n  <ul *ngIf="props.options" class="sds-list sds-list--no-bullets margin-y-0">\n    <li class="grid-row" *ngIf="props.selectAllOption">\n      <div class="usa-checkbox" [class.text-align-end]="props.textAlignEnd">\n        <input\n          [id]="id"\n          type="checkbox"\n          class="usa-checkbox__input"\n          [name]="id + \'_name_\' + \'Select\'"\n          [value]="props.label"\n          [checked]="checkMainOption(id, props.options)"\n          [attr.aria-checked]="mainOptionAriaChecked[getIndex(id)]"\n          (change)="setAll($event)"\n        />\n        <label class="usa-checkbox__label" [for]="id">\n          <span [innerHtml]="props.label"></span>\n        </label>\n      </div>\n      <div *ngIf="props.selectTooltipText">\n        <ng-template #tipContent1>\n          <p [ngClass]="props.tooltipClass" class="margin-1" [innerHTML]="props.selectTooltipText"></p>\n        </ng-template>\n        <usa-icon\n          class="text-secondary"\n          class="margin-left-1"\n          [position]="props.selecttooltipPosition ? props.selecttooltipPosition :\'right\'"\n          [sdsTooltip]="tipContent1"\n          [size]="\'sm\'"\n          [icon]="\'info-circle\'"\n        ></usa-icon>\n      </div>\n\n      <div *ngIf="props.expandableOptions">\n        <button\n          type="button"\n          class="sds-button padding-top-0"\n          [attr.aria-expanded]="!props.expandedOptions"\n          [attr.aria-controls]="id + \'collapseID\'"\n          (click)="props.expandedOptions = !props.expandedOptions"\n        >\n          <span class="usa-sr-only">expand/collapsed</span>\n          <usa-icon [icon]="props.expandedOptions ?\'caret-down-fill\': \'caret-up-fill\'" [size]="\'1x\'"> </usa-icon>\n        </button>\n      </div>\n    </li>\n    <ng-container *ngFor="let option of props.options; let i = index">\n      <li *ngIf="!option.props" class="margin-y-0 grid-row" [ngClass]="{\'margin-left-4 \': props.selectAllOption}">\n        <div class="usa-checkbox" [class.text-align-end]="props.textAlignEnd">\n          <input\n            class="usa-checkbox__input"\n            [id]="id + \'_\' + i"\n            type="checkbox"\n            [name]="id + \'_name_\' + i"\n            [disabled]="option.disabled"\n            [value]="option.label"\n            [formlyAttributes]="field"\n            (change)="onMainOptionChange(option.value, $event.target.checked, props.options, id)"\n            [checked]="isChecked(option)"\n          />\n          <label class="usa-checkbox__label" [ngClass]="{\'margin-top-0\': i==0}" [for]="id + \'_\' + i">\n            <span\n              *ngIf="option.tagText"\n              class="usa-tag"\n              [ngClass]="option.tagClass ? option.tagClass : \'sds-tag--info-white\'"\n            >\n              {{option.tagText}}\n            </span>\n\n            <span [innerHtml]="option.label"></span>\n          </label>\n        </div>\n        <div *ngIf="option.tooltipText" class="margin-left-1">\n          <ng-template #tipContent>\n            <p [ngClass]="option.tooltipClass" class="margin-1" [innerHTML]="option.tooltipText"></p>\n          </ng-template>\n          <usa-icon\n            class="text-secondary"\n            [position]="option.tooltipPosition ? option.tooltipPosition :\'right\'"\n            [sdsTooltip]="tipContent"\n            [size]="\'sm\'"\n            [icon]="\'info-circle\'"\n          ></usa-icon>\n        </div>\n      </li>\n\n      <ng-container *ngIf="option.props">\n        <li class="grid-row" class="margin-left-4">\n          <div class="usa-checkbox" [class.text-align-end]="props.textAlignEnd">\n            <input\n              [id]="id + \'_\' + i"\n              type="checkbox"\n              class="usa-checkbox__input"\n              [name]="id + \'_name_\' + i"\n              [value]="option.props.label"\n              [checked]="checkSubOption(option.props.options, i)"\n              [attr.aria-checked]="subOptionAriaChecked[i]"\n              (change)="onMainOptionChange(option.value, $event.target.checked, props.options, id)"\n            />\n            \x3c!-- setAllSubList($event, option, i)" /> --\x3e\n            <label class="usa-checkbox__label" [for]="id + \'_\' + i">\n              <span [innerHtml]="option.props.label"></span>\n            </label>\n          </div>\n        </li>\n        <ul\n          [id]="\'collapseID\'"\n          [sdsCollapse]="props.expandedOptions"\n          [ngClass]="{\'margin-left-6 \': props.selectAllOption}"\n        >\n          <li class="grid-row" *ngFor="let subOption of (option.props.options); let j = index">\n            <div class="usa-checkbox" [class.text-align-end]="props.textAlignEnd">\n              <input\n                class="usa-checkbox__input"\n                [id]="id + \'_\' + i + \'_\' + j"\n                type="checkbox"\n                [name]="id + \'_\' + i + \'_name_\' + j"\n                [disabled]="subOption.disabled"\n                [value]="subOption.label"\n                [formlyAttributes]="field"\n                (change)="onSubOptionChange(subOption, $event.target.checked, option.props.options, i)"\n                [checked]="isChecked(subOption)"\n              />\n              <label class="usa-checkbox__label" [for]="id + \'_\' + i + \'_\' + j">\n                <span\n                  *ngIf="subOption.tagText"\n                  class="usa-tag"\n                  [ngClass]="subOption.tagClass ? subOption.tagClass : \'sds-tag--info-white\'"\n                >\n                  {{option.tagText}}\n                </span>\n                <span [innerHtml]="subOption.label"></span>\n              </label>\n            </div>\n            <div *ngIf="subOption.tooltipText" class="margin-left-1">\n              <ng-template #tipContent>\n                <p [ngClass]="subOption.tooltipClass" class="margin-1" [innerHTML]="subOption.tooltipText"></p>\n              </ng-template>\n              <usa-icon\n                class="text-secondary"\n                [position]="subOption.tooltipPosition ? subOption.tooltipPosition :\'right\'"\n                [sdsTooltip]="tipContent"\n                [size]="\'sm\'"\n                [icon]="\'info-circle\'"\n              ></usa-icon>\n            </div>\n          </li>\n        </ul>\n      </ng-container>\n    </ng-container>\n  </ul>\n</fieldset>\n'})],FormlyFieldMultiCheckboxComponent);let FormlyFieldTextAreaComponent=class FormlyFieldTextAreaComponent extends ngx_formly_core.PU{constructor(){super(...arguments),this.defaultOptions={props:{cols:1,rows:1,width:"small"}}}ngOnInit(){if(!this.props.maxLength)return;this.props.maxLength&&this.textareaRef.nativeElement.setAttribute("maxLength",this.props.maxLength);const initialValue=this.field.formControl.value;if(!initialValue)return void(this.charactersRemaining=this.props.maxLength);if(initialValue&&initialValue.length<=this.props.maxLength)return void(this.charactersRemaining=this.props.maxLength-initialValue.length);const truncatedValue=initialValue.substring(0,this.props.maxLength);this.formControl.setValue(truncatedValue),this.charactersRemaining=this.props.maxLength-truncatedValue.length}valueChange(value){if(this.props.maxLength&&null!=value&&null!=value)if(value.length>this.props.maxLength){const newValue=value.substring(0,this.props.maxLength);this.formControl.setValue(newValue)}else this.charactersRemaining=Math.max(0,this.props.maxLength-value.length)}static#_=this.propDecorators={textareaRef:[{type:core.ViewChild,args:["textarea",{static:!0}]}]}};FormlyFieldTextAreaComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-textarea",template:'\n    <div\n      [ngClass]="{\n        \'sds-textarea-small\': props.maxLength && props.size === \'small\',\n        \'sds-textarea-medium\': props.maxLength && props.size === \'medium\',\n        \'sds-textarea-large\': props.maxLength && props.size === \'large\'\n      }"\n    >\n      <textarea\n        #textarea\n        [formControl]="formControl"\n        [cols]="props.cols"\n        [rows]="props.rows"\n        class="usa-textarea minw-15"\n        [class.usa-input--error]="showError"\n        [placeholder]="props.placeholder"\n        [formlyAttributes]="field"\n        (ngModelChange)="valueChange($event)"\n      >\n      </textarea>\n      <span [attr.id]="id + \'-character-count\'" class="usa-hint" aria-live="polite">\n        <span *ngIf="props.maxLength">\n          {{ charactersRemaining }}\n          {{ charactersRemaining === 1 ? \'character\' : \'characters\' }}\n          {{ charactersRemaining === props.maxLength ? \'allowed\' : \'left\' }}\n        </span>\n      </span>\n    </div>\n  '})],FormlyFieldTextAreaComponent);let AbstractSdsFormly=class AbstractSdsFormly extends ngx_formly_core.PU{ngOnInit(){this.setProperties(this.template,this.field.props)}setProperties(component,configuration){Object.keys(configuration).map((function(key){component[key]=configuration[key]})),this.template.control&&(this.template.control=this.formControl)}};AbstractSdsFormly=(0,tslib_es6.Cg)([(0,core.Directive)()],AbstractSdsFormly);let FormlyFieldAutoCompleteComponent=class FormlyFieldAutoCompleteComponent extends AbstractSdsFormly{constructor(_cdr){super(),this.defaultOptions={props:{essentialModelFields:!0}},this.cdr=_cdr}ngAfterViewInit(){void 0!==this.template.configuration.id&&this.template.configuration.id!==this.id&&console.warn(`Formly Autocomplete ID mismatch: Formly Autocomplete ID(${this.id}) does not match Autocomplete Configuration ID (${this.template.configuration.id})`),this.template.configuration.id||(this.template.configuration.id=this.id)}static#_=this.ctorParameters=()=>[{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={template:[{type:core.ViewChild,args:[components_src.mJ,{static:!0}]}]}};FormlyFieldAutoCompleteComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-autocomplete",template:' <sds-autocomplete [formControl]="formControl"></sds-autocomplete> ',changeDetection:core.ChangeDetectionStrategy.OnPush})],FormlyFieldAutoCompleteComponent);var types_datepicker=__webpack_require__("./libs/packages/sam-formly/src/lib/formly/types/datepicker.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=dGFibGUubWF0LWNhbGVuZGFyLXRhYmxlIHRkLCB0YWJsZS5tYXQtY2FsZW5kYXItdGFibGUgdGgge2JvcmRlci1zdHlsZTogbm9uZTsgYmFja2dyb3VuZC1jb2xvcjogdW5zZXQ7IH0%3D!./libs/packages/sam-formly/src/lib/formly/types/datepicker.ts"),datepicker_default=__webpack_require__.n(types_datepicker);let FormlyFieldDatePickerComponent=class FormlyFieldDatePickerComponent extends ngx_formly_core.PU{};FormlyFieldDatePickerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-datepicker",template:'\n    <div class="display-flex">\n      <input\n        [id]="id"\n        class="usa-input display-inline-block margin-top-3"\n        [class.usa-input--error]="showError"\n        [formControl]="formControl"\n        [formlyAttributes]="field"\n        matInput\n        [min]="props.minDate"\n        [max]="props.maxDate"\n        [matDatepicker]="picker"\n        [placeholder]="props.placeholder ? props.placeholder : \'\'"\n        [attr.aria-describedby]="props.description ? id + \'-description\' : undefined"\n        (ngModelChange)="props.change ? props.change(field) : \'\'"\n      />\n      <mat-datepicker-toggle class="padding-left-1 padding-top-2" matSuffix [for]="picker">\n        <usa-icon [icon]="\'calendar\'" matDatepickerToggleIcon [size]="\'sm\'"></usa-icon>\n      </mat-datepicker-toggle>\n      <mat-datepicker [startAt]="props.startDate" #picker></mat-datepicker>\n    </div>\n  ',encapsulation:core.ViewEncapsulation.None,styles:[datepicker_default()]})],FormlyFieldDatePickerComponent);let FormlyFieldButtonComponent=class FormlyFieldButtonComponent extends ngx_formly_core.PU{onClick($event){this.props.onClick&&this.props.onClick($event)}};FormlyFieldButtonComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-button",template:'\n    <button\n      [type]="props.type"\n      [ngClass]="\'btn btn-\' + props.btnType"\n      (click)="onClick($event)"\n      class="usa-button--unstyled"\n    >\n      {{ props.text }}\n    </button>\n  '})],FormlyFieldButtonComponent);let FormlyFieldTextComponent=class FormlyFieldTextComponent extends AbstractSdsFormly{constructor(_cdr){super(),this.cdr=_cdr}static#_=this.ctorParameters=()=>[{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={template:[{type:core.ViewChild,args:[components_src.dr,{static:!0}]}]}};function minDateValidator(control,field){let toReturn=null,minDateField=field.props.minDate,value=control.value;return value&&minDateField&&value instanceof Date&&minDateField instanceof Date&&(minDateField.setHours(0,0,0,0),value.getTime()<minDateField.getTime()&&value.getTime()===minDateField.getTime()&&(toReturn=field.props.maxDate||field.props.maxDate instanceof Date?{betweenDate:!0}:{minDate:!0})),toReturn}function multiCheckboxRequired(control){return Object.keys(control.value).some((k=>control.value[k]))?{required:!0}:null}function maxDateValidator(control,field){let toReturn=null,maxDateField=field.props.maxDate,value=control.value;return value&&maxDateField&&value instanceof Date&&maxDateField instanceof Date&&(maxDateField.setHours(0,0,0,0),value.getTime()>maxDateField.getTime()&&value.getTime()===maxDateField.getTime()&&(toReturn=field.props.minDate||field.props.minDate instanceof Date?{betweenDate:!0}:{maxDate:!0})),toReturn}function dateRangeValidator(control,field){if(field.formControl.invalid&&field.formControl.errors)return field.formControl.errors;const innerFieldGroup=field.fieldGroup.find((field=>field.formControl.invalid&&field.formControl.errors));return innerFieldGroup?innerFieldGroup.formControl.errors:null}FormlyFieldTextComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-text",template:' <sds-text [formControl]="formControl"></sds-text> ',changeDetection:core.ChangeDetectionStrategy.OnPush})],FormlyFieldTextComponent);let sdsGroupWrapper=["group"],sdsWrappers=[...sdsGroupWrapper,"readonly","label","description","validation"],FormlyLabelWrapperComponent=class FormlyLabelWrapperComponent extends ngx_formly_core.cm{hasLabel(){return!this.props.hideLabel&&(!(!this.props.label||"checkbox"===this.field.type||"multicheckbox"===this.field.type)||void 0)}static#_=this.propDecorators={fieldComponent:[{type:core.ViewChild,args:["fieldComponent",{read:core.ViewContainerRef}]}]}};FormlyLabelWrapperComponent=(0,tslib_es6.Cg)([(0,core.Component)({template:'\n    <div class="usa-form-group" [class.usa-form-group--error]="showError">\n      <label\n        class="usa-label"\n        *ngIf="hasLabel()"\n        [attr.for]="id"\n        [ngClass]="{\n          \'margin-bottom-1\':\n            this.field?.props?.label && !this.field?.props?.hideLabel && this.field?.parent?.fieldGroup?.length === 1,\n          \'usa-sr-only\':\n            props.hideLabel ||\n            ((props.group === \'panel\' || props.group === \'accordion\') && field?.parent?.type !== \'formly-group\')\n        }"\n      >\n        <span\n          *ngIf="props.tagText"\n          class="usa-tag"\n          [ngClass]="props.tagClass ? props.tagClass : \'sds-tag--info-white\'"\n          >{{ props.tagText }}</span\n        >\n\n        <ng-container *ngIf="props.labelTemplate" [ngTemplateOutlet]="props.labelTemplate"> </ng-container>\n        <ng-container *ngIf="!props.labelTemplate">\n          <span [attr.class]="props.labelClass"\n            >{{ props.label\n            }}<span class="text-normal" *ngIf="!props.required && !props.hideOptional"> (Optional)</span>\n            <span *ngIf="props.tooltipText && field.type !== \'checkbox\'" class="margin-left-1">\n              <ng-template #tipContent>\n                <p [ngClass]="props.tooltipClass" class="margin-1" [innerHTML]="props.tooltipText"></p>\n              </ng-template>\n              <usa-icon\n                class="text-secondary"\n                [position]="props.tooltipPosition ? props.tooltipPosition : \'right\'"\n                [sdsTooltip]="tipContent"\n                [size]="\'lg\'"\n                [icon]="\'info-circle\'"\n              ></usa-icon>\n            </span>\n          </span>\n        </ng-container>\n      </label>\n\n      <div\n        [ngClass]="{\n\'{{props.labelContentClass}}\': props.labelContentClass,\n         \'single-form-control\':\n              ((props.group === \'panel\' || props.group === \'accordion\') && field?.parent?.type !== \'formly-group\')\n          }"\n      >\n        <ng-container #fieldComponent></ng-container>\n      </div>\n    </div>\n  '})],FormlyLabelWrapperComponent);let FormlyDescriptionWrapperComponent=class FormlyDescriptionWrapperComponent extends ngx_formly_core.cm{static#_=this.propDecorators={fieldComponent:[{type:core.ViewChild,args:["fieldComponent",{read:core.ViewContainerRef}]}]}};FormlyDescriptionWrapperComponent=(0,tslib_es6.Cg)([(0,core.Component)({template:'\n    <div>\n      <ng-container *ngIf="props.descriptionTemplate" [ngTemplateOutlet]="props.descriptionTemplate"> </ng-container>\n      <ng-container *ngIf="!props.descriptionTemplate">\n        <div\n          *ngIf="props.description"\n          [attr.aria-label]="props.description ? props.description : undefined"\n          class="usa-label--description"\n          [attr.aria-label]="props.description"\n          [id]="id + \'-description\'"\n          [innerHtml]="props.description"\n        ></div>\n      </ng-container>\n      <ng-container #fieldComponent></ng-container>\n    </div>\n  '})],FormlyDescriptionWrapperComponent);let FormlyValidationWrapperComponent=class FormlyValidationWrapperComponent extends ngx_formly_core.cm{static#_=this.propDecorators={fieldComponent:[{type:core.ViewChild,args:["fieldComponent",{read:core.ViewContainerRef}]}]}};FormlyValidationWrapperComponent=(0,tslib_es6.Cg)([(0,core.Component)({template:'\n    <ng-container #fieldComponent></ng-container>\n    <div\n      *ngIf="showError"\n      class="usa-error-message"\n      role="alert"\n      [id]="id + \'-error-message\'"\n      aria-live="assertive"\n      [style.display]="\'block\'"\n    >\n      <formly-validation-message [field]="field"></formly-validation-message>\n    </div>\n  '})],FormlyValidationWrapperComponent);let FormlyGroupWrapperComponent=class FormlyGroupWrapperComponent extends ngx_formly_core.cm{constructor(){super(),this.multi=!0}ngAfterViewInit(){("accordion"===this.props.group||"panel"===this.props.group||this.field.fieldGroup)&&(this.field.className=this.field.className?this.field.className:"margin-top-0"),"accordion"==this.props.group&&this.accordion&&(this.resetAllSubscription=this.field.options?.fieldChanges?.subscribe((({type})=>{"resetAll"===type&&this.accordionItem.expanded&&!this.modelHasValue()&&this.accordion.collapse(this.accordionItem.id)})))}ngOnDestroy(){this.resetAllSubscription&&this.resetAllSubscription.unsubscribe()}modelHasValue(){if(this.props.hasOwnProperty("expand"))return this.props.expand;return!(!(this.formControl.value instanceof Object?lib.stringify(this.formControl.value,{skipNulls:!0}):this.formControl.value)&&!this.formControl.dirty)}static#_=this.ctorParameters=()=>[];static#_2=this.propDecorators={fieldComponent:[{type:core.ViewChild,args:["fieldComponent",{read:core.ViewContainerRef}]}],accordion:[{type:core.ViewChild,args:["groupAccordion"]}],accordionItem:[{type:core.ViewChild,args:[gsa_sam_ngx_uswds.Tv]}]}};FormlyGroupWrapperComponent=(0,tslib_es6.Cg)([(0,core.Component)({template:'\n    <ng-container *ngIf="!props.readonlyMode; else defaultTemplate">\n      <ng-container [ngSwitch]="props.group">\n        <ng-container *ngSwitchCase="\'accordion\'">\n          <usa-accordion #groupAccordion [singleSelect]="!multi" class="sds-accordion--filters">\n            <usa-accordion-item [expanded]="modelHasValue()">\n              <ng-template UsaAccordionHeader>\n                <span [attr.class]="props.labelClass">{{ props.label }}</span>\n              </ng-template>\n              <ng-template UsaAccordionContent>\n                <ng-container #fieldComponent></ng-container>\n              </ng-template>\n            </usa-accordion-item>\n          </usa-accordion>\n        </ng-container>\n        <ng-container *ngSwitchCase="\'panel\'">\n          <div class="sds-panel" [ngClass]="{ \'sds-panel--multiple\': field?.fieldGroup?.length }">\n            <div\n              class="sds-panel__header padding-top-1"\n              *ngIf="!props.hideLabel"\n              [attr.aria-hidden]="!props.announceLabel ? undefined : \'true\'"\n            >\n              <span [attr.class]="props.labelClass">{{ props.label }}</span>\n            </div>\n            <div class="sds-panel__body">\n              <ng-container #fieldComponent></ng-container>\n            </div>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          <ng-container #fieldComponent></ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-template #defaultTemplate>\n      <ng-container #fieldComponent></ng-container>\n    </ng-template>\n  '})],FormlyGroupWrapperComponent);let FormlyFieldSearchComponent=class FormlyFieldSearchComponent extends AbstractSdsFormly{constructor(_cdr){super(),this.cdr=_cdr}static#_=this.ctorParameters=()=>[{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={template:[{type:core.ViewChild,args:[components_src.g6,{static:!0}]}]}};FormlyFieldSearchComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-search",template:'\n    <sds-search [formControl]="formControl" (submit)="props.submitHandler && props.submitHandler($event)"></sds-search>\n  ',changeDetection:core.ChangeDetectionStrategy.OnPush})],FormlyFieldSearchComponent);var fileinfo=__webpack_require__("./libs/packages/sam-formly/src/lib/formly/types/fileinfo.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=CiAgICAgIC5zZHMtY2FyZC1zZWxlY3RlZCB7CiAgICAgICAgYm9yZGVyLWNvbG9yOiAjMjY3MmRlICFpbXBvcnRhbnQ7CiAgICAgICAgYm9yZGVyLXdpZHRoOiAycHggIWltcG9ydGFudDsKICAgICAgfQogICAg!./libs/packages/sam-formly/src/lib/formly/types/fileinfo.ts"),fileinfo_default=__webpack_require__.n(fileinfo);let FormlyFieldFileInfoComponent=class FormlyFieldFileInfoComponent extends ngx_formly_core.PU{constructor(){super(...arguments),this.isSelected=!1,this.description="",this.defaultOptions={props:{options:[]}}}};FormlyFieldFileInfoComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-file",template:'\n    <div class="grid-row grid-gap margin-top-1">\n      <div *ngFor="let option of props.options | formlySelectOptions: field | async; let i = index">\n        <div\n          role="radio"\n          aria-checked="false"\n          class="sds-card mobile-lg:grid-col"\n          [ngClass]="{ \'sds-card-selected\': formControl.value == option.value }"\n          tabindex="0"\n          (keyup.enter)="formControl.setValue(option.value)"\n          [attr.aria-label]="option.label + \' \' + option.value"\n        >\n          <input\n            tabindex="-1"\n            type="radio"\n            [id]="id + \'_\' + i"\n            class="usa-sr-only usa-radio__input"\n            [name]="id"\n            [class.usa-input--error]="showError"\n            [attr.value]="option.value"\n            [value]="option.value"\n            [formControl]="formControl"\n            [formlyAttributes]="field"\n          />\n          <label [for]="id + \'_\' + i">\n            <div class="sds-card__header sds-card__header--center">\n              <h3 class="sds-card__title ">{{ option.label }}</h3>\n            </div>\n            <div class="sds-card__body sds-card__header--center ">\n              <span class="bg-base-light padding-1 padding-left-2 padding-right-2">{{ option.value }}</span>\n            </div>\n          </label>\n        </div>\n      </div>\n    </div>\n  ',styles:[fileinfo_default()]})],FormlyFieldFileInfoComponent);var daterangepicker=__webpack_require__("./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=Lm1hdC1kYXRlLXJhbmdlLWlucHV0LXN0YXJ0LXdyYXBwZXIge292ZXJmbG93OiB1bnNldCAhaW1wb3J0YW50OyB9!./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts"),daterangepicker_default=__webpack_require__.n(daterangepicker),types_daterangepicker=__webpack_require__("./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=Lm1hdC1kYXRlLXJhbmdlLWlucHV0LWVuZC13cmFwcGVyIHtmbGV4LWdyb3c6IHVuc2V0ICFpbXBvcnRhbnQ7IH0%3D!./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts"),types_daterangepicker_default=__webpack_require__.n(types_daterangepicker),formly_types_daterangepicker=__webpack_require__("./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts.css?ngResource!=!./node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=dGFibGUubWF0LWNhbGVuZGFyLXRhYmxlIHRkLCB0YWJsZS5tYXQtY2FsZW5kYXItdGFibGUgdGgge2JvcmRlci1zdHlsZTogbm9uZTsgYmFja2dyb3VuZC1jb2xvcjogdW5zZXQ7IH0%3D!./libs/packages/sam-formly/src/lib/formly/types/daterangepicker.ts"),formly_types_daterangepicker_default=__webpack_require__.n(formly_types_daterangepicker);let FormlyFieldDateRangePickerComponent=class FormlyFieldDateRangePickerComponent extends ngx_formly_core.PU{};var SdsFormlyTypes,SdsReadonlyTypes;FormlyFieldDateRangePickerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-daterangepicker",template:'\n    <div *ngIf="!field.hide" class="display-flex">\n      <mat-date-range-input\n        [formGroup]="formControl"\n        [rangePicker]="picker"\n        [min]="props.minDate"\n        [max]="props.maxDate"\n        [id]="id"\n        class="usa-input display-inline-block margin-top-3"\n        [formlyAttributes]="field"\n        [class.usa-input--error]="showError"\n      >\n        <input\n          matStartDate\n          [attr.aria-label]="field.fieldGroup[0]?.props?.placeholder || \'Start Date\'"\n          [formlyAttributes]="field.fieldGroup[0]"\n          [placeholder]="field.fieldGroup[0]?.props?.placeholder || \'mmm-dd-yyyy\'"\n          [formControlName]="field.fieldGroup[0].key"\n          (ngModelChange)="\n            field.fieldGroup[0]?.props?.change ? field.fieldGroup[0].props.change(field.fieldGroup[0]) : \'\'\n          "\n        />\n        <input\n          matEndDate\n          [attr.aria-label]="field.fieldGroup[1]?.props?.placeholder || \'End Date\'"\n          [formlyAttributes]="field.fieldGroup[1]"\n          [placeholder]="field.fieldGroup[1]?.props?.placeholder || \'mmm-dd-yyyy\'"\n          [formControlName]="field.fieldGroup[1].key"\n          (ngModelChange)="\n            field.fieldGroup[1]?.props?.change ? field.fieldGroup[1].props.change(field.fieldGroup[1]) : \'\'\n          "\n        />\n      </mat-date-range-input>\n      <mat-datepicker-toggle class="padding-top-2 padding-left-1" matSuffix [for]="picker">\n        <usa-icon [icon]="\'calendar\'" matDatepickerToggleIcon [size]="\'sm\'"></usa-icon>\n      </mat-datepicker-toggle>\n      <mat-date-range-picker [startAt]="to.startDate" #picker></mat-date-range-picker>\n    </div>\n  ',encapsulation:core.ViewEncapsulation.None,styles:[daterangepicker_default(),types_daterangepicker_default(),formly_types_daterangepicker_default()]})],FormlyFieldDateRangePickerComponent),function(SdsFormlyTypes){SdsFormlyTypes.INPUT="input",SdsFormlyTypes.BUTTON="button",SdsFormlyTypes.CHECKBOX="checkbox",SdsFormlyTypes.MULTICHECKBOX="multicheckbox",SdsFormlyTypes.RADIO="radio",SdsFormlyTypes.AUTOCOMPLETE="autocomplete",SdsFormlyTypes.DATEPICKER="datepicker",SdsFormlyTypes.SELECT="select",SdsFormlyTypes.TEXTAREA="textarea",SdsFormlyTypes.READONLY="readonly",SdsFormlyTypes.DATERANGEPICKER="daterangepicker",SdsFormlyTypes.DATERANGEPICKERV2="daterangepickerv2",SdsFormlyTypes.FORMLYGROUP="formly-group",SdsFormlyTypes.FORMLYARRAY="formly-array",SdsFormlyTypes.CUSTOMTEXT="customtext",SdsFormlyTypes.EDITOR="editor",SdsFormlyTypes.FILEINFO="fileinfo",SdsFormlyTypes.SEARCH="search",SdsFormlyTypes.FILEINPUT="fileinput",SdsFormlyTypes.TABS="tabs",SdsFormlyTypes.RICHTEXTEDITOR="rich-text-editor",SdsFormlyTypes.STEPARROW="step-arrow",SdsFormlyTypes.TABLE="table"}(SdsFormlyTypes||(SdsFormlyTypes={})),function(SdsReadonlyTypes){SdsReadonlyTypes.INPUT="input",SdsReadonlyTypes.CHECKBOX="checkbox",SdsReadonlyTypes.MULTICHECKBOX="multicheckbox",SdsReadonlyTypes.RADIO="radio",SdsReadonlyTypes.AUTOCOMPLETE="autocomplete",SdsReadonlyTypes.DATEPICKER="datepicker",SdsReadonlyTypes.SELECT="select",SdsReadonlyTypes.TEXTAREA="textarea",SdsReadonlyTypes.READONLY="readonly",SdsReadonlyTypes.DATERANGEPICKER="daterangepicker",SdsReadonlyTypes.DATERANGEPICKERV2="daterangepickerv2",SdsReadonlyTypes.FILEINFO="fileinfo",SdsReadonlyTypes.SEARCH="search"}(SdsReadonlyTypes||(SdsReadonlyTypes={}));let FormlyReadonlyWrapperComponent=class FormlyReadonlyWrapperComponent extends ngx_formly_core.cm{constructor(){super(...arguments),this.sdsFormlyTypes=SdsFormlyTypes}static#_=this.propDecorators={fieldComponent:[{type:core.ViewChild,args:["fieldComponent",{read:core.ViewContainerRef}]}]}};FormlyReadonlyWrapperComponent=(0,tslib_es6.Cg)([(0,core.Component)({template:'\n    <div\n      *ngIf="field.type === sdsFormlyTypes.READONLY || props.readonlyMode; else passThrough"\n      [ngClass]="props.readonlyClass"\n    >\n      <span *ngIf="props.readonlyTemplate; else defaultTemplate" [innerHTML]="props.readonlyTemplate(field)"></span>\n      <ng-template #defaultTemplate>\n        <sds-readonly-container [formlyFieldConfig]="field"></sds-readonly-container>\n      </ng-template>\n    </div>\n    <ng-template #passThrough>\n      <ng-container #fieldComponent></ng-container>\n    </ng-template>\n  '})],FormlyReadonlyWrapperComponent);let FormlyFieldFileInputComponent=class FormlyFieldFileInputComponent extends AbstractSdsFormly{constructor(_cdr){super(),this.modelChange=new core.EventEmitter,this.displayedTemplate=null,this.selectedFiles=[],this.displayedColumns=[],this.cdr=_cdr}onSelectedFilesChange(ev){this.modelChange.next(ev)}ngOnInit(){this.field&&this.props.tableColumns&&(this.displayedColumns=this.props.tableColumns.map((column=>column.columnName)))}static#_=this.ctorParameters=()=>[{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={template:[{type:core.ViewChild,args:[gsa_sam_ngx_uswds.$1,{static:!0}]}],modelChange:[{type:core.Output}],defaultTemplate:[{type:core.ViewChild,args:["defaultTemplate"]}]}};FormlyFieldFileInputComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-file-input",template:'<usa-file-input\n  #fileInput\n  [formControl]="formControl"\n  [id]="id"\n  [acceptFileType]="props.acceptFileType"\n  [multiple]="props.multiple"\n  [hint]="props.hint"\n  [disabled]="props.disabled"\n  [clearFilesOnAdd]="props.clearFilesOnAdd"\n  [displayFileInfo]="props.displayFileInfo"\n  [uploadRequest]="props.uploadRequest"\n  (selectedFilesChange)="onSelectedFilesChange($event)"\n>\n</usa-file-input>\n\n<ng-container\n  *ngIf="props.tableDisplay"\n  [ngTemplateOutlet]="(props.template ? props.template : defaultTemplate)"\n  [ngTemplateOutletContext]="{\n        props: props,\n        form: formControl,\n        model: model,\n        modelChange: modelChange\n      }"\n>\n</ng-container>\n\n<ng-template\n  let-props="props"\n  let-data="data"\n  let-form="form"\n  let-model="model"\n  let-modelChange="modelChange"\n  #defaultTemplate\n>\n  <div class="margin-top-2"></div>\n\n  <sds-table [data]="form.value" [tableName]="props.tableName" #fileTable>\n    <sds-table-column *ngFor="let column of props.tableColumns" [sdsColumnName]="column.columnName">\n      <ng-template #sdsHeaderCell>{{column.label}}</ng-template>\n      <ng-template #sdsCell let-element="element">\n        <button\n          class="usa-button usa-button--unstyled text-secondary-dark"\n          *ngIf="column.onClick; else noClick"\n          (click)="column.onClick(element, field.parent)"\n        >\n          <ng-container\n            [ngTemplateOutlet]="tableCellTemplates"\n            [ngTemplateOutletContext]="{$implicit: element, column: column}"\n          ></ng-container>\n        </button>\n        <ng-template #noClick>\n          <ng-container\n            [ngTemplateOutlet]="tableCellTemplates"\n            [ngTemplateOutletContext]="{$implicit: element, column: column}"\n          ></ng-container>\n        </ng-template>\n      </ng-template>\n    </sds-table-column>\n    <sds-header-row [displayedColumns]="displayedColumns"></sds-header-row>\n    <sds-row [displayedColumns]="displayedColumns"></sds-row>\n  </sds-table>\n  <div *ngIf="!form.value || !form.value.length" class="border border-base-light text-center padding-1">\n    {{props.noDataText}}\n  </div>\n\n  <ng-template #tableCellTemplates let-element let-column="column">\n    <span *ngIf="column.property">{{element[column.property]}}</span>\n    <span *ngIf="column.text">{{column.text}}</span>\n    <span *ngIf="column.textFn">{{column.textFn(element)}}</span>\n  </ng-template>\n</ng-template>\n'})],FormlyFieldFileInputComponent);var Subscription=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subscription.js");let FormlyTabsWrapperComponent=class FormlyTabsWrapperComponent extends ngx_formly_core.cm{constructor(){super(...arguments),this.toDestroy=new Subscription.yU}ngOnInit(){this.field&&this.field.fieldGroup&&this.field.fieldGroup.forEach((fieldConfig=>{this.updateFieldConfig(fieldConfig)}));const valueChangeSub=this.formControl.valueChanges.subscribe((newValue=>{this._initialModel=newValue}));this.toDestroy.add(valueChangeSub)}ngOnDestroy(){this.toDestroy.unsubscribe()}updateFieldConfig(fieldConfig){const submitButtonId=fieldConfig.props?.submitButtonId;submitButtonId&&fieldConfig.fieldGroup.forEach((field=>{field.id===submitButtonId&&(field.props=field.props?field.props:{},field.props.onClick=()=>{this.updateFieldModel(fieldConfig)}),field.modelOptions={updateOn:"submit"}}))}updateFieldModel(fieldConfig){Object.keys(fieldConfig.form.controls).forEach((field=>{const control=fieldConfig.form.get(field);control._pendingValue&&(control.setValue(control._pendingValue),control.markAsTouched())}))}};FormlyTabsWrapperComponent=(0,tslib_es6.Cg)([(0,core.Component)({template:'\n    <label [attr.for]="id" class="usa-label text-bold text-base-dark">{{ props.label }}</label>\n    <p [innerHTML]="props.description"></p>\n    <div class="sds-filter-keywords">\n      <ng-container *ngIf="field.fieldGroup?.length > 1; else singleField">\n        <sds-tabs\n          [tabClass]="props.tabClass ? props.tabClass : \'sds-tabs--formly\'"\n          [interceptTabChange]="props.interceptTabChange"\n          (preTabChange)="props.preTabChange ? props.preTabChange($event) : null"\n          [(selectedTab)]="props.selectedTab"\n        >\n          <sds-tab-panel *ngFor="let fieldConfig of field.fieldGroup" [tabHeader]="fieldConfig.props?.tabHeader">\n            <formly-form [fields]="[fieldConfig]" [model]="model"> </formly-form>\n          </sds-tab-panel>\n        </sds-tabs>\n      </ng-container>\n\n      <ng-template #singleField>\n        <div class="padding-left-2 padding-right-2 padding-bottom-1">\n          <formly-form [fields]="field.fieldGroup" [model]="model"></formly-form>\n        </div>\n      </ng-template>\n    </div>\n  '})],FormlyTabsWrapperComponent);let FormlyFieldTableComponent=class FormlyFieldTableComponent extends ngx_formly_core.PU{constructor(){super(...arguments),this.displayedColumns=[]}ngOnInit(){this.displayedColumns=this.props.tableColumns.map((column=>column.columnName)),this.parentFieldConfig=this.field.parent}};FormlyFieldTableComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-table",template:'<sds-table [data]="form.value" [tableName]="props.name" #fileTable>\n  <sds-table-column *ngFor="let column of props.tableColumns" [sdsColumnName]="column.columnName">\n    <ng-template #sdsHeaderCell>{{column.label}}</ng-template>\n    <ng-template #sdsCell let-element="element">\n      <button\n        class="usa-button usa-button--unstyled text-secondary-dark"\n        *ngIf="column.onClick; else noClick"\n        (click)="column.onClick(element, parentFieldConfig)"\n      >\n        <ng-container\n          [ngTemplateOutlet]="tableCellTemplates"\n          [ngTemplateOutletContext]="{$implicit: element, column: column}"\n        ></ng-container>\n      </button>\n      <ng-template #noClick>\n        <ng-container\n          [ngTemplateOutlet]="tableCellTemplates"\n          [ngTemplateOutletContext]="{$implicit: element, column: column}"\n        ></ng-container>\n      </ng-template>\n    </ng-template>\n  </sds-table-column>\n  <sds-header-row [displayedColumns]="displayedColumns"></sds-header-row>\n  <sds-row [displayedColumns]="displayedColumns"></sds-row>\n</sds-table>\n<div *ngIf="!form.value || !form.value.length" class="border border-base-light text-center padding-1">\n  {{props.noDataText}}\n</div>\n\n<ng-template #tableCellTemplates let-element let-column="column">\n  <span *ngIf="column.property">{{element[column.property]}}</span>\n  <span *ngIf="column.text">{{column.text}}</span>\n  <span *ngIf="column.textFn">{{column.textFn(element)}}</span>\n</ng-template>\n'})],FormlyFieldTableComponent);let FormlyFieldEditorComponent=class FormlyFieldEditorComponent extends AbstractSdsFormly{constructor(_cdr){super(),this.cdr=_cdr}static#_=this.ctorParameters=()=>[{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={template:[{type:core.ViewChild,args:[components_src.VG,{static:!0}]}]}};FormlyFieldEditorComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-editor",template:' <sds-editor [formControl]="formControl"></sds-editor> ',changeDetection:core.ChangeDetectionStrategy.OnPush})],FormlyFieldEditorComponent);let FormlyFieldRichTextEditorComponent=class FormlyFieldRichTextEditorComponent extends AbstractSdsFormly{constructor(_cdr){super(),this.cdr=_cdr}static#_=this.ctorParameters=()=>[{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={template:[{type:core.ViewChild,args:[components_src.JI,{static:!0}]}]}};FormlyFieldRichTextEditorComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-rich-text-editor",template:' <sds-rich-text [formControl]="formControl"> </sds-rich-text> '})],FormlyFieldRichTextEditorComponent);let FormlyFieldStepArrowComponent=class FormlyFieldStepArrowComponent extends AbstractSdsFormly{constructor(_cdr){super(),this.cdr=_cdr}static#_=this.ctorParameters=()=>[{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={template:[{type:core.ViewChild,args:[components_src.pA,{static:!0}]}]}};FormlyFieldStepArrowComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-field-autocomplete",template:'\n    <div class="grid-row">\n      <sds-step-arrow [number]="props.number" [status]="props.status"></sds-step-arrow>\n      <h3 class="margin-top-1">{{ props.stepTitle }}</h3>\n    </div>\n  ',changeDetection:core.ChangeDetectionStrategy.OnPush})],FormlyFieldStepArrowComponent);const FIELD_TYPE_COMPONENTS=[FormlyFieldInputComponent,FormlyFieldCheckboxComponent,FormlyFieldFileInfoComponent,FormlyFieldRadioComponent,FormlyFieldSelectComponent,FormlyFieldTextAreaComponent,FormlyFieldMultiCheckboxComponent,FormlyWrapperFormFieldComponent,FormlyAccordianFormFieldComponent,FormlyFieldAutoCompleteComponent,FormlyFieldDatePickerComponent,FormlyFieldDateRangePickerComponent,FormlyFormFieldFilterWrapperComponent,FormlyFieldButtonComponent,FormlyLabelWrapperComponent,FormlyDescriptionWrapperComponent,FormlyValidationWrapperComponent,FormlyFieldTextComponent,FormlyGroupWrapperComponent,FormlyFieldSearchComponent,FormlyReadonlyWrapperComponent,FormlyFieldFileInputComponent,FormlyTabsWrapperComponent,FormlyFieldTableComponent,FormlyFieldEditorComponent,FormlyFieldRichTextEditorComponent,FormlyFieldStepArrowComponent],FORMLY_CONFIG={types:[{name:SdsFormlyTypes.FORMLYGROUP,wrappers:sdsGroupWrapper,defaultOptions:{defaultValue:{}}},{name:SdsFormlyTypes.FORMLYARRAY,wrappers:sdsGroupWrapper,defaultOptions:{defaultValue:{}}},{name:SdsFormlyTypes.READONLY,wrappers:sdsGroupWrapper,component:FormlyReadonlyWrapperComponent},{name:SdsFormlyTypes.BUTTON,component:FormlyFieldButtonComponent},{name:SdsFormlyTypes.CUSTOMTEXT,component:FormlyFieldTextComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.EDITOR,component:FormlyFieldEditorComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.INPUT,component:FormlyFieldInputComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.CHECKBOX,component:FormlyFieldCheckboxComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.FILEINFO,component:FormlyFieldFileInfoComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.RADIO,component:FormlyFieldRadioComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.SELECT,component:FormlyFieldSelectComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.TEXTAREA,component:FormlyFieldTextAreaComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.MULTICHECKBOX,component:FormlyFieldMultiCheckboxComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.AUTOCOMPLETE,component:FormlyFieldAutoCompleteComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.DATEPICKER,component:FormlyFieldDatePickerComponent,wrappers:sdsWrappers,defaultOptions:{validators:{validation:[maxDateValidator,minDateValidator]}}},{name:SdsFormlyTypes.DATERANGEPICKER,extends:SdsFormlyTypes.FORMLYGROUP,wrappers:sdsWrappers,defaultOptions:{fieldGroup:[{type:SdsFormlyTypes.DATEPICKER,key:"fromDate",props:{label:"From",placeholder:"eg: "+(new Date).toLocaleString("en-US",{month:"short",day:"numeric",year:"numeric"})},expressionProperties:{"props.minDate":function minDateFromDateRangePicker(model,formState,field){let date=null;field.parent.props.minDate&&(date=new Date(field.parent.props.minDate.getTime()));return date},"props.maxDate":function maxDateFromDateRangePicker(model,formState,field){let date=null;field.parent.props.maxDate&&(date=new Date(field.parent.props.maxDate));model&&model.toDate&&(date=model.toDate);return date},"props.hideOptional":getParentHideOptional}},{type:SdsFormlyTypes.DATEPICKER,key:"toDate",props:{label:"To",placeholder:"eg: "+(new Date).toLocaleString("en-US",{month:"short",day:"numeric",year:"numeric"})},expressionProperties:{"props.minDate":function minDateToDateRangePicker(model,formState,field){let date=null;field.parent.props.minDate&&(date=new Date(field.parent.props.minDate.getTime()));model&&model.fromDate&&(date=model.fromDate);return date},"props.maxDate":function maxDateToDateRangePicker(model,formState,field){let date=null;field.parent.props.maxDate&&(date=new Date(field.parent.props.maxDate.getTime()));return date},"props.hideOptional":getParentHideOptional}}]}},{name:"daterangepickerv2",component:FormlyFieldDateRangePickerComponent,wrappers:sdsWrappers,defaultOptions:{validators:{validation:[dateRangeValidator]},fieldGroup:[{key:"fromDate",props:{placeholder:"eg: "+(new Date).toLocaleString("en-US",{month:"short",day:"numeric",year:"numeric"})}},{key:"toDate",props:{placeholder:(new Date).toLocaleString("en-US",{month:"short",day:"numeric",year:"numeric"})}}]}},{name:SdsFormlyTypes.SEARCH,component:FormlyFieldSearchComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.FILEINPUT,component:FormlyFieldFileInputComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.TABLE,component:FormlyFieldTableComponent},{name:SdsFormlyTypes.RICHTEXTEDITOR,component:FormlyFieldRichTextEditorComponent,wrappers:sdsWrappers},{name:SdsFormlyTypes.STEPARROW,component:FormlyFieldStepArrowComponent,wrappers:sdsWrappers}],wrappers:[{name:"label",component:FormlyLabelWrapperComponent},{name:"description",component:FormlyDescriptionWrapperComponent},{name:"validation",component:FormlyValidationWrapperComponent},{name:"group",component:FormlyGroupWrapperComponent},{name:"form-field",component:FormlyWrapperFormFieldComponent},{name:"accordionwrapper",component:FormlyAccordianFormFieldComponent},{name:"filterwrapper",component:FormlyFormFieldFilterWrapperComponent},{name:"readonly",component:FormlyReadonlyWrapperComponent},{name:"tabs",component:FormlyTabsWrapperComponent}]};function getParentHideOptional(model,formState,field){return!(!field.parent||!field.parent.props)&&field.parent.props.hideOptional}var animations=__webpack_require__("./node_modules/@angular/animations/fesm2022/animations.mjs");const SlideInOutAnimation=[(0,animations.hZ)("slideInOut",[(0,animations.wk)("in",(0,animations.iF)({"max-height":"auto",opacity:"1",visibility:"visible"})),(0,animations.wk)("out",(0,animations.iF)({"max-height":"0px",opacity:"0",visibility:"hidden"})),(0,animations.kY)("in => out",[(0,animations.Os)([(0,animations.i0)("400ms ease-in-out",(0,animations.iF)({opacity:"0"})),(0,animations.i0)("600ms ease-in-out",(0,animations.iF)({"max-height":"0px"})),(0,animations.i0)("700ms ease-in-out",(0,animations.iF)({visibility:"hidden"}))])]),(0,animations.kY)("out => in",[(0,animations.Os)([(0,animations.i0)("1ms ease-in-out",(0,animations.iF)({visibility:"visible"})),(0,animations.i0)("600ms ease-in-out",(0,animations.iF)({"max-height":"500px"})),(0,animations.i0)("800ms ease-in-out",(0,animations.iF)({opacity:"1"}))])])])];let AnimationWrapperComponent=class AnimationWrapperComponent extends ngx_formly_core.cm{};AnimationWrapperComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sam-formly-wrapper-animation",template:"\n    <div [@slideInOut]=\"field.hide ? 'out' : 'in'\">\n      <ng-container #fieldComponent></ng-container>\n    </div>\n  ",animations:[SlideInOutAnimation]})],AnimationWrapperComponent);let ReadonlyInputComponent=class ReadonlyInputComponent{static#_=this.propDecorators={value:[{type:core.Input}],valueTemplate:[{type:core.Input}]}};ReadonlyInputComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-input",template:'\n    <ng-container\n      *ngIf="valueTemplate; else defaultValue"\n      [ngTemplateOutlet]="valueTemplate"\n      [ngTemplateOutletContext]="{ $implicit: value }"\n    >\n    </ng-container>\n    <ng-template #defaultValue>\n      <span class="text-bold">{{ value ? value : \'&mdash;\' }}</span>\n    </ng-template>\n  '})],ReadonlyInputComponent);let ReadonlyDatepickerComponent=class ReadonlyDatepickerComponent{static#_=this.propDecorators={value:[{type:core.Input}],valueTemplate:[{type:core.Input}]}};ReadonlyDatepickerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-datepicker",template:'\n    <ng-container\n      *ngIf="valueTemplate; else defaultValue"\n      [ngTemplateOutlet]="valueTemplate"\n      [ngTemplateOutletContext]="{ $implicit: value }"\n    >\n    </ng-container>\n    <ng-template #defaultValue>\n      <span class="text-bold"> {{ value ? (value | date: \'mediumDate\') : \'&mdash;\' }}</span>\n    </ng-template>\n  '})],ReadonlyDatepickerComponent);let ReadonlySelectComponent=class ReadonlySelectComponent{ngOnInit(){if(!this.selectOptions||!this.selectOptions.length)throw new Error(`No option list provided for readonly mode of select type with value of ${this.value}`);this.value?(this.displayValue=this.selectOptions.find((option=>option.value===this.value)),this.displayValue||(this.displayValue={label:"&mdash;",value:this.value})):this.displayValue={label:"&mdash;",value:this.value}}static#_=this.propDecorators={value:[{type:core.Input}],valueTemplate:[{type:core.Input}],selectOptions:[{type:core.Input}]}};ReadonlySelectComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-select",template:'\n    <ng-container\n      *ngIf="valueTemplate; else defaultValue"\n      [ngTemplateOutlet]="valueTemplate"\n      [ngTemplateOutletContext]="{ $implicit: displayValue.label }"\n    >\n    </ng-container>\n    <ng-template #defaultValue>\n      <span [innerHTML]="displayValue.label" class="text-bold"></span>\n    </ng-template>\n  '})],ReadonlySelectComponent);let ReadonlyRadioComponent=class ReadonlyRadioComponent{ngOnInit(){if(!this.radioOptions||!this.radioOptions.length)throw new Error(`No option list provided for readonly mode of radio type with value of ${this.value}`)}static#_=this.propDecorators={value:[{type:core.Input}],valueTemplate:[{type:core.Input}],radioOptions:[{type:core.Input}]}};ReadonlyRadioComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-radio",template:'\n    <span *ngIf="!value; else definedValues" class="text-bold">&mdash;</span>\n\n    <ng-template #definedValues>\n      <span *ngFor="let option of radioOptions | formlySelectOptions | async">\n        <span *ngIf="option.value === value">\n          <ng-container\n            *ngIf="valueTemplate; else defaultValue"\n            [ngTemplateOutlet]="valueTemplate"\n            [ngTemplateOutletContext]="{ $implicit: option.label }"\n          >\n          </ng-container>\n          <ng-template #defaultValue>\n            <span class="text-bold display-block">{{ option.label }}</span>\n          </ng-template>\n        </span>\n      </span>\n    </ng-template>\n  '})],ReadonlyRadioComponent);let ReadonlyAutocompleteComponent=class ReadonlyAutocompleteComponent{ngOnInit(){if(!this.autocompleteSettings||!this.autocompleteSettings.primaryTextField)throw new Error(`Primary text field missing in autocomplete settings with value of ${this.value}`);this.value&&this.value.length?this.displayValue=this.value.map((value=>value[this.autocompleteSettings.primaryTextField])).join(", "):this.displayValue="&mdash;"}static#_=this.propDecorators={value:[{type:core.Input}],valueTemplate:[{type:core.Input}],autocompleteSettings:[{type:core.Input}]}};ReadonlyAutocompleteComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-autocomplete",template:'\n    <ng-container\n      *ngIf="valueTemplate; else defaultValue"\n      [ngTemplateOutlet]="valueTemplate"\n      [ngTemplateOutletContext]="{ $implicit: displayValue }"\n    >\n    </ng-container>\n    <ng-template #defaultValue>\n      <span class="text-bold" [innerHTML]="displayValue"></span>\n    </ng-template>\n  '})],ReadonlyAutocompleteComponent);let ReadonlyCheckboxComponent=class ReadonlyCheckboxComponent{static#_=this.propDecorators={value:[{type:core.Input}],valueTemplate:[{type:core.Input}]}};ReadonlyCheckboxComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-checkbox",template:'\n    <ng-container\n      *ngIf="valueTemplate; else defaultValue"\n      [ngTemplateOutlet]="valueTemplate"\n      [ngTemplateOutletContext]="{ $implicit: value }"\n    >\n    </ng-container>\n    <ng-template #defaultValue>\n      <span class="text-bold">{{ value ? \'Checked\' : \'Unchecked\' }}</span>\n    </ng-template>\n  '})],ReadonlyCheckboxComponent);let ReadonlyMulticheckboxComponent=class ReadonlyMulticheckboxComponent{ngOnInit(){if(!this.multicheckboxOptions||!this.multicheckboxOptions.length)throw new Error(`No option list provided for readonly mode of multicheckbox type with value of ${this.value}`)}static#_=this.propDecorators={value:[{type:core.Input}],valueTemplate:[{type:core.Input}],multicheckboxOptions:[{type:core.Input}]}};ReadonlyMulticheckboxComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-multicheckbox",template:'\n    <span *ngIf="!value; else definedValues" class="text-bold">&mdash;</span>\n\n    <ng-template #definedValues>\n      <span *ngFor="let option of multicheckboxOptions | formlySelectOptions | async">\n        <span *ngIf="value[option.value]">\n          <ng-container\n            *ngIf="valueTemplate; else defaultValue"\n            [ngTemplateOutlet]="valueTemplate"\n            [ngTemplateOutletContext]="{ $implicit: option.label }"\n          >\n          </ng-container>\n          <ng-template #defaultValue>\n            <span class="text-bold display-block">{{ option.label }}</span>\n          </ng-template>\n        </span>\n      </span>\n    </ng-template>\n  '})],ReadonlyMulticheckboxComponent);let ReadonlyDaterangeComponent=class ReadonlyDaterangeComponent{constructor(datePipe){this.datePipe=datePipe,this.daterangepickerOptions={fromDateKey:"fromDate",toDateKey:"toDate"}}ngOnInit(){let fromDate=this.datePipe.transform(this.value[this.daterangepickerOptions.fromDateKey],"mediumDate"),toDate=this.datePipe.transform(this.value[this.daterangepickerOptions.toDateKey],"mediumDate");this.displayValue=`${fromDate||"--"} ${toDate?" - "+toDate:""}`}static#_=this.ctorParameters=()=>[{type:common.DatePipe}];static#_2=this.propDecorators={value:[{type:core.Input}],valueTemplate:[{type:core.Input}],daterangepickerOptions:[{type:core.Input}]}};ReadonlyDaterangeComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-daterange",template:'\n    <ng-container\n      *ngIf="valueTemplate; else defaultValue"\n      [ngTemplateOutlet]="valueTemplate"\n      [ngTemplateOutletContext]="{ $implicit: displayValue }"\n    >\n    </ng-container>\n    <ng-template #defaultValue>\n      <span class="text-bold">\n        {{ displayValue }}\n      </span>\n    </ng-template>\n  '})],ReadonlyDaterangeComponent);let ReadonlyFileinfoComponent=class ReadonlyFileinfoComponent{ngOnInit(){if(!this.fileInfoOptions||!this.fileInfoOptions.length)throw new Error(`No option list provided for readonly mode of fileinfo type with value of ${this.value}`)}ngOnChanges(){if(!this.fileInfoOptions)return;const selectedOption=this.fileInfoOptions.find((option=>option.value===this.value));selectedOption||(this.displayValue="&mdash;"),this.displayValue=selectedOption.label+" - "+selectedOption.value}static#_=this.propDecorators={value:[{type:core.Input}],valueTemplate:[{type:core.Input}],fileInfoOptions:[{type:core.Input}]}};ReadonlyFileinfoComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-fileinfo",template:'\n    <ng-container\n      *ngIf="valueTemplate; else defaultValue"\n      [ngTemplateOutlet]="valueTemplate"\n      [ngTemplateOutletContext]="{ $implicit: displayValue }"\n    >\n    </ng-container>\n    <ng-template #defaultValue>\n      <span class="text-bold">{{ displayValue }}</span>\n    </ng-template>\n  '})],ReadonlyFileinfoComponent);let ReadonlyLabelDirective=class ReadonlyLabelDirective{constructor(templateRef){this.templateRef=templateRef}static#_=this.ctorParameters=()=>[{type:core.TemplateRef}]};ReadonlyLabelDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[sdsReadonlyLabel]"})],ReadonlyLabelDirective);let ReadonlyValueDirective=class ReadonlyValueDirective{constructor(templateRef){this.templateRef=templateRef}static#_=this.ctorParameters=()=>[{type:core.TemplateRef}]};ReadonlyValueDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[sdsReadonlyValue]"})],ReadonlyValueDirective);let ReadonlyContainerComponent=class ReadonlyContainerComponent{constructor(){this.additionalConfig={},this.sdsFormlyTypes=SdsFormlyTypes}ngOnInit(){this.formlyFieldConfig&&(this.label=this.formlyFieldConfig.props.label,this.value=this.formlyFieldConfig.formControl.value,this.formlyType=this.formlyFieldConfig.type.toString(),this.assignAdditionalConfig())}assignAdditionalConfig(){const options=this.formlyFieldConfig.props.options;this.additionalConfig={providedOptions:options},this.formlyFieldConfig.type===this.sdsFormlyTypes.AUTOCOMPLETE&&(this.additionalConfig.autocompleteOptions=this.formlyFieldConfig.props.configuration),this.formlyFieldConfig.type===this.sdsFormlyTypes.DATERANGEPICKER&&(this.additionalConfig.daterangepickerOptions={fromDateKey:this.formlyFieldConfig.fieldGroup[0].key,toDateKey:this.formlyFieldConfig.fieldGroup[1].key})}static#_=this.propDecorators={labelTemplate:[{type:core.ContentChild,args:[ReadonlyLabelDirective]}],valueTemplate:[{type:core.ContentChild,args:[ReadonlyValueDirective]}],formlyFieldConfig:[{type:core.Input}],formlyType:[{type:core.Input}],label:[{type:core.Input}],value:[{type:core.Input}],additionalConfig:[{type:core.Input}]}};ReadonlyContainerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-readonly-container",template:'<ng-container\n  *ngIf="labelTemplate; else defaultLabel"\n  [ngTemplateOutlet]="labelTemplate.templateRef"\n  [ngTemplateOutletContext]="{ $implicit: formlyFieldConfig?.props }"\n>\n</ng-container>\n\n<ng-template #defaultLabel>\n  <label class="usa-label">\n    <span\n      *ngIf="formlyFieldConfig?.props?.tagText"\n      class="usa-tag"\n      [ngClass]="formlyFieldConfig.props.tagClass ? formlyFieldConfig.props.tagClass : \'sds-tag--info-white\'"\n      >{{ formlyFieldConfig.props.tagText }}</span\n    >\n    {{ label }}\n  </label>\n</ng-template>\n\n<span [ngSwitch]="formlyType">\n  <sds-readonly-input *ngSwitchCase="sdsFormlyTypes.INPUT" [value]="value" [valueTemplate]="valueTemplate?.templateRef">\n  </sds-readonly-input>\n\n  <sds-readonly-input\n    *ngSwitchCase="sdsFormlyTypes.TEXTAREA"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n  >\n  </sds-readonly-input>\n\n  <sds-readonly-input\n    *ngSwitchCase="sdsFormlyTypes.READONLY"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n  >\n  </sds-readonly-input>\n\n  <sds-readonly-input\n    *ngSwitchCase="sdsFormlyTypes.SEARCH"\n    [value]="value.searchText"\n    [valueTemplate]="valueTemplate?.templateRef"\n  >\n  </sds-readonly-input>\n\n  <sds-readonly-datepicker\n    *ngSwitchCase="sdsFormlyTypes.DATEPICKER"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n  >\n  </sds-readonly-datepicker>\n\n  <sds-readonly-select\n    *ngSwitchCase="sdsFormlyTypes.SELECT"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n    [selectOptions]="additionalConfig.providedOptions"\n  >\n  </sds-readonly-select>\n\n  <sds-readonly-radio\n    *ngSwitchCase="sdsFormlyTypes.RADIO"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n    [radioOptions]="additionalConfig.providedOptions"\n  >\n  </sds-readonly-radio>\n\n  <sds-readonly-fileinfo\n    *ngSwitchCase="sdsFormlyTypes.FILEINFO"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n    [fileInfoOptions]="additionalConfig.providedOptions"\n  >\n  </sds-readonly-fileinfo>\n\n  <sds-readonly-autocomplete\n    *ngSwitchCase="sdsFormlyTypes.AUTOCOMPLETE"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n    [autocompleteSettings]="additionalConfig.autocompleteOptions"\n  >\n  </sds-readonly-autocomplete>\n\n  <sds-readonly-checkbox\n    *ngSwitchCase="sdsFormlyTypes.CHECKBOX"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n  >\n  </sds-readonly-checkbox>\n\n  <sds-readonly-multicheckbox\n    *ngSwitchCase="sdsFormlyTypes.MULTICHECKBOX"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n    [multicheckboxOptions]="additionalConfig.providedOptions"\n  ></sds-readonly-multicheckbox>\n\n  <sds-readonly-daterange\n    *ngSwitchCase="sdsFormlyTypes.DATERANGEPICKER"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n    [daterangepickerOptions]="additionalConfig.daterangepickerOptions"\n  >\n  </sds-readonly-daterange>\n\n  <sds-readonly-daterange\n    *ngSwitchCase="sdsFormlyTypes.DATERANGEPICKERV2"\n    [value]="value"\n    [valueTemplate]="valueTemplate?.templateRef"\n    [daterangepickerOptions]="additionalConfig.daterangepickerOptions"\n  >\n  </sds-readonly-daterange>\n</span>\n'})],ReadonlyContainerComponent);let SdsReadonlyModule=class SdsReadonlyModule{};SdsReadonlyModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,ngx_formly_core_select.m],declarations:[ReadonlyInputComponent,ReadonlyDatepickerComponent,ReadonlySelectComponent,ReadonlyRadioComponent,ReadonlyAutocompleteComponent,ReadonlyCheckboxComponent,ReadonlyMulticheckboxComponent,ReadonlyDaterangeComponent,ReadonlyFileinfoComponent,ReadonlyContainerComponent,ReadonlyLabelDirective,ReadonlyValueDirective],exports:[ReadonlyInputComponent,ReadonlyDatepickerComponent,ReadonlySelectComponent,ReadonlyRadioComponent,ReadonlyAutocompleteComponent,ReadonlyCheckboxComponent,ReadonlyMulticheckboxComponent,ReadonlyDaterangeComponent,ReadonlyFileinfoComponent,ReadonlyContainerComponent,ReadonlyLabelDirective,ReadonlyValueDirective]})],SdsReadonlyModule);var SdsFormlyModule_1,expansion=__webpack_require__("./node_modules/@angular/material/fesm2022/expansion.mjs"),ngx_bootstrap_icons=__webpack_require__("./node_modules/ngx-bootstrap-icons/fesm2020/ngx-bootstrap-icons.mjs"),gsa_sam_ngx_uswds_icons=__webpack_require__("./node_modules/@gsa-sam/ngx-uswds-icons/fesm2022/gsa-sam-ngx-uswds-icons.mjs"),input=__webpack_require__("./node_modules/@angular/material/fesm2022/input.mjs");function minDateValidationMessage(err,field){const dt=field.props.minDate;return`Date must be on or after ${dt.toLocaleString("en-US",{month:"short"})+", "+dt.getDate()+", "+dt.getFullYear()}`}function maxDateValidationMessage(err,field){const dt=field.props.maxDate;return`Date must be on or before ${dt.toLocaleString("en-US",{month:"short"})+" "+dt.getDate()+", "+dt.getFullYear()}`}function betweenDateValidationMessage(err,field){const dtnmax=field.props.maxDate,dateMaxFormat=dtnmax.toLocaleString("en-US",{month:"short"})+" "+dtnmax.getDate()+", "+dtnmax.getFullYear(),dtmin=field.props.minDate;return`Date must be between ${dtmin.toLocaleString("en-US",{month:"short"})+" "+dtmin.getDate()+", "+dtmin.getFullYear()} and ${dateMaxFormat} `}const DATE_FORMAT={...fesm2022_core.Xz,display:{...fesm2022_core.Xz.display,dateInput:{year:"numeric",month:"short",day:"numeric"}}};let SdsFormlyModule=SdsFormlyModule_1=class SdsFormlyModule{static forChild(config={}){return{ngModule:SdsFormlyModule_1,providers:[...ngx_formly_core.qy.forChild(config).providers]}}};SdsFormlyModule=SdsFormlyModule_1=(0,tslib_es6.Cg)([(0,core.NgModule)({declarations:[FIELD_TYPE_COMPONENTS,AnimationWrapperComponent],imports:[common.CommonModule,gsa_sam_ngx_uswds.gU,expansion.MY,components_src.hV,components_src.TU,components_src.r2,components_src.or,components_src.E0,components_src.oZ,fesm2022_core.WX,datepicker.X6,src.RA,input.fS,gsa_sam_ngx_uswds_icons.opy,fesm2022_forms.X1,ngx_formly_core_select.m,SdsReadonlyModule,fesm2022_forms.YN,gsa_sam_ngx_uswds.Gp,components_src.cm,src.RA,components_src.Nn,components_src.ch,components_src.mV,components_src.Yi,ngx_bootstrap_icons.YWJ.pick({caretDownFill:ngx_bootstrap_icons.zL7,caretUpFill:ngx_bootstrap_icons.o$y,filter:ngx_bootstrap_icons.pbD,arrowClockwise:ngx_bootstrap_icons.gZQ,chevronDown:ngx_bootstrap_icons.uaq,infoCircleFill:ngx_bootstrap_icons.cVK,calendar:ngx_bootstrap_icons.BJj,x:ngx_bootstrap_icons.x}),ngx_formly_core.qy.forChild(FORMLY_CONFIG),ngx_formly_core.qy.forRoot({extras:{checkExpressionOn:"changeDetectionCheck",lazyRender:!1,resetFieldOnHide:!1},validationMessages:[{name:"required",message:function requireOrInvalidDateFormat(err,field){return"datepicker"===field.type&&field.props.invalidDateMessage&&field.formControl?.getError("matDatepickerParse")?"Valid date format required (ex: MM/DD/YYYY)":"This field is required"}},{name:"minLength",message:function minLengthValidationMessage(err,field){return`Should have at least ${field.props.minLength} characters`}},{name:"maxLength",message:function maxLengthValidationMessage(err,field){return`This value should be less than ${field.props.maxLength} characters`}},{name:"min",message:function minValidationMessage(err,field){return`This value should be more than ${field.props.min}`}},{name:"max",message:function maxValidationMessage(err,field){return`This value should be less than ${field.props.max}`}},{name:"minDate",message:minDateValidationMessage},{name:"maxDate",message:maxDateValidationMessage},{name:"betweenDate",message:betweenDateValidationMessage},{name:"matDatepickerParse",message:function invalidDateFormatValidationMessage(err,field){return"Valid date format required (ex: MM/DD/YYYY)"}},{name:"matDatepickerMin",message:function matDatepickerMinValidationMessage(err,field){const fieldWithMinDate=field.props.minDate?field:field.parent;return fieldWithMinDate?minDateValidationMessage(0,fieldWithMinDate):"Please enter a valid date"}},{name:"matStartDateInvalid",message:function matDateInBetweenValidationMessage(err,field){const fieldWithMinDate=field.props.minDate?field:field.parent,fieldWithMaxDate=field.props.maxDate?field:field.parent;return fieldWithMinDate&&!fieldWithMaxDate?minDateValidationMessage(0,fieldWithMinDate):fieldWithMaxDate&&!fieldWithMinDate?maxDateValidationMessage(0,fieldWithMaxDate):fieldWithMaxDate&&fieldWithMinDate?betweenDateValidationMessage(0,fieldWithMaxDate):"Please enter a valid date"}},{name:"matDatepickerMax",message:function matDatepickerMaxValidationMessage(err,field){const fieldWithMaxDate=field.props.maxDate?field:field.parent;return fieldWithMaxDate?maxDateValidationMessage(0,fieldWithMaxDate):"Please enter a valid date"}}],validators:[{name:"minDate",validation:minDateValidator},{name:"maxDate",validation:maxDateValidator},{name:"dateRangeValidator",validation:dateRangeValidator},{name:"requiredTrue",validation:fesm2022_forms.k0.requiredTrue}],wrappers:[{name:"animation",component:AnimationWrapperComponent}],extensions:[{name:"animation",extension:{onPopulate:function animationExtension(field){field.wrappers&&field.wrappers.includes("animation")||(field.wrappers=["animation",...field.wrappers||[]])}}}]})],providers:[{provide:fesm2022_core.de,useValue:DATE_FORMAT}]})],SdsFormlyModule);var formly_reset_componentngResource=__webpack_require__("./libs/packages/sam-formly/src/lib/formly-reset/formly-reset.component.scss?ngResource"),formly_reset_componentngResource_default=__webpack_require__.n(formly_reset_componentngResource);let SdsFormlyResetComponent=class SdsFormlyResetComponent{constructor(){this.classes=["usa-button","usa-button--unstyled"],this.resetClicked=new core.EventEmitter}resetAll(){this.defaultModel?this.options.resetModel(this.defaultModel):this.options.resetModel(),this.resetClicked.emit()}static#_=this.propDecorators={options:[{type:core.Input}],defaultModel:[{type:core.Input}],classes:[{type:core.Input}],resetClicked:[{type:core.Output}]}};SdsFormlyResetComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-reset",template:'<button (click)="resetAll()" [ngClass]="classes">\n  Reset\n  <usa-icon [icon]="\'arrow-clockwise\'" class="icon-reset" [size]="\'sm\'"></usa-icon>\n</button>\n',styles:[formly_reset_componentngResource_default()]})],SdsFormlyResetComponent);let SdsFormlyResetModule=class SdsFormlyResetModule{};SdsFormlyResetModule=(0,tslib_es6.Cg)([(0,core.NgModule)({declarations:[SdsFormlyResetComponent],imports:[common.CommonModule,gsa_sam_ngx_uswds_icons.opy,ngx_bootstrap_icons.YWJ.pick({arrowClockwise:ngx_bootstrap_icons.gZQ})],exports:[SdsFormlyResetComponent]})],SdsFormlyResetModule);var Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js");let SDSFormlyUpdateComunicationService=class SDSFormlyUpdateComunicationService{constructor(){this.updateFilterSource=new Subject.B,this.filterUpdate=this.updateFilterSource.asObservable()}updateFilter(filterData){this.updateFilterSource.next(filterData)}};SDSFormlyUpdateComunicationService=(0,tslib_es6.Cg)([(0,core.Injectable)()],SDSFormlyUpdateComunicationService);var BehaviorSubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");class SDSFormlyUpdateModelService{constructor(){this.updateFilterModel=new BehaviorSubject.t(null),this.filterModel=this.updateFilterModel.asObservable()}updateModel(filterData){this.updateFilterModel.next(filterData)}}var takeUntil=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js");let FormlyUtilsService=class FormlyUtilsService{static setReadonlyMode(readonlyMode,fields){fields.forEach((field=>{this._setReadonlyMode(readonlyMode,field)}))}static formlyConfigToReadonlyData(fields,model,options={convertAll:!1}){const readonlyData=[];return fields.forEach((field=>{this._formlyConfigToReadonlyData(field,model,readonlyData,options)})),readonlyData}static _setReadonlyMode(readonlyMode,field){field.fieldGroup&&field.fieldGroup.forEach((innerField=>{this._setReadonlyMode(readonlyMode,innerField)})),field.props&&field.type&&Object.values(SdsFormlyTypes).includes(field.type)&&(field.props.readonlyMode=readonlyMode)}static _formlyConfigToReadonlyData(field,model,readonlyData,options){if(field.props&&(options.convertAll||Object.values(SdsReadonlyTypes).includes(field.type))){const label=field.props.label,value=model[field.key],readonlyOptions={providedOptions:field.props.options,autocompleteOptions:field.props.configuration};if(readonlyData.push({formlyType:field.type,label,value,readonlyOptions,formlyKey:field.key}),field.type===SdsFormlyTypes.DATERANGEPICKER||field.type===SdsFormlyTypes.DATERANGEPICKERV2)return void(readonlyOptions.daterangepickerOptions={fromDateKey:field.fieldGroup[0].key,toDateKey:field.fieldGroup[1].key})}if(field.fieldGroup){const innerModel=field.key?model[field.key]:model;field.fieldGroup.forEach((innerField=>{this._formlyConfigToReadonlyData(innerField,innerModel,readonlyData,options)}))}}};FormlyUtilsService=(0,tslib_es6.Cg)([(0,core.Injectable)()],FormlyUtilsService);var cloneDeep=__webpack_require__("./node_modules/lodash-es/cloneDeep.js");let SdsFiltersComponent=class SdsFiltersComponent{constructor(formlyUpdateComunicationService,formlyDialogService,cdr,filterUpdateModelService){this.formlyUpdateComunicationService=formlyUpdateComunicationService,this.formlyDialogService=formlyDialogService,this.cdr=cdr,this.filterUpdateModelService=filterUpdateModelService,this.options={},this.advancedFilters=!1,this.sortMoreFilterBy="",this.isInactiveValueFieldShown=!1,this.isHistoryEnable=!1,this.getCleanModel=!1,this.horizontal=!1,this.showReset=!0,this.filterChange=new core.EventEmitter,this.showInactiveFiltersChange=new core.EventEmitter,this.resetClicked=new core.EventEmitter,this.chips=[],this.unsubscribe$=new Subject.B,this._isObj=obj=>"object"==typeof obj&&null!==obj,this._isEmpty=obj=>0===Object.keys(obj).length,this.overwrite=(baseObj,newObj)=>{const result={},mergedObj={...baseObj,...newObj};for(const key in mergedObj)Array.isArray(baseObj[key])?result[key]=newObj[key]||null:baseObj[key]instanceof Date?result[key]=void 0===newObj[key]?null:new Date(newObj[key]):this._isObj(baseObj[key])?result[key]=this.overwrite(baseObj[key],newObj[key]||{}):result[key]=newObj[key]||null;return result}}ngOnDestroy(){this.unsubscribe$.next(),this.unsubscribe$.complete()}ngOnInit(){this.displayChips=null!=this.displayChips?this.displayChips:this.horizontal,this.filterUpdateModelService&&(this.filterUpdateModelService.filterModel.pipe((0,takeUntil.Q)(this.unsubscribe$)).subscribe((filter=>{if(filter){const updatedFormValue=this.overwrite(this.form.getRawValue(),filter);Object.keys(updatedFormValue).forEach((key=>{this.model[key]=updatedFormValue[key]})),this.form.patchValue(updatedFormValue),this.checkForHide()}})),this.cdr.detectChanges())}ngOnChanges(changes){changes.model&&changes.model.currentValue!=changes.model.previousValue&&this.checkForHide()}checkForHide(){let fieldWithValue=this.convertToParam(this.model),keys=[];Object.keys(fieldWithValue).map((key=>{keys.push(key.replace(/\[/g,".").replace(/\]/g,""))})),keys.forEach((key=>{const[lastKey]=key.split(".").slice(-1);this.fields.forEach((field=>{if(key.includes(field.key))if(field.fieldGroup){const fieldExists=this.findFieldInFieldGroup(field.fieldGroup,lastKey);fieldExists&&(field.hide=!1,fieldExists.hide=!1)}else field.hide=!1}))}))}findFieldInFieldGroup(fields,key){let matchingField=null;for(let i=0;i<fields.length;i++){const field=fields[i];if(field.key===key?matchingField=field:field.fieldGroup&&(matchingField=this.findFieldInFieldGroup(field.fieldGroup,key)),matchingField)break}return matchingField}onModelChange(change){this.updateChange(change)}onResetClicked(){const fieldChangeEvent={field:{key:""},type:"resetAll",value:void 0};this.options.fieldChanges.next(fieldChangeEvent),this.resetClicked.emit()}updateChange(change){const updatedModel=this.getCleanModel?this.convertToModel(change):change;this.filterChange.emit(updatedModel),this.formlyUpdateComunicationService&&this.formlyUpdateComunicationService.updateFilter(updatedModel),this.displayChips&&this.generateChips(change,this.fields),this.cdr.detectChanges()}convertToParam(filters){const encodedValues=lib.stringify(filters,{skipNulls:!0,encode:!1});return encodedValues?this.getUrlParams(encodedValues):""}getUrlParams(queryString){const target={};return queryString.split("&").forEach((pair=>{if(""!==pair){const splitpair=pair.split("=");target[splitpair[0]]=""===splitpair[1]||"false"===splitpair[1]?null:splitpair[1]}})),target}convertToModel(filters){let obj={};const encodedValues=lib.stringify(filters,{skipNulls:!0,encode:!1});return obj=lib.parse(encodedValues,{decoder:this.cleanModelParser}),obj}cleanModelParser(str,decoder,charset,type){return"key"===type?decoder(str,decoder,charset):"true"===str||"false"===str?"true"===str:decoder(str,decoder,charset)}handleInactiveFilterChange(inactiveFilterValue){this.displayChips&&this.generateChips(this.model,this.fields),this.showInactiveFiltersChange.emit(inactiveFilterValue)}openDialog(){const clonedFields=(0,cloneDeep.A)(this.fields);this._modelSnapshot=(0,cloneDeep.A)(this.model),this.removePopoverGroup(clonedFields),this.dialogRef=this.formlyDialogService.open(this.horizontalFiltersDialogTemplate,{data:{fields:clonedFields,options:{}},height:"100vh",width:"100vw",maxWidth:"100vw",maxHeight:"100vh",hasBackdrop:!1,displayCloseBtn:!1,panelClass:["sds-dialog--full"]}),this.dialogRef.afterClosed().toPromise().then((result=>{result?this.onModelChange(result):Object.assign(this.model,this._modelSnapshot),this.dialogRef=null}))}close(){this.dialogRef.close()}applyDialogFilters(){this.dialogRef.close(this.model)}removePopoverGroup(fields){fields.forEach((field=>{field.props&&"popover"===field.props.group&&(field.props.group="accordion"),field.fieldGroup&&this.removePopoverGroup(field.fieldGroup),field.hide=!1}))}generateChips(model,fields){const chipsWithValue=FormlyUtilsService.formlyConfigToReadonlyData(fields,model).filter((data=>data.value));let allChips=[];chipsWithValue.forEach((chip=>{if("object"!=typeof chip.value)return chip.srValue=chip.value,void allChips.push(chip);if(Array.isArray(chip.value)){const newChips=chip.value.map((chipValue=>({...chip,value:[chipValue],srValue:chipValue})));allChips=allChips.concat(newChips)}else if(chip.formlyType!==SdsFormlyTypes.DATERANGEPICKER&&chip.formlyType!==SdsFormlyTypes.DATERANGEPICKERV2)Object.keys(chip.value).forEach((key=>{const value=chip.value[key];if(!value||"string"==typeof value.length&&!value.length)return;const newChip={...chip,value:{[key]:value},srValue:key};allChips.push(newChip)}));else{const fromDateValue=chip.value[chip.readonlyOptions.daterangepickerOptions.fromDateKey],toDateValue=chip.value[chip.readonlyOptions.daterangepickerOptions.toDateKey];(fromDateValue||toDateValue)&&allChips.push(chip)}})),this.chips=allChips}removeChip(chip){const field=this.findFieldInFieldGroup(this.fields,chip.formlyKey);if(!field)throw new Error("Error: unable to find field to remove chip");if("object"!=typeof field.formControl.value)return void field.formControl.reset();if(chip.formlyType===SdsFormlyTypes.DATERANGEPICKER||chip.formlyType===SdsFormlyTypes.DATERANGEPICKERV2){const fromDateControl=field.fieldGroup[0].formControl,toDateControl=field.fieldGroup[1].formControl;return fromDateControl.reset(),void toDateControl.reset()}const existingValues=this.chips.filter((exisingChip=>chip!=exisingChip&&chip.formlyKey===exisingChip.formlyKey)).map((chipWithSameKey=>chipWithSameKey.value));if(Array.isArray(field.formControl.value)){let updatedValue=[];return existingValues.forEach((value=>{updatedValue=updatedValue.concat(value)})),void field.formControl.setValue(updatedValue)}const objectValue={};Object.assign(objectValue,...existingValues),field.formControl.setValue(objectValue)}static#_=this.ctorParameters=()=>[{type:SDSFormlyUpdateComunicationService,decorators:[{type:core.Optional}]},{type:components_src.el},{type:core.ChangeDetectorRef},{type:SDSFormlyUpdateModelService,decorators:[{type:core.Optional}]}];static#_2=this.propDecorators={horizontalFiltersDialogTemplate:[{type:core.ViewChild,args:["horizontalFiltersDialog"]}],form:[{type:core.Input}],fields:[{type:core.Input}],model:[{type:core.Input}],options:[{type:core.Input}],advancedFilters:[{type:core.Input}],sortMoreFilterBy:[{type:core.Input}],isInactiveValueFieldShown:[{type:core.Input}],isHistoryEnable:[{type:core.Input}],getCleanModel:[{type:core.Input}],defaultModel:[{type:core.Input}],horizontal:[{type:core.Input}],displayChips:[{type:core.Input}],showReset:[{type:core.Input}],filterChange:[{type:core.Output}],showInactiveFiltersChange:[{type:core.Output}],resetClicked:[{type:core.Output}]}};SdsFiltersComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-filters",template:'\x3c!-- Vertical Filters --\x3e\n<div *ngIf="!horizontal">\n  <formly-form\n    [form]="form"\n    [fields]="fields"\n    [options]="options"\n    [model]="model"\n    (modelChange)="onModelChange($event)"\n  >\n  </formly-form>\n  <div class="grid-row margin-top-2">\n    <div *ngIf="advancedFilters" class="grid-col">\n      <sds-advanced-filters\n        [form]="form"\n        [sortMoreFilterBy]="sortMoreFilterBy"\n        [fields]="fields"\n        [options]="options"\n        [model]="model"\n        (showInactiveFiltersChange)="showInactiveFiltersChange.next($event)"\n        [isInactiveValueFieldShown]="isInactiveValueFieldShown"\n      >\n      </sds-advanced-filters>\n    </div>\n    <div class="grid-col text-right">\n      <sds-formly-reset [options]="options" [defaultModel]="defaultModel" (resetClicked)="onResetClicked()">\n      </sds-formly-reset>\n    </div>\n  </div>\n</div>\n\n\x3c!-- Horizontal Filters --\x3e\n<div *ngIf="horizontal" class="sds-filters--horizontal">\n  <div class="horizontal-filters grid-row">\n    <div *ngFor="let field of fields">\n      <div\n        *ngIf="!field.hide && field.props?.label"\n        [sdsPopover]="content"\n        [position]="\'bottom\'"\n        [autoClose]="\'outside\'"\n        tabindex="0"\n        [attr.aria-label]="field.props.label"\n        class="margin-right-2"\n      >\n        {{ field.props.label }}\n        <usa-icon [icon]="\'chevron-down\'" [size]="\'sm\'"></usa-icon>\n        <ng-template #content>\n          <p class="text-left width-full">\n            <formly-form\n              [options]="options"\n              [form]="form"\n              [model]="model"\n              [fields]="[field]"\n              (modelChange)="onModelChange($event)"\n            ></formly-form>\n          </p>\n        </ng-template>\n      </div>\n      <div *ngIf="!field.props?.label && field.hooks">\n        <formly-form\n          [options]="options"\n          [form]="form"\n          [model]="model"\n          [fields]="[field]"\n          (modelChange)="onModelChange($event)"\n        ></formly-form>\n      </div>\n    </div>\n\n    <div *ngIf="advancedFilters">\n      <sds-advanced-filters\n        [form]="form"\n        [sortMoreFilterBy]="sortMoreFilterBy"\n        [fields]="fields"\n        [options]="options"\n        [model]="model"\n        [isInactiveValueFieldShown]="isInactiveValueFieldShown"\n        [enablePopover]="horizontal"\n        (showInactiveFiltersChange)="handleInactiveFilterChange($event)"\n      >\n      </sds-advanced-filters>\n    </div>\n  </div>\n\n  <div class="search-input">\n    <ng-content select="sds-search"></ng-content>\n  </div>\n\n  <div class="filters-modal margin-left-2">\n    <button type="button" (click)="openDialog()" class="usa-button usa-button--unstyled">\n      Filter By\n      <usa-icon [icon]="\'filter\'" class="icon-filter" [size]="\'sm\'"></usa-icon>\n    </button>\n  </div>\n\n  <div *ngIf="showReset" class="horizontal-reset margin-left-2 text-right">\n    <sds-formly-reset [options]="options" [defaultModel]="{}" (resetClicked)="resetClicked.emit()"></sds-formly-reset>\n  </div>\n</div>\n\n\x3c!-- Chip Display --\x3e\n<ng-container *ngIf="displayChips">\n  <div *ngFor="let chip of chips" class="width-auto sds-tag sds-tag--chip sds-tag--input margin-right-2">\n    <div class="sds--tag__item">\n      <sds-readonly-container\n        [label]="chip.label"\n        [value]="chip.value"\n        [additionalConfig]="chip.readonlyOptions"\n        [formlyType]="chip.formlyType"\n      >\n        <ng-container *sdsReadonlyLabel\n          ><span class="margin-right-1 text-bold" [attr.aria-label]="chip.label">{{ chip.label }}:</span></ng-container\n        >\n        <ng-container *sdsReadonlyValue="let value"\n          ><span class="margin-right-1" [attr.aria-label]="chip.srValue">{{ value }}</span></ng-container\n        >\n      </sds-readonly-container>\n    </div>\n\n    <button\n      [attr.aria-label]="\'Remove Item \' + chip.label + \' \' + chip.srValue"\n      aria-hidden="false"\n      class="sds-tag__close position-static"\n      (click)="removeChip(chip)"\n      (keyup.enter)="removeChip(chip)"\n    >\n      <usa-icon [icon]="\'x\'" size="lg"></usa-icon>\n    </button>\n  </div>\n</ng-container>\n\n<ng-template #horizontalFiltersDialog let-data>\n  <div class="bg-accent-cool-lighter height-full">\n    <div class="grid-row shadow-4 padding-1">\n      <button\n        id="cancelButton"\n        class="sds-button sds-button--circular sds-button--white"\n        (click)="close()"\n        aria-label="Cancel Filter By"\n      >\n        <usa-icon [icon]="\'chevron-left\'"></usa-icon>\n      </button>\n      <div class="margin-x-auto">\n        <h2 class="usa-card__heading margin-top-1 margin-left-neg-2">Filter By</h2>\n      </div>\n    </div>\n\n    <div class="padding-1">\n      <formly-form [fields]="data.fields" [options]="data.options" [model]="model"> </formly-form>\n      <div class="grid-row margin-top-2">\n        <div class="grid-col text-right">\n          <sds-formly-reset [options]="data.options" [defaultModel]="{}" (resetClicked)="resetClicked.emit()">\n          </sds-formly-reset>\n        </div>\n      </div>\n    </div>\n    <div class="padding-1 shadow-4">\n      <button class="usa-button width-full" (click)="applyDialogFilters()">Apply</button>\n    </div>\n  </div>\n</ng-template>\n',changeDetection:core.ChangeDetectionStrategy.OnPush})],SdsFiltersComponent);var advanced_filters_componentngResource=__webpack_require__("./libs/packages/sam-formly/src/lib/formly-filters/advanced-filters/advanced-filters.component.scss?ngResource"),advanced_filters_componentngResource_default=__webpack_require__.n(advanced_filters_componentngResource);let SdsAdvancedFiltersService=class SdsAdvancedFiltersService{constructor(){}convertToCheckboxes(origFields,hideChildrenGroups=!1){const fields=[];return origFields.forEach((origField=>{const defaultValue=[];if(!origField.fieldGroup?.length||hideChildrenGroups||origField.props?.hideChildrenGroups){if(origField.key){const field={type:"checkbox",key:origField.key,defaultValue:!origField.hide,props:{hideOptional:!0}};origField.props&&origField.props.label&&(field.props.label=origField.props.label),fields.push(field)}}else{const field=this.createMulticheckbox(origField,defaultValue);fields.push(field)}})),fields}createMulticheckbox(origField,defaultValue){const options=[];origField.fieldGroup?.length&&origField.key&&origField.fieldGroup.forEach((field=>{if(field.fieldGroup?.length)options.push(this.createMulticheckbox(field,defaultValue));else{const label=field.props&&field.props.label?field.props.label:null,option={value:field.key,label,tagText:field.props.tagText,tagClass:field.props.tagClass};options.push(option),origField.hide||field.hide||defaultValue.push(field.key)}}));const field={key:origField.key,type:"multicheckbox",props:{hideOptional:!0,selectAllOption:!0,type:"array",options}};return origField.props&&origField.props.label&&(field.props.label=origField.props.label),origField.hide||(field.defaultValue=defaultValue),field}updateFields(selectedFields,fields,model){return fields.forEach((field=>{const key=field.key;let selectedField=selectedFields.filterToggle.filters[key];if(field.fieldGroup&&field.fieldGroup.length>1){const fieldModel=model[key];this.updateFieldGroup(field,selectedField,fieldModel)}else Array.isArray(selectedField)?selectedField.length>0?this.updateSingleField(field,!0,model):this.updateSingleField(field,!1,model):this.updateSingleField(field,selectedField,model)})),{fields,model}}updateFieldGroup(parentField,selectedFields,model){selectedFields&&(selectedFields.length||"boolean"==typeof selectedFields)?(parentField.hide=!1,(!0===selectedFields||selectedFields.length)&&parentField.fieldGroup.forEach((field=>{const key=field.key,fieldSelected=selectedFields.length?selectedFields.includes(key):field;this.updateSingleField(field,fieldSelected,model),field.fieldGroup&&field.fieldGroup.length>1&&this.updateFieldGroup(field,selectedFields,model)}))):(parentField.hide=!0,parentField.fieldGroup.forEach((field=>{this.updateSingleField(field,!1,model)})))}updateSingleField(field,fieldSelected,model){fieldSelected?field.hide=!1:(field.hide=!0,field.props={...field.props,required:!1},field.formControl?field.formControl.reset():model[field.key]=null)}static#_=this.ctorParameters=()=>[]};SdsAdvancedFiltersService=(0,tslib_es6.Cg)([(0,core.Injectable)({providedIn:"root"})],SdsAdvancedFiltersService);let SdsFormlyDialogComponent=class SdsFormlyDialogComponent{constructor(advancedFiltersService,cdr,dialogRef,data){this.advancedFiltersService=advancedFiltersService,this.cdr=cdr,this.dialogRef=dialogRef,this.data=data,this.submitFn=new core.EventEmitter,this.cancelFn=new core.EventEmitter,this.onChangeFn=new core.EventEmitter}ngOnInit(){this.fields=this.data.fields,this.form=this.data.form?this.data.form:new fesm2022_forms.J3({}),this.model=this.data.model?this.data.model:{},this.options=this.data.options?this.data.options:{},this.cancel=this.data.cancel?this.data.cancel:"Cancel",this.submit=this.data.submit?this.data.submit:"Submit",this.disableSubmitButton=!!this.data.disableSubmitButtonEnabled&&this.data.disableSubmitButtonEnabled}onModelChange(){this.onChangeFn.emit(this.model)}onSubmit(){this.submitFn.emit(this.model)}onCancel(){this.options.resetModel(),this.cancelFn.emit(this.model)}static#_=this.ctorParameters=()=>[{type:SdsAdvancedFiltersService},{type:core.ChangeDetectorRef},{type:components_src.q4},{type:void 0,decorators:[{type:core.Inject,args:[components_src.rR]}]}];static#_2=this.propDecorators={submitFn:[{type:core.Output}],cancelFn:[{type:core.Output}],onChangeFn:[{type:core.Output}]}};SdsFormlyDialogComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-formly-dialog",template:'<form [formGroup]="form" (ngSubmit)="onSubmit()">\n  <div *ngIf="data.title" sds-dialog-title>{{ data.title }}</div>\n  <div *ngIf="data.subtitle" sds-dialog-subtitle>{{ data.subtitle }}</div>\n  <div sds-dialog-content class="padding-bottom-1">\n    <formly-form\n      [form]="form"\n      [fields]="fields"\n      [options]="options"\n      [(model)]="model"\n      (modelChange)="onModelChange()"\n    ></formly-form>\n  </div>\n  <div sds-dialog-actions>\n    <button class="usa-button usa-button--base bg-base-lighter" (click)="onCancel()" type="button">\n      {{ cancel }}\n    </button>\n    <button class="usa-button" [disabled]="disableSubmitButton" type="submit">\n      {{ submit }}\n    </button>\n  </div>\n</form>\n'})],SdsFormlyDialogComponent);var startWith=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/startWith.js"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js");let AdvancedFiltersComponent=class AdvancedFiltersComponent{constructor(dialog,advancedFiltersService,cdr){this.dialog=dialog,this.advancedFiltersService=advancedFiltersService,this.cdr=cdr,this.options={},this.sortMoreFilterBy="",this.isInactiveValueFieldShown=!1,this.enablePopover=!1,this.showInactiveFiltersChange=new core.EventEmitter,this.selectAll=!1,this.showInactiveOnOpen=!1,this.showInactive=!1,this.filtersFieldGroupKey="filters"}ngOnInit(){this.enablePopover&&(this.popoverContent=this.getCheckboxFieldConfigs(!0))}onSelectAllChange(selectAllValue,selectedform,isOnload,selectAllField){const modalFields=this.advancedFiltersService.convertToCheckboxes(this.fields),keys=Object.keys(selectedform.get(this.filtersFieldGroupKey).controls);if(isOnload){const allValues=[];keys.forEach((key=>{if("selectAll"!==key){let val;modalFields.find((item=>item.key===key));val=Array.isArray(selectedform.get(this.filtersFieldGroupKey).get(key).value)?selectedform.get(this.filtersFieldGroupKey).get(key).value.length>0:selectedform.get(this.filtersFieldGroupKey).get(key).value,allValues.includes(val)||allValues.push(val)}})),1===allValues.length?selectedform.get("selectAll").setValue(allValues[0]):selectedform.get("selectAll").setValue(!1),this.cdr.detectChanges()}else this.selectAll=selectAllValue,keys.forEach((key=>{if("selectAll"!==key&&"showInactive"!==key){let currentField=modalFields.find((item=>item.key===key));if(currentField.key===key&&"checkbox"===currentField.type)selectedform.get(this.filtersFieldGroupKey).get(key).setValue(this.selectAll);else if("multicheckbox"===currentField.type){const array=[];this.selectAll?(currentField.props.options.forEach((option=>{array.push(option.value),"multicheckbox"===option.type&&option.props.options.forEach((option=>{array.push(option.value)}))})),selectedform.get(this.filtersFieldGroupKey).get(key).setValue(array),this.cdr.detectChanges()):this.enablePopover?selectedform.get(this.filtersFieldGroupKey).get(key).setValue(!1):selectedform.get(this.filtersFieldGroupKey).get(key).setValue([])}}}))}onShowInactiveChange(value){this.showInactiveFiltersChange.emit(value)}openDialog(){const data={fields:this.getCheckboxFieldConfigs(),submit:"Update",title:"More Filters"},dialogRef=this.dialog.open(SdsFormlyDialogComponent,{width:"medium",data});dialogRef.componentInstance.submitFn.subscribe((result=>{result&&this.updateSelectedFields(result),dialogRef.close()})),dialogRef.componentInstance.onChangeFn.subscribe((result=>{if(result&&void 0!==dialogRef.componentInstance.model.filterToggle.selectAll&&this.selectAll!=result.filterToggle.selectAll){const newModel={};this.selectAll=result.filterToggle.selectAll;const modalFields=this.advancedFiltersService.convertToCheckboxes(this.fields);modalFields.map((function(el){return el.key})).forEach((key=>{if("selectAll"!==key&&"showInactive"!==key){let currentField=modalFields.find((item=>item.key===key));if(currentField.key===key&&"checkbox"===currentField.type)newModel[key]=this.selectAll;else if("multicheckbox"===currentField.type){const array=[];this.selectAll?(currentField.props.options.forEach((option=>{array.push(option.value),"multicheckbox"===option.type&&option.props.options.forEach((option=>{array.push(option.value)}))})),newModel[key]=array):this.enablePopover?newModel[key]=!1:newModel[key]=[]}}}));const newFModel={filterToggle:{filters:newModel,selectAll:result.filterToggle.selectAll}};dialogRef.componentInstance.model={...dialogRef.componentInstance.model,...newFModel},this.cdr.detectChanges()}})),dialogRef.componentInstance.cancelFn.subscribe((()=>{dialogRef.close()}))}updateSelectedFields(result){this.showInactiveOnOpen!==this.showInactive&&(this.onShowInactiveChange(this.showInactive),this.showInactiveOnOpen=this.showInactive);const response=this.advancedFiltersService.updateFields(result,this.fields,this.model);this.fields=response.fields,this.model=response.model}getCheckboxFieldConfigs(hideChildrenGroups=!1){const modalFields=this.advancedFiltersService.convertToCheckboxes(this.fields,hideChildrenGroups);this.sortMoreFilterBy&&modalFields.sort(((a,b)=>a.props&&b.props?a.props[this.sortMoreFilterBy].localeCompare(b.props[this.sortMoreFilterBy]):0));const filedGroup=this.filedGroup,showInactiveGroup=this.showInactiveGroup;let updateField=[{key:"filterToggle",fieldGroup:[...filedGroup,{key:this.filtersFieldGroupKey,fieldGroup:[...modalFields]}]}];return this.isInactiveValueFieldShown&&updateField.push(...showInactiveGroup),updateField}get filedGroup(){return[{props:{label:"test"},fieldGroup:[{key:"selectAll",type:"checkbox",props:{label:"Select All",hideOptional:!0,id:"moreFilterSelectAll"}},{template:"<hr/>"}]}]}get showInactiveGroup(){return[{template:"<hr/>"},{fieldGroup:[{key:"showInactive",type:"checkbox",defaultValue:this.showInactive,props:{label:"Show Inactive Filter Values (Indicated by *)",hideOptional:!0,id:"moreFilterSelectAll",textAlignEnd:!0},hooks:{onInit:field=>{let isOnload=!0;const form=field.parent.formControl;form.get("showInactive").valueChanges.pipe((0,startWith.Z)(form.get("showInactive").value),(0,tap.M)((showInactiveValue=>{this.showInactive=showInactiveValue,isOnload=!1}))).subscribe()}}}]}]}static#_=this.ctorParameters=()=>[{type:components_src.el},{type:SdsAdvancedFiltersService},{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={form:[{type:core.Input}],fields:[{type:core.Input}],model:[{type:core.Input}],options:[{type:core.Input}],sortMoreFilterBy:[{type:core.Input}],isInactiveValueFieldShown:[{type:core.Input}],enablePopover:[{type:core.Input}],showInactiveFiltersChange:[{type:core.Output}]}};AdvancedFiltersComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-advanced-filters",template:'<button *ngIf="!enablePopover" type="button" (click)="openDialog()" class="usa-button usa-button--unstyled">\n  More Filters\n  <usa-icon [icon]="\'filter\'" class="icon-filter" [size]="\'sm\'"></usa-icon>\n</button>\n\n<div\n  *ngIf="enablePopover"\n  [sdsPopover]="content"\n  [position]="\'bottom\'"\n  [autoClose]="\'outside\'"\n  tabindex="0"\n  aria-label="More Filters"\n>\n  More Filters\n  <usa-icon [icon]="\'chevron-down\'" [size]="\'sm\'"></usa-icon>\n  <ng-template #content>\n    <p class="padding-2 text-left minw-card-lg">\n      <formly-form [fields]="popoverContent" (modelChange)="updateSelectedFields($event)"></formly-form>\n    </p>\n  </ng-template>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[advanced_filters_componentngResource_default()]})],AdvancedFiltersComponent);let SdsFiltersModule=class SdsFiltersModule{};SdsFiltersModule=(0,tslib_es6.Cg)([(0,core.NgModule)({declarations:[SdsFiltersComponent,AdvancedFiltersComponent],imports:[common.CommonModule,fesm2022_forms.YN,SdsFormlyModule,SdsFormlyResetModule,gsa_sam_ngx_uswds_icons.opy,fesm2022_forms.X1,ngx_formly_core_select.m,ngx_formly_core.qy,SdsReadonlyModule,components_src.ch,ngx_bootstrap_icons.YWJ.pick({filter:ngx_bootstrap_icons.pbD,x:ngx_bootstrap_icons.x,chevronLeft:ngx_bootstrap_icons.$L1})],exports:[SdsFiltersComponent],providers:[SDSFormlyUpdateModelService]})],SdsFiltersModule);let SdsFormlyDialogModule=class SdsFormlyDialogModule{};SdsFormlyDialogModule=(0,tslib_es6.Cg)([(0,core.NgModule)({declarations:[SdsFormlyDialogComponent],imports:[common.CommonModule,SdsFiltersModule,components_src.TU,fesm2022_forms.X1,SdsFormlyModule,ngx_formly_core.qy,fesm2022_forms.YN],exports:[SdsFormlyDialogComponent]})],SdsFormlyDialogModule);var router=__webpack_require__("./node_modules/@angular/router/fesm2022/router.mjs"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");var isEqual=__webpack_require__("./node_modules/lodash-es/isEqual.js");let SdsStepHeaderComponent=class SdsStepHeaderComponent{};SdsStepHeaderComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"[sdsStepHeader]",template:"<ng-content></ng-content>"})],SdsStepHeaderComponent);let SdsStepFooterComponent=class SdsStepFooterComponent{};SdsStepFooterComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"[sdsStepFooter]",template:"<ng-content></ng-content>"})],SdsStepFooterComponent);let nextId=0,SdsStepComponent=class SdsStepComponent{constructor(_stepper,_el,_document){this._stepper=_stepper,this._el=_el,this._document=_document,this.id="sds-step-"+nextId++,this.selected=!1,this.editable=!0,this.modelChange=new core.EventEmitter}onModelChange($event){let event;"function"==typeof Event?event=new CustomEvent("stepModelChange",{bubbles:!0,detail:$event}):(event=this._document.createEvent("CustomEvent"),event.initCustomEvent("sort",!0,!0,$event)),this._el.nativeElement.dispatchEvent(event),this.modelChange.emit($event)}static#_=this.ctorParameters=()=>[{type:SdsStepper,decorators:[{type:core.Inject,args:[(0,core.forwardRef)((()=>SdsStepper))]}]},{type:core.ElementRef},{type:void 0,decorators:[{type:core.Inject,args:[common.DOCUMENT]}]}];static#_2=this.propDecorators={children:[{type:core.ContentChildren,args:[(0,core.forwardRef)((()=>SdsStepComponent))]}],content:[{type:core.ViewChild,args:["mainContent",{static:!0}]}],stepTemplate:[{type:core.Input}],stepValidationFn:[{type:core.Input}],text:[{type:core.Input}],id:[{type:core.Input}],selected:[{type:core.Input}],fieldConfig:[{type:core.Input}],options:[{type:core.Input}],model:[{type:core.Input}],valid:[{type:core.Input}],hideFn:[{type:core.Input}],hide:[{type:core.Input}],isReview:[{type:core.Input}],editable:[{type:core.Input}],route:[{type:core.Input}],disabled:[{type:core.Input}],modelChange:[{type:core.Output}]}};SdsStepComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"sds-step",exportAs:"sdsStep",template:'<ng-template #mainContent>\n  <ng-container *ngIf="stepTemplate; else formlyField" [ngTemplateOutlet]="stepTemplate"></ng-container>\n  <ng-template #formlyField>\n    <ng-content select="[sdsStepHeader]"></ng-content>\n    <formly-form\n      *ngIf="fieldConfig"\n      [model]="model"\n      [fields]="[fieldConfig]"\n      [options]="options"\n      (modelChange)="onModelChange($event)"\n    >\n    </formly-form>\n    <ng-content select="[sdsStepFooter]"></ng-content>\n  </ng-template>\n\n  <ng-content select="sds-step"></ng-content>\n</ng-template>\n',changeDetection:core.ChangeDetectionStrategy.OnPush})],SdsStepComponent);let SdsStepper=class SdsStepper{onModelChange($event){$event.stopImmediatePropagation(),this.modelChange.emit($event.detail)}constructor(router,activatedRoute,cdr){this.router=router,this.activatedRoute=activatedRoute,this.cdr=cdr,this.model={},this.stepValidityMap={},this.customErrorHandling=!1,this.linear=!1,this.id="sds-stepper-"+nextId++,this.queryParamKey="sdsStepId",this.isRouteEnabled=!0,this.validateStepsOnInit=!0,this.canReviewWithErrors=!1,this.saveData=new core.EventEmitter,this.stepChange=new core.EventEmitter,this.modelChange=new core.EventEmitter,this.flatSteps=[],this._isReviewAndSubmitDisabled=!0}ngOnChanges(changes){if(this.selectedStep&&(changes.currentStepId&&this.selectedStep.id!=changes.currentStepId.currentValue&&this.changeStep(changes.currentStepId.currentValue),changes.stepValidityMap&&changes.stepValidityMap.currentValue&&this.flatSteps.forEach((step=>{step.valid=this.stepValidityMap[step.id]})),changes.linear)){if(changes.linear.currentValue){const lastValidStepIndex=this.evaluateIncompleteForms();this.changeStep(this.flatSteps[lastValidStepIndex].id)}else this.flatSteps.forEach((step=>{step.isReview&&this._isReviewAndSubmitDisabled||(step.disabled=!1)}));this.flatSteps.forEach((step=>{step.valid=this.stepValidityMap[step.id]}))}}ngAfterViewInit(){if(!0===this.validateStepsOnInit||this.validateStepsOnInit instanceof Array&&this.validateStepsOnInit.length>0){const currentStep=this.selectedStep;if(!this.linear){const isRouteEnabled=this.isRouteEnabled;if(this.flatSteps=this.getFlatSteps(this.stepTemplates).filter((step=>!0===this.validateStepsOnInit||this.validateStepsOnInit.includes(step.id))),0===this.flatSteps.length)return;this.isRouteEnabled=!1,this.flatSteps.forEach((step=>{setTimeout((()=>{this.changeStep(step.id)}),0)})),setTimeout((()=>{this.changeStep(currentStep.id),this.isRouteEnabled=isRouteEnabled}),0)}}}ngAfterContentInit(){this.flatSteps=this.getFlatSteps(this.stepTemplates),this.flatSteps.forEach((step=>{step.model=step.model?step.model:this.model})),this.activatedRoute.snapshot.queryParams[this.queryParamKey]&&!this.linear&&this.isRouteEnabled?this.currentStepId=this.activatedRoute.snapshot.queryParams[this.queryParamKey]:this.currentStepId||(this.currentStepId=this.flatSteps[0].id,this.selectedStepIndex=0,this.selectedStep=this.flatSteps[this.selectedStepIndex]),this.stepValidityMap?(this.updateValidity(this.stepValidityMap,this.stepTemplates),this.checkReviewAndSubmit()):this.stepValidityMap={},this.linear&&this.evaluateIncompleteForms(),this.changeStep(this.currentStepId).finally((()=>{this.isRouteEnabled&&this.activatedRoute.queryParams.subscribe((queryParam=>{queryParam[this.queryParamKey]&&queryParam[this.queryParamKey]!=this.currentStepId&&this.changeStep(queryParam[this.queryParamKey])}))}))}getFlatSteps(stepTemplates){let flat=[];return stepTemplates.forEach((step=>{if(step.hideFn&&step.hideFn(step.model?step.model:this.model,step.fieldConfig))step.hide=!0;else if(step.hide=!1,step.editable&&flat.push(step),step.children&&step.children.length){const childSteps=this.getFlatSteps(step.children);flat=flat.concat(childSteps)}})),flat}changeStep(stepId,incrementor){var _this=this;return(0,asyncToGenerator.A)((function*(){_this.flatSteps=_this.getFlatSteps(_this.stepTemplates);let stepIndex=_this.flatSteps.findIndex((step=>step.id===stepId));if(stepIndex=-1===stepIndex?0:stepIndex,incrementor&&(stepIndex+=incrementor,stepIndex>_this.flatSteps.length))throw Error(`StepIndex of ${stepIndex} is greater than the number of steps. Check that you are passing in a sensible incrementor.)`);const step=_this.flatSteps[stepIndex];step!==_this.selectedStep&&(!_this.linear&&(step.disabled||step.isReview&&!_this.canReviewWithErrors&&_this._isReviewAndSubmitDisabled)||(_this.selectedStep&&(yield _this.updateValidation(_this.selectedStep),_this.checkReviewAndSubmit(),_this.linear&&_this.evaluateIncompleteForms(),_this.selectedStep.selected=!1),_this.linear&&stepIndex>_this.selectedStepIndex&&!_this.stepValidityMap[_this.selectedStep.id]?_this.toggleOnValidationForStep(_this.selectedStep,_this.stepValidityMap,_this.customErrorHandling):(_this.selectedStepIndex=stepIndex,_this.selectedStep=_this.flatSteps[stepIndex],_this.selectedStep.selected=!0,_this.currentStepId=_this.selectedStep.id,_this.toggleOnValidationForStep(_this.selectedStep,_this.stepValidityMap,_this.customErrorHandling),_this.selectedStep.editable&&_this.isRouteEnabled&&_this.router.navigate(_this.selectedStep.route?[_this.selectedStep.route]:[],{queryParams:{[_this.queryParamKey]:_this.currentStepId},queryParamsHandling:"merge"}),_this.stepChange.emit(_this.selectedStep))))}))()}toggleOnValidationForStep(step,validityMap,customErrorHandling){step.options||customErrorHandling||(this.selectedStep.options={}),step.options.showError||customErrorHandling||(this.selectedStep.options.showError=()=>!1),!1===validityMap[step.id]&&(step.options.showError=field=>field.formControl.invalid)}onNextStep(){this.changeStep(this.selectedStep.id,1)}onPreviousStep(){this.changeStep(this.selectedStep.id,-1)}onSaveClicked(){var _this2=this;return(0,asyncToGenerator.A)((function*(){console.warn("This is a deprectaed version of sdsStepperSave directive, and will be removed in future versions.\n      Please switch to using sdsStepperPrevious/sdsStepperNext"),_this2.flatSteps=_this2.getFlatSteps(_this2.stepTemplates),_this2.selectedStepIndex=_this2.flatSteps.findIndex((step=>step.id===_this2.selectedStep.id)),yield _this2.updateValidation(_this2.selectedStep),_this2.checkReviewAndSubmit(),_this2.linear&&_this2.evaluateIncompleteForms(),_this2.customErrorHandling||!1!==_this2.stepValidityMap[_this2.currentStepId]||(_this2.selectedStep.options.showError=field=>!field.formControl.valid),_this2.saveData.emit({model:_this2.model,metadata:{stepId:_this2.selectedStep.id,stepValidityMap:_this2.stepValidityMap}})}))()}getDisplayedSteps(steps){return steps?steps.filter((step=>!step.hide)):[]}evaluateIncompleteForms(){let startIndex=0;this.flatSteps.some(((step,index)=>{if(step.disabled=!1,!this.stepValidityMap[step.id])return startIndex=index,!0}));for(let i=startIndex+1;i<this.flatSteps.length;i++)this.flatSteps[i].disabled=!0;return startIndex}checkReviewAndSubmit(){this._isReviewAndSubmitDisabled=this.flatSteps.some((step=>!step.isReview&&!this.stepValidityMap[step.id]))}updateValidity(validityMap,stepTemplates){stepTemplates.forEach((step=>{step&&(step.valid=validityMap[step.id],step.children&&this.updateValidity(validityMap,step.children))}))}updateValidation(currentStep,forceValidationValue){var _this3=this;return(0,asyncToGenerator.A)((function*(){if(!currentStep)return;if(!0===forceValidationValue||!1===forceValidationValue)return currentStep.valid=forceValidationValue,void(_this3.stepValidityMap[currentStep.id]=forceValidationValue);if(currentStep.stepValidationFn){const isValid=currentStep.stepValidationFn(currentStep.model?currentStep.model:_this3.model);if("boolean"==typeof isValid)currentStep.valid=isValid,_this3.stepValidityMap[currentStep.id]=isValid;else if("object"==typeof isValid){const res=yield isValid.toPromise();currentStep.valid=res,_this3.stepValidityMap[currentStep.id]=res}return}const currentStepFieldConfig=currentStep.fieldConfig;if(!currentStepFieldConfig||_this3.isFormEmpty(currentStepFieldConfig.formControl,currentStepFieldConfig.defaultValue))return;const isValid=currentStep.fieldConfig.formControl.valid;currentStep.valid=isValid,_this3.stepValidityMap[currentStep.id]=isValid}))()}isFormEmpty(form,defaultValue){if(!form)return!0;if(!1===form.value)return!1;if(!form.value||0===form.value.length)return!0;if("object"!=typeof form.value)return!1;const cleanModel=this.getCleanObject(form.value);return 0===Object.keys(cleanModel).length||isEqual.A(cleanModel,defaultValue)}getCleanObject(input,output){for(var key in output=output||{},input){var value=input[key];value&&("object"==typeof value&&null!==value?this.getCleanObject(value,output):"true"===value?output[key]=!0:"false"!=value&&(output[key]=value))}return output}static#_=this.ctorParameters=()=>[{type:router.Ix},{type:router.nX},{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={stepTemplates:[{type:core.ContentChildren,args:[SdsStepComponent]}],model:[{type:core.Input}],currentStepId:[{type:core.Input}],stepValidityMap:[{type:core.Input}],customErrorHandling:[{type:core.Input}],linear:[{type:core.Input}],id:[{type:core.Input}],queryParamKey:[{type:core.Input}],isRouteEnabled:[{type:core.Input}],validateStepsOnInit:[{type:core.Input}],canReviewWithErrors:[{type:core.Input}],saveData:[{type:core.Output}],stepChange:[{type:core.Output}],modelChange:[{type:core.Output}],onModelChange:[{type:core.HostListener,args:["stepModelChange",["$event"]]}]}};SdsStepper=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[sdsStepper]",exportAs:"sdsStepper"})],SdsStepper);let SdsStepperNextDirective=class SdsStepperNextDirective{constructor(_stepper){this._stepper=_stepper}_handleClick(){this._stepper.onNextStep()}_disabled(){const flatSteps=this._stepper.flatSteps,nextIndex=this._stepper.selectedStepIndex+1;return!flatSteps||null==this._stepper.selectedStepIndex||(this._stepper.selectedStepIndex>=flatSteps.length-1||(this._stepper.linear?void 0:!!(flatSteps[nextIndex].disabled||flatSteps[nextIndex].isReview&&!this._stepper.canReviewWithErrors&&this._stepper._isReviewAndSubmitDisabled)||void 0))}static#_=this.ctorParameters=()=>[{type:SdsStepper}];static#_2=this.propDecorators={_handleClick:[{type:core.HostListener,args:["click"]}]}};SdsStepperNextDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[sdsStepperNext]",host:{"[attr.disabled]":"_disabled()"}})],SdsStepperNextDirective);let SdsStepperPreviousDirective=class SdsStepperPreviousDirective{constructor(_stepper){this._stepper=_stepper}_handleClick(){this._stepper.onPreviousStep()}_disabled(){const flatSteps=this._stepper.flatSteps,previousStep=this._stepper.selectedStepIndex-1;return!flatSteps||!this._stepper.selectedStepIndex||(0===this._stepper.selectedStepIndex||(!!(flatSteps[previousStep].disabled||flatSteps[previousStep].isReview&&this._stepper._isReviewAndSubmitDisabled)||void 0))}static#_=this.ctorParameters=()=>[{type:SdsStepper}];static#_2=this.propDecorators={_handleClick:[{type:core.HostListener,args:["click"]}]}};SdsStepperPreviousDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[sdsStepperPrevious]",host:{"[attr.disabled]":"_stepper.selectedStepIndex === 0 ? true : undefined"}})],SdsStepperPreviousDirective);let SdsStepperSaveDirective=class SdsStepperSaveDirective{constructor(_stepper){this._stepper=_stepper}_handleClick(){this._stepper.onSaveClicked()}static#_=this.ctorParameters=()=>[{type:SdsStepper}];static#_2=this.propDecorators={_handleClick:[{type:core.HostListener,args:["click"]}]}};SdsStepperSaveDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[sdsStepperSave]"})],SdsStepperSaveDirective);let SdsStepperNavDirective=class SdsStepperNavDirective{constructor(_stepper){this._stepper=_stepper}_handleClick(){this._stepper.changeStep(this.sdsStepperNav.id)}static#_=this.ctorParameters=()=>[{type:SdsStepper}];static#_2=this.propDecorators={sdsStepperNav:[{type:core.Input}],_handleClick:[{type:core.HostListener,args:["click"]}]}};SdsStepperNavDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[sdsStepperNav]",host:{"[attr.disabled]":"sdsStepperNav.disabled"}})],SdsStepperNavDirective);let SdsStepperUSWDSNavDirective=class SdsStepperUSWDSNavDirective{constructor(_stepper,_el){this._stepper=_stepper,this._el=_el,this.stepChangeSubscriptions=new Subscription.yU}ngOnInit(){const usaStepChange=this._el.currentStepChange.subscribe((stepIndex=>{const step=this._el.steps[stepIndex],nextStep=this._stepper.flatSteps.find((flatStep=>flatStep.text===step.label));this._stepper.changeStep(nextStep.id)}));this.stepChangeSubscriptions.add(usaStepChange)}ngOnDestroy(){this.stepChangeSubscriptions.unsubscribe()}static#_=this.ctorParameters=()=>[{type:SdsStepper,decorators:[{type:core.Inject,args:[(0,core.forwardRef)((()=>SdsStepper))]}]},{type:gsa_sam_ngx_uswds.i5}]};SdsStepperUSWDSNavDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"usa-step-indicator [sdsStepperUSWDSNav]"})],SdsStepperUSWDSNavDirective);let SdsStepperModule=class SdsStepperModule{};SdsStepperModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,ngx_formly_core.qy,SdsFormlyModule,gsa_sam_ngx_uswds_icons.opy,ngx_bootstrap_icons.YWJ.pick({chevronLeft:ngx_bootstrap_icons.$L1,chevronRight:ngx_bootstrap_icons.KRm,x:ngx_bootstrap_icons.x,check:ngx_bootstrap_icons.z6Y,question:ngx_bootstrap_icons.b1_,save:ngx_bootstrap_icons.UNN}),router.iI],declarations:[SdsStepComponent,SdsStepHeaderComponent,SdsStepFooterComponent,SdsStepper,SdsStepperNavDirective,SdsStepperNextDirective,SdsStepperPreviousDirective,SdsStepperSaveDirective,SdsStepperUSWDSNavDirective],exports:[SdsStepComponent,SdsStepHeaderComponent,SdsStepFooterComponent,SdsStepper,SdsStepperNavDirective,SdsStepperNextDirective,SdsStepperPreviousDirective,SdsStepperSaveDirective,SdsStepperUSWDSNavDirective]})],SdsStepperModule)},"?4f7e":()=>{}}]);