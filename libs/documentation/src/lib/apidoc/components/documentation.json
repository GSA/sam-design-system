{
    "pipes": [
        {
            "name": "SdsDatePipe",
            "id": "pipe-SdsDatePipe-c575363259074bfd8fdb085b21e7ecbcc7ddbb51fa93de3513f664751bb73cec1435f1e2f7ce7f0b0ec12761447183dba710644ea5f19f0ef1a4b3d4fd20a951",
            "file": "libs/packages/components/src/lib/date/sds-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "sdsDate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({\n  name: 'sdsDate',\n})\nexport class SdsDatePipe implements PipeTransform {\n  constructor(private datePipe: DatePipe) {}\n\n  transform(value: string | number): string {\n    const passedInDate = new Date(value);\n    const now = new Date();\n\n    if (\n      now.getFullYear() === passedInDate.getFullYear() &&\n      now.getMonth() === passedInDate.getMonth() &&\n      now.getDate() === passedInDate.getDate()\n    ) {\n      return this.datePipe.transform(passedInDate, 'shortTime');\n    } else if (now.getFullYear() === passedInDate.getFullYear()) {\n      return this.datePipe.transform(passedInDate, 'MMM d');\n    } else {\n      return this.datePipe.transform(passedInDate, 'mediumDate');\n    }\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ActionMenuActions",
            "id": "interface-ActionMenuActions-caad3d3fc3245deabb3a839ad4c7f38ed7257320173d39583b30422c1440a9b17b8a214a5475e3450d163713607a2dcea12570e39a9a3369ab02c698bffa9b23",
            "file": "libs/packages/components/src/lib/actions-menu/action-menu.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ActionMenuMode {\n  SHOWN,\n  DISABLED,\n  HIDDEN,\n}\n\nexport interface TriggerTypeModel {\n  type: string;\n  shadow: boolean;\n}\n\nexport interface ActionMenuActions {\n  id: string;\n  text: string;\n  mode?: ActionMenuMode;\n}\n\nexport interface ActionMenuModel {\n  trigger: TriggerTypeModel;\n  label?: string;\n  actions: ActionMenuActions[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionMenuMode",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActionMenuModel",
            "id": "interface-ActionMenuModel-caad3d3fc3245deabb3a839ad4c7f38ed7257320173d39583b30422c1440a9b17b8a214a5475e3450d163713607a2dcea12570e39a9a3369ab02c698bffa9b23",
            "file": "libs/packages/components/src/lib/actions-menu/action-menu.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ActionMenuMode {\n  SHOWN,\n  DISABLED,\n  HIDDEN,\n}\n\nexport interface TriggerTypeModel {\n  type: string;\n  shadow: boolean;\n}\n\nexport interface ActionMenuActions {\n  id: string;\n  text: string;\n  mode?: ActionMenuMode;\n}\n\nexport interface ActionMenuModel {\n  trigger: TriggerTypeModel;\n  label?: string;\n  actions: ActionMenuActions[];\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionMenuActions[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "trigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TriggerTypeModel",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DialogPosition",
            "id": "interface-DialogPosition-67e67916f5770ae6b75f2ae3a1fc9f63502364be99417876edf62318ced4d802a03118d36c7beabda7546ef460351c59efb11f3599a578d63871ecc4f9066fa3",
            "file": "libs/packages/components/src/lib/dialog/dialog-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewContainerRef } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/** Custom Slide Out Panel configurations */\nexport interface SlideOutConfig {\n  /** Width of the slide out panel */\n  width?: string;\n\n  /** Time that it takes to open and close the panel */\n  time?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the SdsDialog service.\n */\nexport class SdsDialogConfig<D = any> {\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop? = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass? = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose? = false;\n\n  /** Width of the dialog. */\n  width? = '';\n\n  /** Height of the dialog. */\n  height? = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus? = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus? = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation? = true;\n\n  /**\n   * Wheter the dialog its an alert\n   */\n  alert?: 'warning' | 'info' | 'error' | 'success';\n\n  /**\n   * Whether to display the close button in dialog header\n   */\n  displayCloseBtn? = true;\n\n  /**\n   * Whether dialog is a slide-out. Changes enter and exit animation, and adds\n   * class `dialog-slide-out` to container\n   */\n  slideOut?: boolean | SlideOutConfig = false;\n}\n",
            "properties": [
                {
                    "name": "bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Override for the dialog&#39;s bottom position.</p>\n",
                    "line": 14,
                    "rawdescription": "\nOverride for the dialog's bottom position."
                },
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Override for the dialog&#39;s left position.</p>\n",
                    "line": 17,
                    "rawdescription": "\nOverride for the dialog's left position."
                },
                {
                    "name": "right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Override for the dialog&#39;s right position.</p>\n",
                    "line": 20,
                    "rawdescription": "\nOverride for the dialog's right position."
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Override for the dialog&#39;s top position.</p>\n",
                    "line": 11,
                    "rawdescription": "\nOverride for the dialog's top position."
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Possible overrides for a dialog&#39;s position.</p>\n",
            "rawdescription": "\nPossible overrides for a dialog's position.",
            "methods": []
        },
        {
            "name": "INavigationLink",
            "id": "interface-INavigationLink-d550703c6b73d6667c874b14d4afa291954817f51a1b13fe8b351b6a99a62145fc6a437964b3bb7bf1ec656456c347b5f33ab3f86bc52ee26e2b9cea734b24be",
            "file": "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface INavigationLink {\n  /**\n   * Text to be displayed in the link\n   */\n  text: string;\n\n  /**\n   * Navigation Route\n   */\n  route: string;\n\n  /**\n   * Internal Angualr Routes, External HREF, EVENT: event on parent component\n   */\n  mode: NavigationMode;\n}\n\nexport enum NavigationMode {\n  INTERNAL,\n  EXTERNAL,\n  EVENT,\n  LABEL,\n}\n\nexport interface Selectable {\n  /**\n   * Identifier for the item when search for selected\n   */\n  id: string;\n\n  /**\n   * Status of if the item is selected\n   */\n  selected?: boolean;\n}\n",
            "properties": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationMode",
                    "optional": false,
                    "description": "<p>Internal Angualr Routes, External HREF, EVENT: event on parent component</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nInternal Angualr Routes, External HREF, EVENT: event on parent component\n"
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Navigation Route</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nNavigation Route\n"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text to be displayed in the link</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nText to be displayed in the link\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "InitPxVideoConfig",
            "id": "interface-InitPxVideoConfig-5b9a1d7ae46abeef513ee0d120424283c2a111dc9bf489a810d652f395aa36fd20a29ed91877e9c8f2ec8d07a84cad6f6d35aa61023ebfada10016cab720862a",
            "file": "libs/packages/components/src/lib/video-player/video-player.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  Input,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  Renderer2,\n  OnChanges,\n  AfterContentInit,\n  OnInit,\n  ChangeDetectorRef,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport { GLOBAL_STRINGS } from 'accessible-html5-video-player/js/strings.js';\nimport * as InitPxVideo from 'accessible-html5-video-player/js/px-video.js';\nimport { VPInterface } from './video-player';\nimport { DOCUMENT } from '@angular/common';\n\ninterface InitPxVideoConfig {\n  videoId: string;\n  captionsOnDefault: boolean;\n  seekInterval: number;\n  videoTitle: string;\n  debug: boolean;\n}\n\ndeclare const GLOBAL_STRINGS: any;\n\ndeclare class InitPxVideo {\n  constructor(config: InitPxVideoConfig);\n}\n\n@Component({\n  selector: 'sds-video-player',\n  templateUrl: './video-player.component.html',\n  styleUrls: ['./css/px-video.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SdsVideoPlayerComponent implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n  @Input() VPConfiguration: VPInterface;\n  @ViewChild('video') video: ElementRef;\n  private config: InitPxVideoConfig;\n  @Input() crossorigin = '';\n\n  loadVideoSource = false;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer2: Renderer2,\n    private cdr: ChangeDetectorRef,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnDestroy() {\n    let element = this.document.getElementById('px-video-aria-announce');\n    if (element) {\n      this.renderer2.removeChild(this.elementRef, element);\n    }\n  }\n  ngOnInit() {\n    if (this.VPConfiguration.preload != 'none') {\n      this.loadVideoSource = true;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.crossorigin) {\n      const id = this.video.nativeElement;\n      id.setAttribute('crossorigin', this.crossorigin);\n    }\n    this.config = {\n      videoId: this.VPConfiguration.id,\n      captionsOnDefault: false,\n      seekInterval: this.VPConfiguration.seekInterval,\n      videoTitle: 'Video Player',\n      debug: this.VPConfiguration.debug,\n    };\n\n    const video = new InitPxVideo(this.config); // Required to ensure that browser controls are replaced with custom controls\n\n    this.video.nativeElement.setAttribute('style', 'width:' + this.VPConfiguration.width + ';');\n\n    const progressElement: HTMLProgressElement = this.elementRef.nativeElement.querySelector('progress');\n\n    if (progressElement) {\n      this.renderer2.setAttribute(progressElement, 'aria-label', this.VPConfiguration.description + ' progress bar');\n    }\n\n    if (this.VPConfiguration.preload === 'none') {\n      this._loadVideoSourceOnDemand();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (this.video && changes && changes.crossorigin) {\n      const id = this.video.nativeElement;\n      if (id) {\n        id.setAttribute('crossorigin', this.crossorigin);\n      }\n    }\n  }\n\n  /**\n   * IE and Edge ignore preload attribute and load video data eagerly. In order to\n   * workaround those such browsers, we add video source only after user clicks\n   * on play or restart button of the video.\n   */\n  private _loadVideoSourceOnDemand() {\n    const playButton: HTMLButtonElement = this.elementRef.nativeElement.querySelector('.px-video-play');\n    const restartButton: HTMLButtonElement = this.elementRef.nativeElement.querySelector('.px-video-restart');\n    const video: HTMLVideoElement = this.video.nativeElement;\n\n    const loadVideo = ($event) => {\n      if (this.loadVideoSource) {\n        return;\n      }\n\n      this.loadVideoSource = true;\n\n      // Due to event handler timing issues in safari, the browser does not load the source\n      // when play and source are set at the same time. So we first set the source, wait for\n      // an event loop, pause, then play the video to trigger source loading\n      setTimeout(() => {\n        video.pause();\n        video.play();\n      });\n    };\n\n    if (!playButton || !restartButton) {\n      // Edge case - if the button to toggle video source does not exist in dom, then add in the\n      // video source and let the browser decide when to fetch video data\n      this.loadVideoSource = true;\n    } else {\n      playButton.onclick = loadVideo;\n      restartButton.onclick = loadVideo;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "captionsOnDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "debug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "seekInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "videoId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "videoTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SdsAccordionBase",
            "id": "interface-SdsAccordionBase-49ca7f1c3d090f8e4df8eea385f5af2356ebc265426bcd2715cf5e1e8eb64f6917115271284b072d2c16d4a5ab89086fc74962bfcf15538e9be787b14bad55fc",
            "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\n\n/** Accordion's display modes. */\nexport type SdsAccordionDisplayMode = 'default' | 'basic';\n\n/**\n * Base interface for a `SdsAccordion`.\n */\nexport interface SdsAccordionBase extends CdkAccordion {\n  /** Display mode used for all accordion items in the accordion. */\n  displayMode: SdsAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the item headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the item headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n/**\n * Token used to provide a `SdsAccordion` to `SdsAccordionItem`.\n * Used primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.\n */\nexport const SDS_ACCORDION = new InjectionToken<SdsAccordionBase>('SDS_ACCORDION');\n",
            "properties": [
                {
                    "name": "_handleHeaderFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Handles focus events on the item headers.</p>\n",
                    "line": 18,
                    "rawdescription": "\nHandles focus events on the item headers."
                },
                {
                    "name": "_handleHeaderKeydown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Handles keyboard events coming in from the item headers.</p>\n",
                    "line": 15,
                    "rawdescription": "\nHandles keyboard events coming in from the item headers."
                },
                {
                    "name": "displayMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsAccordionDisplayMode",
                    "optional": false,
                    "description": "<p>Display mode used for all accordion items in the accordion.</p>\n",
                    "line": 12,
                    "rawdescription": "\nDisplay mode used for all accordion items in the accordion."
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Base interface for a <code>SdsAccordion</code>.</p>\n",
            "rawdescription": "\n\nBase interface for a `SdsAccordion`.\n",
            "methods": [],
            "extends": "CdkAccordion"
        },
        {
            "name": "SDSAutocompleteServiceInterface",
            "id": "interface-SDSAutocompleteServiceInterface-8a7ff93cb3598fa1fd62a51e2d694234b6b77339b6ebbdca265a15a2b88c763f2f80275b7d51ddec08309f7803f2a3288bd519f43e1cd585cbb1237f04ea37d9",
            "file": "libs/packages/components/src/lib/autocomplete-search/models/SDSAutocompleteServiceInterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nexport interface SDSAutocompleteServiceInterface {\n  /**\n   *\n   * @param searchValue\n   */\n  getDataByText(currentItems: number, searchValue?: string): Observable<SDSHiercarchicalServiceResult>;\n}\n\nexport interface SDSHiercarchicalServiceResult {\n  /**\n   *\n   */\n  items: object[];\n\n  /**\n   *\n   */\n  totalItems: number;\n}\n\nexport class SDSHiercarchicalServiceSearchItem {\n  /**\n   *\n   */\n  id: string;\n\n  /**\n   *\n   */\n  searchValue: string;\n\n  /**\n   *\n   */\n  // sort: Sort;\n\n  /**\n   *\n   */\n  currentItemCount: number;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "getDataByText",
                    "args": [
                        {
                            "name": "currentItems",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SDSHiercarchicalServiceResult>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "currentItems",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 109,
                                "end": 120,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "searchValue"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 103,
                                "end": 108,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "SDSHiercarchicalServiceResult",
            "id": "interface-SDSHiercarchicalServiceResult-8a7ff93cb3598fa1fd62a51e2d694234b6b77339b6ebbdca265a15a2b88c763f2f80275b7d51ddec08309f7803f2a3288bd519f43e1cd585cbb1237f04ea37d9",
            "file": "libs/packages/components/src/lib/autocomplete-search/models/SDSAutocompleteServiceInterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nexport interface SDSAutocompleteServiceInterface {\n  /**\n   *\n   * @param searchValue\n   */\n  getDataByText(currentItems: number, searchValue?: string): Observable<SDSHiercarchicalServiceResult>;\n}\n\nexport interface SDSHiercarchicalServiceResult {\n  /**\n   *\n   */\n  items: object[];\n\n  /**\n   *\n   */\n  totalItems: number;\n}\n\nexport class SDSHiercarchicalServiceSearchItem {\n  /**\n   *\n   */\n  id: string;\n\n  /**\n   *\n   */\n  searchValue: string;\n\n  /**\n   *\n   */\n  // sort: Sort;\n\n  /**\n   *\n   */\n  currentItemCount: number;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "rawdescription": "\n\n\n"
                },
                {
                    "name": "totalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "rawdescription": "\n\n\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SdsMenuInterface",
            "id": "interface-SdsMenuInterface-e44296d96d2da6f73d21c1d2a932e996f456eb231f4dfc64c967cdea7cde53c1a8379ce6683f080f69c5627534dfdeb915de721c3fd789199ff77ee4bc21b35c",
            "file": "libs/packages/components/src/lib/menu/menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { ESCAPE, DOWN_ARROW, UP_ARROW, HOME, END, hasModifierKey } from '@angular/cdk/keycodes';\nimport { FocusKeyManager, FocusOrigin } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subscription } from 'rxjs';\nimport { sdsMenuAnimations } from './menu-animations';\nimport { SdsMenuItemComponent } from './menu-item.component';\n\n/** Menu Positions */\nexport type MenuPositionX = 'before' | 'after';\nexport type MenuPositionY = 'above' | 'below';\n\n/** Menu available sizes */\n// sm = 'small'\nexport type MenuSizes = 'sm';\n\n/** Injection token used to provide the parent menu to menu items. */\nexport const SDS_MENU_TOKEN = new InjectionToken<SdsMenuInterface>('SDS_MENU_TOKEN');\n\n/** Menu Interface */\nexport interface SdsMenuInterface<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: SdsMenuInterface;\n  size?: MenuSizes;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  addItem?: (item: T) => void;\n  insertItem?: (item: T, index: number) => void;\n  removeItem?: (item: T) => void;\n}\n\n@Component({\n  selector: 'sds-menu',\n  exportAs: 'sdsMenu',\n  templateUrl: 'menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [sdsMenuAnimations.transformMenu],\n  providers: [{ provide: SDS_MENU_TOKEN, useExisting: SdsMenuComponent }],\n})\nexport class SdsMenuComponent implements OnInit, AfterContentInit, OnDestroy, SdsMenuInterface<SdsMenuItemComponent> {\n  /** After | Before the menu triger element */\n  private _xPosition: MenuPositionX = 'after';\n\n  /** Above | Below the menu triger element */\n  private _yPosition: MenuPositionY = 'below';\n\n  /** Manage browser focus */\n  private _keyManager: FocusKeyManager<SdsMenuItemComponent>;\n\n  /** Menu items inside the current menu. */\n  private _items: SdsMenuItemComponent[] = [];\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Stores <sds-menu> classes */\n  private _previousPanelClass: string;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: { [key: string]: boolean } = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Grab the component template */\n  @ViewChild(TemplateRef, { static: false }) templateRef: TemplateRef<any>;\n\n  /**\n   * Size of menu component.\n   * Affects the font-size of the menu items and\n   * the size of the close button in the menu header\n   */\n  @Input() size: MenuSizes;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX {\n    return this._xPosition;\n  }\n  set xPosition(value: MenuPositionX) {\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY {\n    return this._yPosition;\n  }\n  set yPosition(value: MenuPositionY) {\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Whether menu panel overlaps trigger element */\n  @Input()\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger = false;\n\n  /** Transfer classes from the sds-menu to the overlay container */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n    // Remove previous classes from current set of classes\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    // Adds new classes to current set of classes\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      // Remove all classes from <sds-menu>\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {}\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<SdsMenuItemComponent>(this._items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Focus the first item in the menu */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /** Adds classes to the menu panel based on its position */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['sds-menu-before'] = posX === 'before';\n    classes['sds-menu-after'] = posX === 'after';\n    classes['sds-menu-above'] = posY === 'above';\n    classes['sds-menu-below'] = posY === 'below';\n  }\n\n  /** Adds a menu item with the menu. */\n  addItem(item: SdsMenuItemComponent) {\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n    }\n  }\n\n  /** Inserts a menu item at an index */\n  insertItem(item: SdsMenuItemComponent, index: number) {\n    if (this._items.indexOf(item) === -1 && index < this._items.length) {\n      this._items.splice(index, 0, item);\n    }\n  }\n\n  /** Removes an item from the menu. */\n  removeItem(item: SdsMenuItemComponent) {\n    const index = this._items.indexOf(item);\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n    }\n  }\n\n  /** Handle a keyboard event from the menu */\n  _handleKeydown(event: KeyboardEvent) {\n    // tslint:disable-next-line: deprecation\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {}\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    // Scroll the content element to the top as soon as the animation starts.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "addItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void | \"click\" | \"keydown\" | \"tab\">",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "focusFirstItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "insertItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "overlapTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "parentMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsMenuInterface",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "removeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "setPositionClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuSizes",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "xPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuPositionX",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "yPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuPositionY",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Menu Interface</p>\n",
            "rawdescription": "\nMenu Interface",
            "methods": []
        },
        {
            "name": "SdsTreeTableData",
            "id": "interface-SdsTreeTableData-2de254029f4977193b1a229ed03ecfb27f77d8fec42c255555ccc309f57e4bf826b8ad6609574170803ef5e6d4c4c3efbaad7b03fe2c9e76f2c420583001e1f8",
            "file": "libs/packages/components/src/lib/tree-table/tree-table.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SdsTreeTableData {\n  /** Id to use to uniquely idetntify the row */\n  id: string;\n\n  /** Children of row - by default, children rows will be collapsed */\n  children?: SdsTreeTableData[];\n\n  /**\n   * Total number of children for this table data. If this value\n   * is greater than children's length, then a button will be shown\n   * to users to load remaining children\n   */\n  totalChildren: number;\n\n  /**\n   * Additional data to add in - primarly useful for adding in data\n   * to display in the table\n   */\n  [key: string]: any;\n\n  /**\n   * Whether this row is expanded to display its children or not\n   */\n  expanded?: boolean;\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsTreeTableData[]",
                    "optional": true,
                    "description": "<p>Children of row - by default, children rows will be collapsed</p>\n",
                    "line": 6,
                    "rawdescription": "\nChildren of row - by default, children rows will be collapsed"
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether this row is expanded to display its children or not</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nWhether this row is expanded to display its children or not\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Id to use to uniquely idetntify the row</p>\n",
                    "line": 3,
                    "rawdescription": "\nId to use to uniquely idetntify the row"
                },
                {
                    "name": "totalChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Total number of children for this table data. If this value\nis greater than children&#39;s length, then a button will be shown\nto users to load remaining children</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nTotal number of children for this table data. If this value\nis greater than children's length, then a button will be shown\nto users to load remaining children\n"
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-2de254029f4977193b1a229ed03ecfb27f77d8fec42c255555ccc309f57e4bf826b8ad6609574170803ef5e6d4c4c3efbaad7b03fe2c9e76f2c420583001e1f8",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdditional data to add in - primarly useful for adding in data\nto display in the table\n",
                    "description": "<p>Additional data to add in - primarly useful for adding in data\nto display in the table</p>\n"
                }
            ],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SdsTruncateTextData",
            "id": "interface-SdsTruncateTextData-1c2a0378b6c97195f412acbbea88810f69a975a7589d6e980f77484cfa6a739ee747f73343adb57c12b0f3a69e05ee3b59d189289047c45df63a178c5eb0998e",
            "file": "libs/packages/components/src/lib/truncate-text/truncate-text-container.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject, HostBinding, HostListener } from '@angular/core';\nimport { SDS_TRUNCATED_TEXT_DATA } from './truncates-text-base';\nimport { sdsTruncateTextAnimations } from './truncate-text-animations';\n\nexport interface SdsTruncateTextData {\n  text: string;\n}\n\n@Component({\n  selector: 'sds-truncated-text-container',\n  template: ` <div class=\"sds-overlay maxw-mobile radius-overlay padding-2\">{{ data.text }}</div> `,\n  animations: [sdsTruncateTextAnimations.container],\n})\nexport class SdsTruncatedTextContainerComponent {\n  @HostBinding('@container') _animationState = 'void';\n\n  constructor(@Inject(SDS_TRUNCATED_TEXT_DATA) public data: SdsTruncateTextData) {}\n\n  /** Starts the animation. */\n  startAnimation() {\n    this._animationState = 'enter';\n  }\n\n  /** Resets the animation to its initial state. */\n  resetAnimation() {\n    this._animationState = 'void';\n  }\n\n  /** Intentionally left empty to trigger change detection */\n  @HostListener('@container.done')\n  _onAnimationDone() {}\n}\n",
            "properties": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Selectable",
            "id": "interface-Selectable-d550703c6b73d6667c874b14d4afa291954817f51a1b13fe8b351b6a99a62145fc6a437964b3bb7bf1ec656456c347b5f33ab3f86bc52ee26e2b9cea734b24be",
            "file": "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface INavigationLink {\n  /**\n   * Text to be displayed in the link\n   */\n  text: string;\n\n  /**\n   * Navigation Route\n   */\n  route: string;\n\n  /**\n   * Internal Angualr Routes, External HREF, EVENT: event on parent component\n   */\n  mode: NavigationMode;\n}\n\nexport enum NavigationMode {\n  INTERNAL,\n  EXTERNAL,\n  EVENT,\n  LABEL,\n}\n\nexport interface Selectable {\n  /**\n   * Identifier for the item when search for selected\n   */\n  id: string;\n\n  /**\n   * Status of if the item is selected\n   */\n  selected?: boolean;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Identifier for the item when search for selected</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nIdentifier for the item when search for selected\n"
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Status of if the item is selected</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nStatus of if the item is selected\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SlideOutConfig",
            "id": "interface-SlideOutConfig-67e67916f5770ae6b75f2ae3a1fc9f63502364be99417876edf62318ced4d802a03118d36c7beabda7546ef460351c59efb11f3599a578d63871ecc4f9066fa3",
            "file": "libs/packages/components/src/lib/dialog/dialog-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewContainerRef } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/** Custom Slide Out Panel configurations */\nexport interface SlideOutConfig {\n  /** Width of the slide out panel */\n  width?: string;\n\n  /** Time that it takes to open and close the panel */\n  time?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the SdsDialog service.\n */\nexport class SdsDialogConfig<D = any> {\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop? = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass? = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose? = false;\n\n  /** Width of the dialog. */\n  width? = '';\n\n  /** Height of the dialog. */\n  height? = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus? = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus? = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation? = true;\n\n  /**\n   * Wheter the dialog its an alert\n   */\n  alert?: 'warning' | 'info' | 'error' | 'success';\n\n  /**\n   * Whether to display the close button in dialog header\n   */\n  displayCloseBtn? = true;\n\n  /**\n   * Whether dialog is a slide-out. Changes enter and exit animation, and adds\n   * class `dialog-slide-out` to container\n   */\n  slideOut?: boolean | SlideOutConfig = false;\n}\n",
            "properties": [
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Time that it takes to open and close the panel</p>\n",
                    "line": 29,
                    "rawdescription": "\nTime that it takes to open and close the panel"
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Width of the slide out panel</p>\n",
                    "line": 26,
                    "rawdescription": "\nWidth of the slide out panel"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Custom Slide Out Panel configurations</p>\n",
            "rawdescription": "\nCustom Slide Out Panel configurations",
            "methods": []
        },
        {
            "name": "TriggerTypeModel",
            "id": "interface-TriggerTypeModel-caad3d3fc3245deabb3a839ad4c7f38ed7257320173d39583b30422c1440a9b17b8a214a5475e3450d163713607a2dcea12570e39a9a3369ab02c698bffa9b23",
            "file": "libs/packages/components/src/lib/actions-menu/action-menu.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ActionMenuMode {\n  SHOWN,\n  DISABLED,\n  HIDDEN,\n}\n\nexport interface TriggerTypeModel {\n  type: string;\n  shadow: boolean;\n}\n\nexport interface ActionMenuActions {\n  id: string;\n  text: string;\n  mode?: ActionMenuMode;\n}\n\nexport interface ActionMenuModel {\n  trigger: TriggerTypeModel;\n  label?: string;\n  actions: ActionMenuActions[];\n}\n",
            "properties": [
                {
                    "name": "shadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "VPInterface",
            "id": "interface-VPInterface-33dd6138baf80fb90dc898a33d6ab8a59212b8835d75d34af37accac9bc1b4e67f4320eb9b90cfc24065a37ab25824857c4afe51b314bd3d76adfdb8fba8630a",
            "file": "libs/packages/components/src/lib/video-player/video-player.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VPInterface {\n  sourceWebm: string;\n  sourceMp4: string;\n  height: string;\n  width: string;\n  caption: string;\n  poster: string;\n  id: string;\n  seekInterval: number;\n  debug: boolean;\n  preload: string;\n  description?: string;\n}\n",
            "properties": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "debug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "poster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "preload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "seekInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "sourceMp4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "sourceWebm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "SdsDialogService",
            "id": "injectable-SdsDialogService-9c58869fc8313b7260528df9ebbbf8fcfbb39422913e1526b968a445c7680e7bef4b6a67d969b4b491c47ffc08f9756be3611af6875c7cbf7525a4464dc8b489",
            "file": "libs/packages/components/src/lib/dialog/dialog.ts",
            "properties": [
                {
                    "name": "_afterAllClosedAtThisLevel",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "_afterOpenedAtThisLevel",
                    "defaultValue": "new Subject<SdsDialogRef<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "_ariaHiddenElements",
                    "defaultValue": "new Map<Element, string | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_openDialogsAtThisLevel",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsDialogRef<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_scrollStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_slideOutScrollStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "afterAllClosed",
                    "defaultValue": "defer<any>(() =>\n    this.openDialogs.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "<p>Stream that emits when all open dialog have finished closing.\nWill emit on subscribe if there are no open dialogs to begin with.</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nStream that emits when all open dialog have finished closing.\nWill emit on subscribe if there are no open dialogs to begin with.\n",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_attachDialogContainer",
                    "args": [
                        {
                            "name": "overlay",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SdsDialogContainerComponent",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttaches an SdsDialogContainerComponent to a dialog's already-created overlay.\n",
                    "description": "<p>Attaches an SdsDialogContainerComponent to a dialog&#39;s already-created overlay.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8156,
                                "end": 8163,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "overlay"
                            },
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8150,
                                "end": 8155,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the dialog&#39;s underlying overlay.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8222,
                                "end": 8228,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8216,
                                "end": 8221,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 8261,
                                "end": 8268,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise resolving to a ComponentRef for the attached container.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_attachDialogContent",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dialogContainer",
                            "type": "SdsDialogContainerComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SdsDialogRef<T, R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttaches the user-provided component to the already-created SdsDialogContainerComponent.\n    or a TemplateRef to instantiate as the content.\n",
                    "description": "<p>Attaches the user-provided component to the already-created SdsDialogContainerComponent.\n    or a TemplateRef to instantiate as the content.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9014,
                                "end": 9036,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "componentOrTemplateRef"
                            },
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9008,
                                "end": 9013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The type of component being loaded into the dialog,\nor a TemplateRef to instantiate as the content.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9158,
                                "end": 9173,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dialogContainer"
                            },
                            "type": "SdsDialogContainerComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9152,
                                "end": 9157,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the wrapping SdsDialogContainerComponent.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9241,
                                "end": 9251,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "overlayRef"
                            },
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9235,
                                "end": 9240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the overlay in which the dialog resides.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9318,
                                "end": 9324,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9312,
                                "end": 9317,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 9357,
                                "end": 9364,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise resolving to the SdsDialogRef that should be returned to the user.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_closeDialogs",
                    "args": [
                        {
                            "name": "dialogs",
                            "type": "SdsDialogRef<any>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCloses all of the dialogs in an array.",
                    "description": "<p>Closes all of the dialogs in an array.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dialogs",
                            "type": "SdsDialogRef<any>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_createInjector",
                    "args": [
                        {
                            "name": "config",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dialogRef",
                            "type": "SdsDialogRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dialogContainer",
                            "type": "SdsDialogContainerComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PortalInjector",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a custom injector to be used inside the dialog. This allows a component loaded inside\nof a dialog to close itself and, optionally, to return a value.\n",
                    "description": "<p>Creates a custom injector to be used inside the dialog. This allows a component loaded inside\nof a dialog to close itself and, optionally, to return a value.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10972,
                                "end": 10978,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10966,
                                "end": 10971,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Config object that is used to construct the dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 11043,
                                "end": 11052,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dialogRef"
                            },
                            "type": "SdsDialogRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11037,
                                "end": 11042,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the dialog.</p>\n"
                        },
                        {
                            "name": "dialogContainer",
                            "type": "SdsDialogContainerComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 11163,
                                "end": 11170,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The custom injector that can be used inside the dialog.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_createOverlay",
                    "args": [
                        {
                            "name": "config",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates the overlay into which the dialog will be loaded.\n",
                    "description": "<p>Creates the overlay into which the dialog will be loaded.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6800,
                                "end": 6806,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6794,
                                "end": 6799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 6839,
                                "end": 6846,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise resolving to the OverlayRef for the created overlay.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [
                        {
                            "name": "dialogConfig",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates an overlay config from a dialog config.\n",
                    "description": "<p>Creates an overlay config from a dialog config.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7162,
                                "end": 7174,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dialogConfig"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7156,
                                "end": 7161,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 7207,
                                "end": 7214,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The overlay configuration.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_hideNonDialogContentFromAssistiveTechnology",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides all of the content that isn't an overlay from assistive technology.\n",
                    "description": "<p>Hides all of the content that isn&#39;t an overlay from assistive technology.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_removeOpenDialog",
                    "args": [
                        {
                            "name": "dialogRef",
                            "type": "SdsDialogRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves a dialog from the array of open dialogs.\n",
                    "description": "<p>Removes a dialog from the array of open dialogs.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12432,
                                "end": 12441,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dialogRef"
                            },
                            "type": "SdsDialogRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12426,
                                "end": 12431,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Dialog to be removed.</p>\n"
                        }
                    ]
                },
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses all of the currently-open dialogs.\n",
                    "description": "<p>Closes all of the currently-open dialogs.</p>\n"
                },
                {
                    "name": "getDialogById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SdsDialogRef | undefined",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFinds an open dialog by its id.\n",
                    "description": "<p>Finds an open dialog by its id.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6264,
                                "end": 6266,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6258,
                                "end": 6263,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>ID to use when looking up the dialog.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SdsDialogConfig<D>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "SdsDialogRef<T, R>",
                    "typeParameters": [
                        "T",
                        "D",
                        "R"
                    ],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens a modal dialog containing the given component.\n    or a TemplateRef to instantiate as the dialog content.\n",
                    "description": "<p>Opens a modal dialog containing the given component.\n    or a TemplateRef to instantiate as the dialog content.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4342,
                                "end": 4364,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "componentOrTemplateRef"
                            },
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4336,
                                "end": 4341,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Type of the component to load into the dialog,\nor a TemplateRef to instantiate as the dialog content.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4488,
                                "end": 4494,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig<D>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4482,
                                "end": 4487,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Extra configuration options.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4530,
                                "end": 4537,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Reference to the newly-opened dialog.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service to open modal dialogs.</p>\n",
            "rawdescription": "\n\nService to open modal dialogs.\n",
            "sourceCode": "import { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentPortal, ComponentType, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { Location } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport { defer, Observable, of as observableOf, Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { SdsDialogConfig } from './dialog-config';\nimport { SdsDialogContainerComponent } from './dialog-container.component';\nimport { SdsDialogRef } from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const SDS_DIALOG_DATA = new InjectionToken<any>('SdsDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const SDS_DIALOG_DEFAULT_OPTIONS = new InjectionToken<SdsDialogConfig>('sds-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const SDS_DIALOG_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('sds-dialog-scroll-strategy');\n\nexport const SDS_SLIDE_OUT_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('sds-slide-out-scroll-strategy');\n\n/** @docs-private */\nexport function SDS_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const SDS_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: SDS_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nexport const SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER = {\n  provide: SDS_SLIDE_OUT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Service to open modal dialogs.\n */\n@Injectable()\nexport class SdsDialogService implements OnDestroy {\n  private _openDialogsAtThisLevel: SdsDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<SdsDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string | null>();\n  private _scrollStrategy: () => ScrollStrategy;\n  private _slideOutScrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): SdsDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<SdsDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<any> = defer<any>(() =>\n    this.openDialogs.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined))\n  );\n\n  constructor(\n    private _overlay: Overlay,\n    private _injector: Injector,\n    @Optional() private _location: Location,\n    @Optional() @Inject(SDS_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: SdsDialogConfig,\n    @Inject(SDS_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n    @Inject(SDS_SLIDE_OUT_SCROLL_STRATEGY) slideOutScrollStrategy: any,\n    @Optional() @SkipSelf() private _parentDialog: SdsDialogService,\n    private _overlayContainer: OverlayContainer\n  ) {\n    this._scrollStrategy = scrollStrategy;\n    this._slideOutScrollStrategy = slideOutScrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(\n    componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n    config?: SdsDialogConfig<D>\n  ): SdsDialogRef<T, R> {\n    // Convenience widths names: small | medium | large\n    // added to help with standardization\n    if (config && config.width) {\n      switch (config.width) {\n        case 'small': {\n          config.width = '370px';\n          break;\n        }\n        case 'medium': {\n          config.width = '730px';\n          break;\n        }\n        case 'large': {\n          config.width = '960px';\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n    }\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new SdsDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): SdsDialogRef<any> | undefined {\n    return this.openDialogs.find((dialog) => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: SdsDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: SdsDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy:\n        dialogConfig.scrollStrategy ||\n        (dialogConfig.slideOut ? this._slideOutScrollStrategy() : this._scrollStrategy()),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation,\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an SdsDialogContainerComponent to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: SdsDialogConfig): SdsDialogContainerComponent {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([[SdsDialogConfig, config]]));\n    const containerPortal = new ComponentPortal(SdsDialogContainerComponent, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<SdsDialogContainerComponent>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created SdsDialogContainerComponent.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping SdsDialogContainerComponent.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the SdsDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n    componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n    dialogContainer: SdsDialogContainerComponent,\n    overlayRef: OverlayRef,\n    config: SdsDialogConfig\n  ): SdsDialogRef<T, R> {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new SdsDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!, <any>{ $implicit: config.data, dialogRef })\n      );\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n        new ComponentPortal(componentOrTemplateRef, undefined, injector)\n      );\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n    config: SdsDialogConfig,\n    dialogRef: SdsDialogRef<T>,\n    dialogContainer: SdsDialogContainerComponent\n  ): PortalInjector {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The SdsDialogContainerComponent is injected in the portal as the SdsDialogContainerComponent and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the SdsDialogContainerComponent is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [SdsDialogContainerComponent, dialogContainer],\n      [SDS_DIALOG_DATA, config.data],\n      [SdsDialogRef, dialogRef],\n    ]);\n\n    if (config.direction && (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf(),\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: SdsDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        const sibling = siblings[i];\n\n        if (\n          sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')\n        ) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: SdsDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config?: SdsDialogConfig, defaultOptions?: SdsDialogConfig): SdsDialogConfig {\n  return { ...defaultOptions, ...config };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_defaultOptions",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scrollStrategy",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "slideOutScrollStrategy",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_parentDialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_overlayContainer",
                        "type": "OverlayContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 93,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_defaultOptions",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scrollStrategy",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "slideOutScrollStrategy",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentDialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlayContainer",
                        "type": "OverlayContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "openDialogs": {
                    "name": "openDialogs",
                    "getSignature": {
                        "name": "openDialogs",
                        "type": "[]",
                        "returnType": "SdsDialogRef[]",
                        "line": 73,
                        "rawdescription": "\nKeeps track of the currently-open dialogs.",
                        "description": "<p>Keeps track of the currently-open dialogs.</p>\n"
                    }
                },
                "afterOpened": {
                    "name": "afterOpened",
                    "getSignature": {
                        "name": "afterOpened",
                        "type": "",
                        "returnType": "Subject<SdsDialogRef<any>>",
                        "line": 78,
                        "rawdescription": "\nStream that emits when a dialog has been opened.",
                        "description": "<p>Stream that emits when a dialog has been opened.</p>\n"
                    }
                },
                "_afterAllClosed": {
                    "name": "_afterAllClosed",
                    "getSignature": {
                        "name": "_afterAllClosed",
                        "type": "",
                        "returnType": "Subject<void>",
                        "line": 82
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Button",
            "id": "class-Button-0221df8c4d484f82ecb40d812cdf63ce34473a403993de59dc07df92c0c2557c4d5118881169df36e23f05bcc4b82a24cd9e5533bdf35c6c8ad5b7c7134ca3bc",
            "file": "libs/packages/components/src/lib/search-result-list/model/search-results.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class SearchModel {\n  results: any[];\n  metadata: {\n    messages: Message[] | TemplateRef<any>;\n  };\n}\nexport class Message {\n  type: string;\n  title: string;\n  message: string;\n  classes: string;\n  buttons: Button[];\n}\nexport class Button {\n  id: string;\n  text: string;\n  classes: string;\n  action: any;\n  ariaLabel?: string;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "KeyHelper",
            "id": "class-KeyHelper-3bf568bea2912d8ac35972730295d7fb5740497b4463866818dafb22720bbd63399c0d23af3d801ba1505947bd2a7d419d481080f31c49af54f000569efa7c20",
            "file": "libs/packages/components/src/lib/key-helper/key-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class KeyHelper {\n  private _allowedKeys: string[] = [];\n\n  private _currentlySupported = [\n    'alt',\n    'enter',\n    'up',\n    'down',\n    'left',\n    'right',\n    'tab',\n    'esc',\n    'space',\n    'shift',\n    'backspace',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '0',\n    'delete',\n  ];\n\n  constructor(...keys) {\n    this._setAllowedKeys(...keys);\n  }\n\n  public isAllowed(event): boolean {\n    const val = this._allowedKeys.reduce((val, key) => {\n      return KeyHelper.is(key, event) || val;\n    }, false);\n    return val;\n  }\n\n  private _setAllowedKeys(...keys) {\n    keys.forEach((key) => {\n      if (this._currentlySupported.indexOf(key) !== -1) {\n        this._allowedKeys.push(key);\n      } else {\n        const ok = this._allowedToString();\n        const msg = `Only supports ${ok} at this time`;\n        throw new TypeError(msg);\n      }\n    });\n  }\n\n  private _allowedToString(): string {\n    return this._allowedKeys.join(', ');\n  }\n\n  public static getKeyCode(event: any): string {\n    if (!event) {\n      return undefined;\n    } else if (event.key) {\n      return event.key;\n    } else if (event.code) {\n      return event.code;\n    } else if (event.keyIdentifier) {\n      return event.keyIdentifier;\n    } else {\n      return undefined;\n    }\n  }\n\n  public static getNumberFromKey(event): number {\n    const tests = [\n      KeyHelper._zero,\n      KeyHelper._one,\n      KeyHelper._two,\n      KeyHelper._three,\n      KeyHelper._four,\n      KeyHelper._five,\n      KeyHelper._six,\n      KeyHelper._seven,\n      KeyHelper._eight,\n      KeyHelper._nine,\n    ];\n\n    return tests.reduce((val: number | undefined, test: Function) => {\n      return val !== undefined ? val : test(event);\n    }, undefined);\n  }\n\n  public static is(validKeyParam: string, event: KeyboardEvent | any): boolean {\n    let lowercased = validKeyParam.toLowerCase();\n    switch (lowercased) {\n      case 'alt':\n        return this._isAltKey(event);\n      case 'enter':\n        return this._isEnter(event);\n      case 'up':\n        return this._isArrowUp(event);\n      case 'down':\n        return this._isArrowDown(event);\n      case 'left':\n        return this._isArrowLeft(event);\n      case 'right':\n        return this._isArrowRight(event);\n      case 'tab':\n        return this._isTab(event);\n      case 'esc':\n        return this._isEscape(event);\n      case 'space':\n        return this._isSpace(event);\n      case 'shift':\n        return this._isShift(event);\n      case 'backspace':\n        return this._isBackspace(event);\n      case 'delete':\n        return this._isDelete(event);\n      case '0':\n        return this._isExpectedNumber(0, event);\n      case '1':\n        return this._isExpectedNumber(1, event);\n      case '2':\n        return this._isExpectedNumber(2, event);\n      case '3':\n        return this._isExpectedNumber(3, event);\n      case '4':\n        return this._isExpectedNumber(4, event);\n      case '5':\n        return this._isExpectedNumber(5, event);\n      case '6':\n        return this._isExpectedNumber(6, event);\n      case '7':\n        return this._isExpectedNumber(7, event);\n      case '8':\n        return this._isExpectedNumber(8, event);\n      case '9':\n        return this._isExpectedNumber(9, event);\n      default:\n        return false;\n    }\n  }\n\n  private static _isEnter(e: KeyboardEvent | any) {\n    if (\n      e.code === 'Enter' ||\n      e.key === 'Enter' ||\n      e.keyIdentifier === 'Enter' ||\n      e.which === 13 ||\n      e.charCode === 13 ||\n      e.keyCode === 13\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  private static _isAltKey(e: KeyboardEvent | any) {\n    if (\n      e.code === 'Alt' ||\n      e.key === 'Alt' ||\n      e.keyIdentifier === 'Alt' ||\n      e.which === 18 ||\n      e.charCode === 18 ||\n      e.keyCode === 18\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isArrowUp(e: KeyboardEvent | any) {\n    if (\n      e.code === 'ArrowUp' ||\n      e.key === 'ArrowUp' ||\n      e.key === 'Up' ||\n      e.keyIdentifier === 'Up' ||\n      e.which === 38 ||\n      e.keyCode === 38\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isArrowDown(e: KeyboardEvent | any) {\n    if (\n      e.code === 'ArrowDown' ||\n      e.key === 'ArrowDown' ||\n      e.key === 'Down' ||\n      e.keyIdentifier === 'Down' ||\n      e.which === 40 ||\n      e.keyCode === 40\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isArrowLeft(e: KeyboardEvent | any) {\n    if (\n      e.code === 'ArrowLeft' ||\n      e.key === 'ArrowLeft' ||\n      e.key === 'Left' ||\n      e.keyIdentifier === 'Left' ||\n      e.which === 37 ||\n      e.keyCode === 37\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isArrowRight(e: KeyboardEvent | any) {\n    if (\n      e.code === 'ArrowRight' ||\n      e.key === 'ArrowRight' ||\n      e.key === 'Right' ||\n      e.keyIdentifier === 'Right' ||\n      e.which === 39 ||\n      e.keyCode === 39\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isTab(e: KeyboardEvent | any) {\n    if (e.code === 'Tab' || e.key === 'Tab' || e.keyIdentifier === 'U+0009' || e.which === 9 || e.keyCode === 9) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isEscape(e: KeyboardEvent | any) {\n    if (\n      e.code === 'Escape' ||\n      e.key === 'Escape' ||\n      e.key === 'Esc' ||\n      e.keyIdentifier === 'U+001B' ||\n      e.which === 27 ||\n      e.keyCode === 27\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isSpace(e: KeyboardEvent | any) {\n    if (\n      e.code === 'Space' ||\n      e.key === ' ' ||\n      e.key === 'Spacebar' ||\n      e.keyIdentifier === 'U+0020' ||\n      e.which === 32 ||\n      e.keyCode === 32\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isShift(e: KeyboardEvent | any) {\n    if (\n      e.code === 'ShiftLeft' ||\n      e.code === 'ShiftRight' ||\n      e.key === 'Shift' ||\n      e.keyIdentifier === 'Shift' ||\n      e.which === 16 ||\n      e.keyCode === 16\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isBackspace(e: KeyboardEvent | any) {\n    if (\n      e.code === 'Backspace' ||\n      e.key === 'Backspace' ||\n      e.keyIdentifier === 'U+0008' ||\n      e.which === 8 ||\n      e.keyCode === 8\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isDelete(e: KeyboardEvent | any) {\n    if (\n      e.code === 'Delete' ||\n      e.key === 'Delete' ||\n      e.keyIdentifier === 'U+007F' ||\n      e.which === 46 ||\n      e.keyCode === 46\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _zero(e): number {\n    if (\n      e.code === 'Digit0' ||\n      e.code === 'Numpad0' ||\n      e.key === 0 ||\n      e.keyCode === 48 ||\n      e.keyCode === 96 ||\n      e.keyIdentifier === 'U+0030' ||\n      e.which === 48\n    ) {\n      return 0;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _one(e): number {\n    if (\n      e.code === 'Digit1' ||\n      e.code === 'Numpad1' ||\n      e.key === 1 ||\n      e.keyCode === 49 ||\n      e.keyCode === 97 ||\n      e.keyIdentifier === 'U+0031' ||\n      e.which === 49\n    ) {\n      return 1;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _two(e): number {\n    if (\n      e.code === 'Digit2' ||\n      e.code === 'Numpad2' ||\n      e.key === 2 ||\n      e.keyCode === 50 ||\n      e.keyCode === 98 ||\n      e.keyIdentifier === 'U+0032' ||\n      e.which === 50\n    ) {\n      return 2;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _three(e): number {\n    if (\n      e.code === 'Digit3' ||\n      e.code === 'Numpad3' ||\n      e.key === 3 ||\n      e.keyCode === 51 ||\n      e.keyCode === 99 ||\n      e.keyIdentifier === 'U+0033' ||\n      e.which === 51\n    ) {\n      return 3;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _four(e): number {\n    if (\n      e.code === 'Digit4' ||\n      e.code === 'Numpad4' ||\n      e.key === 4 ||\n      e.keyCode === 52 ||\n      e.keyCode === 100 ||\n      e.keyIdentifier === 'U+0034' ||\n      e.which === 52\n    ) {\n      return 4;\n    } else {\n      return undefined;\n    }\n  }\n  private static _five(e): number {\n    if (\n      e.code === 'Digit5' ||\n      e.code === 'Numpad5' ||\n      e.key === 5 ||\n      e.keyCode === 53 ||\n      e.keyCode === 101 ||\n      e.keyIdentifier === 'U+0035' ||\n      e.which === 53\n    ) {\n      return 5;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _six(e): number {\n    if (\n      e.code === 'Digit6' ||\n      e.code === 'Numpad6' ||\n      e.key === 6 ||\n      e.keyCode === 54 ||\n      e.keyCode === 102 ||\n      e.keyIdentifier === 'U+0036' ||\n      e.which === 54\n    ) {\n      return 6;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _seven(e): number {\n    if (\n      e.code === 'Digit7' ||\n      e.code === 'Numpad7' ||\n      e.key === 7 ||\n      e.keyCode === 55 ||\n      e.keyCode === 103 ||\n      e.keyIdentifier === 'U+0037' ||\n      e.which === 55\n    ) {\n      return 7;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _eight(e): number {\n    if (\n      e.code === 'Digit8' ||\n      e.code === 'Numpad8' ||\n      e.key === 8 ||\n      e.keyCode === 56 ||\n      e.keyCode === 104 ||\n      e.keyIdentifier === 'U+0038' ||\n      e.which === 56\n    ) {\n      return 8;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _nine(e): number {\n    if (\n      e.code === 'Digit9' ||\n      e.code === 'Numpad9' ||\n      e.key === 9 ||\n      e.keyCode === 57 ||\n      e.keyCode === 105 ||\n      e.keyIdentifier === 'U+0039' ||\n      e.which === 57\n    ) {\n      return 9;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _isExpectedNumber(expected, event): boolean {\n    return expected === KeyHelper.getNumberFromKey(event);\n  }\n}\n\nexport enum KEYS {\n  'ENTER' = 'enter',\n  'ALT' = 'alt',\n  'UP' = 'up',\n  'DOWN' = 'down',\n  'LEFT' = 'left',\n  'RIGHT' = 'right',\n  'TAB' = 'tab',\n  'ESC' = 'esc',\n  'SPACE' = 'space',\n  'SHIFT' = 'shift',\n  'BACKSPACE' = 'backspace',\n  'ONE' = '1',\n  'TWO' = '2',\n  'THREE' = '3',\n  'FOUR' = '4',\n  'FIVE' = '5',\n  'SIX' = '6',\n  'SEVEN' = '7',\n  'EIGHT' = '8',\n  'NINE' = '9',\n  'ZERO' = '0',\n  'DELETE' = 'delete',\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "keys",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "keys",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_allowedKeys",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currentlySupported",
                    "defaultValue": "[\n    'alt',\n    'enter',\n    'up',\n    'down',\n    'left',\n    'right',\n    'tab',\n    'esc',\n    'space',\n    'shift',\n    'backspace',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '0',\n    'delete',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_allowedToString",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_eight",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 438,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_five",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_four",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 375,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isAltKey",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isArrowDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isArrowLeft",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isArrowRight",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isArrowUp",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isBackspace",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isDelete",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isEnter",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isEscape",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isExpectedNumber",
                    "args": [
                        {
                            "name": "expected",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 470,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "expected",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isShift",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isSpace",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isTab",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_nine",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 454,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_one",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setAllowedKeys",
                    "args": [
                        {
                            "name": "keys",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "keys",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_seven",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 422,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_six",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 406,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_three",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 359,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_two",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_zero",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKeyCode",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNumberFromKey",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "is",
                    "args": [
                        {
                            "name": "validKeyParam",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "validKeyParam",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAllowed",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Message",
            "id": "class-Message-0221df8c4d484f82ecb40d812cdf63ce34473a403993de59dc07df92c0c2557c4d5118881169df36e23f05bcc4b82a24cd9e5533bdf35c6c8ad5b7c7134ca3bc",
            "file": "libs/packages/components/src/lib/search-result-list/model/search-results.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class SearchModel {\n  results: any[];\n  metadata: {\n    messages: Message[] | TemplateRef<any>;\n  };\n}\nexport class Message {\n  type: string;\n  title: string;\n  message: string;\n  classes: string;\n  buttons: Button[];\n}\nexport class Button {\n  id: string;\n  text: string;\n  classes: string;\n  action: any;\n  ariaLabel?: string;\n}\n",
            "properties": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NavigationHelper",
            "id": "class-NavigationHelper-6ac66c1743aba421bdae1253d8bb6143d69700e6dc48b88a8fdf50b84462a4622ffacaf9dbba7bb20923092eb6c03e6bfec98286f4aa10a8152d1a72b224933e",
            "file": "libs/packages/components/src/lib/common-navigation/navigation-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { INavigationLink, NavigationMode } from './common-navigation-model';\nexport class NavigationHelper {\n  /**\n   * checks if link is internal\n   * @param link\n   */\n  isLinkInternal(link: INavigationLink) {\n    return link.mode === NavigationMode.INTERNAL;\n  }\n\n  /**\n   * checks if link is external\n   * @param link\n   */\n  isLinkExternal(link: INavigationLink) {\n    return link.mode === NavigationMode.EXTERNAL;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "isLinkExternal",
                    "args": [
                        {
                            "name": "link",
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if link is external\n",
                    "description": "<p>checks if link is external</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 317,
                                "end": 321,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "link"
                            },
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 311,
                                "end": 316,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isLinkInternal",
                    "args": [
                        {
                            "name": "link",
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if link is internal\n",
                    "description": "<p>checks if link is internal</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 159,
                                "end": 163,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "link"
                            },
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 153,
                                "end": 158,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NavigationLink",
            "id": "class-NavigationLink-e5785dfc4d9115a2518d2c6b4615940f4a514fe306a83188a65771f6d4a6c52ba606704966a981b1f231a1a18e2eff023959ee33b9eed0ceed081728ef5592ac",
            "file": "libs/packages/components/src/lib/side-navigation/model/side-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { QueryParamsHandling } from '@angular/router';\nimport { INavigationLink, NavigationMode, Selectable } from '../../common-navigation/common-navigation-model';\n\nexport class SideNavigationModel {\n  /**\n   *\n   */\n  navigationLinks: NavigationLink[];\n}\n\nexport class NavigationLink implements Selectable, INavigationLink {\n  /**\n   * Internal Angualr Routes, External HREF, EVENT: event on parent component\n   */\n  mode: NavigationMode;\n\n  /**\n   * Text to be displayed in the link or button\n   */\n  text: string;\n\n  /**\n   * Navigation Route\n   */\n  route: string;\n\n  /**\n   * List of child navigation items that will show when no route is provieded\n   */\n  children?: NavigationLink[];\n\n  /**\n   * Identifier for the item when search for selected\n   */\n  id: string;\n\n  /**\n   * Status of if the item is selected\n   */\n  selected?: boolean;\n\n  /**\n   * Query string paramaters supporeted with external and internal links\n   * ex. { 'name': 'value',...}\n   */\n  queryParams?: {\n    [k: string]: any;\n  };\n\n  queryParamsHandling?: QueryParamsHandling;\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationLink[]",
                    "optional": true,
                    "description": "<p>List of child navigation items that will show when no route is provieded</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nList of child navigation items that will show when no route is provieded\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Identifier for the item when search for selected</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nIdentifier for the item when search for selected\n"
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationMode",
                    "optional": false,
                    "description": "<p>Internal Angualr Routes, External HREF, EVENT: event on parent component</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nInternal Angualr Routes, External HREF, EVENT: event on parent component\n"
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "<p>Query string paramaters supporeted with external and internal links\nex. { &#39;name&#39;: &#39;value&#39;,...}</p>\n",
                    "line": 46,
                    "rawdescription": "\n\nQuery string paramaters supporeted with external and internal links\nex. { 'name': 'value',...}\n"
                },
                {
                    "name": "queryParamsHandling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryParamsHandling",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Navigation Route</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nNavigation Route\n"
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Status of if the item is selected</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nStatus of if the item is selected\n"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text to be displayed in the link or button</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nText to be displayed in the link or button\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Selectable",
                "INavigationLink"
            ]
        },
        {
            "name": "PaginationConfigurationModel",
            "id": "class-PaginationConfigurationModel-928eb0f2bea97c7ed2a6ce196614120a155966f22440f18f6f0e2bac56f5e53f5e421624a77692797b2e82050df15cdaf70f5ffd21d548e891d9ed213b69e9cc",
            "file": "libs/packages/components/src/lib/pagination/model/paginationModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PaginationConfigurationModel {\n  /**\n   * used to distinguish fields\n   */\n  id: string;\n}\n\nexport class PaginationModel {\n  /**\n   * current page number\n   */\n  pageNumber: number;\n\n  /**\n   * size of page ex 25, 50,100\n   */\n  pageSize: number;\n\n  /**\n   * total number of pages\n   */\n  totalPages: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>used to distinguish fields</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nused to distinguish fields\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaginationModel",
            "id": "class-PaginationModel-928eb0f2bea97c7ed2a6ce196614120a155966f22440f18f6f0e2bac56f5e53f5e421624a77692797b2e82050df15cdaf70f5ffd21d548e891d9ed213b69e9cc",
            "file": "libs/packages/components/src/lib/pagination/model/paginationModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PaginationConfigurationModel {\n  /**\n   * used to distinguish fields\n   */\n  id: string;\n}\n\nexport class PaginationModel {\n  /**\n   * current page number\n   */\n  pageNumber: number;\n\n  /**\n   * size of page ex 25, 50,100\n   */\n  pageSize: number;\n\n  /**\n   * total number of pages\n   */\n  totalPages: number;\n}\n",
            "properties": [
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>current page number</p>\n",
                    "line": 12,
                    "rawdescription": "\n\ncurrent page number\n"
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>size of page ex 25, 50,100</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nsize of page ex 25, 50,100\n"
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total number of pages</p>\n",
                    "line": 22,
                    "rawdescription": "\n\ntotal number of pages\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSAutocompletelConfiguration",
            "id": "class-SDSAutocompletelConfiguration-3c5f2bf2cf4c165612e1e41c648765c7f3218ad7fe2e9a86c3a0797ee66ceebb9ac7a0190a55e64497e5c2e7587887843b275e6d8c6faa670f4c147d4b4c384b",
            "file": "libs/packages/components/src/lib/autocomplete/models/SDSAutocompletelConfiguration.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SDSSelectedResultConfiguration } from '../../selected-result/models/SDSSelectedResultConfiguration';\nimport { SDSAutocompleteSearchConfiguration } from '../../autocomplete-search/models/SDSAutocompleteConfiguration';\nimport { SelectionMode } from '../../selected-result/models/sds-selected-item-model-helper';\nimport { Observable } from 'rxjs';\n\nexport class SDSAutocompletelConfiguration\n  implements SDSSelectedResultConfiguration, SDSAutocompleteSearchConfiguration {\n  /**\n   * sets the default debounce time to 250 milliseconds\n   */\n  constructor() {\n    this.debounceTime = 250;\n    this.minimumCharacterCountSearch = 0;\n  }\n\n  /**\n   * Used to describe the drop down (Text should match the label that will be supplied)\n   */\n  public labelText: string;\n\n  /**\n   * Used for the Id of the control\n   */\n  public id: string;\n\n  /**\n   *  This is the primary field used to identify each object in the results\n   */\n  public primaryKeyField: string;\n\n  /**\n   *  Property from supplied model used for the top part of the basic template\n   */\n  public primaryTextField: string;\n\n  /**\n   *  Property from supplied model used for the bottom part of the basic template\n   */\n  public secondaryTextField: string;\n\n  /**\n   *  Sets the time waited for addional key actions Default is 250 milliseconds\n   */\n  public debounceTime: number;\n\n  /**\n   * Place holder text for autocomplete input\n   */\n  public autocompletePlaceHolderText: string;\n\n  /**\n   * Mininumn Characters for search\n   */\n  public minimumCharacterCountSearch: number;\n\n  /**\n   * Mode of the model either allows a single item or multiple items\n   */\n  public selectionMode: SelectionMode = SelectionMode.SINGLE;\n\n  /**\n   * Allows option to allow user text not in the standard results\n   */\n  public isFreeTextEnabled: boolean = false;\n\n  /**\n   * Text appeneded ad the end of free text\n   */\n  public freeTextSubtext: string = 'search';\n\n  /**\n   * Focus into autocomplete search\n   */\n  public focusInSearch: boolean = true;\n\n  /**\n   * The aria-label for the auto-complete\n   */\n  public ariaLabelText: string;\n\n  /**\n   * To enable the tag mode\n   */\n  public isTagModeEnabled: boolean = false;\n\n  /**\n   * To make input readonly\n   */\n  public inputReadOnly = false;\n\n  /**\n   * Name of the children filed\n   */\n  public groupByChild: string = 'children';\n\n  /**\n   * To enable the Grouping mode\n   */\n  public isGroupingEnabled: boolean = false;\n\n  /**\n   * To enable the Group item selectable\n   */\n  public isSelectableGroup: boolean = true;\n\n  /**\n   * Toggle whether or not to display chips. This can be useful if some custom UI is used\n   * for rendering autocomplete values in multi-select mode\n   * @default false\n   */\n  public hideChips: boolean = false;\n\n  /**\n   * Modifiier function to change display of how primary text field is shown\n   * Allows adding prefix / suffix values when displaying tags\n   */\n  public displayModifierFn: (displayValue: string, index?: number) => string;\n\n  /**\n   * Provides a way for external components to force change detection\n   * on internal components. Any time this observable is emitted, a change\n   * detection will be preformed, ensuring data model and template values are\n   * in sync. This can be useful if some external changes are made and visual\n   * updates need to be made\n   */\n  public registerChanges$: Observable<void>;\n\n  public hideCloseIcon: boolean = false;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>sets the default debounce time to 250 milliseconds</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7,
                "rawdescription": "\n\nsets the default debounce time to 250 milliseconds\n"
            },
            "properties": [
                {
                    "name": "ariaLabelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The aria-label for the auto-complete</p>\n",
                    "line": 79,
                    "rawdescription": "\n\nThe aria-label for the auto-complete\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "autocompletePlaceHolderText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Place holder text for autocomplete input</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nPlace holder text for autocomplete input\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "debounceTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p> Sets the time waited for addional key actions Default is 250 milliseconds</p>\n",
                    "line": 44,
                    "rawdescription": "\n\n Sets the time waited for addional key actions Default is 250 milliseconds\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayModifierFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Modifiier function to change display of how primary text field is shown\nAllows adding prefix / suffix values when displaying tags</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nModifiier function to change display of how primary text field is shown\nAllows adding prefix / suffix values when displaying tags\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "focusInSearch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Focus into autocomplete search</p>\n",
                    "line": 74,
                    "rawdescription": "\n\nFocus into autocomplete search\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "freeTextSubtext",
                    "defaultValue": "'search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text appeneded ad the end of free text</p>\n",
                    "line": 69,
                    "rawdescription": "\n\nText appeneded ad the end of free text\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "groupByChild",
                    "defaultValue": "'children'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of the children filed</p>\n",
                    "line": 94,
                    "rawdescription": "\n\nName of the children filed\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hideChips",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Toggle whether or not to display chips. This can be useful if some custom UI is used\nfor rendering autocomplete values in multi-select mode</p>\n",
                    "line": 111,
                    "rawdescription": "\n\nToggle whether or not to display chips. This can be useful if some custom UI is used\nfor rendering autocomplete values in multi-select mode\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "pos": 2690,
                            "end": 2708,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2691,
                                "end": 2698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                },
                {
                    "name": "hideCloseIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used for the Id of the control</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nUsed for the Id of the control\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>To make input readonly</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nTo make input readonly\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFreeTextEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Allows option to allow user text not in the standard results</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nAllows option to allow user text not in the standard results\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isGroupingEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the Grouping mode</p>\n",
                    "line": 99,
                    "rawdescription": "\n\nTo enable the Grouping mode\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSelectableGroup",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the Group item selectable</p>\n",
                    "line": 104,
                    "rawdescription": "\n\nTo enable the Group item selectable\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isTagModeEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the tag mode</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nTo enable the tag mode\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "labelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used to describe the drop down (Text should match the label that will be supplied)</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nUsed to describe the drop down (Text should match the label that will be supplied)\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "minimumCharacterCountSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Mininumn Characters for search</p>\n",
                    "line": 54,
                    "rawdescription": "\n\nMininumn Characters for search\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "primaryKeyField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> This is the primary field used to identify each object in the results</p>\n",
                    "line": 29,
                    "rawdescription": "\n\n This is the primary field used to identify each object in the results\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "primaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the top part of the basic template</p>\n",
                    "line": 34,
                    "rawdescription": "\n\n Property from supplied model used for the top part of the basic template\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "registerChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Provides a way for external components to force change detection\non internal components. Any time this observable is emitted, a change\ndetection will be preformed, ensuring data model and template values are\nin sync. This can be useful if some external changes are made and visual\nupdates need to be made</p>\n",
                    "line": 126,
                    "rawdescription": "\n\nProvides a way for external components to force change detection\non internal components. Any time this observable is emitted, a change\ndetection will be preformed, ensuring data model and template values are\nin sync. This can be useful if some external changes are made and visual\nupdates need to be made\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "secondaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the bottom part of the basic template</p>\n",
                    "line": 39,
                    "rawdescription": "\n\n Property from supplied model used for the bottom part of the basic template\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "SelectionMode.SINGLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionMode",
                    "optional": false,
                    "description": "<p>Mode of the model either allows a single item or multiple items</p>\n",
                    "line": 59,
                    "rawdescription": "\n\nMode of the model either allows a single item or multiple items\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "SDSSelectedResultConfiguration",
                "SDSAutocompleteSearchConfiguration"
            ]
        },
        {
            "name": "SDSAutocompleteSearchConfiguration",
            "id": "class-SDSAutocompleteSearchConfiguration-241d8cf0863535329f1eebaa68fcb1d36fbe54678eefb5b24b31990cafa1b6a901ecf80343358ecdd03f0324b123f0a43939772db6ad1fb085c9f53809b6a3fb",
            "file": "libs/packages/components/src/lib/autocomplete-search/models/SDSAutocompleteConfiguration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SelectionMode } from '../../selected-result/models/sds-selected-item-model-helper';\n\nexport class SDSAutocompleteSearchConfiguration {\n  /**\n   * sets the default debounce time to 250 milliseconds\n   */\n  constructor() {\n    this.debounceTime = 250;\n    this.minimumCharacterCountSearch = 0;\n  }\n\n  /**\n   * Used to describe the drop down (Text should match the label that will be supplied)\n   */\n  public labelText: string;\n\n  /**\n   * Used for the Id of the control\n   */\n  public id: string;\n\n  /**\n   *  This is the primary field used to identify each object in the results\n   */\n  public primaryKeyField: string;\n\n  /**\n   *  Property from supplied model used for the top part of the basic template\n   *  and the text for single selection\n   */\n  public primaryTextField: string;\n\n  /**\n   *  Property from supplied model used for the bottom part of the basic template\n   */\n  public secondaryTextField: string;\n\n  /**\n   *  Sets the time waited for addional key actions Default is 250 milliseconds\n   */\n  public debounceTime: number;\n\n  /**\n   * Place holder text for autocomplete input\n   */\n  public autocompletePlaceHolderText: string;\n\n  /**\n   * Mininumn Characters for search\n   */\n  public minimumCharacterCountSearch: number;\n\n  /**\n   * Mode of the model either allows a single item or multiple items\n   */\n  public selectionMode: SelectionMode = SelectionMode.SINGLE;\n\n  /**\n   * Allows option to allow user text not in the standard results\n   */\n  public isFreeTextEnabled: boolean = false;\n\n  /**\n   * Text appeneded ad the end of free text\n   */\n  public freeTextSubtext: string = 'search';\n\n  /**\n   * Focus into autocomplete search\n   */\n  public focusInSearch: boolean = true;\n\n  /**\n   * The aria-label for the auto-complete\n   */\n  public ariaLabelText: string;\n\n  /**\n   * To enable the tag mode\n   */\n  public isTagModeEnabled: boolean = false;\n\n  /**\n   * To make input readonly\n   */\n  public inputReadOnly = false;\n\n  /**\n   * Name of the children filed\n   */\n  public groupByChild: string = 'children';\n\n  /**\n   * To enable the Grouping mode\n   */\n  public isGroupingEnabled: boolean = false;\n\n  /**\n   * To enable the Group item selectable\n   */\n  public isSelectableGroup: boolean = true;\n\n  public hideCloseIcon: boolean = false;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>sets the default debounce time to 250 milliseconds</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 3,
                "rawdescription": "\n\nsets the default debounce time to 250 milliseconds\n"
            },
            "properties": [
                {
                    "name": "ariaLabelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The aria-label for the auto-complete</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nThe aria-label for the auto-complete\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "autocompletePlaceHolderText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Place holder text for autocomplete input</p>\n",
                    "line": 46,
                    "rawdescription": "\n\nPlace holder text for autocomplete input\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "debounceTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p> Sets the time waited for addional key actions Default is 250 milliseconds</p>\n",
                    "line": 41,
                    "rawdescription": "\n\n Sets the time waited for addional key actions Default is 250 milliseconds\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "focusInSearch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Focus into autocomplete search</p>\n",
                    "line": 71,
                    "rawdescription": "\n\nFocus into autocomplete search\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "freeTextSubtext",
                    "defaultValue": "'search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text appeneded ad the end of free text</p>\n",
                    "line": 66,
                    "rawdescription": "\n\nText appeneded ad the end of free text\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "groupByChild",
                    "defaultValue": "'children'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of the children filed</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nName of the children filed\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hideCloseIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used for the Id of the control</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nUsed for the Id of the control\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>To make input readonly</p>\n",
                    "line": 86,
                    "rawdescription": "\n\nTo make input readonly\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFreeTextEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Allows option to allow user text not in the standard results</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nAllows option to allow user text not in the standard results\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isGroupingEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the Grouping mode</p>\n",
                    "line": 96,
                    "rawdescription": "\n\nTo enable the Grouping mode\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSelectableGroup",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the Group item selectable</p>\n",
                    "line": 101,
                    "rawdescription": "\n\nTo enable the Group item selectable\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isTagModeEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the tag mode</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nTo enable the tag mode\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "labelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used to describe the drop down (Text should match the label that will be supplied)</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nUsed to describe the drop down (Text should match the label that will be supplied)\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "minimumCharacterCountSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Mininumn Characters for search</p>\n",
                    "line": 51,
                    "rawdescription": "\n\nMininumn Characters for search\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "primaryKeyField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> This is the primary field used to identify each object in the results</p>\n",
                    "line": 25,
                    "rawdescription": "\n\n This is the primary field used to identify each object in the results\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "primaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the top part of the basic template\n and the text for single selection</p>\n",
                    "line": 31,
                    "rawdescription": "\n\n Property from supplied model used for the top part of the basic template\n and the text for single selection\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "secondaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the bottom part of the basic template</p>\n",
                    "line": 36,
                    "rawdescription": "\n\n Property from supplied model used for the bottom part of the basic template\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "SelectionMode.SINGLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionMode",
                    "optional": false,
                    "description": "<p>Mode of the model either allows a single item or multiple items</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nMode of the model either allows a single item or multiple items\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SdsDialogConfig",
            "id": "class-SdsDialogConfig-67e67916f5770ae6b75f2ae3a1fc9f63502364be99417876edf62318ced4d802a03118d36c7beabda7546ef460351c59efb11f3599a578d63871ecc4f9066fa3",
            "file": "libs/packages/components/src/lib/dialog/dialog-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ViewContainerRef } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/** Custom Slide Out Panel configurations */\nexport interface SlideOutConfig {\n  /** Width of the slide out panel */\n  width?: string;\n\n  /** Time that it takes to open and close the panel */\n  time?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the SdsDialog service.\n */\nexport class SdsDialogConfig<D = any> {\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop? = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass? = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose? = false;\n\n  /** Width of the dialog. */\n  width? = '';\n\n  /** Height of the dialog. */\n  height? = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus? = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus? = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation? = true;\n\n  /**\n   * Wheter the dialog its an alert\n   */\n  alert?: 'warning' | 'info' | 'error' | 'success';\n\n  /**\n   * Whether to display the close button in dialog header\n   */\n  displayCloseBtn? = true;\n\n  /**\n   * Whether dialog is a slide-out. Changes enter and exit animation, and adds\n   * class `dialog-slide-out` to container\n   */\n  slideOut?: boolean | SlideOutConfig = false;\n}\n",
            "properties": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"warning\" | \"info\" | \"error\" | \"success\"",
                    "optional": true,
                    "description": "<p>Wheter the dialog its an alert</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nWheter the dialog its an alert\n"
                },
                {
                    "name": "ariaDescribedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "<p>ID of the element that describes the dialog.</p>\n",
                    "line": 90,
                    "rawdescription": "\nID of the element that describes the dialog."
                },
                {
                    "name": "ariaLabel",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "<p>Aria label to assign to the dialog element</p>\n",
                    "line": 93,
                    "rawdescription": "\nAria label to assign to the dialog element"
                },
                {
                    "name": "autoFocus",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the dialog should focus the first focusable element on open.</p>\n",
                    "line": 96,
                    "rawdescription": "\nWhether the dialog should focus the first focusable element on open."
                },
                {
                    "name": "backdropClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Custom class for the backdrop,</p>\n",
                    "line": 57,
                    "rawdescription": "\nCustom class for the backdrop,"
                },
                {
                    "name": "closeOnNavigation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the dialog should close when the user goes backwards/forwards in history.\nNote that this usually doesn&#39;t include clicking on links (unless the user is using\nthe <code>HashLocationStrategy</code>).</p>\n",
                    "line": 112,
                    "rawdescription": "\n\nWhether the dialog should close when the user goes backwards/forwards in history.\nNote that this usually doesn't include clicking on links (unless the user is using\nthe `HashLocationStrategy`).\n"
                },
                {
                    "name": "data",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "D | null",
                    "optional": true,
                    "description": "<p>Data being injected into the child component.</p>\n",
                    "line": 84,
                    "rawdescription": "\nData being injected into the child component."
                },
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Direction",
                    "optional": true,
                    "description": "<p>Layout direction for the dialog&#39;s content.</p>\n",
                    "line": 87,
                    "rawdescription": "\nLayout direction for the dialog's content."
                },
                {
                    "name": "disableClose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the user can use escape or clicking on the backdrop to close the modal.</p>\n",
                    "line": 60,
                    "rawdescription": "\nWhether the user can use escape or clicking on the backdrop to close the modal."
                },
                {
                    "name": "displayCloseBtn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether to display the close button in dialog header</p>\n",
                    "line": 122,
                    "rawdescription": "\n\nWhether to display the close button in dialog header\n"
                },
                {
                    "name": "hasBackdrop",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the dialog has a backdrop.</p>\n",
                    "line": 54,
                    "rawdescription": "\nWhether the dialog has a backdrop."
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Height of the dialog.</p>\n",
                    "line": 66,
                    "rawdescription": "\nHeight of the dialog."
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>ID for the dialog. If omitted, a unique one will be generated.</p>\n",
                    "line": 45,
                    "rawdescription": "\nID for the dialog. If omitted, a unique one will be generated."
                },
                {
                    "name": "maxHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "<p>Max-height of the dialog. If a number is provided, pixel units are assumed.</p>\n",
                    "line": 78,
                    "rawdescription": "\nMax-height of the dialog. If a number is provided, pixel units are assumed."
                },
                {
                    "name": "maxWidth",
                    "defaultValue": "'80vw'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "<p>Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw</p>\n",
                    "line": 75,
                    "rawdescription": "\nMax-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw"
                },
                {
                    "name": "minHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "<p>Min-height of the dialog. If a number is provided, pixel units are assumed.</p>\n",
                    "line": 72,
                    "rawdescription": "\nMin-height of the dialog. If a number is provided, pixel units are assumed."
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "<p>Min-width of the dialog. If a number is provided, pixel units are assumed.</p>\n",
                    "line": 69,
                    "rawdescription": "\nMin-width of the dialog. If a number is provided, pixel units are assumed."
                },
                {
                    "name": "panelClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Custom class for the overlay pane.</p>\n",
                    "line": 51,
                    "rawdescription": "\nCustom class for the overlay pane."
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogPosition",
                    "optional": true,
                    "description": "<p>Position overrides.</p>\n",
                    "line": 81,
                    "rawdescription": "\nPosition overrides."
                },
                {
                    "name": "restoreFocus",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the dialog should restore focus to the\npreviously-focused element, after it&#39;s closed.</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nWhether the dialog should restore focus to the\npreviously-focused element, after it's closed.\n"
                },
                {
                    "name": "role",
                    "defaultValue": "'dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRole",
                    "optional": true,
                    "description": "<p>The ARIA role of the dialog element.</p>\n",
                    "line": 48,
                    "rawdescription": "\nThe ARIA role of the dialog element."
                },
                {
                    "name": "scrollStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScrollStrategy",
                    "optional": true,
                    "description": "<p>Scroll strategy to be used for the dialog.</p>\n",
                    "line": 105,
                    "rawdescription": "\nScroll strategy to be used for the dialog."
                },
                {
                    "name": "slideOut",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | SlideOutConfig",
                    "optional": true,
                    "description": "<p>Whether dialog is a slide-out. Changes enter and exit animation, and adds\nclass <code>dialog-slide-out</code> to container</p>\n",
                    "line": 128,
                    "rawdescription": "\n\nWhether dialog is a slide-out. Changes enter and exit animation, and adds\nclass `dialog-slide-out` to container\n"
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": true,
                    "description": "<p>Where the attached component should live in Angular&#39;s <em>logical</em> component tree.\nThis affects what is available for injection and the change detection order for the\ncomponent instantiated inside of the dialog. This does not affect where the dialog\ncontent will be rendered.</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nWhere the attached component should live in Angular's *logical* component tree.\nThis affects what is available for injection and the change detection order for the\ncomponent instantiated inside of the dialog. This does not affect where the dialog\ncontent will be rendered.\n"
                },
                {
                    "name": "width",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Width of the dialog.</p>\n",
                    "line": 63,
                    "rawdescription": "\nWidth of the dialog."
                }
            ],
            "description": "<p>Configuration for opening a modal dialog with the SdsDialog service.</p>\n",
            "rawdescription": "\n\nConfiguration for opening a modal dialog with the SdsDialog service.\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SdsDialogRef",
            "id": "class-SdsDialogRef-75c60fbb08456d241099590da78e1efd05e58751abffa859ee0c1fddd1491135f98006ca4aa81adef8b052d6fed5aa5c22a89e7027b3ebf2e76b46920036bc07",
            "file": "libs/packages/components/src/lib/dialog/dialog-ref.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ESCAPE } from '@angular/cdk/keycodes';\nimport { GlobalPositionStrategy, OverlayRef } from '@angular/cdk/overlay';\nimport { Location } from '@angular/common';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { DialogPosition } from './dialog-config';\nimport { SdsDialogContainerComponent } from './dialog-container.component';\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the SdsDialog service.\n */\nexport class SdsDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: SdsDialogContainerComponent,\n    _location?: Location,\n    readonly id: string = `sds-dialog-${uniqueId++}`\n  ) {\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged\n      .pipe(\n        filter((event) => event.phaseName === 'done' && (event.toState === 'enter' || event.toState === 'slideEnter')),\n        take(1)\n      )\n      .subscribe(() => {\n        this._afterOpened.next();\n        this._afterOpened.complete();\n      });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged\n      .pipe(\n        filter((event) => event.phaseName === 'done' && (event.toState === 'exit' || event.toState === 'slideExit')),\n        take(1)\n      )\n      .subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef\n      .keydownEvents()\n      .pipe(filter((event) => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged\n      .pipe(\n        filter((event) => event.phaseName === 'start'),\n        take(1)\n      )\n      .subscribe(() => {\n        this._beforeClosed.next(dialogResult);\n        this._beforeClosed.complete();\n        this._overlayRef.detachBackdrop();\n      });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    const strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_overlayRef",
                        "type": "OverlayRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_containerInstance",
                        "type": "SdsDialogContainerComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "`sds-dialog-${uniqueId++}`"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "_overlayRef",
                        "type": "OverlayRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_containerInstance",
                        "type": "SdsDialogContainerComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "`sds-dialog-${uniqueId++}`",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_afterClosed",
                    "defaultValue": "new Subject<R | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subject for notifying the user that the dialog has finished closing.</p>\n",
                    "line": 26,
                    "rawdescription": "\nSubject for notifying the user that the dialog has finished closing.",
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "_afterOpened",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subject for notifying the user that the dialog has finished opening.</p>\n",
                    "line": 23,
                    "rawdescription": "\nSubject for notifying the user that the dialog has finished opening.",
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "_beforeClosed",
                    "defaultValue": "new Subject<R | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subject for notifying the user that the dialog has started closing.</p>\n",
                    "line": 29,
                    "rawdescription": "\nSubject for notifying the user that the dialog has started closing.",
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "_containerInstance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsDialogContainerComponent",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "R | undefined",
                    "optional": false,
                    "description": "<p>Result to be passed to afterClosed.</p>\n",
                    "line": 32,
                    "rawdescription": "\nResult to be passed to afterClosed.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "componentInstance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "<p>The instance of component opened into the dialog.</p>\n",
                    "line": 17,
                    "rawdescription": "\nThe instance of component opened into the dialog."
                },
                {
                    "name": "disableClose",
                    "defaultValue": "this._containerInstance._config.disableClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "optional": false,
                    "description": "<p>Whether the user is allowed to close the dialog.</p>\n",
                    "line": 20,
                    "rawdescription": "\nWhether the user is allowed to close the dialog."
                }
            ],
            "description": "<p>Reference to a dialog opened via the SdsDialog service.</p>\n",
            "rawdescription": "\n\nReference to a dialog opened via the SdsDialog service.\n",
            "methods": [
                {
                    "name": "_getPositionStrategy",
                    "args": [],
                    "optional": false,
                    "returnType": "GlobalPositionStrategy",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFetches the position strategy object from the overlay ref.",
                    "description": "<p>Fetches the position strategy object from the overlay ref.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addPanelClass",
                    "args": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdd a CSS class or an array of classes to the overlay pane.",
                    "description": "<p>Add a CSS class or an array of classes to the overlay pane.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "afterClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R | undefined>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that is notified when the dialog is finished closing.\n",
                    "description": "<p>Gets an observable that is notified when the dialog is finished closing.</p>\n"
                },
                {
                    "name": "afterOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that is notified when the dialog is finished opening.\n",
                    "description": "<p>Gets an observable that is notified when the dialog is finished opening.</p>\n"
                },
                {
                    "name": "backdropClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MouseEvent>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that emits when the overlay's backdrop has been clicked.\n",
                    "description": "<p>Gets an observable that emits when the overlay&#39;s backdrop has been clicked.</p>\n"
                },
                {
                    "name": "beforeClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R | undefined>",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that is notified when the dialog has started closing.\n",
                    "description": "<p>Gets an observable that is notified when the dialog has started closing.</p>\n"
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "dialogResult",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose the dialog.\n",
                    "description": "<p>Close the dialog.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2707,
                                "end": 2719,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dialogResult"
                            },
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2701,
                                "end": 2706,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional result to return to the dialog opener.</p>\n"
                        }
                    ]
                },
                {
                    "name": "keydownEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<KeyboardEvent>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that emits when keydown events are targeted on the overlay.\n",
                    "description": "<p>Gets an observable that emits when keydown events are targeted on the overlay.</p>\n"
                },
                {
                    "name": "removePanelClass",
                    "args": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRemove a CSS class or an array of classes from the overlay pane.",
                    "description": "<p>Remove a CSS class or an array of classes from the overlay pane.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePosition",
                    "args": [
                        {
                            "name": "position",
                            "type": "DialogPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the dialog's position.\n",
                    "description": "<p>Updates the dialog&#39;s position.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4247,
                                "end": 4255,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "position"
                            },
                            "type": "DialogPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4241,
                                "end": 4246,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>New dialog position.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateSize",
                    "args": [
                        {
                            "name": "width",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "height",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the dialog's width and height.\n",
                    "description": "<p>Updates the dialog&#39;s width and height.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4905,
                                "end": 4910,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "width"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "pos": 4899,
                                "end": 4904,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>New width of the dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4948,
                                "end": 4954,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "height"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "pos": 4942,
                                "end": 4947,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>New height of the dialog.</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSHiercarchicalServiceSearchItem",
            "id": "class-SDSHiercarchicalServiceSearchItem-8a7ff93cb3598fa1fd62a51e2d694234b6b77339b6ebbdca265a15a2b88c763f2f80275b7d51ddec08309f7803f2a3288bd519f43e1cd585cbb1237f04ea37d9",
            "file": "libs/packages/components/src/lib/autocomplete-search/models/SDSAutocompleteServiceInterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nexport interface SDSAutocompleteServiceInterface {\n  /**\n   *\n   * @param searchValue\n   */\n  getDataByText(currentItems: number, searchValue?: string): Observable<SDSHiercarchicalServiceResult>;\n}\n\nexport interface SDSHiercarchicalServiceResult {\n  /**\n   *\n   */\n  items: object[];\n\n  /**\n   *\n   */\n  totalItems: number;\n}\n\nexport class SDSHiercarchicalServiceSearchItem {\n  /**\n   *\n   */\n  id: string;\n\n  /**\n   *\n   */\n  searchValue: string;\n\n  /**\n   *\n   */\n  // sort: Sort;\n\n  /**\n   *\n   */\n  currentItemCount: number;\n}\n",
            "properties": [
                {
                    "name": "currentItemCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "rawdescription": "\n\n\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "rawdescription": "\n\n\n"
                },
                {
                    "name": "searchValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "rawdescription": "\n\n\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSSelectedItemModel",
            "id": "class-SDSSelectedItemModel-8e8f4c946a432e1af0530c138638c5e3b6c030a6276e09ba5664a262b3872ff45bcc703257d582556797582a253a51a934f1fbc9cf12cdf75d60612991590976",
            "file": "libs/packages/components/src/lib/selected-result/models/sds-selectedItem.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SDSSelectedItemModel {\n  /**\n   * List of items selected\n   */\n  public items: object[];\n\n  constructor(items?: object[]) {\n    this.items = items ? [...items] : [];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "items",
                        "type": "object[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "items",
                        "type": "object[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object[]",
                    "optional": false,
                    "description": "<p>List of items selected</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nList of items selected\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSSelectedItemModelHelper",
            "id": "class-SDSSelectedItemModelHelper-8ace2a395d188779454a764900b711468a9fd566a78d1c789ccf5c9b6b9976c84854684916e0a95fdb2daa06a6247bf5f28c1ee9b5dada012321b53a06ae7c33",
            "file": "libs/packages/components/src/lib/selected-result/models/sds-selected-item-model-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SDSSelectedItemModel } from './sds-selectedItem.model';\n\nexport class SDSSelectedItemModelHelper {\n  /**\n   *  adds an item to the collection\n   * if selected mode is single it removes any existing items\n   * also checks to see if that item already exists\n   * keyfield is used to determine uniqueness of the item added\n   * @param itemToAdd\n   * @param keyField\n   * @param selectionMode\n   * @param items\n   */\n  public static addItem(\n    itemToAdd: object,\n    keyField: string,\n    selectionMode: SelectionMode,\n    model: SDSSelectedItemModel\n  ) {\n    if (!SDSSelectedItemModelHelper.containsItem(itemToAdd[keyField], keyField, model.items)) {\n      if (selectionMode === SelectionMode.SINGLE) {\n        SDSSelectedItemModelHelper.clearItems(model.items);\n      }\n      model.items.push(itemToAdd);\n    }\n  }\n\n  /**\n   * adds an array of items to the list and will not add duplicate items\n   * keyfield is used to determine uniqueness of the item added\n   * @param toAddItems\n   * @param keyField\n   * @param selectionMode\n   * @param items\n   */\n  public static addItems(\n    toAddItems: object[],\n    keyField: string,\n    selectionMode: SelectionMode,\n    model: SDSSelectedItemModel\n  ) {\n    for (let i = 0; i < toAddItems.length; i++) {\n      SDSSelectedItemModelHelper.addItem(toAddItems[i], keyField, selectionMode, model);\n    }\n  }\n\n  /**\n   * removes the item from the list\n   * keyfield is used to determine uniqueness of the item added\n   * @param item\n   * @param keyField\n   * @param items\n   */\n  public static removeItem(item: object, keyField: string, model: SDSSelectedItemModel) {\n    if (SDSSelectedItemModelHelper.containsItem(item[keyField], keyField, model.items)) {\n      model.items.splice(model.items.indexOf(item), 1);\n    }\n  }\n\n  /**\n   * checks to see if a particular item exists by the provied key\n   * keyfield is used to determine uniqueness of the item added\n   * @param key\n   * @param keyField\n   * @param items\n   */\n  public static containsItem(key: string, keyField: string, items: object[]): boolean {\n    let item = items.find((o) => o[keyField] === key);\n    return item !== null && item !== undefined;\n  }\n\n  /**\n   * Clears the list of items\n   * @param items\n   */\n  public static clearItems(items: object[]) {\n    while (items.length > 0) {\n      items.pop();\n    }\n  }\n\n  /**\n   * updates an array of items to the list and will not add duplicate items\n   * keyfield is used to determine uniqueness of the item added\n   * @param selectedItems\n   * @param keyField\n   * @param selectionMode\n   * @param items\n   */\n  public static replaceItems(\n    selectedItems: object[],\n    keyField: string,\n    selectionMode: SelectionMode,\n    model: SDSSelectedItemModel\n  ) {\n    //Clears Old List\n    SDSSelectedItemModelHelper.clearItems(model.items);\n    //Adds new List\n    SDSSelectedItemModelHelper.addItems(selectedItems, keyField, selectionMode, model);\n  }\n}\n\nexport enum SelectionMode {\n  SINGLE,\n  MULTIPLE,\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "itemToAdd",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionMode",
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n adds an item to the collection\nif selected mode is single it removes any existing items\nalso checks to see if that item already exists\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p> adds an item to the collection\nif selected mode is single it removes any existing items\nalso checks to see if that item already exists\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 341,
                                "end": 350,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "itemToAdd"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 335,
                                "end": 340,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 363,
                                "end": 371,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 357,
                                "end": 362,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 384,
                                "end": 397,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "selectionMode"
                            },
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 378,
                                "end": 383,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addItems",
                    "args": [
                        {
                            "name": "toAddItems",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionMode",
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadds an array of items to the list and will not add duplicate items\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p>adds an array of items to the list and will not add duplicate items\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 981,
                                "end": 991,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "toAddItems"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 975,
                                "end": 980,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1004,
                                "end": 1012,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 998,
                                "end": 1003,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1025,
                                "end": 1038,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "selectionMode"
                            },
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1019,
                                "end": 1024,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears the list of items\n",
                    "description": "<p>Clears the list of items</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2215,
                                "end": 2220,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2209,
                                "end": 2214,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "containsItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "items",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks to see if a particular item exists by the provied key\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p>checks to see if a particular item exists by the provied key\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1922,
                                "end": 1925,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1916,
                                "end": 1921,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1938,
                                "end": 1946,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1932,
                                "end": 1937,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1959,
                                "end": 1964,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1953,
                                "end": 1958,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoves the item from the list\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p>removes the item from the list\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1477,
                                "end": 1481,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1471,
                                "end": 1476,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1494,
                                "end": 1502,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1488,
                                "end": 1493,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replaceItems",
                    "args": [
                        {
                            "name": "selectedItems",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionMode",
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdates an array of items to the list and will not add duplicate items\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p>updates an array of items to the list and will not add duplicate items\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2492,
                                "end": 2505,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "selectedItems"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2486,
                                "end": 2491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2518,
                                "end": 2526,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2512,
                                "end": 2517,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2539,
                                "end": 2552,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "selectionMode"
                            },
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2533,
                                "end": 2538,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSSelectedResultConfiguration",
            "id": "class-SDSSelectedResultConfiguration-068239e1cd6b1084eba4b081f89dfbcecdffec89a0ce5f8f33278e89776bd27066b84b11ca07eb5310662ed4364dfc1bc882ea3fc46a95ab943e2c7884297ecb",
            "file": "libs/packages/components/src/lib/selected-result/models/SDSSelectedResultConfiguration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { SelectionMode } from './sds-selected-item-model-helper';\n\nexport class SDSSelectedResultConfiguration {\n  /**\n   * Used to describe the drop down (Text should match the label that will be supplied)\n   */\n  public labelText: string;\n\n  /**\n   *  This is the primary field used to identify each object in the results\n   */\n  public primaryKeyField: string;\n\n  /**\n   *  Property from supplied model used for the top part of the basic template\n   */\n  public primaryTextField: string;\n\n  /**\n   *  Property from supplied model used for the bottom part of the basic template\n   */\n  public secondaryTextField: string;\n\n  /**\n   * Mode of the model either allows a single item or multiple items\n   */\n  public selectionMode: SelectionMode = SelectionMode.SINGLE;\n\n  /**\n   * Modifiier function to change display of how primary text field is shown\n   * Allows adding prefix / suffix values when displaying tags\n   */\n  public displayModifierFn?: (displayValue: string, index?: number) => string;\n}\n",
            "properties": [
                {
                    "name": "displayModifierFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Modifiier function to change display of how primary text field is shown\nAllows adding prefix / suffix values when displaying tags</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nModifiier function to change display of how primary text field is shown\nAllows adding prefix / suffix values when displaying tags\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "labelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used to describe the drop down (Text should match the label that will be supplied)</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nUsed to describe the drop down (Text should match the label that will be supplied)\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "primaryKeyField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> This is the primary field used to identify each object in the results</p>\n",
                    "line": 13,
                    "rawdescription": "\n\n This is the primary field used to identify each object in the results\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "primaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the top part of the basic template</p>\n",
                    "line": 18,
                    "rawdescription": "\n\n Property from supplied model used for the top part of the basic template\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "secondaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the bottom part of the basic template</p>\n",
                    "line": 23,
                    "rawdescription": "\n\n Property from supplied model used for the bottom part of the basic template\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "SelectionMode.SINGLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionMode",
                    "optional": false,
                    "description": "<p>Mode of the model either allows a single item or multiple items</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nMode of the model either allows a single item or multiple items\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SearchModel",
            "id": "class-SearchModel-0221df8c4d484f82ecb40d812cdf63ce34473a403993de59dc07df92c0c2557c4d5118881169df36e23f05bcc4b82a24cd9e5533bdf35c6c8ad5b7c7134ca3bc",
            "file": "libs/packages/components/src/lib/search-result-list/model/search-results.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class SearchModel {\n  results: any[];\n  metadata: {\n    messages: Message[] | TemplateRef<any>;\n  };\n}\nexport class Message {\n  type: string;\n  title: string;\n  message: string;\n  classes: string;\n  buttons: Button[];\n}\nexport class Button {\n  id: string;\n  text: string;\n  classes: string;\n  action: any;\n  ariaLabel?: string;\n}\n",
            "properties": [
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SearchSettings",
            "id": "class-SearchSettings-527c634d11c9c2d8890435a92c8bcae56e6e3e6cdf806bbbf61911a01242bbc2b18e3d2886d2da0e483e05d59cbc6bfd646b2b308eb34b36b83663e9df466f02",
            "file": "libs/packages/components/src/lib/search/search.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nexport class SearchSettings {\n  public placeholder = 'Search';\n  public ariaLabel? = 'Search';\n  public size?: string;\n  public inputClass?: string;\n  public parentSelector?: string;\n  public id?: string;\n  public dropdown?: any = {\n    id: 'searchOptions',\n    placeholder: '-Select-',\n    options: [],\n    inverse: false,\n  };\n  public isSuffixSearchIcon?: boolean = false;\n}\n@Component({\n  selector: 'sds-search',\n  templateUrl: 'search.component.html',\n  styleUrls: ['search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SdsSearchComponent),\n      multi: true,\n    },\n  ],\n\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsSearchComponent implements AfterViewInit, ControlValueAccessor {\n  @ViewChild('inputEl', { read: ElementRef, static: false })\n  inputEl: ElementRef;\n  @ViewChild('selectEl', { read: ElementRef, static: false })\n  selectEl: ElementRef;\n  @ViewChild('buttonEl', { read: ElementRef, static: false })\n  buttonEl: ElementRef;\n\n  @Input() searchSettings: SearchSettings = new SearchSettings();\n  @Output() submit: EventEmitter<{ searchText: string }> = new EventEmitter(null);\n\n  model: any = {};\n  inputState = {\n    initial: { visible: undefined },\n    visible: undefined,\n  };\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(\n    private cd: ChangeDetectorRef,\n    private focusMonitor: FocusMonitor,\n    private viewportRuler: ViewportRuler\n  ) {}\n\n  ngAfterViewInit() {\n    this.inputState.initial.visible = this.isInputVisible();\n    this.inputState.visible = this.inputState.initial.visible;\n    this.viewportRuler.change(0).subscribe(() => {\n      this.inputState.initial.visible = this.isInputVisible();\n      this.inputState.visible = this.inputState.initial.visible;\n    });\n  }\n\n  hasDropdown() {\n    if (\n      this.searchSettings &&\n      this.searchSettings.dropdown &&\n      this.searchSettings.dropdown.options &&\n      this.searchSettings.dropdown.options.length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  handleClick(event) {\n    event.preventDefault();\n    if (!this.inputState.visible) {\n      this.setInputVisibleStyles();\n      this.focusMonitor.focusVia(this.inputEl, 'program');\n    } else if (this.inputEl || this.selectEl) {\n      this.submit.emit(this.model);\n    }\n  }\n\n  writeValueToModel() {\n    this.model.searchText = this.inputEl ? this.inputEl.nativeElement.value : '';\n    if (this.selectEl && this.selectEl.nativeElement.value) {\n      this.model.searchCategory = this.selectEl.nativeElement.value;\n    }\n    this.onChange(Object.assign({}, this.model));\n  }\n\n  writeValue(value: any) {\n    if (value && this.model !== value) {\n      this.model = value;\n      this.cd.markForCheck();\n    } else {\n      this.model = {};\n      this.cd.markForCheck();\n    }\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  isInputVisible(): boolean {\n    return this.inputEl.nativeElement.getBoundingClientRect().width ? true : false;\n  }\n\n  setInputVisibleStyles() {\n    const inputWidth = this.calculateInputWidth();\n    this.inputEl.nativeElement.style.setProperty('display', 'block', 'important');\n    this.inputEl.nativeElement.style.position = 'absolute';\n    this.inputEl.nativeElement.style.left = `-${inputWidth}px`;\n    this.inputEl.nativeElement.style.setProperty('width', `${inputWidth}px`, 'important');\n    this.inputState.visible = true;\n  }\n\n  removeInputVisibleStyles() {\n    this.inputEl.nativeElement.style.display = '';\n    this.inputEl.nativeElement.style.position = '';\n    this.inputEl.nativeElement.style.left = '';\n    this.inputEl.nativeElement.style.width = '';\n    this.inputState.visible = false;\n  }\n\n  focusChange() {\n    if (!this.inputState.initial.visible) {\n      this.removeInputVisibleStyles();\n    }\n  }\n\n  calculateInputWidth(): number {\n    const leftPadding = 20;\n    const buttonElement = this.buttonEl.nativeElement;\n    const inputElement = this.inputEl.nativeElement;\n    const rightPosition = buttonElement.getBoundingClientRect().left;\n    const leftPosition = this.searchSettings.parentSelector\n      ? inputElement.closest(this.searchSettings.parentSelector).getBoundingClientRect().left\n      : 0;\n    return Math.floor(rightPosition - leftPosition - leftPadding);\n  }\n  getClass() {\n    const cls = this.searchSettings && this.searchSettings.size === 'large' ? 'usa-search--big' : 'usa-search--small';\n    return this.searchSettings.dropdown && this.searchSettings.dropdown.inverse ? `${cls} sds-inverse` : cls;\n  }\n  clearInput(ev) {\n    this.inputEl.nativeElement.value = '';\n    this.writeValueToModel();\n  }\n}\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dropdown",
                    "defaultValue": "{\n    id: 'searchOptions',\n    placeholder: '-Select-',\n    options: [],\n    inverse: false,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSuffixSearchIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "parentSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectionPanelModel",
            "id": "class-SelectionPanelModel-a6a50ed2028ebb720c8327bfc3e408fb8d6042d4fdd6a38dcd3534c11133d8a5efa8cf8767f5b577e00543397eb7fe40d1220c4294c1c3291ca10f31bec05dba",
            "file": "libs/packages/components/src/lib/selection-panel/model/selection-panel.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SideNavigationModel } from '../../side-navigation/model/side-navigation-model';\n\nexport class SelectionPanelModel extends SideNavigationModel {\n  /**\n   * The mode selected impacts which version of the selection panel is used.\n   * 'SELECTION' mode will only display the top level navigation items and\n   * will not display children items. 'NAVIGATION' mode will display the children\n   * navigation items indented under its parent. If a mode is not passed in,\n   * then 'NAVIGATION' mode is assumed.\n   */\n  selectionMode?: 'SELECTION' | 'NAVIGATION';\n}\n",
            "properties": [
                {
                    "name": "selectionMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"SELECTION\" | \"NAVIGATION\"",
                    "optional": true,
                    "description": "<p>The mode selected impacts which version of the selection panel is used.\n&#39;SELECTION&#39; mode will only display the top level navigation items and\nwill not display children items. &#39;NAVIGATION&#39; mode will display the children\nnavigation items indented under its parent. If a mode is not passed in,\nthen &#39;NAVIGATION&#39; mode is assumed.</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nThe mode selected impacts which version of the selection panel is used.\n'SELECTION' mode will only display the top level navigation items and\nwill not display children items. 'NAVIGATION' mode will display the children\nnavigation items indented under its parent. If a mode is not passed in,\nthen 'NAVIGATION' mode is assumed.\n"
                },
                {
                    "name": "navigationLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationLink[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "rawdescription": "\n\n\n",
                    "inheritance": {
                        "file": "SideNavigationModel"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "SideNavigationModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SideNavigationModel",
            "id": "class-SideNavigationModel-e5785dfc4d9115a2518d2c6b4615940f4a514fe306a83188a65771f6d4a6c52ba606704966a981b1f231a1a18e2eff023959ee33b9eed0ceed081728ef5592ac",
            "file": "libs/packages/components/src/lib/side-navigation/model/side-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { QueryParamsHandling } from '@angular/router';\nimport { INavigationLink, NavigationMode, Selectable } from '../../common-navigation/common-navigation-model';\n\nexport class SideNavigationModel {\n  /**\n   *\n   */\n  navigationLinks: NavigationLink[];\n}\n\nexport class NavigationLink implements Selectable, INavigationLink {\n  /**\n   * Internal Angualr Routes, External HREF, EVENT: event on parent component\n   */\n  mode: NavigationMode;\n\n  /**\n   * Text to be displayed in the link or button\n   */\n  text: string;\n\n  /**\n   * Navigation Route\n   */\n  route: string;\n\n  /**\n   * List of child navigation items that will show when no route is provieded\n   */\n  children?: NavigationLink[];\n\n  /**\n   * Identifier for the item when search for selected\n   */\n  id: string;\n\n  /**\n   * Status of if the item is selected\n   */\n  selected?: boolean;\n\n  /**\n   * Query string paramaters supporeted with external and internal links\n   * ex. { 'name': 'value',...}\n   */\n  queryParams?: {\n    [k: string]: any;\n  };\n\n  queryParamsHandling?: QueryParamsHandling;\n}\n",
            "properties": [
                {
                    "name": "navigationLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationLink[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "rawdescription": "\n\n\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "CollapseDirective",
            "id": "directive-CollapseDirective-0c29ce66a0d28151e1da626e796bc4a2b962f7cbe747929ab4a22a7bb113d6add94c467f8bca0bfd38a38db518fd6478c68cd106a642ccdcdda0e87d87aafa79",
            "file": "libs/packages/components/src/lib/collapse/collapse.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\n\n@Directive({\n  selector: '[sdsCollapse]',\n  exportAs: 'sdsCollapse',\n  host: { '[class.display-none]': 'collapsed' },\n})\nexport class CollapseDirective {\n  @Input('sdsCollapse') collapsed: boolean = true;\n\n  constructor() {}\n}\n",
            "selector": "[sdsCollapse]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "sdsCollapse",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            }
        },
        {
            "name": "ExternalLinkDirective",
            "id": "directive-ExternalLinkDirective-2732fb7c83d851600722ddb0bfb8a38430628dc3b80467cf261a0db4da0ab6f3c2f76f1ce462edb302bd8f5f792d849d035b4a2e4c0575f01760c769e9dff69c",
            "file": "libs/packages/components/src/lib/external-link/external-link.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  HostBinding,\n  ElementRef,\n  PLATFORM_ID,\n  Inject,\n  Input,\n  ViewContainerRef,\n  OnChanges,\n  AfterViewInit,\n} from '@angular/core';\n\nimport { isPlatformBrowser } from '@angular/common';\n\n@Directive({\n  selector: 'a[href]',\n})\nexport class ExternalLinkDirective implements OnChanges {\n  @HostBinding('attr.rel') relAttr = '';\n  @HostBinding('attr.target') targetAttr = '';\n  @HostBinding('attr.href') hrefAttr = '';\n\n  @Input() href: string;\n  @Input() target: string;\n\n  @Input() public hideIcon: boolean = false;\n\n  /** Treat these domains as internal links */\n  private internalLinks = [\n    /** 'fsd.gov' - Removed until fsd.gov contains proper route back to sam.gov */\n  ];\n\n  private readonly emailLinkKeyword = 'mailto';\n\n  constructor(@Inject(PLATFORM_ID) private platformId: string, private el: ElementRef, private vc: ViewContainerRef) {}\n\n  public ngOnChanges() {\n    this.hrefAttr = this.href;\n    this.targetAttr = this.target;\n\n    if (!this.isExternalLink) {\n      return;\n    }\n\n    this.relAttr = 'noopener';\n    this.targetAttr = '_blank';\n\n    const ariaLabel = this._getAriaLabel();\n    (this.el.nativeElement as HTMLAnchorElement).setAttribute('aria-label', ariaLabel);\n\n    if (!this.hideIcon) {\n      this.createIcon();\n    }\n  }\n\n  /**\n   * Appends indication that the link will open in a separate window to the aria label.\n   * If link does not contain any aria label, then an aria label will be generated using either the inner text\n   *  or href value based on whether the anchor element contains children elements or not\n   * If link contains aria label, but the label does not contain key words 'new' or 'window',\n   *  then the text 'opens in a new window' will be appended to the end of the aria label\n   * If link contains aria label as well as the key words 'new' and 'window', then aria label will\n   *  be kept as is\n   */\n  private _getAriaLabel(): string {\n    const anchorElement = this.el.nativeElement as HTMLAnchorElement;\n    const currentAriaLabel: string = anchorElement.getAttribute('aria-label');\n\n    /** No aria label, attach a default one using inner text if anchor does not contain additional\n     * html element as children. If anchor does contain additional html element as children, then use href\n     */\n    if (!currentAriaLabel || currentAriaLabel.length === 0) {\n      let label = anchorElement.firstElementChild ? this.href : anchorElement.innerText;\n      label = label.trim();\n      return `Open ${label} in a new window`;\n    }\n\n    const lowerCaseAriaLabel = currentAriaLabel.toLowerCase();\n\n    /** Aria label already indicates link will open in a new window, set to defined aria label */\n    if (lowerCaseAriaLabel.indexOf('new') != -1 && lowerCaseAriaLabel.indexOf('window') != -1) {\n      return currentAriaLabel;\n    }\n\n    /** Aria label is attached, but does not indicate link will open in new window. \n       Add opens in new window keyword to aria label */\n    return `${currentAriaLabel} - opens in a new window`;\n  }\n\n  private get isExternalLink(): boolean {\n    const link = this.href\n      .replace(/^https?:\\/\\//, '')\n      .replace(/^www\\./, '')\n      .split('/')[0];\n    return (\n      isPlatformBrowser(this.platformId) &&\n      !link.includes(location.hostname) &&\n      link.indexOf(this.emailLinkKeyword) !== 0 &&\n      !this.internalLinks.includes(link)\n    );\n  }\n  private createIcon() {\n    // tslint:disable-next-line:no-unused-expression\n    this.el.nativeElement.classList.add('usa-link--external');\n    this.el.nativeElement.classList.add('display-inline-block');\n  }\n}\n",
            "selector": "a[href]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "hideIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.href",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "attr.rel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "attr.target",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "emailLinkKeyword",
                    "defaultValue": "'mailto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "hrefAttr",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.href'"
                        }
                    ]
                },
                {
                    "name": "internalLinks",
                    "defaultValue": "[\n    /** 'fsd.gov' - Removed until fsd.gov contains proper route back to sam.gov */\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Treat these domains as internal links</p>\n",
                    "line": 29,
                    "rawdescription": "\nTreat these domains as internal links",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "relAttr",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.rel'"
                        }
                    ]
                },
                {
                    "name": "targetAttr",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.target'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getAriaLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAppends indication that the link will open in a separate window to the aria label.\nIf link does not contain any aria label, then an aria label will be generated using either the inner text\n or href value based on whether the anchor element contains children elements or not\nIf link contains aria label, but the label does not contain key words 'new' or 'window',\n then the text 'opens in a new window' will be appended to the end of the aria label\nIf link contains aria label as well as the key words 'new' and 'window', then aria label will\n be kept as is\n",
                    "description": "<p>Appends indication that the link will open in a separate window to the aria label.\nIf link does not contain any aria label, then an aria label will be generated using either the inner text\n or href value based on whether the anchor element contains children elements or not\nIf link contains aria label, but the label does not contain key words &#39;new&#39; or &#39;window&#39;,\n then the text &#39;opens in a new window&#39; will be appended to the end of the aria label\nIf link contains aria label as well as the key words &#39;new&#39; and &#39;window&#39;, then aria label will\n be kept as is</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vc",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vc",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isExternalLink": {
                    "name": "isExternalLink",
                    "getSignature": {
                        "name": "isExternalLink",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 90
                    }
                }
            }
        },
        {
            "name": "SdsAccordionDirective",
            "id": "directive-SdsAccordionDirective-f1a598255cd23e7f968ee9cd7a1a43d4b86cddd56a04ec4c48fb6d9846c19f445c692c355ea1f9553c1a706861b294815386132da5965fb3adae866625e8f7f6",
            "file": "libs/packages/components/src/lib/accordion/accordion.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, ContentChildren, QueryList, AfterContentInit } from '@angular/core';\n\nimport { CdkAccordion } from '@angular/cdk/accordion';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { HOME, END } from '@angular/cdk/keycodes';\nimport { SDS_ACCORDION, SdsAccordionBase, SdsAccordionDisplayMode } from './accordion-base';\nimport { SdsAccordionItemHeaderComponent } from './accordion-item-header.component';\n\n@Directive({\n  selector: 'sds-accordion',\n  exportAs: 'sdsAccordion',\n  inputs: ['multi'],\n  providers: [\n    {\n      provide: SDS_ACCORDION,\n      useExisting: SdsAccordionDirective,\n    },\n  ],\n  host: {\n    class: 'sds-accordion',\n    '[class.sds-accordion--basic]': 'displayMode === \"basic\"',\n  },\n})\nexport class SdsAccordionDirective extends CdkAccordion implements SdsAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<SdsAccordionItemHeaderComponent>;\n\n  @ContentChildren(SdsAccordionItemHeaderComponent, { descendants: true })\n  _headers: QueryList<SdsAccordionItemHeaderComponent>;\n\n  @Input() displayMode: SdsAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the item headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const { keyCode } = event;\n    if (keyCode === HOME) {\n      this._keyManager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: SdsAccordionItemHeaderComponent) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n",
            "selector": "sds-accordion",
            "providers": [
                {
                    "name": "{\n    provide: SDS_ACCORDION, useExisting: SdsAccordionDirective,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "displayMode",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "SdsAccordionDisplayMode",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SdsAccordionItemHeaderComponent>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SdsAccordionItemHeaderComponent, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "_keyManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusKeyManager<SdsAccordionItemHeaderComponent>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_handleHeaderFocus",
                    "args": [
                        {
                            "name": "header",
                            "type": "SdsAccordionItemHeaderComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "header",
                            "type": "SdsAccordionItemHeaderComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_handleHeaderKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles keyboard events coming in from the item headers.",
                    "description": "<p>Handles keyboard events coming in from the item headers.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": "CdkAccordion",
            "implements": [
                "SdsAccordionBase",
                "AfterContentInit"
            ]
        },
        {
            "name": "SdsAccordionItemContentDirective",
            "id": "directive-SdsAccordionItemContentDirective-6123cd37485e46d1f95be4bdbf91fd1705accb07e141b5421e01be67f15d02054d22a5f6fac6d92e7f962750bc7b3401b29d3e195323008ea9ebf293eb1cb40c",
            "file": "libs/packages/components/src/lib/accordion/accordion-item-content.directive.ts",
            "type": "directive",
            "description": "<p>Accordion Item content that will be rendered lazily\nafter the accordion item is opened for the first time.</p>\n",
            "rawdescription": "\n\nAccordion Item content that will be rendered lazily\nafter the accordion item is opened for the first time.\n",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * Accordion Item content that will be rendered lazily\n * after the accordion item is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[sdsAccordionItemContent]',\n})\nexport class SdsAccordionItemContentDirective {\n  constructor(public _template: TemplateRef<any>) {}\n}\n",
            "selector": "ng-template[sdsAccordionItemContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SDSClickOutsideDirective",
            "id": "directive-SDSClickOutsideDirective-3d1c88cfbd9b2f8986f60f12c47b674b32466d2a385b3c935feaa08594dd0e562610ab77a27a61a9a153b6876682cebce85c783aaa073d58d2ca014424e1de50",
            "file": "libs/packages/components/src/lib/click-outside/click-outside.directive.ts",
            "type": "directive",
            "description": "<p>The <sam-click-outside> directive can detect whether a click is made inside\nthe target</p>\n",
            "rawdescription": "\n\nThe <sam-click-outside> directive can detect whether a click is made inside\nthe target\n",
            "sourceCode": "import { Directive, ElementRef, Output, EventEmitter, HostListener } from '@angular/core';\n\n/**\n * The <sam-click-outside> directive can detect whether a click is made inside\n * the target\n */\n@Directive({\n  selector: '[sds-click-outside]',\n})\nexport class SDSClickOutsideDirective {\n  /**\n   * Event emitted when clicked outside the target\n   */\n  @Output() clickOutside = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event.target'])\n  public onClick(targetElement) {\n    const clickedInside = this._elementRef.nativeElement.contains(targetElement);\n    if (!clickedInside) {\n      this.clickOutside.emit(undefined);\n    }\n  }\n}\n",
            "selector": "[sds-click-outside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when clicked outside the target\n",
                    "description": "<p>Event emitted when clicked outside the target</p>\n",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetElement",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsDialogActionsDirective",
            "id": "directive-SdsDialogActionsDirective-cad21d33ab086fb1885c2d0191e2ea1d93f353100d21e3d6292d42097bb90031389334965ac795598696380e85ee00104435b163eaf7a80b1ca0cf2d70df6171",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>Container for the bottom action buttons in a dialog.\nStays fixed to the bottom when scrolling.</p>\n",
            "rawdescription": "\n\nContainer for the bottom action buttons in a dialog.\nStays fixed to the bottom when scrolling.\n",
            "sourceCode": "import { Directive, Input, OnChanges, OnInit, Optional, SimpleChanges, ElementRef } from '@angular/core';\nimport { SdsDialogService } from './dialog';\nimport { SdsDialogRef } from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    type: 'button', // Prevents accidental form submits.\n  },\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-subtitle]': 'true' },\n})\nexport class SdsDialogSubtitleDirective {}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-content]': 'true' },\n})\nexport class SdsDialogContentDirective {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-actions]': 'true' },\n})\nexport class SdsDialogActionsDirective {}\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find((dialog) => dialog.id === parent!.id) : null;\n}\n",
            "selector": "[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "SdsDialogCloseDirective",
            "id": "directive-SdsDialogCloseDirective-cad21d33ab086fb1885c2d0191e2ea1d93f353100d21e3d6292d42097bb90031389334965ac795598696380e85ee00104435b163eaf7a80b1ca0cf2d70df6171",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>Button that will close the current dialog.</p>\n",
            "rawdescription": "\n\nButton that will close the current dialog.\n",
            "sourceCode": "import { Directive, Input, OnChanges, OnInit, Optional, SimpleChanges, ElementRef } from '@angular/core';\nimport { SdsDialogService } from './dialog';\nimport { SdsDialogRef } from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    type: 'button', // Prevents accidental form submits.\n  },\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-subtitle]': 'true' },\n})\nexport class SdsDialogSubtitleDirective {}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-content]': 'true' },\n})\nexport class SdsDialogContentDirective {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-actions]': 'true' },\n})\nexport class SdsDialogActionsDirective {}\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find((dialog) => dialog.id === parent!.id) : null;\n}\n",
            "selector": "button[sds-dialog-close], button[sdsDialogClose]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "aria-label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nScreenreader label for the button.",
                    "description": "<p>Screenreader label for the button.</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sds-dialog-close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDialog close input.",
                    "description": "<p>Dialog close input.</p>\n",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "sdsDialogClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "SdsDialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_dialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "SdsDialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsDialogContentDirective",
            "id": "directive-SdsDialogContentDirective-cad21d33ab086fb1885c2d0191e2ea1d93f353100d21e3d6292d42097bb90031389334965ac795598696380e85ee00104435b163eaf7a80b1ca0cf2d70df6171",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>Scrollable content container of a dialog.</p>\n",
            "rawdescription": "\n\nScrollable content container of a dialog.\n",
            "sourceCode": "import { Directive, Input, OnChanges, OnInit, Optional, SimpleChanges, ElementRef } from '@angular/core';\nimport { SdsDialogService } from './dialog';\nimport { SdsDialogRef } from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    type: 'button', // Prevents accidental form submits.\n  },\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-subtitle]': 'true' },\n})\nexport class SdsDialogSubtitleDirective {}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-content]': 'true' },\n})\nexport class SdsDialogContentDirective {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-actions]': 'true' },\n})\nexport class SdsDialogActionsDirective {}\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find((dialog) => dialog.id === parent!.id) : null;\n}\n",
            "selector": "[sds-dialog-content], sds-dialog-content, [sdsDialogContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "SdsDialogSubtitleDirective",
            "id": "directive-SdsDialogSubtitleDirective-cad21d33ab086fb1885c2d0191e2ea1d93f353100d21e3d6292d42097bb90031389334965ac795598696380e85ee00104435b163eaf7a80b1ca0cf2d70df6171",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>SubTitle of a dialog element</p>\n",
            "rawdescription": "\n\nSubTitle of a dialog element\n",
            "sourceCode": "import { Directive, Input, OnChanges, OnInit, Optional, SimpleChanges, ElementRef } from '@angular/core';\nimport { SdsDialogService } from './dialog';\nimport { SdsDialogRef } from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    type: 'button', // Prevents accidental form submits.\n  },\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-subtitle]': 'true' },\n})\nexport class SdsDialogSubtitleDirective {}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-content]': 'true' },\n})\nexport class SdsDialogContentDirective {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-actions]': 'true' },\n})\nexport class SdsDialogActionsDirective {}\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find((dialog) => dialog.id === parent!.id) : null;\n}\n",
            "selector": "[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "SdsDialogTitleDirective",
            "id": "directive-SdsDialogTitleDirective-cad21d33ab086fb1885c2d0191e2ea1d93f353100d21e3d6292d42097bb90031389334965ac795598696380e85ee00104435b163eaf7a80b1ca0cf2d70df6171",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>Title of a dialog element. Stays fixed to the top of the dialog when scrolling.</p>\n",
            "rawdescription": "\n\nTitle of a dialog element. Stays fixed to the top of the dialog when scrolling.\n",
            "sourceCode": "import { Directive, Input, OnChanges, OnInit, Optional, SimpleChanges, ElementRef } from '@angular/core';\nimport { SdsDialogService } from './dialog';\nimport { SdsDialogRef } from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    type: 'button', // Prevents accidental form submits.\n  },\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-subtitle]': 'true' },\n})\nexport class SdsDialogSubtitleDirective {}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-content]': 'true' },\n})\nexport class SdsDialogContentDirective {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: { '[class.sds-dialog-actions]': 'true' },\n})\nexport class SdsDialogActionsDirective {}\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find((dialog) => dialog.id === parent!.id) : null;\n}\n",
            "selector": "[sds-dialog-title], [sdsDialogTitle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "`sds-dialog-title-${dialogElementUid++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialogRef",
                        "type": "SdsDialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_dialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "_dialogRef",
                        "type": "SdsDialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsExpiresDirective",
            "id": "directive-SdsExpiresDirective-34d539f4a738b027963c8749620f12d53e8271a33f1e9390f68e3b72bf69f7400aa8add792230a06e8c6438d414c27f87fff0d32f0f3f9e208dd2c5f4965a567",
            "file": "libs/packages/components/src/lib/expires/expires.directive.ts",
            "type": "directive",
            "description": "<p>Define expiration date for a given element. If current date is\npast expiration date, the given element will not be displayed\nto the user\nusage:</p>\n<div *expires=\"'2021-01-13T22:30:59\">\n</div>\nThe element above expires after January 13 2021 10:30:59pm at user's local timezone.\n\n<p>You may also define desired timezone in following format:\nYYYY-MM-DDThh:mm:ss.sssZ\nexample: 2021:01013T22:30:59.000+5:00 // Eastern time</p>\n",
            "rawdescription": "\n\nDefine expiration date for a given element. If current date is\npast expiration date, the given element will not be displayed\nto the user\nusage:\n<div *expires=\"'2021-01-13T22:30:59\">\n</div>\nThe element above expires after January 13 2021 10:30:59pm at user's local timezone.\n\nYou may also define desired timezone in following format:\nYYYY-MM-DDThh:mm:ss.sssZ\nexample: 2021:01013T22:30:59.000+5:00 // Eastern time\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Define expiration date for a given element. If current date is\n * past expiration date, the given element will not be displayed\n * to the user\n * usage:\n * <div *expires=\"'2021-01-13T22:30:59\">\n * </div>\n * The element above expires after January 13 2021 10:30:59pm at user's local timezone.\n *\n * You may also define desired timezone in following format:\n * YYYY-MM-DDThh:mm:ss.sssZ\n * example: 2021:01013T22:30:59.000+5:00 // Eastern time\n */\n@Directive({\n  selector: '[expires]',\n})\nexport class SdsExpiresDirective {\n  /**\n   * Expiration date string. This string should be parsable\n   * through native Date object\n   * */\n  @Input() set expires(date: string) {\n    const expirationDate = new Date(date);\n    const today = new Date();\n\n    const isExpired = expirationDate.valueOf() < today.valueOf();\n\n    if (this.initialized) {\n      this.viewContainer.clear();\n    }\n    if (isExpired) {\n      this.viewContainer.clear();\n    } else {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    }\n    this.initialized = true;\n  }\n  // Track to allow expires to be updated without creating multiple instances of expiring element\n  private initialized = false;\n\n  constructor(private templateRef: TemplateRef<any>, private viewContainer: ViewContainerRef) {}\n}\n",
            "selector": "[expires]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "expires",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExpiration date string. This string should be parsable\nthrough native Date object\n",
                    "description": "<p>Expiration date string. This string should be parsable\nthrough native Date object</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "initialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "expires": {
                    "name": "expires",
                    "setSignature": {
                        "name": "expires",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "date",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "rawdescription": "\n\nExpiration date string. This string should be parsable\nthrough native Date object\n",
                        "description": "<p>Expiration date string. This string should be parsable\nthrough native Date object</p>\n",
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "SdsMenuTriggerForDirective",
            "id": "directive-SdsMenuTriggerForDirective-194353a6573557a9e32c7a628f17c1e8e181c3d796a414513508eb63b9e2f53f4a45e88ee8ba6a5cd6919360811748885c7e8e4a07d4a0c39f0a5b7066ed35a0",
            "file": "libs/packages/components/src/lib/menu/menu-trigger.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  ViewContainerRef,\n  HostBinding,\n  HostListener,\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { merge, Subscription } from 'rxjs';\nimport { SdsMenuInterface, SdsMenuComponent, MenuPositionX, MenuPositionY } from './menu.component';\n\n@Directive({\n  selector: '[sdsMenuTriggerFor]',\n})\nexport class SdsMenuTriggerForDirective implements OnDestroy {\n  /** ARIA haspopup for the menu trigger. */\n  @HostBinding('attr.aria-haspopup') ariaHasPopup = true;\n\n  /** ARIA expanded for the menu trigger. */\n  @HostBinding('attr.aria-expanded')\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** Holds the menu instance */\n  private _menu: SdsMenuInterface;\n\n  /** Holds value for menuOpen variable */\n  private _menuOpen = false;\n\n  /** CDK Portal for menu panel */\n  private _portal: TemplatePortal;\n\n  /** PortalOutlet */\n  private _overlayRef: OverlayRef | null = null;\n\n  /** Tracks input type  */\n  private _openedBy: 'mouse' | 'touch' | null = null;\n\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('sdsMenuTriggerFor')\n  get menu() {\n    return this._menu;\n  }\n  set menu(menu: SdsMenuInterface) {\n    if (menu === this._menu) {\n      return;\n    }\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.closed.asObservable().subscribe(() => {\n        this._destroyMenu();\n      });\n    }\n  }\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Handles mouse presses on the trigger. */\n  @HostListener('mousedown', ['$event'])\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n    }\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  @HostListener('click')\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  constructor(\n    private _overlay: Overlay,\n    private _element: ElementRef<HTMLElement>,\n    private _viewContainerRef: ViewContainerRef,\n    private _focusMonitor: FocusMonitor\n  ) {\n    // On touch devices set _openedBy to 'touch'\n    _element.nativeElement.addEventListener(\n      'touchstart',\n      () => (this._openedBy = 'touch'),\n      normalizePassiveListenerOptions({ passive: true })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener(\n      'touchstart',\n      () => (this._openedBy = 'touch'),\n      normalizePassiveListenerOptions({ passive: true })\n    );\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n    if (this.menu instanceof SdsMenuComponent) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.closed.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus(origin: FocusOrigin = 'program'): void {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  /** This method sets the menu state to open and focuses the first item */\n  private _initMenu(): void {\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** sets open state */\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n  }\n\n  /**\n   * This method resets the menu when it's closed,\n   * most importantly restoring focus to the menu trigger\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    if (!this._openedBy) {\n      this.focus();\n    } else {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    this._closingActionsSubscription.unsubscribe();\n\n    this._overlayRef.detach();\n\n    if (this.menu instanceof SdsMenuComponent) {\n      this.menu._resetAnimation();\n      this._resetMenu();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n      this._overlayRef.keydownEvents().subscribe();\n    }\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay\n        .position()\n        .flexibleConnectedTo(this._element)\n        .withLockedPosition()\n        .withTransformOriginOn('.sds-overlay'),\n      hasBackdrop: true,\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._overlay.scrollStrategies.reposition(),\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe((change) => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const [originX, originFallbackX]: HorizontalConnectionPos[] =\n      this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n      this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    const [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    const offsetY = 0;\n\n    if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    // Positions from most to least desirable\n    positionStrategy.withPositions([\n      { originX, originY, overlayX, overlayY, offsetY },\n      {\n        originX: originFallbackX,\n        originY,\n        overlayX: overlayFallbackX,\n        overlayY,\n        offsetY,\n      },\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY,\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY,\n      },\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef.backdropClick();\n    const detachments = this._overlayRef.detachments();\n    return merge(backdrop, detachments);\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n    return this._portal;\n  }\n}\n",
            "selector": "[sdsMenuTriggerFor]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "sdsMenuTriggerFor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReferences the menu instance that the trigger is associated with.",
                    "description": "<p>References the menu instance that the trigger is associated with.</p>\n",
                    "line": 59,
                    "type": "SdsMenuInterface",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "menuClosed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted when the associated menu is closed.",
                    "description": "<p>Event emitted when the associated menu is closed.</p>\n",
                    "line": 80,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "menuOpened",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted when the associated menu is opened.",
                    "description": "<p>Event emitted when the associated menu is opened.</p>\n",
                    "line": 77,
                    "type": "EventEmitter<void>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.aria-expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nARIA expanded for the menu trigger.",
                    "description": "<p>ARIA expanded for the menu trigger.</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "attr.aria-haspopup",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nARIA haspopup for the menu trigger.",
                    "description": "<p>ARIA haspopup for the menu trigger.</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles the menu between the open and closed states.",
                    "description": "<p>Toggles the menu between the open and closed states.</p>\n",
                    "line": 94
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles mouse presses on the trigger.",
                    "description": "<p>Handles mouse presses on the trigger.</p>\n",
                    "line": 84
                }
            ],
            "propertiesClass": [
                {
                    "name": "_closingActionsSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsMenuInterface",
                    "optional": false,
                    "description": "<p>Holds the menu instance</p>\n",
                    "line": 40,
                    "rawdescription": "\nHolds the menu instance",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_menuCloseSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_menuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Holds value for menuOpen variable</p>\n",
                    "line": 43,
                    "rawdescription": "\nHolds value for menuOpen variable",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_openedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"mouse\" | \"touch\" | null",
                    "optional": false,
                    "description": "<p>Tracks input type</p>\n",
                    "line": 52,
                    "rawdescription": "\nTracks input type",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_overlayRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "<p>PortalOutlet</p>\n",
                    "line": 49,
                    "rawdescription": "\nPortalOutlet",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_portal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplatePortal",
                    "optional": false,
                    "description": "<p>CDK Portal for menu panel</p>\n",
                    "line": 46,
                    "rawdescription": "\nCDK Portal for menu panel",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ariaHasPopup",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>ARIA haspopup for the menu trigger.</p>\n",
                    "line": 31,
                    "rawdescription": "\nARIA haspopup for the menu trigger.",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.aria-haspopup'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method creates the overlay from the provided menu's template and saves its\nOverlayRef so that it can be attached to the DOM when openMenu is called.\n",
                    "description": "<p>This method creates the overlay from the provided menu&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openMenu is called.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_destroyMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCloses the menu and does the necessary cleanup.",
                    "description": "<p>Closes the menu and does the necessary cleanup.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method builds the configuration object needed to create the overlay, the OverlayState.\n",
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayState.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 6124,
                                "end": 6131,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ]
                },
                {
                    "name": "_getPortal",
                    "args": [],
                    "optional": false,
                    "returnType": "TemplatePortal",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets the portal that should be attached to the overlay.",
                    "description": "<p>Gets the portal that should be attached to the overlay.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_handleMousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles mouse presses on the trigger.",
                    "description": "<p>Handles mouse presses on the trigger.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_initMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThis method sets the menu state to open and focuses the first item",
                    "description": "<p>This method sets the menu state to open and focuses the first item</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_menuClosingActions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReturns a stream that emits whenever an action that should close the menu occurs.",
                    "description": "<p>Returns a stream that emits whenever an action that should close the menu occurs.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_resetMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method resets the menu when it's closed,\nmost importantly restoring focus to the menu trigger\n",
                    "description": "<p>This method resets the menu when it&#39;s closed,\nmost importantly restoring focus to the menu trigger</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_setIsMenuOpen",
                    "args": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nsets open state",
                    "description": "<p>sets open state</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setPosition",
                    "args": [
                        {
                            "name": "positionStrategy",
                            "type": "FlexibleConnectedPositionStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the appropriate positions on a position strategy\nso the overlay connects with the trigger correctly.\n",
                    "description": "<p>Sets the appropriate positions on a position strategy\nso the overlay connects with the trigger correctly.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "positionStrategy",
                            "type": "FlexibleConnectedPositionStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_subscribeToPositions",
                    "args": [
                        {
                            "name": "position",
                            "type": "FlexibleConnectedPositionStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListens to changes in the position of the overlay and sets the correct classes\non the menu based on the new position.\n",
                    "description": "<p>Listens to changes in the position of the overlay and sets the correct classes\non the menu based on the new position.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "FlexibleConnectedPositionStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCloses the menu.",
                    "description": "<p>Closes the menu.</p>\n"
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFocuses the menu trigger.",
                    "description": "<p>Focuses the menu trigger.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpens the menu.",
                    "description": "<p>Opens the menu.</p>\n"
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles the menu between the open and closed states.",
                    "description": "<p>Toggles the menu between the open and closed states.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 96,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "menuOpen": {
                    "name": "menuOpen",
                    "getSignature": {
                        "name": "menuOpen",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 35,
                        "rawdescription": "\nARIA expanded for the menu trigger.",
                        "description": "<p>ARIA expanded for the menu trigger.</p>\n"
                    }
                },
                "menu": {
                    "name": "menu",
                    "setSignature": {
                        "name": "menu",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "menu",
                                "type": "SdsMenuInterface",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "menu",
                                "type": "SdsMenuInterface",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "menu",
                        "type": "",
                        "returnType": "",
                        "line": 59,
                        "rawdescription": "\nReferences the menu instance that the trigger is associated with.",
                        "description": "<p>References the menu instance that the trigger is associated with.</p>\n"
                    }
                }
            }
        },
        {
            "name": "SdsObserveWidthDirective",
            "id": "directive-SdsObserveWidthDirective-e260e59f6d70e7674ec6fa1db7d163426315191923868af131f3a3b2be1e33e11f55291f0ca5ca5c10311880850882426038a8d184727f9b0f7bf1d6afc092ff",
            "file": "libs/packages/components/src/lib/observers/observe-width.directive.ts",
            "type": "directive",
            "description": "<p>Directive that triggers a callback whenever the width of\nits associated element has changed.</p>\n",
            "rawdescription": "\n\nDirective that triggers a callback whenever the width of\nits associated element has changed.\n",
            "sourceCode": "import { Directive, Output, EventEmitter, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport { startWith } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n/**\n * Directive that triggers a callback whenever the width of\n * its associated element has changed.\n */\n@Directive({ selector: '[sdsObserveWidth]' })\nexport class SdsObserveWidthDirective implements OnInit, OnDestroy {\n  /** Event emitted for each change in the element's width. */\n  @Output('sdsObserveWidth') elementWidth = new EventEmitter<number>();\n\n  /** Subscription to window resize stream */\n  windowResize$: Subscription;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private viewportRuler: ViewportRuler) {}\n\n  ngOnInit() {\n    this.windowResize$ = this.viewportRuler\n      .change(0)\n      .pipe(startWith(this._getElementWidth()))\n      .subscribe(() => this._emitEvent());\n  }\n\n  ngOnDestroy() {\n    this.windowResize$.unsubscribe();\n  }\n\n  _emitEvent() {\n    const width = this._getElementWidth();\n    this.elementWidth.emit(width);\n  }\n\n  _getElementWidth(): number {\n    return this._elementRef.nativeElement.offsetWidth;\n  }\n}\n",
            "selector": "[sdsObserveWidth]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "sdsObserveWidth",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted for each change in the element's width.",
                    "description": "<p>Event emitted for each change in the element&#39;s width.</p>\n",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "windowResize$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>Subscription to window resize stream</p>\n",
                    "line": 16,
                    "rawdescription": "\nSubscription to window resize stream"
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "_getElementWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsPopoverDirective",
            "id": "directive-SdsPopoverDirective-996f01600d135c345f95ba975c7e9a8cc63839dea048f148826846ad6c128adb54ab43ea1404ec13c41371cbfde8f81dbca4d2cee242e2022153500014d16a9d",
            "file": "libs/packages/components/src/lib/popover/popover.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  Renderer2,\n  TemplateRef,\n  OnChanges,\n} from '@angular/core';\nimport { debounce } from './debounce.decorator';\n\n@Directive({\n  selector: '[sdsPopover]',\n  exportAs: 'sdsPopover',\n})\nexport class SdsPopoverDirective implements AfterViewInit, OnChanges {\n  private _sdsPopoverContent: string | TemplateRef<any> | HTMLParagraphElement;\n  private _sdsPopoverTitle: string | TemplateRef<any> | HTMLParagraphElement;\n\n  sdsPopoverDiv: HTMLElement;\n  popoverVisible = false;\n  popoverDivId: string;\n\n  @HostListener('click', ['$event']) onClick($event: MouseEvent) {\n    const clickedOnContent = this.sdsPopoverDiv.contains($event.target as any);\n    if (clickedOnContent && !this.closeOnContentClick) {\n      return;\n    }\n\n    this.clickEvent();\n  }\n\n  @HostListener('document:click', ['$event'])\n  clickout($event: MouseEvent) {\n    if (!this.closeOnClickOutside || !this.popoverVisible) {\n      return;\n    }\n\n    const clickedInElement = this.el.nativeElement.contains($event.target);\n    if (!clickedInElement) {\n      this.clickEvent();\n    }\n  }\n\n  /**\n   * Adding listener for keyup.enter to ensure that user can activate popover with keyboard\n   */\n  @HostListener('keyup.enter', ['$event']) onKeyUp($event: KeyboardEvent) {\n    if (!this.closeOnContentClick && this.sdsPopoverDiv.contains($event.target as any)) {\n      return;\n    }\n    this.clickEvent();\n  }\n\n  @HostListener('keyup.escape', ['$event']) onEscape($event: KeyboardEvent) {\n    this.hidePopover();\n  }\n\n  /**\n   * Adding listener for keydown.space to ensure that user can activate popover with keyboard\n   */\n  @HostListener('keydown.Space', ['$event']) onKeySpace($event: KeyboardEvent) {\n    if (!this.closeOnContentClick && this.sdsPopoverDiv.contains($event.target as any)) {\n      return;\n    }\n    this.clickEvent();\n    $event.preventDefault();\n  }\n\n  @Input()\n  position: string = 'top';\n\n  @Input() closeOnContentClick = true;\n\n  @Input() closeOnClickOutside = false;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.addClass(this.el.nativeElement, 'sds-popover');\n\n    this.sdsPopoverDiv = document.createElement('div');\n  }\n\n  ngAfterViewInit() {\n    // Generating semi-random id for use with aria-describedby\n    this.popoverDivId = this.el.nativeElement.id\n      ? `${this.el.nativeElement.id}-popover`\n      : `${this.el.nativeElement.tagName}-${this.el.nativeElement.offsetTop}-${this.el.nativeElement.offsetWidth}-popover`;\n    this.sdsPopoverDiv.id = this.popoverDivId;\n\n    this.renderer.addClass(this.sdsPopoverDiv, 'sds-popover__content');\n    this.renderer.addClass(this.sdsPopoverDiv, 'tooltip');\n    this.renderer.addClass(this.sdsPopoverDiv, 'out');\n    this.handlePosition();\n\n    this.renderer.setAttribute(this.sdsPopoverDiv, 'aria-hidden', 'true');\n\n    // Add title section and divider if title included\n    if (this._sdsPopoverTitle) {\n      this.handlePopoverTitle();\n    }\n\n    this.handlePopoverContent();\n\n    this.renderer.setAttribute(this.el.nativeElement, 'role', 'button');\n    this.renderer.setAttribute(this.el.nativeElement, 'aria-expanded', 'false');\n    this.renderer.setAttribute(this.el.nativeElement, 'aria-haspopup', 'dialog');\n\n    this.renderer.appendChild(this.el.nativeElement, this.sdsPopoverDiv);\n  }\n\n  handlePosition() {\n    this.renderer.setAttribute(this.sdsPopoverDiv, 'data-position', this.position);\n\n    this.renderer.addClass(this.sdsPopoverDiv, this.position);\n  }\n\n  handlePopoverTitle() {\n    this.renderer.appendChild(this.sdsPopoverDiv, this._sdsPopoverTitle);\n\n    const divider = document.createElement('hr');\n    this.renderer.addClass(divider, 'divider');\n    this.renderer.appendChild(this.sdsPopoverDiv, divider);\n  }\n\n  handlePopoverContent() {\n    this.renderer.appendChild(this.sdsPopoverDiv, this._sdsPopoverContent);\n  }\n\n  @Input()\n  set sdsPopover(value: string | TemplateRef<any> | HTMLParagraphElement) {\n    this._sdsPopoverContent = this.handlePopoverSection(value, 'content');\n  }\n\n  get sdsPopover(): string | TemplateRef<any> | HTMLParagraphElement {\n    return this._sdsPopoverContent;\n  }\n\n  @Input()\n  set sdsPopoverTitle(value: string | TemplateRef<any> | HTMLParagraphElement) {\n    this._sdsPopoverTitle = this.handlePopoverSection(value, 'title');\n  }\n\n  get sdsPopoverTitle(): string | TemplateRef<any> | HTMLParagraphElement {\n    return this._sdsPopoverTitle;\n  }\n\n  handlePopoverSection(\n    value: string | TemplateRef<any> | HTMLParagraphElement,\n    classToApply: string\n  ): string | TemplateRef<any> | HTMLParagraphElement {\n    let popoverSection;\n    if (typeof value === 'string') {\n      popoverSection = document.createElement('p');\n      popoverSection.innerText = value;\n      this.renderer.addClass(popoverSection, classToApply);\n    } else {\n      popoverSection = value;\n    }\n    return popoverSection;\n  }\n\n  /**\n   * Using debounce decorator here to prevent a scenario where a popover is\n   * applied to a button and this function is called by both the enter key\n   * listener and click listener.\n   */\n  @debounce(100)\n  clickEvent() {\n    this.popoverVisible = !this.popoverVisible;\n    if (this.popoverVisible) {\n      this.renderer.addClass(this.sdsPopoverDiv, 'sds-popover__shown');\n      this.renderer.setAttribute(this.sdsPopoverDiv, 'aria-hidden', 'false');\n      this.renderer.setAttribute(this.el.nativeElement, 'aria-describedby', this.popoverDivId);\n      this.renderer.setAttribute(this.el.nativeElement, 'aria-expanded', 'true');\n      this.renderer.setAttribute(this.el.nativeElement, 'role', 'none');\n      this.renderer.removeClass(this.sdsPopoverDiv, 'sds-popover__hidden');\n    } else {\n      this.hidePopover();\n    }\n  }\n\n  hidePopover() {\n    this.popoverVisible = false;\n    this.renderer.addClass(this.sdsPopoverDiv, 'sds-popover__hidden');\n    this.renderer.setAttribute(this.sdsPopoverDiv, 'aria-hidden', 'true');\n    this.renderer.setAttribute(this.el.nativeElement, 'aria-expanded', 'false');\n    this.renderer.setAttribute(this.el.nativeElement, 'role', 'button');\n\n    this.renderer.removeClass(this.sdsPopoverDiv, 'sds-popover__shown');\n    this.renderer.removeAttribute(this.el.nativeElement, 'aria-describedby');\n  }\n  ngOnChanges(): void {\n    this.onChangesPositionUpdate();\n    this.onChangesSdsPopoverTitleUpdate();\n    this.onChangesSdsPopoverUpdate();\n  }\n\n  onChangesPositionUpdate() {\n    const possibleDirections = ['top', 'bottom', 'left', 'right'];\n    this.sdsPopoverDiv.classList.remove(...possibleDirections);\n\n    this.renderer.setAttribute(this.sdsPopoverDiv, 'data-position', this.position);\n\n    this.renderer.addClass(this.sdsPopoverDiv, this.position);\n  }\n\n  onChangesSdsPopoverUpdate() {\n    const contentToRemove = this.sdsPopoverDiv.querySelector('.content');\n    if (contentToRemove) {\n      this.renderer.removeChild(contentToRemove.parentNode, contentToRemove);\n      this.handlePopoverContent();\n    }\n  }\n\n  onChangesSdsPopoverTitleUpdate() {\n    const titleToRemove = this.sdsPopoverDiv.querySelector('.title');\n    const dividerToRemove = this.sdsPopoverDiv.querySelector('.divider');\n    if (titleToRemove) {\n      this.renderer.removeChild(titleToRemove.parentNode, dividerToRemove);\n      this.renderer.removeChild(titleToRemove.parentNode, titleToRemove);\n      this.handlePopoverTitle();\n    }\n  }\n}\n",
            "selector": "[sdsPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "closeOnClickOutside",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closeOnContentClick",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sdsPopover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 131,
                    "type": "string | TemplateRef | HTMLParagraphElement",
                    "decorators": []
                },
                {
                    "name": "sdsPopoverTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 140,
                    "type": "string | TemplateRef | HTMLParagraphElement",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                },
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35
                },
                {
                    "name": "keydown.Space",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdding listener for keydown.space to ensure that user can activate popover with keyboard\n",
                    "description": "<p>Adding listener for keydown.space to ensure that user can activate popover with keyboard</p>\n",
                    "line": 63
                },
                {
                    "name": "keyup.enter",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdding listener for keyup.enter to ensure that user can activate popover with keyboard\n",
                    "description": "<p>Adding listener for keyup.enter to ensure that user can activate popover with keyboard</p>\n",
                    "line": 49
                },
                {
                    "name": "keyup.escape",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56
                }
            ],
            "propertiesClass": [
                {
                    "name": "_sdsPopoverContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | TemplateRef<any> | HTMLParagraphElement",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_sdsPopoverTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | TemplateRef<any> | HTMLParagraphElement",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "popoverDivId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "popoverVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sdsPopoverDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "clickEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUsing debounce decorator here to prevent a scenario where a popover is\napplied to a button and this function is called by both the enter key\nlistener and click listener.\n",
                    "description": "<p>Using debounce decorator here to prevent a scenario where a popover is\napplied to a button and this function is called by both the enter key\nlistener and click listener.</p>\n",
                    "decorators": [
                        {
                            "name": "debounce",
                            "stringifiedArguments": "100"
                        }
                    ]
                },
                {
                    "name": "clickout",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePopoverContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handlePopoverSection",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | TemplateRef<any> | HTMLParagraphElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "classToApply",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | TemplateRef | HTMLParagraphElement",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | TemplateRef<any> | HTMLParagraphElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "classToApply",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePopoverTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handlePosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hidePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangesPositionUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangesSdsPopoverTitleUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangesSdsPopoverUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEscape",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup.escape', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeySpace",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdding listener for keydown.space to ensure that user can activate popover with keyboard\n",
                    "description": "<p>Adding listener for keydown.space to ensure that user can activate popover with keyboard</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown.Space', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdding listener for keyup.enter to ensure that user can activate popover with keyboard\n",
                    "description": "<p>Adding listener for keyup.enter to ensure that user can activate popover with keyboard</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup.enter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sdsPopover": {
                    "name": "sdsPopover",
                    "setSignature": {
                        "name": "sdsPopover",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLParagraphElement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 131,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLParagraphElement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sdsPopover",
                        "type": "",
                        "returnType": "string | TemplateRef | HTMLParagraphElement",
                        "line": 135
                    }
                },
                "sdsPopoverTitle": {
                    "name": "sdsPopoverTitle",
                    "setSignature": {
                        "name": "sdsPopoverTitle",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLParagraphElement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 140,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLParagraphElement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sdsPopoverTitle",
                        "type": "",
                        "returnType": "string | TemplateRef | HTMLParagraphElement",
                        "line": 144
                    }
                }
            }
        },
        {
            "name": "SdsPopupDirective",
            "id": "directive-SdsPopupDirective-73fb98b84fdaceb6100eec2a2f96de9b63d35dbb55af41a1a7e51966734737d541a4b84bc40cc3b3c45187eae9b9f1182ac6ce4b5e05352c475db549d136676a",
            "file": "libs/packages/components/src/lib/popup/popup.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, ElementRef, Renderer2, AfterViewInit, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[sdsPopup]',\n  exportAs: 'sdsPopup',\n})\nexport class SdsPopupDirective implements AfterViewInit {\n  @Input() sdsPopup: HTMLElement;\n  @Input() position: string;\n  @Input() placement: string;\n  sdsPopupDiv: HTMLElement;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.addClass(this.el.nativeElement, 'sds-popup');\n    this.sdsPopupDiv = document.createElement('div');\n    this.renderer.addClass(this.sdsPopupDiv, 'sds-popup__content');\n  }\n\n  ngAfterViewInit() {\n    this.renderer.appendChild(this.el.nativeElement, this.sdsPopup);\n    this.renderer.addClass(this.sdsPopupDiv, this.placement);\n    this.renderer.addClass(this.sdsPopupDiv, this.position);\n    this.renderer.appendChild(this.sdsPopupDiv, this.el.nativeElement.children[0]);\n    this.renderer.appendChild(this.el.nativeElement, this.sdsPopupDiv);\n  }\n}\n",
            "selector": "[sdsPopup]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "placement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sdsPopup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "HTMLElement",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "sdsPopupDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SDSTabOutsideDirective",
            "id": "directive-SDSTabOutsideDirective-689f4ad957797859b01049f73ecca37efbe0b2d6ec1e8143ed3daf5263cc783a47bff940186058b79d230da7a5ba2b576589e188d0633ec8360295f7c9eecbf2",
            "file": "libs/packages/components/src/lib/tab-outside/taboutside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Output, EventEmitter, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[sds-tab-outside]',\n})\nexport class SDSTabOutsideDirective {\n  /**\n   * Emitter for tabOutside event\n   */\n  @Output() tabOutside: EventEmitter<any> = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef) {}\n\n  @HostListener('document:keyup', ['$event.target'])\n  public hasFocusChanged(target) {\n    const isInsideHost = this._elementRef.nativeElement.contains(target);\n    if (!isInsideHost) {\n      this.tabOutside.emit(undefined);\n    }\n  }\n}\n",
            "selector": "[sds-tab-outside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "tabOutside",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmitter for tabOutside event\n",
                    "description": "<p>Emitter for tabOutside event</p>\n",
                    "line": 10,
                    "type": "EventEmitter<any>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keyup",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hasFocusChanged",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keyup', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsTooltipDirective",
            "id": "directive-SdsTooltipDirective-46fdde607c260f4593964230c49c6a31f4a98f63fa29c432dff50927a70f7156114eec75422a2fb8e0d6bda05338da2ce7c6f31e0f569f7b259fcf850cfd4345",
            "file": "libs/packages/components/src/lib/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n  TemplateRef,\n} from '@angular/core';\n\n@Directive({\n  selector: '[sdsTooltip]',\n  exportAs: 'sdsTooltip',\n})\nexport class SdsTooltipDirective implements AfterViewInit, OnChanges {\n  private _sdsTooltip: string | TemplateRef<any> | HTMLDivElement;\n  sdsTooltipDiv: HTMLElement;\n\n  @Input()\n  position: string = 'top';\n\n  private _tooltipShowing = false;\n\n  /**\n   * Handling  hover, focus & blur here to allow the tooltip to be removed when \"esc\" pressed.\n   */\n  @HostListener('mouseenter') onMouseEnter() {\n    this.showTooltip();\n  }\n  @HostListener('mouseleave') onMouseLeave() {\n    this.hideTooltip();\n  }\n  @HostListener('focus') onFocus() {\n    this.showTooltip();\n  }\n  @HostListener('blur') onBlur() {\n    this.hideTooltip();\n  }\n\n  @HostListener('window:keyup.escape', ['$event']) onKeyUp($event: KeyboardEvent) {\n    if (this._tooltipShowing) {\n      this.hideTooltip();\n    }\n  }\n\n  showTooltip() {\n    this.renderer.setAttribute(this.sdsTooltipDiv, 'aria-hidden', 'false');\n    this.renderer.addClass(this.sdsTooltipDiv, 'tooltip-expanded');\n    this._tooltipShowing = true;\n  }\n  hideTooltip() {\n    this.renderer.setAttribute(this.sdsTooltipDiv, 'aria-hidden', 'true');\n    this.renderer.removeClass(this.sdsTooltipDiv, 'tooltip-expanded');\n    this._tooltipShowing = false;\n  }\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.addClass(this.el.nativeElement, 'sds-tooltip');\n    this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '0');\n\n    this.sdsTooltipDiv = document.createElement('div');\n\n    this.renderer.addClass(this.sdsTooltipDiv, 'sds-tooltip__content');\n  }\n\n  ngAfterViewInit() {\n    this.renderer.setAttribute(this.sdsTooltipDiv, 'data-position', this.position);\n    if (this.position && this.sdsTooltip) {\n      this.renderer.addClass(this.sdsTooltipDiv, this.position);\n      this.renderer.appendChild(this.sdsTooltipDiv, this.sdsTooltip);\n      this.renderer.appendChild(this.el.nativeElement, this.sdsTooltipDiv);\n    }\n  }\n\n  @Input()\n  set sdsTooltip(value: string | TemplateRef<any> | HTMLDivElement) {\n    if (typeof value === 'string') {\n      this._sdsTooltip = document.createElement('div');\n      this._sdsTooltip.innerHTML = value;\n    } else {\n      this._sdsTooltip = value;\n    }\n\n    if (this._sdsTooltip) {\n      this.renderer.addClass(this._sdsTooltip, 'tooltip');\n    }\n  }\n\n  get sdsTooltip(): string | TemplateRef<any> | HTMLDivElement {\n    return this._sdsTooltip;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.position) {\n      this.clearAndReplacePosition(changes.position.currentValue, changes.position.previousValue);\n    }\n    if (changes.sdsTooltip && !changes.sdsTooltip.firstChange) {\n      this.clearAndReplaceTooltipContent(this.sdsTooltip);\n    }\n  }\n\n  clearAndReplacePosition(newPosition: string, oldPosition?: string) {\n    if (oldPosition) {\n      this.renderer.removeClass(this.sdsTooltipDiv, oldPosition);\n    }\n    this.renderer.setAttribute(this.sdsTooltipDiv, 'data-position', newPosition);\n    this.renderer.addClass(this.sdsTooltipDiv, newPosition);\n  }\n\n  clearAndReplaceTooltipContent(newContent) {\n    const toRemove = this.sdsTooltipDiv.querySelector('.tooltip');\n    this.renderer.removeChild(toRemove.parentNode, toRemove);\n    this.renderer.appendChild(this.sdsTooltipDiv, newContent);\n  }\n}\n",
            "selector": "[sdsTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "position",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sdsTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string | TemplateRef | HTMLDivElement",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandling  hover, focus & blur here to allow the tooltip to be removed when \"esc\" pressed.\n",
                    "description": "<p>Handling  hover, focus &amp; blur here to allow the tooltip to be removed when &quot;esc&quot; pressed.</p>\n",
                    "line": 29
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32
                },
                {
                    "name": "window:keyup.escape",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42
                }
            ],
            "propertiesClass": [
                {
                    "name": "_sdsTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | TemplateRef<any> | HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tooltipShowing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sdsTooltipDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "clearAndReplacePosition",
                    "args": [
                        {
                            "name": "newPosition",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oldPosition",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newPosition",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldPosition",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAndReplaceTooltipContent",
                    "args": [
                        {
                            "name": "newContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur'"
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup.escape', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandling  hover, focus & blur here to allow the tooltip to be removed when \"esc\" pressed.\n",
                    "description": "<p>Handling  hover, focus &amp; blur here to allow the tooltip to be removed when &quot;esc&quot; pressed.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                },
                {
                    "name": "showTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sdsTooltip": {
                    "name": "sdsTooltip",
                    "setSignature": {
                        "name": "sdsTooltip",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLDivElement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 78,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLDivElement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sdsTooltip",
                        "type": "",
                        "returnType": "string | TemplateRef | HTMLDivElement",
                        "line": 91
                    }
                }
            }
        },
        {
            "name": "SdsTreeTableRow",
            "id": "directive-SdsTreeTableRow-d5ca2860f4e2bd7628d236428111b1502478ad8d01b88e0c9f75c2fed4dfa59e9d3892b3a8a6b02a15b5c7809f0ede1d92ba26c4d1bd878c9e262ebe361c115f",
            "file": "libs/packages/components/src/lib/tree-table/tree-table.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  Output,\n  TemplateRef,\n} from '@angular/core';\nimport { SdsTreeTableData } from './tree-table.model';\n\n@Directive({\n  selector: `[sdsTreeTableRow]`,\n})\nexport class SdsTreeTableRow {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n\n@Component({\n  selector: `sds-tree-table`,\n  templateUrl: `./tree-table.component.html`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsTreeTableComponent {\n  /** Rows of table tada to display */\n  @Input() dataSource: SdsTreeTableData[];\n\n  /** Column header text */\n  @Input() displayColumns: string[];\n\n  /**\n   * Defines maximum number of children to show to the user\n   * IE - if a row has 20 children available, and childrenLimit\n   * value is 10, then the amount of children displayed to the\n   * user will be numChildrenToDisplay amount, and the rest\n   * is toggled behind a 'View All' button,\n   * This should be greater than or equal to numChildrenToDisplay\n   * @default - Number.MAX_SAFE_INTEGER\n   */\n  @Input() childrenLimit: number = Number.MAX_SAFE_INTEGER;\n\n  /**\n   * Number of children to Display to users if a row's children length\n   * exceeds childrenLimit. This should be less than or equal to childrenLimit\n   *\n   * General Cases:\n   * If numChildrenToDisplay is 5, childrenLimit is 10, and row has 20 children\n   *  5 children will be shown and the remaining can be displayed through View All button\n   *\n   * If numChildrenToDisplay is 5, childrenLimit is 10, and row has 10 children\n   *  All 10 children will be displayed because the row's children does not exceed childrenLimit\n   *\n   * If numChildren is 5, childrenLimit is 10, and row has 4 children\n   *  All 4 children will be displayed because row's children does not exceed childrenLimit\n   *\n   * @default - Number.MAX_SAFE_INTEGER\n   */\n  @Input() numChildrenToDisplay: number = this.childrenLimit;\n\n  /**\n   * Reference for content projection. User defined values for how to\n   * display each cell in a row\n   */\n  @ContentChild(SdsTreeTableRow) treetableRow: SdsTreeTableRow;\n\n  /** Emitted for a row if there are more children to display and user clicked view all */\n  @Output() viewAll = new EventEmitter<any>();\n\n  /** Emitted anytime a row 's expansion / collapse value changes */\n  @Output() rowExpanded = new EventEmitter<any>();\n\n  _selectedRow: any;\n  _selectedRowParent: any;\n\n  constructor(private elementRef: ElementRef, public cdr: ChangeDetectorRef, private ngZone: NgZone) {}\n\n  /**\n   * Public Interface - close all opened children\n   */\n  public collapseAll() {\n    this.toggleAllHelper(this.dataSource, false);\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Public interface - open all panels with children\n   */\n  public expandAll() {\n    this.toggleAllHelper(this.dataSource, true);\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Public interface - expand a single row given an ID.\n   * The row's predecessors will also be expanded\n   * @param rowId - id of row to expand\n   */\n  public expandRow(rowId: string) {\n    this.expandRowHelper(this.dataSource, rowId);\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Public Interface - Collapse a single row given an id.\n   * The row's successors will also be collapsed\n   * @param rowId - id of row to collapse\n   */\n  public collapseRow(rowId: string) {\n    const row = this.findRow(this.dataSource, rowId);\n    if (!row) {\n      return;\n    }\n\n    this.collapseRowHelper(row);\n    this.cdr.detectChanges();\n  }\n\n  viewAllClicked(row: SdsTreeTableData, currentRow: HTMLTableRowElement, tableRow: HTMLTableRowElement) {\n    currentRow.setAttribute('tabindex', undefined);\n    tableRow.setAttribute('tabindex', '0');\n    row.viewAllChildren = true;\n    setTimeout(() => tableRow.focus());\n    if (!row.children && !row.totalChildren) {\n      return;\n    }\n    if (\n      (row.totalChildren && this.moreChildrenThanShowing(row)) ||\n      (row.children && this.moreChildrenThanInitialLimit(row))\n    ) {\n      this.viewAll.emit(row);\n    }\n  }\n\n  private moreChildrenThanShowing(row: SdsTreeTableData): boolean {\n    return row.totalChildren > row.children?.length;\n  }\n\n  private moreChildrenThanInitialLimit(row): boolean {\n    return row.children.length > this.childrenLimit;\n  }\n\n  private toggleAllHelper(data: any[], expanded: boolean) {\n    data.forEach((data) => {\n      if (data.children) {\n        this.toggleAllHelper(data.children, expanded);\n        data.expanded = expanded;\n\n        if (!expanded) {\n          data.viewAllChildren = false;\n        }\n      }\n    });\n  }\n\n  private expandRowHelper(allRows: any[], id: string) {\n    for (let i = 0; i < allRows.length; i++) {\n      const row = allRows[i];\n      if (row.id === id) {\n        return true;\n      } else if (row.children) {\n        const isChildExpanded = this.expandRowHelper(row.children, id);\n        if (isChildExpanded) {\n          row.expanded = true;\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private findRow(allRows: any[], id: string) {\n    for (let i = 0; i < allRows.length; i++) {\n      const row = allRows[i];\n      if (row.id === id) {\n        return row;\n      } else if (row.children) {\n        return this.findRow(allRows, id);\n      }\n    }\n    return null;\n  }\n\n  private collapseRowHelper(row: any) {\n    row.expanded = false;\n    row.viewAllChildren = false;\n    if (row.children) {\n      row.children.forEach((child) => this.collapseRowHelper(child));\n    }\n  }\n\n  /** Sets height of vertical border on the tree table view */\n  setHeight(row: HTMLTableRowElement, parentRow: HTMLTableRowElement, border: HTMLSpanElement) {\n    if (!row || !parentRow) {\n      return;\n    }\n\n    /**\n     * We run outside ngZone because we don't want the setTimeout to trigger change detection,\n     * which would re-run changes on template, and re-evalute this function, causing infinite loop\n     */\n    this.ngZone.runOutsideAngular(() => {\n      /**\n       * We do set timeout to let the table rows finish rendering. If a row was\n       * expanded / collapsed, then the height of the vertical border will need to\n       * be re-evaluated based on new distance from child to parent. We let the\n       * view finish refreshing so that bounding rectangle is re-evaluated, and then\n       * we can re-calculate height. Doing this synchronously without setTimeout\n       * would give us incorrect value for height because the bouunding rectangle\n       * has yet to update from the collapse / expand change\n       */\n      setTimeout(() => {\n        const firstRect = parentRow.getBoundingClientRect();\n        const rowRect = row.getBoundingClientRect();\n\n        const yFirstRect = firstRect.top + firstRect.height / 2;\n        const yRowRect = rowRect.top + rowRect.height / 2;\n\n        const height = yRowRect - yFirstRect - 20;\n        border.style.height = `${height}px`;\n        border.style.bottom = `${rowRect.height / 2}px`;\n      });\n    });\n  }\n\n  /**\n   * Defines whether or not to display vertical border from this row. Vertical borders generally\n   * start from the last child and extend to the parent. However, if we are truncating the number\n   * of children displayed, then the vertical border would need to start from the child we\n   * truncate at.\n   * */\n  displayVerticalBorder(parentRow: SdsTreeTableData, index: number, siblingRows: SdsTreeTableRow[]): boolean {\n    if (!siblingRows) return false;\n\n    // Decide whether last child displayed is last child in row's children index or is at numChildrenToDisplay\n    if (parentRow.viewAllChildren || siblingRows.length <= this.childrenLimit) {\n      return index === siblingRows.length - 1;\n    } else {\n      return index === this.numChildrenToDisplay - 1;\n    }\n  }\n\n  getTemplateContext(\n    parent: any,\n    row: any,\n    index: number,\n    level: number,\n    parentSelected?: boolean,\n    parentRow?: HTMLTableRowElement\n  ) {\n    const updatedLevel = level + 1;\n    const posinset = index + 1;\n    return {\n      row: row,\n      level: updatedLevel,\n      index: posinset,\n      size: parent.children ? parent.children.length : 1,\n      rows: parent.children,\n      parentSelected: parentSelected,\n      parent: parent,\n      parentRow: parentRow,\n    };\n  }\n\n  onRowClicked(row: SdsTreeTableData, tableRow: HTMLTableRowElement) {\n    if (row.children || row.totalChildren > 0) {\n      row.expanded = !row.expanded;\n    }\n\n    if (!row.expanded) {\n      row.viewAllChildren = false;\n    }\n\n    this._selectedRow = row;\n    this._selectedRowParent = this.getParentOfRow(this.dataSource, row);\n    setTimeout(() => tableRow.focus());\n    this.rowExpanded.emit(row);\n  }\n\n  onKeyDown($event: KeyboardEvent, tableRow: HTMLTableRowElement) {\n    if ($event.target != tableRow) {\n      return;\n    }\n\n    let siblingRow: HTMLTableRowElement;\n\n    if ($event.key === 'ArrowUp') {\n      siblingRow = ($event.target as HTMLTableRowElement).previousElementSibling as HTMLTableRowElement;\n    } else if ($event.key === 'ArrowDown') {\n      siblingRow = ($event.target as HTMLTableRowElement).nextElementSibling as HTMLTableRowElement;\n    } else if ($event.key === 'Home') {\n      siblingRow = this.elementRef.nativeElement.querySelector('tbody tr');\n    } else if ($event.key === 'End') {\n      siblingRow = this.elementRef.nativeElement.querySelector('tbody tr:last-child');\n    }\n\n    if (!siblingRow) return;\n\n    ($event.target as HTMLTableRowElement).setAttribute('tabindex', undefined);\n    siblingRow.setAttribute('tabindex', '0');\n    siblingRow.focus();\n    $event.preventDefault();\n  }\n\n  getParentOfRow(allRows: any[], row: any) {\n    let retRow = null;\n    for (let i = 0; i < allRows.length; i++) {\n      if (allRows[i] === row) {\n        retRow = allRows[i];\n        break;\n      } else if (allRows[i].children) {\n        const isChildRow = this.getParentOfRow(allRows[i].children, row);\n        if (isChildRow) {\n          retRow = allRows[i];\n        }\n      }\n    }\n\n    return retRow;\n  }\n}\n",
            "selector": "[sdsTreeTableRow]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsTruncateTextByLineDirective",
            "id": "directive-SdsTruncateTextByLineDirective-948e22f73c4ab65d8e583836b1c9db2f4dd7fc544c61538227b6c5342765059ea869e8764a8a2a6fa343e5a2f6b23d3f321bb5243d0f151441169b2628508fe8",
            "file": "libs/packages/components/src/lib/truncate-text/truncate-text.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  OnInit,\n  Input,\n  OnDestroy,\n  AfterViewInit,\n  HostListener,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ViewportRuler, OverlayConfig, Overlay, OverlayRef, ConnectedPosition } from '@angular/cdk/overlay';\nimport { Subscription, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { PortalInjector, ComponentPortal } from '@angular/cdk/portal';\nimport { SdsTruncatedTextContainerComponent } from './truncate-text-container.component';\nimport { SDS_TRUNCATED_TEXT_DATA } from './truncates-text-base';\n\n@Directive({ selector: '[sdsTruncateTextByLine]' })\nexport class SdsTruncateTextByLineDirective implements OnInit, OnDestroy, AfterViewInit {\n  /** Maximum lines of text limit */\n  @Input('sdsTruncateTextByLine')\n  get textLinesLimit(): any {\n    return this._textLinesLimit;\n  }\n  set textLinesLimit(_textLinesLimit: any) {\n    _textLinesLimit = coerceNumberProperty(_textLinesLimit);\n    if (this._textLinesLimit !== _textLinesLimit) {\n      this._textLinesLimit = _textLinesLimit;\n    }\n  }\n  private _textLinesLimit: number;\n\n  /** PortalOutlet */\n  private _overlayRef: OverlayRef | null = null;\n\n  /** Holds subscription to stream of overlay closing events */\n  private _closingActionsSubscription = Subscription.EMPTY;\n\n  /** Holds initial text */\n  private initialText: string;\n\n  /** Subscription to window resize stream */\n  windowResize$: Subscription;\n\n  /** Approximated character width of the host text */\n  private approximatedCharacterWidth: number;\n\n  constructor(\n    private _overlay: Overlay,\n    private _injector: Injector,\n    private _element: ElementRef,\n    private _viewportRuler: ViewportRuler,\n    private _viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnInit() {\n    this.initialText = this._element.nativeElement.innerText.trim();\n\n    // Clone element to facilitate calculations\n    const hostCloneEl = this._element.nativeElement.cloneNode() as HTMLElement;\n\n    // Add 1 character to calculate character width\n    hostCloneEl.innerHTML = 'x';\n\n    // Render the clone to get character width\n    this._element.nativeElement.parentElement.appendChild(hostCloneEl);\n\n    // Set the clone to inline to prevent cases where the clone\n    // expands to 100% width of the container\n    hostCloneEl.setAttribute('style', 'display: inline');\n\n    // These are close approximations that are used to better guess\n    // how many characters fit in X number of lines\n    this.approximatedCharacterWidth = hostCloneEl.offsetWidth;\n\n    // Remove clone after calculations\n    hostCloneEl.remove();\n  }\n\n  ngAfterViewInit(): void {\n    this.windowResize$ = this._viewportRuler\n      .change(0)\n      .pipe(startWith('Start'))\n      .subscribe(() => this.updateUI());\n  }\n\n  ngOnDestroy(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n    this._closingActionsSubscription.unsubscribe();\n    this.windowResize$.unsubscribe();\n  }\n\n  /** Configures and creates the CDK overlay */\n  private _createOverlay() {\n    const overlayPositions: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top',\n    };\n    const config = new OverlayConfig({\n      positionStrategy: this._overlay\n        .position()\n        .flexibleConnectedTo(this._element)\n        .withLockedPosition()\n        .withPositions([overlayPositions])\n        .withTransformOriginOn('.sds-overlay'),\n      hasBackdrop: true,\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._overlay.scrollStrategies.close(),\n    });\n    return this._overlay.create(config);\n  }\n\n  /** Attach a ComponentPortal to the overlay **/\n  private _attachContainer(overlay: OverlayRef) {\n    const injector = new PortalInjector(\n      this._injector,\n      new WeakMap([[SDS_TRUNCATED_TEXT_DATA, { text: this.initialText }]])\n    );\n    const containerPortal = new ComponentPortal(SdsTruncatedTextContainerComponent, this._viewContainerRef, injector);\n    const containerRef = overlay.attach(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /** Returns a stream that emits whenever an action that should close the overlay occurs. */\n  private _overlayClosingActions() {\n    const backdrop = this._overlayRef.backdropClick();\n    const detachments = this._overlayRef.detachments();\n    return merge(backdrop, detachments);\n  }\n\n  /** Width of host element */\n  private _getHostWidth(): number {\n    return this._element.nativeElement.offsetWidth;\n  }\n\n  /** Approximated number of characters that are visible in the container */\n  private _getVisibleCharacters(): number {\n    return Math.floor((this._getHostWidth() / this.approximatedCharacterWidth) * this.textLinesLimit);\n  }\n\n  private _isNotLongEnough(): boolean {\n    return this._getVisibleCharacters() > this.initialText.length;\n  }\n\n  @HostListener('click')\n  openOverlay(): void {\n    // Exit if all text can be visible in container\n    if (this._isNotLongEnough()) return;\n\n    this._overlayRef = this._createOverlay();\n    const container = this._attachContainer(this._overlayRef);\n    this._closingActionsSubscription = this._overlayClosingActions().subscribe(() => this.closeOverlay());\n    // Wait for the next event loop tick to start the animation\n    setTimeout(() => {\n      container.startAnimation();\n    });\n  }\n\n  updateUI() {\n    // Exit if all text can be visible in container\n    if (this._isNotLongEnough()) return;\n\n    const wordCut = false;\n    const ellipsis = '...';\n    const limit = this._getVisibleCharacters() - ellipsis.length;\n\n    let visibleText = this.initialText.slice(0, limit);\n\n    if (!wordCut) {\n      const isEndofWord = this.initialText.substr(limit, limit + 1) === ' ';\n      if (!isEndofWord) {\n        const previousWord = visibleText.lastIndexOf(' ');\n        visibleText = visibleText.slice(0, previousWord);\n      }\n    }\n\n    this._element.nativeElement.innerText = visibleText + ellipsis;\n  }\n\n  closeOverlay() {\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n  }\n}\n",
            "selector": "[sdsTruncateTextByLine]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "sdsTruncateTextByLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMaximum lines of text limit",
                    "description": "<p>Maximum lines of text limit</p>\n",
                    "line": 24,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 153
                }
            ],
            "propertiesClass": [
                {
                    "name": "_closingActionsSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Holds subscription to stream of overlay closing events</p>\n",
                    "line": 39,
                    "rawdescription": "\nHolds subscription to stream of overlay closing events",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_overlayRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "<p>PortalOutlet</p>\n",
                    "line": 36,
                    "rawdescription": "\nPortalOutlet",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_textLinesLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "approximatedCharacterWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Approximated character width of the host text</p>\n",
                    "line": 48,
                    "rawdescription": "\nApproximated character width of the host text",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initialText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Holds initial text</p>\n",
                    "line": 42,
                    "rawdescription": "\nHolds initial text",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "windowResize$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>Subscription to window resize stream</p>\n",
                    "line": 45,
                    "rawdescription": "\nSubscription to window resize stream"
                }
            ],
            "methodsClass": [
                {
                    "name": "_attachContainer",
                    "args": [
                        {
                            "name": "overlay",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAttach a ComponentPortal to the overlay",
                    "description": "<p>Attach a ComponentPortal to the overlay</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "overlay",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfigures and creates the CDK overlay",
                    "description": "<p>Configures and creates the CDK overlay</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_getHostWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWidth of host element",
                    "description": "<p>Width of host element</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_getVisibleCharacters",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApproximated number of characters that are visible in the container",
                    "description": "<p>Approximated number of characters that are visible in the container</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isNotLongEnough",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_overlayClosingActions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReturns a stream that emits whenever an action that should close the overlay occurs.",
                    "description": "<p>Returns a stream that emits whenever an action that should close the overlay occurs.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "closeOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "updateUI",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "textLinesLimit": {
                    "name": "textLinesLimit",
                    "setSignature": {
                        "name": "textLinesLimit",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_textLinesLimit",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "_textLinesLimit",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "textLinesLimit",
                        "type": "any",
                        "returnType": "any",
                        "line": 24,
                        "rawdescription": "\nMaximum lines of text limit",
                        "description": "<p>Maximum lines of text limit</p>\n"
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-18cf72d3bc76c36d63b05d3c610ac15d993616135f4c0eda99269aa4325a59ad6a55108e1530d6cf359987be1cb03c6fd309e972170517ddb0ddf6ed06e5667b",
            "file": "libs/packages/components/src/lib/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayMode",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndisplayMode = 'default' | 'results';\n",
                    "description": "<p>displayMode = &#39;default&#39; | &#39;results&#39;;</p>\n",
                    "line": 62,
                    "type": "PaginationDisplayMode",
                    "decorators": []
                },
                {
                    "name": "page",
                    "defaultValue": "new PaginationModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPagination model\n",
                    "description": "<p>Pagination model</p>\n",
                    "line": 50,
                    "type": "PaginationModel",
                    "decorators": []
                },
                {
                    "name": "paginationConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nconfiguration for the pagination\n",
                    "description": "<p>configuration for the pagination</p>\n",
                    "line": 56,
                    "type": "PaginationConfigurationModel",
                    "decorators": []
                },
                {
                    "name": "totalItems",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntotalItems for display on results view;\n",
                    "description": "<p>totalItems for display on results view;</p>\n",
                    "line": 68,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter<PaginationModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput of the page model object\n",
                    "description": "<p>Output of the page model object</p>\n",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentPageField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Input field for the current page</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nInput field for the current page\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'currentPage', {static: false}"
                        }
                    ]
                },
                {
                    "name": "debounceTime",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>debounce time for current page input</p>\n",
                    "line": 73,
                    "rawdescription": "\n\ndebounce time for current page input\n"
                },
                {
                    "name": "options",
                    "defaultValue": "[\n    { label: '25', value: 25 },\n    { label: '50', value: 50 },\n    { label: '100', value: 100 },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Drop down options for page size</p>\n",
                    "line": 88,
                    "rawdescription": "\n\nDrop down options for page size\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "previousNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Stores the previous number</p>\n",
                    "line": 78,
                    "rawdescription": "\n\nStores the previous number\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "timeoutNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>timeout id of the debounce time</p>\n",
                    "line": 83,
                    "rawdescription": "\n\ntimeout id of the debounce time\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "currentPageFocusOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncurrent page focus out will replace with previous valid if empty\n",
                    "description": "<p>current page focus out will replace with previous valid if empty</p>\n"
                },
                {
                    "name": "handleInputOutsideBounds",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadjusts the value if not within the page limit above or below\n",
                    "description": "<p>adjusts the value if not within the page limit above or below</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3168,
                                "end": 3176,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "newValue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3162,
                                "end": 3167,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>handles</p>\n"
                        }
                    ]
                },
                {
                    "name": "maintainPreviousValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStores the previous number. Used when focus out if field empty\n",
                    "description": "<p>Stores the previous number. Used when focus out if field empty</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nnext page increase page number by one within range\n",
                    "description": "<p>next page increase page number by one within range</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\npage size selection change\n",
                    "description": "<p>page size selection change</p>\n"
                },
                {
                    "name": "previousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nprevious page lowers page number by one within range\n",
                    "description": "<p>previous page lowers page number by one within range</p>\n"
                },
                {
                    "name": "valuechange",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncurrent page changes sets new value if within range\n",
                    "description": "<p>current page changes sets new value if within range</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2456,
                                "end": 2464,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "newValue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2450,
                                "end": 2455,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  EventEmitter,\n  Output,\n  ChangeDetectorRef,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\nimport { PaginationConfigurationModel, PaginationModel } from './model/paginationModel';\n\n/** pagination display modes. */\nexport type PaginationDisplayMode = 'default' | 'results';\n\n@Component({\n  selector: 'sds-pagination',\n  templateUrl: './pagination.component.html',\n  styleUrls: ['./pagination.component.scss'],\n})\nexport class PaginationComponent implements OnInit {\n  ngOnInit(): void {\n    this.maintainPreviousValue();\n  }\n\n  constructor(private change: ChangeDetectorRef) {}\n\n  /**\n   * Stores the previous number. Used when focus out if field empty\n   */\n  private maintainPreviousValue() {\n    this.previousNumber = this.page.pageNumber.valueOf();\n  }\n\n  /**\n   * Input field for the current page\n   */\n  @ViewChild('currentPage', { static: false }) currentPageField: ElementRef;\n\n  /**\n   * Output of the page model object\n   */\n  @Output()\n  pageChange = new EventEmitter<PaginationModel>();\n\n  /**\n   * Pagination model\n   */\n  @Input()\n  page: PaginationModel = new PaginationModel();\n\n  /**\n   * configuration for the pagination\n   */\n  @Input()\n  paginationConfiguration: PaginationConfigurationModel;\n\n  /**\n   * displayMode = 'default' | 'results';\n   */\n  @Input()\n  displayMode: PaginationDisplayMode = 'default';\n\n  /**\n   * totalItems for display on results view;\n   */\n  @Input()\n  totalItems?: number = 0;\n\n  /**\n   * debounce time for current page input\n   */\n  debounceTime: number = 500;\n\n  /**\n   * Stores the previous number\n   */\n  private previousNumber: number;\n\n  /**\n   * timeout id of the debounce time\n   */\n  timeoutNumber: number;\n\n  /**\n   * Drop down options for page size\n   */\n  public options = [\n    { label: '25', value: 25 },\n    { label: '50', value: 50 },\n    { label: '100', value: 100 },\n  ];\n\n  /**\n   * previous page lowers page number by one within range\n   */\n  previousPage() {\n    if (this.page.pageNumber > 1) {\n      this.page.pageNumber--;\n      this.maintainPreviousValue();\n      this.pageChange.emit(this.page);\n    }\n  }\n\n  /**\n   * next page increase page number by one within range\n   */\n  nextPage() {\n    if (this.page.pageNumber < this.page.totalPages) {\n      this.page.pageNumber++;\n      this.maintainPreviousValue();\n      this.pageChange.emit(this.page);\n    }\n  }\n\n  /**\n   * current page changes sets new value if within range\n   * @param newValue\n   */\n  valuechange(newValue?: number) {\n    window.clearTimeout(this.timeoutNumber);\n    this.timeoutNumber = window.setTimeout(() => {\n      if (newValue || newValue === 0) {\n        newValue = this.handleInputOutsideBounds(newValue);\n        if (newValue >= 1 && newValue <= this.page.totalPages) {\n          this.page.pageNumber = newValue;\n          this.maintainPreviousValue();\n          this.pageChange.emit(this.page);\n          this.change.detectChanges();\n        }\n      } else {\n        if (this.page.pageNumber) {\n          this.maintainPreviousValue();\n        }\n      }\n    }, this.debounceTime);\n  }\n\n  /**\n   * adjusts the value if not within the page limit above or below\n   * @param newValue handles\n   */\n  private handleInputOutsideBounds(newValue?: number) {\n    if (newValue < 1) {\n      newValue = 1;\n      this.currentPageField.nativeElement.value = newValue;\n    } else if (newValue > this.page.totalPages) {\n      newValue = this.page.totalPages;\n      this.currentPageField.nativeElement.value = newValue;\n    }\n    return newValue;\n  }\n\n  /**\n   * current page focus out will replace with previous valid if empty\n   */\n  currentPageFocusOut() {\n    if (this.currentPageField.nativeElement.value === '') {\n      this.currentPageField.nativeElement.value = this.page.pageNumber = this.previousNumber;\n      this.change.detectChanges();\n    }\n  }\n\n  /**\n   * page size selection change\n   */\n  onSelectChange() {\n    this.page.pageNumber = 1;\n    this.pageChange.emit(this.page);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Hide HTML5 Up and Down arrows. */\ninput[type='number']::-webkit-inner-spin-button,\ninput[type='number']::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\ninput[type='number'] {\n  -moz-appearance: textfield;\n}\n",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "change",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "change",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sds-pagination\" *ngIf=\"displayMode === 'default'\">\n  <div class=\"sds-pagination__controls\">\n    <button [attr.id]=\"paginationConfiguration.id + '-previousPage'\" (click)=\"previousPage()\">Previous Page</button>\n    <label\n      class=\"usa-label font-sans-3xs margin-top-1 text-italic text-base usa-sr-only\"\n      [attr.for]=\"paginationConfiguration.id + '-currentPage'\"\n      >Current Page</label\n    >\n    <input\n      [attr.id]=\"paginationConfiguration.id + '-currentPage'\"\n      class=\"usa-input usa-input--small font-sans-3xs text-center border-base-light\"\n      #currentPage\n      [attr.aria-label]=\"'Page ' + page.pageNumber + ' of ' + page.totalPages\"\n      (ngModelChange)=\"valuechange($event)\"\n      [(ngModel)]=\"page.pageNumber\"\n      type=\"number\"\n      min=\"1\"\n      [(attr.max)]=\"page.totalPages\"\n      (focusout)=\"currentPageFocusOut()\"\n      [ngStyle]=\"{ width: 20 + page.totalPages.toString().length * 10 + 'px' }\"\n    />\n    <span class=\"sds-pagination__total\">\n      of <strong>{{ page.totalPages }}</strong>\n    </span>\n    <button [attr.id]=\"paginationConfiguration.id + '-nextPage'\" (click)=\"nextPage()\">Next Page</button>\n  </div>\n  <div class=\"sds-pagination__results\">\n    <label class=\"usa-label font-sans-3xs text-italic text-base\" [attr.for]=\"paginationConfiguration.id + '-select'\"\n      >Results per page</label\n    >\n    <select\n      class=\"usa-select usa-select--small border-base-light\"\n      [attr.id]=\"paginationConfiguration.id + '-select'\"\n      (change)=\"onSelectChange()\"\n      [(ngModel)]=\"page.pageSize\"\n    >\n      <option *ngFor=\"let item of options\" [ngValue]=\"item.value\">\n        {{ item.label }}\n      </option>\n    </select>\n  </div>\n</div>\n\n<div aria-live=\"polite\">\n  <div class=\"sds-pagination\" *ngIf=\"totalItems && displayMode === 'results'\">\n    <div class=\"text-semibold font-sans-3xs\">\n      Showing {{ (page.pageNumber - 1) * page.pageSize + 1 | number: '1.0':'en-US' }} -\n      {{\n        (page.pageNumber - 1) * page.pageSize + page.pageSize > totalItems\n          ? (totalItems | number: '1.0':'en-US')\n          : ((page.pageNumber - 1) * page.pageSize + page.pageSize | number: '1.0':'en-US')\n      }}\n      of {{ totalItems | number: '1.0':'en-US' }} results\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SdsAccordionItemComponent",
            "id": "component-SdsAccordionItemComponent-e17cd071984c1de89da558a04e77978614d4bfa61573d9f6e12bbcb713701fcabfb520d86ac30066c72ceda777b6667dcbd1fe654127f766bd1b11c299726d5a",
            "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "sdsAccordionItem",
            "host": {},
            "inputs": [
                "disabled",
                "expanded"
            ],
            "outputs": [
                "opened",
                "closed",
                "expandedChange"
            ],
            "providers": [],
            "selector": "sds-accordion-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "accordion-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "afterCollapse",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAn event emitted after the body's collapse animation happens.",
                    "description": "<p>An event emitted after the body&#39;s collapse animation happens.</p>\n",
                    "line": 60,
                    "type": "EventEmitter"
                },
                {
                    "name": "afterExpand",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAn event emitted after the body's expansion animation happens.",
                    "description": "<p>An event emitted after the body&#39;s expansion animation happens.</p>\n",
                    "line": 57,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_animationMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ANIMATION_MODULE_TYPE"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "<p>Element containing the accordion item&#39;s user-provided content.</p>\n",
                    "line": 73,
                    "rawdescription": "\nElement containing the accordion item's user-provided content.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'body', {static: false}"
                        }
                    ]
                },
                {
                    "name": "_bodyAnimationDone",
                    "defaultValue": "new Subject<AnimationEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stream of body animation done events.</p>\n",
                    "line": 82,
                    "rawdescription": "\nStream of body animation done events."
                },
                {
                    "name": "_document",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Document",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_headerId",
                    "defaultValue": "`sds-accordion-item-header-${uniqueId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>ID for the associated header element. Used for a11y labelling.</p>\n",
                    "line": 79,
                    "rawdescription": "\nID for the associated header element. Used for a11y labelling."
                },
                {
                    "name": "_inputChanges",
                    "defaultValue": "new Subject<SimpleChanges>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stream that emits for changes in <code>@Input</code> properties.</p>\n",
                    "line": 63,
                    "rawdescription": "\nStream that emits for changes in `@Input` properties.",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "_lazyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsAccordionItemContentDirective",
                    "optional": false,
                    "description": "<p>Content that will be rendered lazily.</p>\n",
                    "line": 69,
                    "rawdescription": "\nContent that will be rendered lazily.",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "SdsAccordionItemContentDirective"
                        }
                    ]
                },
                {
                    "name": "_portal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplatePortal",
                    "optional": false,
                    "description": "<p>Portal holding the user&#39;s content.</p>\n",
                    "line": 76,
                    "rawdescription": "\nPortal holding the user's content."
                },
                {
                    "name": "accordion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsAccordionBase",
                    "optional": false,
                    "description": "<p>Optionally defined accordion the accordion item belongs to.</p>\n",
                    "line": 66,
                    "rawdescription": "\nOptionally defined accordion the accordion item belongs to."
                }
            ],
            "methodsClass": [
                {
                    "name": "_containsFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nChecks whether the accordion item's content contains the currently-focused element.",
                    "description": "<p>Checks whether the accordion item&#39;s content contains the currently-focused element.</p>\n"
                },
                {
                    "name": "_getExpandedState",
                    "args": [],
                    "optional": false,
                    "returnType": "SdsAccordionItemState",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets the expanded state string.",
                    "description": "<p>Gets the expanded state string.</p>\n"
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionItem } from '@angular/cdk/accordion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  EventEmitter,\n  ElementRef,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject } from 'rxjs';\nimport { filter, startWith, take, distinctUntilChanged } from 'rxjs/operators';\nimport { sdsExpansionAnimations } from './accordion-animations';\nimport { SdsAccordionItemContentDirective } from './accordion-item-content.directive';\nimport { SDS_ACCORDION, SdsAccordionBase } from './accordion-base';\n\n/** Accordion Item's states. */\nexport type SdsAccordionItemState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n@Component({\n  selector: 'sds-accordion-item',\n  exportAs: 'sdsAccordionItem',\n  templateUrl: 'accordion-item.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [sdsExpansionAnimations.bodyExpansion],\n  host: {\n    class: 'sds-accordion__item',\n    '[class.sds-accordion__item--expanded]': 'expanded',\n    '[class._sds-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class SdsAccordionItemComponent extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\n  private _document: Document;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the accordion item belongs to. */\n  accordion: SdsAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(SdsAccordionItemContentDirective) _lazyContent: SdsAccordionItemContentDirective;\n\n  /** Element containing the accordion item's user-provided content. */\n  // @ViewChild('body') _body: ElementRef<HTMLElement>;\n  @ViewChild('body', { static: false }) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `sds-accordion-item-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(\n    @Optional() @SkipSelf() @Inject(SDS_ACCORDION) accordion: SdsAccordionBase,\n    _changeDetectorRef: ChangeDetectorRef,\n    _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string\n  ) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        })\n      )\n      .subscribe((event) => {\n        if (event.fromState !== 'void') {\n          if (event.toState === 'expanded') {\n            this.afterExpand.emit();\n          } else if (event.toState === 'collapsed') {\n            this.afterCollapse.emit();\n          }\n        }\n      });\n\n    console.warn(`This is a deprectaed version of accordion component, and will be removed in future versions. \n      Please switch to using usa-accordion from @gsa-sam/ngx-uswds (https://github.com/GSA/ngx-uswds)`);\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): SdsAccordionItemState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the accordion item becomes open.\n      this.opened\n        .pipe(\n          startWith(null!),\n          filter(() => this.expanded && !this._portal),\n          take(1)\n        )\n        .subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the accordion item's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accordion",
                        "type": "SdsAccordionBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_uniqueSelectionDispatcher",
                        "type": "UniqueSelectionDispatcher",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_animationMode",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "accordion",
                        "type": "SdsAccordionBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_uniqueSelectionDispatcher",
                        "type": "UniqueSelectionDispatcher",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_animationMode",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CdkAccordionItem",
            "implements": [
                "AfterContentInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<ng-content select=\"sds-accordion-item-header\"></ng-content>\n<div\n  class=\"sam-accordion__panel\"\n  role=\"region\"\n  [@bodyExpansion]=\"_getExpandedState()\"\n  (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n  [id]=\"id\"\n  #body\n>\n  <div class=\"sds-accordion__panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "SdsAccordionItemHeaderComponent",
            "id": "component-SdsAccordionItemHeaderComponent-2ca6aa86a0007dfe10509c2917866d9f8a5b65c09292813721af2f382e1cda47fd0333dc63933bf56fd1fc8e52ffa4ca1d77ed7178817400b70a52bfa35b71b8",
            "file": "libs/packages/components/src/lib/accordion/accordion-item-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-accordion-item-header",
            "styleUrls": [
                "./accordion-item-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion-item-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_parentChangeSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "accordionItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsAccordionItemComponent",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getAccordionItemId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets the accordion item id.",
                    "description": "<p>Gets the accordion item id.</p>\n"
                },
                {
                    "name": "_isExpanded",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets whether the accordion item is expanded.",
                    "description": "<p>Gets whether the accordion item is expanded.</p>\n"
                },
                {
                    "name": "_keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandle keydown event calling to toggle() if appropriate.",
                    "description": "<p>Handle keydown event calling to toggle() if appropriate.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles the expanded state of the accordion item.",
                    "description": "<p>Toggles the expanded state of the accordion item.</p>\n"
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFocuses the item header. Implemented as a part of `FocusableOption`.\n",
                    "description": "<p>Focuses the item header. Implemented as a part of <code>FocusableOption</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3145,
                                "end": 3151,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "origin"
                            },
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'",
                            "tagName": {
                                "pos": 3139,
                                "end": 3144,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Origin of the action that triggered the focus.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FocusMonitor, FocusableOption, FocusOrigin } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Host,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { merge, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SdsAccordionItemComponent } from './accordion-item.component';\n\n@Component({\n  selector: 'sds-accordion-item-header',\n  templateUrl: './accordion-item-header.component.html',\n  styleUrls: ['./accordion-item-header.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'sds-accordion__trigger',\n    role: 'button',\n    '[attr.id]': 'accordionItem._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getAccordionItemId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'accordionItem.disabled',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class SdsAccordionItemHeaderComponent implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n  constructor(\n    @Host() public accordionItem: SdsAccordionItemComponent,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {\n    // Since the toggle state depends on an @Input on the accordion item, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      accordionItem.opened,\n      accordionItem.closed,\n      accordionItem._inputChanges.pipe(filter((changes) => !!changes['disabled']))\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element).subscribe((origin) => {\n      if (origin && accordionItem.accordion) {\n        accordionItem.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /**\n   * Whether the associated accordion item is disabled.\n   * Implemented as a part of `FocusableOption`.\n   */\n  get disabled() {\n    return this.accordionItem.disabled;\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  _toggle(): void {\n    this.accordionItem.toggle();\n  }\n\n  /** Gets whether the accordion item is expanded. */\n  _isExpanded(): boolean {\n    return this.accordionItem.expanded;\n  }\n\n  /** Gets the accordion item id. */\n  _getAccordionItemId(): string {\n    return this.accordionItem.id;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.accordionItem.accordion) {\n          this.accordionItem.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the item header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion-item-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accordionItem",
                        "type": "SdsAccordionItemComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "accordionItem",
                        "type": "SdsAccordionItemComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "FocusableOption"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 61,
                        "rawdescription": "\n\nWhether the associated accordion item is disabled.\nImplemented as a part of `FocusableOption`.\n",
                        "description": "<p>Whether the associated accordion item is disabled.\nImplemented as a part of <code>FocusableOption</code>.</p>\n"
                    }
                }
            },
            "templateData": "<span class=\"sds-accordion__title\" role=\"heading\" aria-level=\"2\">\n  <span class=\"sds-accordion__title-text\">\n    <ng-content></ng-content>\n  </span>\n  <span class=\"sds-accordion__icon\"></span>\n</span>\n"
        },
        {
            "name": "SdsActionsMenuComponent",
            "id": "component-SdsActionsMenuComponent-2a3fe5880cd8c6f04530571eb2b166ebe360f67f72f588d9319d4016f4eef499425da47a7fba5184eacd96bb0802204aa211f46cf7e436c9378b850f8120dabb",
            "file": "libs/packages/components/src/lib/actions-menu/actions-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-actions-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "actions-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "ActionMenuModel",
                    "decorators": []
                },
                {
                    "name": "screenReaderText",
                    "defaultValue": "'Toggle Actions'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clicks",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionModes",
                    "defaultValue": "ActionMenuMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "getDisabled",
                    "args": [
                        {
                            "name": "mode",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ActionMenuModel, ActionMenuMode } from './action-menu.model';\n\n@Component({\n  selector: 'sds-actions-menu',\n  templateUrl: 'actions-menu.component.html',\n})\nexport class SdsActionsMenuComponent {\n  actionModes = ActionMenuMode;\n  @Input() model: ActionMenuModel;\n  @Input() size: string;\n  @Input() disabled = false;\n  @Input() screenReaderText: string = 'Toggle Actions';\n  @Output() clicks = new EventEmitter<string>();\n\n  constructor() {}\n\n  ngOnInit() {\n    if (this.model.actions.length) {\n      this.model.actions.forEach((menuItem) => {\n        if (!menuItem.mode) menuItem.mode = this.actionModes.SHOWN;\n      });\n    }\n  }\n\n  getDisabled(mode) {\n    return (mode = this.actionModes.DISABLED) ? true : false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "templateData": "<!-- Button that triggers menu (sdsMenuTriggerFor) -->\n<button\n  [disabled]=\"disabled\"\n  [ngClass]=\"{\n    'usa-button--secondary-dark  text-secondary-dark sds-button--menu': model.label && !disabled,\n    'sds-button sds-button--circular': !model.label,\n    'usa-button--disabled': disabled,\n    'usa-button': model.label\n  }\"\n  [class.sds-button--primary]=\"model.trigger.type === 'primary' && !model.label\"\n  [class.sds-button--shadow]=\"model.trigger.shadow\"\n  [class.sds-button--small]=\"size === 'sm'\"\n  [sdsMenuTriggerFor]=\"menu\"\n>\n  <span *ngIf=\"model.label\">{{ model.label }}</span>\n  <usa-icon [icon]=\"'three-dots-vertical'\" [size]=\"'1x'\"></usa-icon>\n  <span class=\"usa-sr-only\">{{ screenReaderText }}</span>\n</button>\n\n<!-- Menu content -->\n<sds-menu #menu=\"sdsMenu\" [size]=\"size\" xPosition=\"before\" overlapTrigger=\"true\">\n  <!-- Menu header (optional) -->\n  <sds-menu-header>Actions</sds-menu-header>\n  <!-- Menu items -->\n  <ng-container *ngFor=\"let button of model.actions\">\n    <button\n      *ngIf=\"button.mode !== actionModes.HIDDEN\"\n      [disabled]=\"button.mode === actionModes.DISABLED\"\n      [ngClass]=\"{ 'usa-button--disabled': button.mode === actionModes.DISABLED }\"\n      (click)=\"clicks.emit(button.id)\"\n      sds-menu-item\n    >\n      {{ button.text }}\n    </button>\n  </ng-container>\n</sds-menu>\n"
        },
        {
            "name": "SDSAutocompleteComponent",
            "id": "component-SDSAutocompleteComponent-14f7e0ddcddee3a3093c25955f041530e47515a6e46ad22b6ce07f0584387a7d4389bc2f3e95815742b620e91e08f48bfe5ead8c362d4c1f2300214f5cd82176",
            "file": "libs/packages/components/src/lib/autocomplete/autocomplete.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "Autocomplete_VALUE_ACCESSOR"
                }
            ],
            "selector": "sds-autocomplete",
            "styleUrls": [
                "./autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfiguration for the control\n",
                    "description": "<p>Configuration for the control</p>\n",
                    "line": 58,
                    "type": "SDSAutocompletelConfiguration",
                    "decorators": []
                },
                {
                    "name": "essentialModelFields",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModel contain only the primary key, primary value, and secondary value.\n",
                    "description": "<p>Model contain only the primary key, primary value, and secondary value.</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectedItemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllow to insert a customized template for selected items\n",
                    "description": "<p>Allow to insert a customized template for selected items</p>\n",
                    "line": 45,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInstance of the SamHiercarchicalServiceInterface provided\n",
                    "description": "<p>Instance of the SamHiercarchicalServiceInterface provided</p>\n",
                    "line": 70,
                    "type": "SDSAutocompleteServiceInterface",
                    "decorators": []
                },
                {
                    "name": "suggestionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllow to insert a customized template for suggestions results\n",
                    "description": "<p>Allow to insert a customized template for suggestions results</p>\n",
                    "line": 40,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_subscriptions",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "autocompleteSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SDSAutocompleteSearchComponent",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'autocompleteSearch', {static: true}"
                        }
                    ]
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "model",
                    "defaultValue": "new SDSSelectedItemModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SDSSelectedItemModel",
                    "optional": false,
                    "description": "<p>The data model that has the selected item</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nThe data model that has the selected item\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 97,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusout'"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addItems",
                    "args": [
                        {
                            "name": "list",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModel",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSingleMode",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItems",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "focusout",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 97
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ViewChild,\n  TemplateRef,\n  ElementRef,\n  forwardRef,\n  HostListener,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\nimport { SDSSelectedItemModel } from '../selected-result/models/sds-selectedItem.model';\nimport { SDSAutocompleteServiceInterface } from '../autocomplete-search/models/SDSAutocompleteServiceInterface';\nimport { SDSAutocompletelConfiguration } from './models/SDSAutocompletelConfiguration.model';\nimport { SelectionMode } from '../selected-result/models/sds-selected-item-model-helper';\nimport { SDSAutocompleteSearchComponent } from '../autocomplete-search/autocomplete-search.component';\nimport { Subscription } from 'rxjs';\n\nconst Autocomplete_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'sds-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  providers: [Autocomplete_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SDSAutocompleteComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  /**\n   * Allow to insert a customized template for suggestions results\n   */\n  @Input() suggestionTemplate: TemplateRef<any>;\n\n  /**\n   * Allow to insert a customized template for selected items\n   */\n  @Input() selectedItemTemplate: TemplateRef<any>;\n\n  /**\n   * The data model that has the selected item\n   */\n  public model: SDSSelectedItemModel = new SDSSelectedItemModel();\n\n  public disabled: boolean;\n\n  /**\n   * Configuration for the control\n   */\n  @Input()\n  public configuration: SDSAutocompletelConfiguration;\n\n  /**\n   * Model contain only the primary key, primary value, and secondary value.\n   */\n  @Input()\n  public essentialModelFields: boolean = false;\n\n  /**\n   * Instance of the SamHiercarchicalServiceInterface provided\n   */\n  @Input()\n  public service: SDSAutocompleteServiceInterface;\n\n  _subscriptions = new Subscription();\n\n  @ViewChild('autocompleteSearch', { static: true }) autocompleteSearch: SDSAutocompleteSearchComponent;\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    if (!this.configuration.registerChanges$) {\n      return;\n    }\n\n    const changesSubscription = this.configuration.registerChanges$.subscribe(() => {\n      this.cd.detectChanges();\n    });\n\n    this._subscriptions.add(changesSubscription);\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.unsubscribe();\n  }\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  @HostListener('focusout')\n  public onTouched = () => {};\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public onChange = (_: any) => {};\n\n  // ControlValueAccessor (and Formly) is trying to update the value of the FormControl (our custom component) programatically\n  // If there is a value we will just overwrite items\n  // If there is no value we reset the items array to be empty\n  writeValue(value: any) {\n    if (value instanceof SDSSelectedItemModel && value.items && value.items.length) {\n      this.model.items = [...value.items];\n      this.cd.markForCheck();\n    } else if (value && value.length) {\n      this.model.items = value;\n      this.cd.markForCheck();\n    } else {\n      if (!this.model || !(this.model instanceof SDSSelectedItemModel)) {\n        this.model = new SDSSelectedItemModel();\n      }\n      this.model.items = value && value.items ? value.items : [];\n      this.cd.markForCheck();\n    }\n\n    this.autocompleteSearch.writeValue(this.model);\n  }\n\n  // Method that is fired when the child component event notifies us that the items array has been modified within the child component\n  updateItems($event) {\n    this.updateModel();\n  }\n\n  // Helper method that gets a new instance of the model and notifies ControlValueAccessor that we have a new model for this FormControl (our custom component)\n  updateModel() {\n    const model = this.getModel();\n    this.onChange(model);\n  }\n\n  // Helper method to return a new instance of an array that contains our items\n  getModel() {\n    return [...this.model.items];\n  }\n\n  // ControlValueAccessor hook that lets us call this._onChange(var) to let the form know our variable has changed (in this case model)\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  // ControlValueAccessor hook (not used)\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.cd.detectChanges();\n  }\n\n  isSingleMode(): boolean {\n    if (this.configuration) {\n      return this.configuration.selectionMode === SelectionMode.SINGLE;\n    } else {\n      return false;\n    }\n  }\n  addItem(item: object) {\n    this.autocompleteSearch.selectItem(item);\n  }\n\n  addItems(list: object[]) {\n    list.forEach((item) => {\n      this.addItem(item);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 74,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<sds-search-autocomplete\n  [disabled]=\"disabled\"\n  [essentialModelFields]=\"essentialModelFields\"\n  (ngModelChange)=\"updateItems($event)\"\n  #autocompleteSearch\n  [service]=\"service\"\n  [(ngModel)]=\"model\"\n  [configuration]=\"configuration\"\n  [itemTemplate]=\"suggestionTemplate\"\n>\n</sds-search-autocomplete>\n<sds-selected-result\n  (ngModelChange)=\"updateItems($event)\"\n  [disabled]=\"disabled\"\n  *ngIf=\"!isSingleMode() && !configuration?.hideChips\"\n  [(ngModel)]=\"model\"\n  [configuration]=\"configuration\"\n  [itemTemplate]=\"selectedItemTemplate\"\n></sds-selected-result>\n"
        },
        {
            "name": "SDSAutocompleteSearchComponent",
            "id": "component-SDSAutocompleteSearchComponent-f5c6b55c52508303d08e2a3eab7d3379b77fe49d06414103de6d0495d6434b80ec682ada6351efcbb832c21aff7fb20d70db8ee47be3fc7f269026ea595a8856",
            "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "Autocomplete_Autocomplete_VALUE_ACCESSOR"
                }
            ],
            "selector": "sds-search-autocomplete",
            "styleUrls": [
                "./autocomplete-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfiguration for the Autocomplete control\n",
                    "description": "<p>Configuration for the Autocomplete control</p>\n",
                    "line": 53,
                    "type": "SDSAutocompleteSearchConfiguration",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 131,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "essentialModelFields",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModel contain only the primary key, primary value, and secondary value.\n",
                    "description": "<p>Model contain only the primary key, primary value, and secondary value.</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo make input readonly\n",
                    "description": "<p>To make input readonly</p>\n",
                    "line": 118,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllow to insert a customized template for suggestions to use\n",
                    "description": "<p>Allow to insert a customized template for suggestions to use</p>\n",
                    "line": 37,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInstance of the SamHiercarchicalServiceInterface provided\n",
                    "description": "<p>Instance of the SamHiercarchicalServiceInterface provided</p>\n",
                    "line": 59,
                    "type": "SDSAutocompleteServiceInterface",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "highlightedChildIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>selected child index</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nselected child index\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "highlightedIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>selected index</p>\n",
                    "line": 79,
                    "rawdescription": "\n\nselected index\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "highlightedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "<p>highlighted object in drop down</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nhighlighted object in drop down\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "HighlightedPropertyName",
                    "defaultValue": "'highlighted'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Proprty being set on the object is highlighted</p>\n",
                    "line": 99,
                    "rawdescription": "\n\nProprty being set on the object is highlighted\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>input control</p>\n",
                    "line": 32,
                    "rawdescription": "\n\ninput control\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "inputValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>value of the input field</p>\n",
                    "line": 94,
                    "rawdescription": "\n\nvalue of the input field\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "maxResults",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>max number of results to be shown</p>\n",
                    "line": 74,
                    "rawdescription": "\n\nmax number of results to be shown\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SDSSelectedItemModel",
                    "optional": false,
                    "description": "<p>The data model that has the selected item</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nThe data model that has the selected item\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouchedCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 123,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "propogateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 128,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object[]",
                    "optional": false,
                    "description": "<p> result set to be rendered</p>\n",
                    "line": 69,
                    "rawdescription": "\n\n result set to be rendered\n"
                },
                {
                    "name": "resultsAvailableMessage",
                    "defaultValue": "' results available. Use up and down arrows\\\n  to scroll through results. Hit enter to select.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 133,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resultsListElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Ul list of elements</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nUl list of elements\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'resultsList'"
                        }
                    ]
                },
                {
                    "name": "searchString",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Search string</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nSearch string\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "showLoad",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Determines if the dropdown should be shown</p>\n",
                    "line": 170,
                    "rawdescription": "\n\nDetermines if the dropdown should be shown\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "srOnlyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Message announced by screen readers when\nautocomplete results are updated or new item\nis highlighted</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nMessage announced by screen readers when\nautocomplete results are updated or new item\nis highlighted\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "timeoutNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Timer id for the timer awaiting the service call for more typeing</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nTimer id for the timer awaiting the service call for more typeing\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 565,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addResult",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 515,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadds a single item to the list\n",
                    "description": "<p>adds a single item to the list</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15078,
                                "end": 15082,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15072,
                                "end": 15077,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addScreenReaderMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 549,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds message to be read by screen reader\n",
                    "description": "<p>Adds message to be read by screen reader</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 16117,
                                "end": 16124,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 16111,
                                "end": 16116,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "checkForFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4780,
                                "end": 4785,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4774,
                                "end": 4779,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "checkItemSelected",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 437,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n return Item is already selected or not\n",
                    "description": "<p> return Item is already selected or not</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12298,
                                "end": 12304,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "result"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12292,
                                "end": 12297,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clearAndHideResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n clears the results and closes result drop down\n",
                    "description": "<p> clears the results and closes result drop down</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears the input fields and value\n",
                    "description": "<p>Clears the input fields and value</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createFreeTextItem",
                    "args": [],
                    "optional": false,
                    "returnType": "{ type: string; }",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusRemoved",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getAdditionalResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 500,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngets more results based when scrolling and adds the items\n",
                    "description": "<p>gets more results based when scrolling and adds the items</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getClass",
                    "args": [],
                    "optional": false,
                    "returnType": "\"hide-cursor\" | \"\"",
                    "typeParameters": [],
                    "line": 587,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFlatElements",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getObjectValue",
                    "args": [
                        {
                            "name": "object",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyFields",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the string value from the specifed properties of an object\n",
                    "description": "<p>Gets the string value from the specifed properties of an object</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3546,
                                "end": 3552,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 147,
                                "escapedText": "object"
                            },
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3540,
                                "end": 3545,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3565,
                                "end": 3579,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "propertyFields"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3559,
                                "end": 3564,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>comma seperated list with periods depth of object</p>\n"
                        }
                    ]
                },
                {
                    "name": "getResults",
                    "args": [
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 447,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n gets the inital results\n",
                    "description": "<p> gets the inital results</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12610,
                                "end": 12622,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "searchString"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12604,
                                "end": 12609,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "inputFocusHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent method used when focus is gained to the input\n",
                    "description": "<p>Event method used when focus is gained to the input</p>\n"
                },
                {
                    "name": "isAutocompleteWithinModal",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isClearIconVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "matchPastSearchString",
                    "args": [
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 480,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the new search string matches the old search string\n",
                    "description": "<p>Checks if the new search string matches the old search string</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 13932,
                                "end": 13944,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "searchString"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 13926,
                                "end": 13931,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onArrowGroupDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 373,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n handles the arrow down key event\n",
                    "description": "<p> handles the arrow down key event</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onArrowGroupUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n handles the arrow up key event\n",
                    "description": "<p> handles the arrow up key event</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nKey event\n",
                    "description": "<p>Key event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6626,
                                "end": 6631,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6620,
                                "end": 6625,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onkeypress",
                    "args": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 486,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)\n",
                    "description": "<p>Scroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)</p>\n"
                },
                {
                    "name": "openOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 591,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 595,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToSelectedItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 357,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen paging up and down with arrow key it sets the highlighted item into view\n",
                    "description": "<p>When paging up and down with arrow key it sets the highlighted item into view</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nselects the item adding it to the model and closes the results\n",
                    "description": "<p>selects the item adding it to the model and closes the results</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8051,
                                "end": 8055,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8045,
                                "end": 8050,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 599,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHighlightedItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 524,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the highlighted item by keyboard or mouseover\n",
                    "description": "<p>Sets the highlighted item by keyboard or mouseover</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15282,
                                "end": 15286,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15276,
                                "end": 15281,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showFreeText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "textChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 553,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, TemplateRef, ElementRef, forwardRef, ChangeDetectorRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { SDSAutocompleteServiceInterface } from './models/SDSAutocompleteServiceInterface';\nimport { KeyHelper, KEYS } from '../key-helper/key-helper';\nimport { SDSSelectedItemModel } from '../selected-result/models/sds-selectedItem.model';\nimport { SelectionMode, SDSSelectedItemModelHelper } from '../selected-result/models/sds-selected-item-model-helper';\n\nimport { SDSAutocompleteSearchConfiguration } from './models/SDSAutocompleteConfiguration';\n\nconst Autocomplete_Autocomplete_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteSearchComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'sds-search-autocomplete',\n  templateUrl: './autocomplete-search.component.html',\n  styleUrls: ['./autocomplete-search.component.scss'],\n  providers: [Autocomplete_Autocomplete_VALUE_ACCESSOR],\n})\nexport class SDSAutocompleteSearchComponent implements ControlValueAccessor {\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n  /**\n   * Ul list of elements\n   */\n  @ViewChild('resultsList') resultsListElement: ElementRef;\n\n  /**\n   * input control\n   */\n  @ViewChild('input') input: ElementRef;\n\n  /**\n   * Allow to insert a customized template for suggestions to use\n   */\n  @Input() itemTemplate: TemplateRef<any>;\n\n  /**\n   * The data model that has the selected item\n   */\n  public model: SDSSelectedItemModel;\n\n  /**\n   * Model contain only the primary key, primary value, and secondary value.\n   */\n  @Input() public essentialModelFields: boolean = false;\n\n  /**\n   * Configuration for the Autocomplete control\n   */\n  @Input()\n  public configuration: SDSAutocompleteSearchConfiguration;\n\n  /**\n   * Instance of the SamHiercarchicalServiceInterface provided\n   */\n  @Input()\n  public service: SDSAutocompleteServiceInterface;\n\n  /**\n   * Timer id for the timer awaiting the service call for more typeing\n   */\n  private timeoutNumber: number;\n\n  /**\n   *  result set to be rendered\n   */\n  results: object[];\n\n  /**\n   * max number of results to be shown\n   */\n  private maxResults: number;\n\n  /**\n   * selected index\n   */\n  public highlightedIndex: number = 0;\n\n  /**\n   * selected child index\n   */\n  public highlightedChildIndex = 0;\n\n  /**\n   * highlighted object in drop down\n   */\n  private highlightedItem: object;\n\n  /**\n   * value of the input field\n   */\n  public inputValue: string = '';\n\n  /**\n   * Proprty being set on the object is highlighted\n   */\n  private HighlightedPropertyName = 'highlighted';\n\n  public showLoad: boolean = true;\n\n  /**\n   * Search string\n   */\n  private searchString: string = null;\n\n  /**\n   * Message announced by screen readers when\n   * autocomplete results are updated or new item\n   * is highlighted\n   */\n  public srOnlyText: string;\n\n  /**\n   * To make input readonly\n   */\n  @Input() public inputReadOnly = false;\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public onTouchedCallback: () => void = () => null;\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public propogateChange: (_: any) => void = (_: any) => null;\n\n  @Input()\n  public disabled: boolean;\n\n  private resultsAvailableMessage: string =\n    ' results available. Use up and down arrows\\\n  to scroll through results. Hit enter to select.';\n\n  private index = 0;\n\n  /**\n   * Gets the string value from the specifed properties of an object\n   * @param object\n   * @param propertyFields comma seperated list with periods depth of object\n   */\n\n  getObjectValue(object: Object, propertyFields: string): string {\n    let value = '';\n    let current = object;\n    let fieldSplit = propertyFields.split(',');\n    for (let i = 0; i < fieldSplit.length; i++) {\n      let fieldValue = fieldSplit[i];\n      let fieldPartSplit = fieldValue.split('.');\n      for (let j = 0; j < fieldPartSplit.length; j++) {\n        let fieldCheckValue = fieldPartSplit[j];\n        if (current) {\n          current = current[fieldCheckValue];\n        }\n      }\n\n      if (current) {\n        value += current.toString() + ' ';\n      }\n      current = object;\n    }\n    return value.trim();\n  }\n\n  /**\n   * Determines if the dropdown should be shown\n   */\n  public showResults = false;\n\n  /**\n   * Clears the input fields and value\n   */\n  public clearInput(): void {\n    this.inputValue = '';\n    if (this.configuration.selectionMode === SelectionMode.SINGLE) {\n      if (this.model.items.length > 0) {\n        SDSSelectedItemModelHelper.clearItems(this.model.items);\n        this.propogateChange(this.model);\n      }\n    }\n    this.onTouchedCallback();\n    this.clearAndHideResults();\n  }\n\n  /**\n   *\n   * @param event\n   */\n  checkForFocus(event): void {\n    this.focusRemoved();\n    this.showResults = false;\n  }\n\n  /**\n   *\n   */\n  private focusRemoved() {\n    if (this.configuration) {\n      if (this.configuration.selectionMode === SelectionMode.SINGLE) {\n        if (this.model.items.length > 0) {\n          this.inputValue = this.getObjectValue(this.model.items[0], this.configuration.primaryTextField);\n        }\n      } else {\n        this.inputValue = '';\n      }\n    } else {\n      this.inputValue = '';\n    }\n  }\n\n  onkeypress(ev) {\n    return this.configuration.inputReadOnly ? false : true;\n  }\n  textChange(event) {\n    if (!this.configuration.isTagModeEnabled) {\n      // ie 11 placeholders will incorrectly trigger input events (known bug)\n      // if input isn't active element then don't do anything\n      if (event.target != document.activeElement) {\n        event.preventDefault();\n        return;\n      }\n      const searchString = event.target.value || '';\n      this.getResults(searchString);\n    }\n  }\n  isClearIconVisible(): boolean {\n    if (this.model && this.model.items.length > 0 && this.configuration.hideCloseIcon) return false;\n\n    return this.inputValue && !this.disabled;\n  }\n  //\n  /**\n   * Event method used when focus is gained to the input\n   */\n  inputFocusHandler(): void {\n    if (!this.configuration.isTagModeEnabled) {\n      if (this.configuration.focusInSearch) {\n        this.highlightedIndex = 0;\n        this.highlightedChildIndex = this.configuration.isSelectableGroup ? 0 : null;\n        this.getResults(this.inputValue || '');\n      }\n      this.onTouchedCallback();\n      if (this.isAutocompleteWithinModal()) {\n        this.addListener();\n      }\n    }\n  }\n  isAutocompleteWithinModal() {\n    return document.getElementsByClassName('sds-dialog-content').length > 0;\n  }\n\n  /**\n   * Key event\n   * @param event\n   */\n  onKeydown(event): void {\n    if (KeyHelper.is(KEYS.ALT, event)) {\n      event.preventDefault();\n      this.inputFocusHandler();\n    }\n    if (KeyHelper.is(KEYS.TAB, event)) {\n      return;\n    } else if (KeyHelper.is(KEYS.BACKSPACE, event)) {\n      if (this.configuration.inputReadOnly) {\n        event.preventDefault();\n      }\n    } else if (KeyHelper.is(KEYS.DOWN, event)) {\n      event.preventDefault();\n      this.onArrowGroupDown();\n    } else if (KeyHelper.is(KEYS.UP, event)) {\n      event.preventDefault();\n      this.onArrowGroupUp();\n    } else if (KeyHelper.is(KEYS.ENTER, event) && this.highlightedIndex >= 0) {\n      if (this.configuration.isTagModeEnabled && this.inputValue.length > 0) {\n        const val = this.createFreeTextItem();\n        this.selectItem(val);\n      } else {\n        this.selectItem(this.results[this.highlightedIndex]);\n      }\n    } else if (KeyHelper.is(KEYS.ENTER, event) && this.highlightedIndex < 0) {\n      if (this.configuration.isFreeTextEnabled && this.inputValue.length > 0) {\n        const val = this.createFreeTextItem();\n        this.selectItem(val);\n      }\n    } else if (KeyHelper.is(KEYS.ESC, event)) {\n      if (this.showResults) {\n        this.clearAndHideResults();\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        }\n      }\n    }\n  }\n\n  /**\n   * selects the item adding it to the model and closes the results\n   * @param item\n   */\n  public selectItem(item: object): void {\n    let filterItem = {};\n    if (this.essentialModelFields) {\n      filterItem[this.configuration.primaryKeyField] = item[this.configuration.primaryKeyField];\n      filterItem[this.configuration.primaryTextField] = item[this.configuration.primaryTextField];\n      if (this.configuration.secondaryTextField) {\n        filterItem[this.configuration.secondaryTextField] = item[this.configuration.secondaryTextField];\n      }\n    } else {\n      filterItem = item;\n    }\n    SDSSelectedItemModelHelper.addItem(\n      filterItem,\n      this.configuration.primaryKeyField,\n      this.configuration.selectionMode,\n      this.model\n    );\n    this.propogateChange(this.model);\n    let message = this.getObjectValue(item, this.configuration.primaryTextField);\n    this.inputValue = message;\n    this.focusRemoved();\n    this.showResults = false;\n  }\n\n  /**\n   *  clears the results and closes result drop down\n   */\n  private clearAndHideResults(): void {\n    this.results = [];\n    this.showResults = false;\n    this.focusRemoved();\n  }\n\n  openOptions() {\n    this.input.nativeElement.focus();\n  }\n\n  public getFlatElements() {\n    const results = this.results;\n    const flat = [];\n    const flatten = (array: any) => {\n      for (let i in array) {\n        const item = array[i];\n        flat.push(item);\n        if (item[this.configuration.groupByChild] && item[this.configuration.groupByChild].length) {\n          flatten(item[this.configuration.groupByChild]);\n        }\n      }\n    };\n    flatten(results);\n    return flat;\n  }\n\n  /**\n   * When paging up and down with arrow key it sets the highlighted item into view\n   */\n  private scrollToSelectedItem() {\n    if (this.highlightedIndex >= 0) {\n      this._changeDetectorRef.detectChanges();\n      const dom = this.resultsListElement.nativeElement;\n      const selectedChild = dom.querySelector('.sds-autocomplete__item--highlighted');\n      if (selectedChild) {\n        // Manually set scroll top rather than invoke scroll functions for browser compatibility\n        const containerCenter = this.resultsListElement.nativeElement.getBoundingClientRect().height / 2;\n        this.resultsListElement.nativeElement.scrollTop = selectedChild.offsetTop - containerCenter;\n      }\n    }\n  }\n\n  /**\n   *  handles the arrow down key event\n   */\n  private onArrowGroupDown(): void {\n    if (this.results && this.results.length > 0) {\n      const flat = this.getFlatElements();\n      if (this.highlightedIndex < flat.length - 1) {\n        this.highlightedIndex++;\n      }\n      this.setHighlightedItem(flat[this.highlightedIndex]);\n      this.scrollToSelectedItem();\n    }\n  }\n\n  /**\n   *  handles the arrow up key event\n   */\n  private onArrowGroupUp(): void {\n    if (this.results && this.results.length > 0) {\n      const flat = this.getFlatElements();\n      if (this.highlightedIndex != 0) {\n        this.highlightedIndex--;\n      }\n      this.setHighlightedItem(flat[this.highlightedIndex]);\n      this.scrollToSelectedItem();\n    }\n  }\n  showFreeText() {\n    if (this.configuration.isFreeTextEnabled) {\n      if (this.inputValue) {\n        if (this.inputValue.length !== 0) {\n          let foundItem = false;\n          if (this.results) {\n            for (var i = 0; i < this.results.length && !foundItem; i++) {\n              let item = this.results[i];\n              foundItem = item[this.configuration.primaryTextField] === this.inputValue;\n            }\n          }\n          if (this.model.items.length > 0 && !foundItem) {\n            for (var i = 0; i < this.model.items.length && !foundItem; i++) {\n              let item = this.model.items[i];\n              foundItem = item[this.configuration.primaryTextField] === this.inputValue;\n            }\n          }\n\n          return !foundItem;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else {\n      return this.configuration.isFreeTextEnabled;\n    }\n  }\n\n  private createFreeTextItem() {\n    let item = { type: 'custom' };\n    item[this.configuration.primaryTextField] = this.inputValue;\n    item[this.configuration.primaryKeyField] = this.inputValue;\n    return item;\n  }\n  /**\n   *  return Item is already selected or not\n   * @param result\n   */\n  checkItemSelected(result: any) {\n    const selectedItem = this.model.items.filter(\n      (item) => item[this.configuration.primaryKeyField] === result[this.configuration.primaryKeyField]\n    );\n    return selectedItem.length > 0 ? true : false;\n  }\n  /**\n   *  gets the inital results\n   * @param searchString\n   */\n  private getResults(searchString: string): void {\n    if (searchString.length >= this.configuration.minimumCharacterCountSearch) {\n      if (\n        !this.matchPastSearchString(searchString) ||\n        (this.matchPastSearchString(searchString) && !this.showResults) ||\n        this.matchPastSearchString('')\n      ) {\n        this.searchString = searchString;\n        window.clearTimeout(this.timeoutNumber);\n        this.timeoutNumber = window.setTimeout(() => {\n          this.showLoad = true;\n          this.service.getDataByText(0, searchString).subscribe((result) => {\n            this.results = result.items;\n            this.showLoad = false;\n            this.maxResults = result.totalItems;\n\n            this.highlightedIndex = this.configuration.isFreeTextEnabled || this.maxResults == 0 ? -1 : 0;\n            if (!this.configuration.isFreeTextEnabled) {\n              this.setHighlightedItem(this.results[this.highlightedIndex]);\n            }\n            this.showResults = true;\n            this.addScreenReaderMessage(this.maxResults + ' ' + this.resultsAvailableMessage);\n            this._changeDetectorRef.markForCheck();\n          });\n        }, this.configuration.debounceTime);\n      }\n    }\n  }\n\n  /**\n   * Checks if the new search string matches the old search string\n   * @param searchString\n   */\n  private matchPastSearchString(searchString: string) {\n    return this.searchString === searchString;\n  }\n  /**\n   * Scroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)\n   */\n  onScroll() {\n    if (this.maxResults > this.results.length) {\n      let scrollAreaHeight = this.resultsListElement.nativeElement.offsetHeight;\n      let scrollTopPos = this.resultsListElement.nativeElement.scrollTop;\n      let scrollAreaMaxHeight = this.resultsListElement.nativeElement.scrollHeight;\n      if (scrollTopPos + scrollAreaHeight * 2 >= scrollAreaMaxHeight) {\n        this.getAdditionalResults();\n      }\n    }\n  }\n\n  /**\n   * gets more results based when scrolling and adds the items\n   */\n  private getAdditionalResults() {\n    this.showLoad = true;\n    this.service.getDataByText(this.results.length, this.searchString).subscribe((result) => {\n      for (let i = 0; i < result.items.length; i++) {\n        this.addResult(result.items[i]);\n      }\n      this.showLoad = false;\n      this.maxResults = result.totalItems;\n    });\n  }\n\n  /**\n   * adds a single item to the list\n   * @param item\n   */\n  private addResult(item: object) {\n    //add check to make sure item does not exist\n    this.results.push(item);\n  }\n\n  /**\n   * Sets the highlighted item by keyboard or mouseover\n   * @param item\n   */\n  private setHighlightedItem(item: Object): void {\n    if (this.results && this.results.length > 0) {\n      if (this.highlightedItem) {\n        this.highlightedItem[this.HighlightedPropertyName] = false;\n      }\n      let message = '';\n      if (item) {\n        this.highlightedItem = item;\n        this.highlightedItem[this.HighlightedPropertyName] = true;\n        message = item[this.configuration.primaryTextField];\n        if (this.configuration.secondaryTextField && item[this.configuration.secondaryTextField]) {\n          message += ': ' + item[this.configuration.secondaryTextField];\n        }\n      } else {\n        this.highlightedItem = undefined;\n        message = 'No item selected';\n      }\n      this.addScreenReaderMessage(message);\n    }\n  }\n\n  /**\n   * Adds message to be read by screen reader\n   * @param message\n   */\n  private addScreenReaderMessage(message: string) {\n    this.srOnlyText = message;\n  }\n\n  writeValue(obj: any): void {\n    if (obj instanceof SDSSelectedItemModel) {\n      this.model = obj as SDSSelectedItemModel;\n      this._changeDetectorRef.markForCheck();\n      if (this.model.items.length === 0) {\n        this.inputValue = '';\n      } else if (this.configuration && this.configuration.selectionMode === SelectionMode.SINGLE) {\n        this.inputValue = this.getObjectValue(this.model.items[0], this.configuration.primaryTextField);\n      }\n    }\n  }\n\n  addListener() {\n    const autocompleteElement = document.getElementById(this.configuration.id);\n    const dialogContainer = document.getElementsByClassName('sds-dialog-content');\n    const resultsDropdown = document.getElementsByClassName('sds-autocomplete');\n\n    let inputHeight = autocompleteElement.getBoundingClientRect().height;\n    let modalHeight = dialogContainer[0].getBoundingClientRect().height;\n    dialogContainer[0].addEventListener('scroll', function (event) {\n      if (resultsDropdown.length > 0) {\n        let inputTopValue = autocompleteElement.getBoundingClientRect().top;\n        let inputBottomValue = modalHeight - inputTopValue;\n        let listHeight = resultsDropdown[0].getBoundingClientRect().height;\n        let element = resultsDropdown[0].parentElement;\n        if (element && element.style.bottom) {\n          element.style.bottom = inputBottomValue + listHeight - inputHeight + 30 + 'px';\n        } else {\n          element.style.top = inputTopValue + inputHeight + 'px';\n        }\n      }\n    });\n  }\n\n  getClass() {\n    return this.configuration.inputReadOnly ? 'hide-cursor' : '';\n  }\n\n  registerOnChange(fn: any): void {\n    this.propogateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grayToLightBackgroundGradiate {\n  background: linear-gradient(to right, #c4c4c4, #f7f7f7);\n  background-size: 400% 400%;\n  height: 10px;\n  padding: 2.5px 0 2.5px 0;\n  text-align: center;\n  color: #888888;\n  font-size: 15px;\n  font-weight: bold;\n  margin: 7px 10px 0 10px;\n  -webkit-animation: gradiantShiftGray 5s ease infinite;\n  -moz-animation: gradiantShiftGray 5s ease infinite;\n  animation: gradiantShiftGray 5s ease infinite;\n\n  @-webkit-keyframes gradiantShiftGray {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  @-moz-keyframes gradiantShiftGray {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  @keyframes gradiantShiftGray {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n}\n\n.lightToGrayBackgroundGradiate {\n  background: linear-gradient(to right, #f7f7f7, #c4c4c4);\n  background-size: 400% 400%;\n  height: 15px;\n  padding: 2.5px 0 2.5px 0;\n  text-align: center;\n  color: #888888;\n  font-size: 15px;\n  font-weight: bold;\n  margin: 10px 10px 0 10px;\n  -webkit-animation: gradiantShift 5s ease infinite;\n  -moz-animation: gradiantShift 5s ease infinite;\n  animation: gradiantShift 5s ease infinite;\n\n  @-webkit-keyframes gradiantShift {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  @-moz-keyframes gradiantShift {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  @keyframes gradiantShift {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n}\n\n.autoLoading {\n  height: 60px;\n}\n\n.hide-cursor {\n  caret-color: transparent;\n}\n\ninput::-ms-clear {\n  display: none;\n}\n\nspan.icon-container {\n  display: inline-block;\n}\n",
                    "styleUrl": "./autocomplete-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div sds-click-outside (clickOutside)=\"checkForFocus($event)\" sds-tab-outside (tabOutside)=\"checkForFocus($event)\">\n  <div class=\"maxw-mobile-lg position-relative\">\n    <div [attr.id]=\"configuration.id + '-container'\">\n      <input\n        role=\"combobox\"\n        [attr.aria-expanded]=\"showResults\"\n        cdkOverlayOrigin\n        #trigger=\"cdkOverlayOrigin\"\n        [attr.aria-owns]=\"showResults ? configuration.id + '-listbox' : ''\"\n        aria-haspopup=\"listbox\"\n        [disabled]=\"disabled\"\n        (keypress)=\"onkeypress($event)\"\n        (input)=\"textChange($event)\"\n        class=\"usa-input padding-right-3\"\n        [ngClass]=\"getClass()\"\n        #input\n        [attr.aria-label]=\"configuration.ariaLabelText ? configuration.ariaLabelText : configuration.labelText\"\n        [attr.id]=\"configuration.id\"\n        type=\"text\"\n        (focus)=\"inputFocusHandler()\"\n        (keydown)=\"onKeydown($event)\"\n        aria-autocomplete=\"list\"\n        [(ngModel)]=\"inputValue\"\n        [attr.placeholder]=\"configuration.autocompletePlaceHolderText\"\n        [attr.aria-activedescendant]=\"showResults ? configuration.id + '-resultItem-' + highlightedIndex : ''\"\n        [attr.aria-controls]=\"showResults ? configuration.id + '-listbox' : ''\"\n        autocomplete=\"off\"\n      />\n    </div>\n    <ng-template\n      cdkConnectedOverlay\n      [cdkConnectedOverlayOrigin]=\"trigger\"\n      [cdkConnectedOverlayOpen]=\"showResults\"\n      [cdkConnectedOverlayDisableClose]=\"true\"\n      [cdkConnectedOverlayMinWidth]=\"input.offsetWidth\"\n    >\n      <ul\n        #resultsList\n        [attr.id]=\"configuration.id + '-listbox'\"\n        role=\"listbox\"\n        class=\"usa-list usa-list--unstyled sds-autocomplete\"\n        (scroll)=\"onScroll()\"\n      >\n        <ng-container *ngIf=\"results && results.length\">\n          <li\n            [attr.id]=\"configuration.id + '-resultItem-' + i\"\n            role=\"option\"\n            [ngClass]=\"{\n              'sds-autocomplete__group': configuration.isGroupingEnabled,\n              'sds-autocomplete__item': !configuration.isGroupingEnabled,\n              'sds-autocomplete__item--highlighted': result['highlighted'] && !configuration.isGroupingEnabled,\n              'sds-autocomplete__item--selected': checkItemSelected(result) && !configuration.isGroupingEnabled\n            }\"\n            *ngFor=\"let result of results; let i = index\"\n            (click)=\"!configuration.isSelectableGroup ? '' : selectItem(result)\"\n          >\n            <ng-container\n              *ngIf=\"itemTemplate\"\n              [ngTemplateOutlet]=\"itemTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: result }\"\n            >\n            </ng-container>\n            <ng-container *ngIf=\"!itemTemplate\">\n              <div\n                [ngClass]=\"{\n                  'sds-autocomplete__item': configuration.isGroupingEnabled,\n                  'sds-autocomplete__item--highlighted': configuration.isGroupingEnabled && result['highlighted'],\n                  'sds-autocomplete__item--disabled':\n                    !configuration.isSelectableGroup && configuration.isGroupingEnabled,\n                  'sds-autocomplete__item--selected': checkItemSelected(result) && configuration.isGroupingEnabled\n                }\"\n              >\n                <div\n                  [ngClass]=\"{\n                    'text-semibold': configuration.secondaryTextField\n                  }\"\n                >\n                  {{ getObjectValue(result, configuration.primaryTextField) }}\n                </div>\n                <ng-container *ngIf=\"configuration.secondaryTextField && result[configuration.secondaryTextField]\">\n                  <div>{{ result[configuration.secondaryTextField] }}</div>\n                </ng-container>\n              </div>\n\n              <ul\n                class=\"usa-list usa-list--unstyled\"\n                #childrenList\n                [attr.id]=\"configuration.id + '-childrenlistbox-' + i\"\n                role=\"listbox\"\n              >\n                <li\n                  [attr.id]=\"configuration.id + '-childItem-' + j\"\n                  role=\"option\"\n                  [ngClass]=\"{\n                    'sds-autocomplete__group': child[configuration.groupByChild]?.length,\n                    'sds-autocomplete__item': !child[configuration.groupByChild]?.length,\n                    'sds-autocomplete__item--highlighted':\n                      child['highlighted'] && !child[configuration.groupByChild]?.length,\n                    'sds-autocomplete__item--selected':\n                      checkItemSelected(child) && !child[configuration.groupByChild]?.length\n                  }\"\n                  *ngFor=\"let child of result[configuration.groupByChild]; let j = index\"\n                  (click)=\"selectItem(child)\"\n                >\n                  <div\n                    [ngClass]=\"{\n                      'sds-autocomplete__item': child[configuration.groupByChild]?.length,\n                      'sds-autocomplete__item--highlighted':\n                        child[configuration.groupByChild]?.length && child['highlighted'],\n                      'sds-autocomplete__item--disabled':\n                        !configuration.isSelectableGroup && child[configuration.groupByChild]?.length,\n                      'sds-autocomplete__item--selected':\n                        checkItemSelected(child) && child[configuration.groupByChild]?.length\n                    }\"\n                  >\n                    <div\n                      [ngClass]=\"{\n                        'text-semibold': configuration.secondaryTextField\n                      }\"\n                    >\n                      {{ getObjectValue(child, configuration.primaryTextField) }}\n                    </div>\n\n                    <div *ngIf=\"configuration.secondaryTextField && child[configuration.secondaryTextField]\">\n                      {{ child[configuration.secondaryTextField] }}\n                    </div>\n                  </div>\n                  <ul\n                    class=\"usa-list usa-list--unstyled\"\n                    #childrenItems\n                    [attr.id]=\"configuration.id + '-grandchildren-'\"\n                    role=\"listbox\"\n                  >\n                    <li\n                      [attr.id]=\"configuration.id + '-grandchildren-' + k\"\n                      role=\"option\"\n                      class=\"sds-autocomplete__item\"\n                      [ngClass]=\"{\n                        'sds-autocomplete__item--selected': checkItemSelected(subchild),\n                        'sds-autocomplete__item--highlighted': subchild['highlighted']\n                      }\"\n                      *ngFor=\"let subchild of child[configuration.groupByChild]; let k = index\"\n                      (click)=\"selectItem(subchild)\"\n                    >\n                      <div>\n                        <div\n                          [ngClass]=\"{\n                            'text-semibold': configuration.secondaryTextField\n                          }\"\n                        >\n                          {{ getObjectValue(subchild, configuration.primaryTextField) }}\n\n                          <div *ngIf=\"configuration.secondaryTextField && subchild[configuration.secondaryTextField]\">\n                            {{ subchild[configuration.secondaryTextField] }}\n                          </div>\n                        </div>\n                      </div>\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n            </ng-container>\n          </li>\n        </ng-container>\n        <ng-container *ngIf=\"!results || results.length == 0\">\n          <li class=\"emptyResults margin-1\">No results found</li>\n        </ng-container>\n        <ng-container *ngIf=\"showLoad\">\n          <li class=\"autoLoading\">\n            <div class=\"lightToGrayBackgroundGradiate\"></div>\n            <div class=\"grayToLightBackgroundGradiate\"></div>\n          </li>\n          <li class=\"autoLoading\">\n            <div class=\"lightToGrayBackgroundGradiate\"></div>\n            <div class=\"grayToLightBackgroundGradiate\"></div>\n          </li>\n        </ng-container>\n      </ul>\n      <ul class=\"usa-sr-only\" aria-live=\"assertive\">\n        <li>{{ srOnlyText }}</li>\n      </ul>\n    </ng-template>\n\n    <ng-container *ngIf=\"!input.disabled\">\n      <span class=\"position-absolute right-105 top-1 cursor-pointer bg-white\">\n        <span\n          *ngIf=\"isClearIconVisible()\"\n          role=\"button\"\n          aria-label=\"Clear input\"\n          (click)=\"clearInput()\"\n          (keyup.enter)=\"clearInput()\"\n          tabindex=\"0\"\n          class=\"icon-container\"\n        >\n          <usa-icon [icon]=\"'x'\" size=\"lg\" class=\"font-sans-xs\"></usa-icon>\n        </span>\n        <span *ngIf=\"!configuration.isTagModeEnabled\" class=\"margin-left-1 margin-top-05 icon-container\">\n          <usa-icon\n            role=\"button\"\n            aria-label=\"Display Options\"\n            tabindex=\"0\"\n            *ngIf=\"!showResults && !disabled\"\n            (click)=\"openOptions()\"\n            class=\"font-sans-xs\"\n            (keyup.enter)=\"openOptions()\"\n            [icon]=\"'caret-down-fill'\"\n            size=\"1x\"\n          >\n          </usa-icon>\n          <usa-icon\n            role=\"button\"\n            aria-label=\"Hide Options\"\n            tabindex=\"0\"\n            *ngIf=\"showResults && !disabled\"\n            (click)=\"checkForFocus($event)\"\n            class=\"font-sans-xs\"\n            (keyup.enter)=\"checkForFocus($event)\"\n            [icon]=\"'caret-up-fill'\"\n            size=\"1x\"\n          >\n          </usa-icon>\n        </span>\n      </span>\n    </ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "SdsDialogContainerComponent",
            "id": "component-SdsDialogContainerComponent-d8c77e441e08215d7eb336935dde8a033c729861f679427fe7d10753a0a558147521b853334a89e7c8ecaeae9fec15c3c7fa6f3526f5222ff939fc7d406ff49b",
            "file": "libs/packages/components/src/lib/dialog/dialog-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-dialog-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "dialog-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_animationStateChanged",
                    "defaultValue": "new EventEmitter<AnimationEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Emits when an animation state changes.</p>\n",
                    "line": 78,
                    "rawdescription": "\nEmits when an animation state changes."
                },
                {
                    "name": "_ariaLabelledBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "<p>ID of the element that should be considered as the dialog&#39;s label.</p>\n",
                    "line": 81,
                    "rawdescription": "\nID of the element that should be considered as the dialog's label."
                },
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsDialogConfig",
                    "optional": false,
                    "description": "<p>The dialog configuration.</p>\n",
                    "line": 92,
                    "rawdescription": "\nThe dialog configuration.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_elementFocusedBeforeDialogWasOpened",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "<p>Element that was focused before the dialog was opened. Save this to restore upon close.</p>\n",
                    "line": 72,
                    "rawdescription": "\nElement that was focused before the dialog was opened. Save this to restore upon close.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_focusTrap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusTrap",
                    "optional": false,
                    "description": "<p>The class that traps and manages focus within the dialog.</p>\n",
                    "line": 69,
                    "rawdescription": "\nThe class that traps and manages focus within the dialog.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>ID for the container DOM element.</p>\n",
                    "line": 84,
                    "rawdescription": "\nID for the container DOM element."
                },
                {
                    "name": "_portalOutlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkPortalOutlet",
                    "optional": false,
                    "description": "<p>The portal outlet inside of this container into which the dialog content will be loaded.</p>\n",
                    "line": 66,
                    "rawdescription": "\nThe portal outlet inside of this container into which the dialog content will be loaded.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkPortalOutlet, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_state",
                    "defaultValue": "this._config.slideOut ? 'slideEnter' : 'enter'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"void\" | \"enter\" | \"exit\" | \"slideEnter\" | \"slideExit\"",
                    "optional": false,
                    "description": "<p>State of the dialog animation.</p>\n",
                    "line": 75,
                    "rawdescription": "\nState of the dialog animation."
                }
            ],
            "methodsClass": [
                {
                    "name": "_onAnimationDone",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCallback, invoked whenever an animation on the host completes.",
                    "description": "<p>Callback, invoked whenever an animation on the host completes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onAnimationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCallback, invoked when an animation on the host starts.",
                    "description": "<p>Callback, invoked when an animation on the host starts.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_restoreFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRestores focus to the element that was focused before the dialog opened.",
                    "description": "<p>Restores focus to the element that was focused before the dialog opened.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_savePreviouslyFocusedElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSaves a reference to the element that was focused before the dialog was opened.",
                    "description": "<p>Saves a reference to the element that was focused before the dialog was opened.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_startExitAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStarts the dialog exit animation.",
                    "description": "<p>Starts the dialog exit animation.</p>\n"
                },
                {
                    "name": "_trapFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMoves the focus inside the focus trap.",
                    "description": "<p>Moves the focus inside the focus trap.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "attachComponentPortal",
                    "args": [
                        {
                            "name": "portal",
                            "type": "ComponentPortal<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttach a ComponentPortal as content to this dialog container.\n",
                    "description": "<p>Attach a ComponentPortal as content to this dialog container.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3991,
                                "end": 3997,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "portal"
                            },
                            "type": "ComponentPortal<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3985,
                                "end": 3990,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Portal to be attached as the dialog content.</p>\n"
                        }
                    ]
                },
                {
                    "name": "attachTemplatePortal",
                    "args": [
                        {
                            "name": "portal",
                            "type": "TemplatePortal<C>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EmbeddedViewRef<C>",
                    "typeParameters": [
                        "C"
                    ],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttach a TemplatePortal as content to this dialog container.\n",
                    "description": "<p>Attach a TemplatePortal as content to this dialog container.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4417,
                                "end": 4423,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "portal"
                            },
                            "type": "TemplatePortal<C>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4411,
                                "end": 4416,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Portal to be attached as the dialog content.</p>\n"
                        }
                    ]
                },
                {
                    "name": "isSlideOutConfig",
                    "args": [
                        {
                            "name": "val",
                            "type": "boolean | SlideOutConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SlideOutConfig",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA configuration indicates that a user wants a custom Slide Out Panel",
                    "description": "<p>A configuration indicates that a user wants a custom Slide Out Panel</p>\n",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "boolean | SlideOutConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Internal component that wraps user-provided dialog content.</p>\n",
            "rawdescription": "\n\nInternal component that wraps user-provided dialog content.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { AnimationEvent } from '@angular/animations';\nimport { sdsDialogAnimations } from './dialog-animations';\nimport { BasePortalOutlet, ComponentPortal, CdkPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { SdsDialogConfig, SlideOutConfig } from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwSdsDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\n@Component({\n  selector: 'sds-dialog-container',\n  templateUrl: 'dialog-container.component.html',\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [sdsDialogAnimations.dialogContainer],\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    class: 'sds-dialog__container',\n    '[class.sds-dialog--alert]': '_config.alert',\n    '[class.sds-dialog--alert-error]': '_config.alert === \"error\"',\n    '[class.sds-dialog--alert-warning]': '_config.alert === \"warning\"',\n    '[class.sds-dialog--alert-info]': '_config.alert === \"info\"',\n    '[class.sds-dialog--alert-success]': '_config.alert === \"success\"',\n    '[class.dialog-slide-out]': '_config.slideOut',\n    tabindex: '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[style.width]': '_config.slideOut && isSlideOutConfig(_config.slideOut) ? _config.slideOut.width : null',\n    '[@dialogContainer]':\n      '{ value: _state, params: _config.slideOut && isSlideOutConfig(_config.slideOut) ? { width: _config.slideOut.width || \"15rem\", time: _config.slideOut.time || \"1s\" } : { width: \"15rem\", time: \"1s\" } }',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class SdsDialogContainerComponent extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, { static: true }) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' | 'slideEnter' | 'slideExit' = this._config.slideOut ? 'slideEnter' : 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: SdsDialogConfig\n  ) {\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwSdsDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwSdsDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter' || event.toState === 'slideEnter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit' || event.toState === 'slideExit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = this._config.slideOut ? 'slideExit' : 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Checks if the value is a Slide Out panel configuration or a boolean. */\n  /** A configuration indicates that a user wants a custom Slide Out Panel */\n  isSlideOutConfig(val: boolean | SlideOutConfig): val is SlideOutConfig {\n    return (val as SlideOutConfig).width !== undefined || (val as SlideOutConfig).time !== undefined;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_focusTrapFactory",
                        "type": "FocusTrapFactory",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_config",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusTrapFactory",
                        "type": "FocusTrapFactory",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BasePortalOutlet",
            "templateData": "<button *ngIf=\"_config.displayCloseBtn\" sds-dialog-close class=\"close-btn\" aria-label=\"Close Modal\">\n  <usa-icon [icon]=\"'x'\"></usa-icon>\n</button>\n\n<!-- Alert Icons -->\n<div *ngIf=\"_config.alert\" [ngSwitch]=\"_config.alert\" class=\"sds-dialog-icon\">\n  <usa-icon *ngSwitchCase=\"'error'\" [icon]=\"'exclamation-circle'\" size=\"3x\"></usa-icon>\n  <usa-icon *ngSwitchCase=\"'warning'\" [icon]=\"'exclamation-triangle'\" size=\"3x\"></usa-icon>\n  <usa-icon *ngSwitchCase=\"'info'\" [icon]=\"'info-circle'\" size=\"3x\"></usa-icon>\n  <usa-icon *ngSwitchCase=\"'success'\" [icon]=\"'check-circle'\" size=\"3x\"></usa-icon>\n  <div *ngSwitchDefault>\n    Alert <em>{{ _config.alert }}</em> is not valid\n  </div>\n</div>\n\n<ng-template cdkPortalOutlet></ng-template>\n"
        },
        {
            "name": "SdsEditorComponent",
            "id": "component-SdsEditorComponent-8672749b365d11ea394a1928778c16613742c7c91ba9728be6f909f8c7c0351214c3ff3fd2fda35ab51286c83a64c7de7ee40ff6e0f7d8b96b80ed60b34d0139",
            "file": "libs/packages/components/src/lib/editor/editor.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SdsEditorComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "sds-editor",
            "styleUrls": [],
            "styles": [
                "\n      ::ng-deep mark {\n        background-color: red;\n        color: white;\n      }\n    "
            ],
            "template": "<div\n  #searchInput\n  [attr.id]=\"id\"\n  class=\"minh-15 border-gray-70 border-1px margin-top-1 padding-05\"\n  contenteditable=\"true\"\n  (input)=\"!validateOnBlur && onValueChange($event.target.innerHTML)\"\n  (blur)=\"validateOnBlur && onBlur($event.target.innerHTML)\"\n></div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "'searchEditor'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "regex",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "validateOnBlur",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "model",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCaretCharacterOffsetWithin",
                    "args": [
                        {
                            "name": "element",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateRegex",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport {\n  Component,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Input,\n  ViewChild,\n  ElementRef,\n  Inject,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'sds-editor',\n  template: `\n    <div\n      #searchInput\n      [attr.id]=\"id\"\n      class=\"minh-15 border-gray-70 border-1px margin-top-1 padding-05\"\n      contenteditable=\"true\"\n      (input)=\"!validateOnBlur && onValueChange($event.target.innerHTML)\"\n      (blur)=\"validateOnBlur && onBlur($event.target.innerHTML)\"\n    ></div>\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SdsEditorComponent),\n      multi: true,\n    },\n  ],\n  styles: [\n    `\n      ::ng-deep mark {\n        background-color: red;\n        color: white;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsEditorComponent implements ControlValueAccessor {\n  @ViewChild('searchInput', { read: ElementRef, static: true }) searchInput: ElementRef;\n\n  @Input() id = 'searchEditor';\n  @Input() regex = '';\n  @Input() validateOnBlur = false;\n\n  model = '';\n\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  constructor(private cd: ChangeDetectorRef, @Inject(DOCUMENT) private _document: any) {}\n\n  // Helper method to programatically update a value of the model on blur\n  onBlur(value) {\n    this.model = value;\n    if (this.regex) {\n      this.validateRegex(this.model);\n    }\n    this.updateModel();\n  }\n\n  // Helper method that gets a new instance of the model and notifies ControlValueAccessor that we have a new model for this FormControl (our custom component)\n  updateModel() {\n    const model = this.getModel();\n    this._onChange(model);\n  }\n\n  // Helper method to return a new instance of an value\n  getModel() {\n    return this.model;\n  }\n\n  // Validate regex and highlight first charecter of the failure\n  validateRegex(value) {\n    const rawValue = value\n      .replaceAll(/<\\/?mark[^>]*>/g, '')\n      .replaceAll(/<\\/?span[^>]*>/g, '')\n      .replaceAll(/<\\/?font[^>]*>/g, '');\n    const regex = new RegExp(this.regex, 'g');\n    let res = '';\n    let result = regex.exec(rawValue);\n    if (result) {\n      let index = result.index;\n      res =\n        rawValue.substring(0, index) +\n        '<mark>' +\n        rawValue.substring(index, index + 1) +\n        '</mark>' +\n        rawValue.substring(index + 1, index + rawValue.length);\n      this.searchInput.nativeElement.innerHTML = res;\n    } else {\n      this.searchInput.nativeElement.innerHTML = rawValue;\n    }\n  }\n\n  // ControlValueAccessor (and Formly) is trying to update the value of the FormControl (our custom component) programatically\n  // If there is a value we will just overwrite items\n  // If there is no value we reset the items array to be empty\n  writeValue(value: any) {\n    if (value) {\n      this.model = value;\n      if (this.searchInput) this.searchInput.nativeElement.innerHTML = value;\n      this.cd.markForCheck();\n    } else {\n      this.model = '';\n      if (this.searchInput) this.searchInput.nativeElement.innerHTML = '';\n      this.cd.markForCheck();\n    }\n  }\n\n  // ControlValueAccessor hook that lets us call this._onChange(let) to let the form know our variable has changed (in this case model)\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  // ControlValueAccessor hook (not used)\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Get the cursor current position\n  getCaretCharacterOffsetWithin(element) {\n    let caretOffset = 0;\n    if (typeof window.getSelection != 'undefined') {\n      let range = window.getSelection().getRangeAt(0);\n      let preCaretRange = range.cloneRange();\n      preCaretRange.selectNodeContents(element);\n      preCaretRange.setEnd(range.endContainer, range.endOffset);\n      caretOffset = preCaretRange.toString().length;\n    }\n    return caretOffset;\n  }\n\n  onValueChange(value) {\n    const pos = this.getCaretCharacterOffsetWithin(this.searchInput.nativeElement);\n    if (this.regex) {\n      this.validateRegex(value);\n    }\n    this.model = value;\n    this.updateModel();\n\n    let node = this.searchInput.nativeElement;\n    if (pos < node?.innerText?.length) {\n      let firstNodeLength = node.childNodes[0].textContent.length;\n\n      let childNodeIndex = pos <= firstNodeLength ? 0 : 2;\n\n      let startPosition = childNodeIndex === 0 ? pos : pos - firstNodeLength - 1;\n      let range = this._document.createRange();\n      let sel = window.getSelection();\n      range.setStart(this.searchInput.nativeElement.childNodes[childNodeIndex], startPosition);\n      range.collapse(true);\n      sel.removeAllRanges();\n      sel.addRange(range);\n      this.searchInput.nativeElement.focus();\n    } else {\n      this._document.execCommand('selectAll', false, null);\n      this._document.getSelection().collapseToEnd();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      ::ng-deep mark {\n        background-color: red;\n        color: white;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "SdsMenuComponent",
            "id": "component-SdsMenuComponent-e44296d96d2da6f73d21c1d2a932e996f456eb231f4dfc64c967cdea7cde53c1a8379ce6683f080f69c5627534dfdeb915de721c3fd789199ff77ee4bc21b35c",
            "file": "libs/packages/components/src/lib/menu/menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "sdsMenu",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: SDS_MENU_TOKEN, useExisting: SdsMenuComponent }",
                    "type": "component"
                }
            ],
            "selector": "sds-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTransfer classes from the sds-menu to the overlay container",
                    "description": "<p>Transfer classes from the sds-menu to the overlay container</p>\n",
                    "line": 127,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "overlapTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether menu panel overlaps trigger element",
                    "description": "<p>Whether menu panel overlaps trigger element</p>\n",
                    "line": 117,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of menu component.\nAffects the font-size of the menu items and\nthe size of the close button in the menu header\n",
                    "description": "<p>Size of menu component.\nAffects the font-size of the menu items and\nthe size of the close button in the menu header</p>\n",
                    "line": 93,
                    "type": "MenuSizes",
                    "decorators": []
                },
                {
                    "name": "xPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPosition of the menu in the X axis.",
                    "description": "<p>Position of the menu in the X axis.</p>\n",
                    "line": 97,
                    "type": "MenuPositionX",
                    "decorators": []
                },
                {
                    "name": "yPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPosition of the menu in the Y axis.",
                    "description": "<p>Position of the menu in the Y axis.</p>\n",
                    "line": 107,
                    "type": "MenuPositionY",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void | 'click' | 'keydown' | 'tab'>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted when the menu is closed.",
                    "description": "<p>Event emitted when the menu is closed.</p>\n",
                    "line": 150,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_classList",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>Config object to be passed into the menu&#39;s ngClass</p>\n",
                    "line": 80,
                    "rawdescription": "\nConfig object to be passed into the menu's ngClass"
                },
                {
                    "name": "_items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsMenuItemComponent[]",
                    "optional": false,
                    "description": "<p>Menu items inside the current menu.</p>\n",
                    "line": 71,
                    "rawdescription": "\nMenu items inside the current menu.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_keyManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusKeyManager<SdsMenuItemComponent>",
                    "optional": false,
                    "description": "<p>Manage browser focus</p>\n",
                    "line": 68,
                    "rawdescription": "\nManage browser focus",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_overlapTrigger",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_panelAnimationState",
                    "defaultValue": "'void'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"void\" | \"enter\"",
                    "optional": false,
                    "description": "<p>Current state of the panel animation.</p>\n",
                    "line": 83,
                    "rawdescription": "\nCurrent state of the panel animation."
                },
                {
                    "name": "_previousPanelClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Stores <sds-menu> classes</p>\n",
                    "line": 77,
                    "rawdescription": "\nStores <sds-menu> classes",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tabSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subscription to tab events on the menu panel</p>\n",
                    "line": 74,
                    "rawdescription": "\nSubscription to tab events on the menu panel",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_xPosition",
                    "defaultValue": "'after'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuPositionX",
                    "optional": false,
                    "description": "<p>After | Before the menu triger element</p>\n",
                    "line": 62,
                    "rawdescription": "\nAfter | Before the menu triger element",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_yPosition",
                    "defaultValue": "'below'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuPositionY",
                    "optional": false,
                    "description": "<p>Above | Below the menu triger element</p>\n",
                    "line": 65,
                    "rawdescription": "\nAbove | Below the menu triger element",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Grab the component template</p>\n",
                    "line": 86,
                    "rawdescription": "\nGrab the component template",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandle a keyboard event from the menu",
                    "description": "<p>Handle a keyboard event from the menu</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onAnimationDone",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCallback that is invoked when the panel animation completes.",
                    "description": "<p>Callback that is invoked when the panel animation completes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onAnimationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_resetAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nResets the panel animation to its initial state.",
                    "description": "<p>Resets the panel animation to its initial state.</p>\n"
                },
                {
                    "name": "_startAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStarts the enter animation.",
                    "description": "<p>Starts the enter animation.</p>\n"
                },
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds a menu item with the menu.",
                    "description": "<p>Adds a menu item with the menu.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusFirstItem",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFocus the first item in the menu",
                    "description": "<p>Focus the first item in the menu</p>\n",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInserts a menu item at an index",
                    "description": "<p>Inserts a menu item at an index</p>\n",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRemoves an item from the menu.",
                    "description": "<p>Removes an item from the menu.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "MenuPositionX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.xPosition"
                        },
                        {
                            "name": "posY",
                            "type": "MenuPositionY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.yPosition"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds classes to the menu panel based on its position",
                    "description": "<p>Adds classes to the menu panel based on its position</p>\n",
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "MenuPositionX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.xPosition",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "MenuPositionY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.yPosition",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { ESCAPE, DOWN_ARROW, UP_ARROW, HOME, END, hasModifierKey } from '@angular/cdk/keycodes';\nimport { FocusKeyManager, FocusOrigin } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subscription } from 'rxjs';\nimport { sdsMenuAnimations } from './menu-animations';\nimport { SdsMenuItemComponent } from './menu-item.component';\n\n/** Menu Positions */\nexport type MenuPositionX = 'before' | 'after';\nexport type MenuPositionY = 'above' | 'below';\n\n/** Menu available sizes */\n// sm = 'small'\nexport type MenuSizes = 'sm';\n\n/** Injection token used to provide the parent menu to menu items. */\nexport const SDS_MENU_TOKEN = new InjectionToken<SdsMenuInterface>('SDS_MENU_TOKEN');\n\n/** Menu Interface */\nexport interface SdsMenuInterface<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: SdsMenuInterface;\n  size?: MenuSizes;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  addItem?: (item: T) => void;\n  insertItem?: (item: T, index: number) => void;\n  removeItem?: (item: T) => void;\n}\n\n@Component({\n  selector: 'sds-menu',\n  exportAs: 'sdsMenu',\n  templateUrl: 'menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [sdsMenuAnimations.transformMenu],\n  providers: [{ provide: SDS_MENU_TOKEN, useExisting: SdsMenuComponent }],\n})\nexport class SdsMenuComponent implements OnInit, AfterContentInit, OnDestroy, SdsMenuInterface<SdsMenuItemComponent> {\n  /** After | Before the menu triger element */\n  private _xPosition: MenuPositionX = 'after';\n\n  /** Above | Below the menu triger element */\n  private _yPosition: MenuPositionY = 'below';\n\n  /** Manage browser focus */\n  private _keyManager: FocusKeyManager<SdsMenuItemComponent>;\n\n  /** Menu items inside the current menu. */\n  private _items: SdsMenuItemComponent[] = [];\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Stores <sds-menu> classes */\n  private _previousPanelClass: string;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: { [key: string]: boolean } = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Grab the component template */\n  @ViewChild(TemplateRef, { static: false }) templateRef: TemplateRef<any>;\n\n  /**\n   * Size of menu component.\n   * Affects the font-size of the menu items and\n   * the size of the close button in the menu header\n   */\n  @Input() size: MenuSizes;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX {\n    return this._xPosition;\n  }\n  set xPosition(value: MenuPositionX) {\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY {\n    return this._yPosition;\n  }\n  set yPosition(value: MenuPositionY) {\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Whether menu panel overlaps trigger element */\n  @Input()\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger = false;\n\n  /** Transfer classes from the sds-menu to the overlay container */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n    // Remove previous classes from current set of classes\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    // Adds new classes to current set of classes\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      // Remove all classes from <sds-menu>\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {}\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<SdsMenuItemComponent>(this._items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Focus the first item in the menu */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /** Adds classes to the menu panel based on its position */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['sds-menu-before'] = posX === 'before';\n    classes['sds-menu-after'] = posX === 'after';\n    classes['sds-menu-above'] = posY === 'above';\n    classes['sds-menu-below'] = posY === 'below';\n  }\n\n  /** Adds a menu item with the menu. */\n  addItem(item: SdsMenuItemComponent) {\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n    }\n  }\n\n  /** Inserts a menu item at an index */\n  insertItem(item: SdsMenuItemComponent, index: number) {\n    if (this._items.indexOf(item) === -1 && index < this._items.length) {\n      this._items.splice(index, 0, item);\n    }\n  }\n\n  /** Removes an item from the menu. */\n  removeItem(item: SdsMenuItemComponent) {\n    const index = this._items.indexOf(item);\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n    }\n  }\n\n  /** Handle a keyboard event from the menu */\n  _handleKeydown(event: KeyboardEvent) {\n    // tslint:disable-next-line: deprecation\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {}\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    // Scroll the content element to the top as soon as the animation starts.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 150,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "OnDestroy",
                "SdsMenuInterface"
            ],
            "accessors": {
                "xPosition": {
                    "name": "xPosition",
                    "setSignature": {
                        "name": "xPosition",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "MenuPositionX",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 100,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "MenuPositionX",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "xPosition",
                        "type": "",
                        "returnType": "MenuPositionX",
                        "line": 97,
                        "rawdescription": "\nPosition of the menu in the X axis.",
                        "description": "<p>Position of the menu in the X axis.</p>\n"
                    }
                },
                "yPosition": {
                    "name": "yPosition",
                    "setSignature": {
                        "name": "yPosition",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "MenuPositionY",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 110,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "MenuPositionY",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "yPosition",
                        "type": "",
                        "returnType": "MenuPositionY",
                        "line": 107,
                        "rawdescription": "\nPosition of the menu in the Y axis.",
                        "description": "<p>Position of the menu in the Y axis.</p>\n"
                    }
                },
                "overlapTrigger": {
                    "name": "overlapTrigger",
                    "setSignature": {
                        "name": "overlapTrigger",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 120,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "overlapTrigger",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 117,
                        "rawdescription": "\nWhether menu panel overlaps trigger element",
                        "description": "<p>Whether menu panel overlaps trigger element</p>\n"
                    }
                },
                "panelClass": {
                    "name": "panelClass",
                    "setSignature": {
                        "name": "panelClass",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "classes",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 127,
                        "rawdescription": "\nTransfer classes from the sds-menu to the overlay container",
                        "description": "<p>Transfer classes from the sds-menu to the overlay container</p>\n",
                        "jsdoctags": [
                            {
                                "name": "classes",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-template>\n  <div\n    class=\"sds-overlay minw-menu maxw-mobile radius-overlay\"\n    [ngClass]=\"_classList\"\n    (keydown)=\"_handleKeydown($event)\"\n    (click)=\"closed.emit('click')\"\n    [@transformMenu]=\"_panelAnimationState\"\n    (@transformMenu.start)=\"_onAnimationStart($event)\"\n    (@transformMenu.done)=\"_onAnimationDone($event)\"\n    tabindex=\"-1\"\n    role=\"menu\"\n  >\n    <div class=\"sds-menu\" [class.sds-menu--small]=\"size === 'sm'\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "SdsMenuHeaderComponent",
            "id": "component-SdsMenuHeaderComponent-6467c1f4d2974894a7899895ec87d6fcc3984034b64c9fe5b1cde74a5906fa8900a52379f006e7b61e3511891ab7a98eb91dfd657ad2c94dff0ccdca8aba89f6",
            "file": "libs/packages/components/src/lib/menu/menu-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-menu-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "menu-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hideClose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sds-menu-header',\n  templateUrl: 'menu-header.component.html',\n})\nexport class SdsMenuHeaderComponent {\n  @Input() hideClose = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"sds-menu__header\">\n  <span class=\"sds-menu__header-title\"> <ng-content></ng-content> </span>\n  <button *ngIf=\"!hideClose\" aria-label=\"Close Menu\" sds-menu-item role=\"button\">\n    <usa-icon [icon]=\"'x'\"></usa-icon>\n  </button>\n</div>\n"
        },
        {
            "name": "SdsMenuItemComponent",
            "id": "component-SdsMenuItemComponent-353abde9769f1ec23a7ba0bf58b8cf5ece3b2f5ea034545be452c3770ead3f8f52d17a8de3ee5e9c879012583830a63e1f69532e28d75a900a3812cd78d0c4c2",
            "file": "libs/packages/components/src/lib/menu/menu-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[sds-menu-item]",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "role",
                    "defaultValue": "'menuitem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nARIA role for the menu item.",
                    "description": "<p>ARIA role for the menu item.</p>\n",
                    "line": 29,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Holds the disable status value</p>\n",
                    "line": 35,
                    "rawdescription": "\nHolds the disable status value",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "class",
                    "defaultValue": "this._getClass()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Menu item class</p>\n",
                    "line": 26,
                    "rawdescription": "\nMenu item class",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "'0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Menu item tab index</p>\n",
                    "line": 32,
                    "rawdescription": "\nMenu item tab index",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.tabIndex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet item class",
                    "description": "<p>Get item class</p>\n"
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFocuses the menu item.",
                    "description": "<p>Focuses the menu item.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStop listening to focus changes and remove item from parent",
                    "description": "<p>Stop listening to focus changes and remove item from parent</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.tabIndex",
                    "defaultValue": "'0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMenu item tab index",
                    "description": "<p>Menu item tab index</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "this._getClass()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMenu item class",
                    "description": "<p>Menu item class</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  OnDestroy,\n  Inject,\n  Input,\n  HostBinding,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Optional,\n} from '@angular/core';\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SDS_MENU_TOKEN, SdsMenuInterface } from './menu.component';\nimport { SdsMenuHeaderComponent } from './menu-header.component';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: '[sds-menu-item]',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SdsMenuItemComponent implements FocusableOption, OnDestroy {\n  /** Menu item class */\n  @HostBinding('class') class = this._getClass();\n\n  /** ARIA role for the menu item. */\n  @HostBinding('attr.role') @Input() role: 'menuitem' = 'menuitem';\n\n  /** Menu item tab index */\n  @HostBinding('attr.tabIndex') tabIndex = '0';\n\n  /** Holds the disable status value */\n  private _disabled = false;\n\n  /** Whether the menu item should be disabled */\n  // @Input()\n  // get disabled() {\n  //   return this._disabled;\n  // }\n  // set disabled(value: any) {\n  //   this._disabled = coerceBooleanProperty(value);\n  // }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusMonitor: FocusMonitor,\n    @Inject(SDS_MENU_TOKEN)\n    private _parentMenu: SdsMenuInterface<SdsMenuItemComponent>,\n    @Optional() private _parentMenuHeader: SdsMenuHeaderComponent\n  ) {\n    // Start listening to focus changes\n    _focusMonitor.monitor(this._elementRef, false);\n    // Add this menu item to its parent menu\n    // If item its inside a header\n    // add it as the first item in the list\n    if (_parentMenuHeader) {\n      _parentMenu.insertItem(this, 0);\n    } else {\n      _parentMenu.addItem(this);\n    }\n  }\n\n  /** Get item class */\n  _getClass(): string {\n    const headerButtonSmall = this._parentMenu.size === 'sm' ? 'sds-button--small' : '';\n    return this._parentMenuHeader ? `sds-button sds-button--circular ${headerButtonSmall}` : 'sds-menu__item';\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    this._focusMonitor.focusVia(this._elementRef.nativeElement, origin);\n  }\n\n  /** Stop listening to focus changes and remove item from parent */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._parentMenu.removeItem(this);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Whether the menu item should be disabled</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_parentMenu",
                        "type": "SdsMenuInterface<SdsMenuItemComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_parentMenuHeader",
                        "type": "SdsMenuHeaderComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "rawdescription": "\nWhether the menu item should be disabled",
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentMenu",
                        "type": "SdsMenuInterface<SdsMenuItemComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentMenuHeader",
                        "type": "SdsMenuHeaderComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "FocusableOption",
                "OnDestroy"
            ]
        },
        {
            "name": "SdsPageComponent",
            "id": "component-SdsPageComponent-006afbb6dca17cd56fbb77ed76f24260426d1b091743e028847436c312ff43c56f443e4a13ca422c6c1514ae6367db9039926a713386bca42764617750aab8a0",
            "file": "libs/packages/components/src/lib/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-page",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"grid-container\"><ng-content></ng-content></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sds-page',\n  template: ` <div class=\"grid-container\"><ng-content></ng-content></div> `,\n})\nexport class SdsPageComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n\n@Component({\n  selector: 'sds-page-options',\n  template: ` <div class=\"grid-row position-relative\"><ng-content></ng-content></div> `,\n})\nexport class SdsPageOptionsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SdsPageOptionsComponent",
            "id": "component-SdsPageOptionsComponent-006afbb6dca17cd56fbb77ed76f24260426d1b091743e028847436c312ff43c56f443e4a13ca422c6c1514ae6367db9039926a713386bca42764617750aab8a0",
            "file": "libs/packages/components/src/lib/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-page-options",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"grid-row position-relative\"><ng-content></ng-content></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sds-page',\n  template: ` <div class=\"grid-container\"><ng-content></ng-content></div> `,\n})\nexport class SdsPageComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n\n@Component({\n  selector: 'sds-page-options',\n  template: ` <div class=\"grid-row position-relative\"><ng-content></ng-content></div> `,\n})\nexport class SdsPageOptionsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SdsRichTextComponent",
            "id": "component-SdsRichTextComponent-6c8e59efd842586b9ae82bb0d482f18e59416e0a45645f767edcc089f521f9f8a5d1d14e8c3534eb29953095adcd04081196458b6e109a024ffc2b22872e2f8f",
            "file": "libs/packages/components/src/lib/rich-text/rich-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SdsRichTextComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "sds-rich-text",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./rich-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "maxHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "editor",
                    "defaultValue": "ClassicEditor.default ?? ClassicEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "model",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\n@Component({\n  selector: 'sds-rich-text',\n  templateUrl: './rich-text.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SdsRichTextComponent),\n      multi: true,\n    },\n  ],\n})\nexport class SdsRichTextComponent implements ControlValueAccessor {\n  @Input() minHeight: number;\n  @Input() maxHeight: number;\n\n  get minHeightClass(): string {\n    return this.minHeight ? `min-height-${this.minHeight}` : '';\n  }\n  get maxHeightClass(): string {\n    return this.maxHeight ? `max-height-${this.maxHeight}` : '';\n  }\n\n  _onChange = (_: any) => {};\n  _onTouched = (_: any) => {};\n\n  writeValue(value: any): void {\n    this.model = value;\n  }\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n  public editor = ClassicEditor.default ?? ClassicEditor;\n\n  model = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "minHeightClass": {
                    "name": "minHeightClass",
                    "getSignature": {
                        "name": "minHeightClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 20
                    }
                },
                "maxHeightClass": {
                    "name": "maxHeightClass",
                    "getSignature": {
                        "name": "maxHeightClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 23
                    }
                }
            },
            "templateData": "<ckeditor\n  [(ngModel)]=\"model\"\n  [editor]=\"editor\"\n  (change)=\"_onChange(model)\"\n  (blur)=\"_onTouched(model)\"\n  class=\"{{ minHeightClass }} {{ maxHeightClass }}\"\n></ckeditor>\n"
        },
        {
            "name": "SdsSearchComponent",
            "id": "component-SdsSearchComponent-527c634d11c9c2d8890435a92c8bcae56e6e3e6cdf806bbbf61911a01242bbc2b18e3d2886d2da0e483e05d59cbc6bfd646b2b308eb34b36b83663e9df466f02",
            "file": "libs/packages/components/src/lib/search/search.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SdsSearchComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "sds-search",
            "styleUrls": [
                "search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "searchSettings",
                    "defaultValue": "new SearchSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "SearchSettings",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "submit",
                    "defaultValue": "new EventEmitter(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'buttonEl', {read: ElementRef, static: false}"
                        }
                    ]
                },
                {
                    "name": "inputEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputEl', {read: ElementRef, static: false}"
                        }
                    ]
                },
                {
                    "name": "inputState",
                    "defaultValue": "{\n    initial: { visible: undefined },\n    visible: undefined,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "model",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "selectEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selectEl', {read: ElementRef, static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateInputWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearInput",
                    "args": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isInputVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeInputVisibleStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setInputVisibleStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValueToModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nexport class SearchSettings {\n  public placeholder = 'Search';\n  public ariaLabel? = 'Search';\n  public size?: string;\n  public inputClass?: string;\n  public parentSelector?: string;\n  public id?: string;\n  public dropdown?: any = {\n    id: 'searchOptions',\n    placeholder: '-Select-',\n    options: [],\n    inverse: false,\n  };\n  public isSuffixSearchIcon?: boolean = false;\n}\n@Component({\n  selector: 'sds-search',\n  templateUrl: 'search.component.html',\n  styleUrls: ['search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SdsSearchComponent),\n      multi: true,\n    },\n  ],\n\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsSearchComponent implements AfterViewInit, ControlValueAccessor {\n  @ViewChild('inputEl', { read: ElementRef, static: false })\n  inputEl: ElementRef;\n  @ViewChild('selectEl', { read: ElementRef, static: false })\n  selectEl: ElementRef;\n  @ViewChild('buttonEl', { read: ElementRef, static: false })\n  buttonEl: ElementRef;\n\n  @Input() searchSettings: SearchSettings = new SearchSettings();\n  @Output() submit: EventEmitter<{ searchText: string }> = new EventEmitter(null);\n\n  model: any = {};\n  inputState = {\n    initial: { visible: undefined },\n    visible: undefined,\n  };\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(\n    private cd: ChangeDetectorRef,\n    private focusMonitor: FocusMonitor,\n    private viewportRuler: ViewportRuler\n  ) {}\n\n  ngAfterViewInit() {\n    this.inputState.initial.visible = this.isInputVisible();\n    this.inputState.visible = this.inputState.initial.visible;\n    this.viewportRuler.change(0).subscribe(() => {\n      this.inputState.initial.visible = this.isInputVisible();\n      this.inputState.visible = this.inputState.initial.visible;\n    });\n  }\n\n  hasDropdown() {\n    if (\n      this.searchSettings &&\n      this.searchSettings.dropdown &&\n      this.searchSettings.dropdown.options &&\n      this.searchSettings.dropdown.options.length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  handleClick(event) {\n    event.preventDefault();\n    if (!this.inputState.visible) {\n      this.setInputVisibleStyles();\n      this.focusMonitor.focusVia(this.inputEl, 'program');\n    } else if (this.inputEl || this.selectEl) {\n      this.submit.emit(this.model);\n    }\n  }\n\n  writeValueToModel() {\n    this.model.searchText = this.inputEl ? this.inputEl.nativeElement.value : '';\n    if (this.selectEl && this.selectEl.nativeElement.value) {\n      this.model.searchCategory = this.selectEl.nativeElement.value;\n    }\n    this.onChange(Object.assign({}, this.model));\n  }\n\n  writeValue(value: any) {\n    if (value && this.model !== value) {\n      this.model = value;\n      this.cd.markForCheck();\n    } else {\n      this.model = {};\n      this.cd.markForCheck();\n    }\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  isInputVisible(): boolean {\n    return this.inputEl.nativeElement.getBoundingClientRect().width ? true : false;\n  }\n\n  setInputVisibleStyles() {\n    const inputWidth = this.calculateInputWidth();\n    this.inputEl.nativeElement.style.setProperty('display', 'block', 'important');\n    this.inputEl.nativeElement.style.position = 'absolute';\n    this.inputEl.nativeElement.style.left = `-${inputWidth}px`;\n    this.inputEl.nativeElement.style.setProperty('width', `${inputWidth}px`, 'important');\n    this.inputState.visible = true;\n  }\n\n  removeInputVisibleStyles() {\n    this.inputEl.nativeElement.style.display = '';\n    this.inputEl.nativeElement.style.position = '';\n    this.inputEl.nativeElement.style.left = '';\n    this.inputEl.nativeElement.style.width = '';\n    this.inputState.visible = false;\n  }\n\n  focusChange() {\n    if (!this.inputState.initial.visible) {\n      this.removeInputVisibleStyles();\n    }\n  }\n\n  calculateInputWidth(): number {\n    const leftPadding = 20;\n    const buttonElement = this.buttonEl.nativeElement;\n    const inputElement = this.inputEl.nativeElement;\n    const rightPosition = buttonElement.getBoundingClientRect().left;\n    const leftPosition = this.searchSettings.parentSelector\n      ? inputElement.closest(this.searchSettings.parentSelector).getBoundingClientRect().left\n      : 0;\n    return Math.floor(rightPosition - leftPosition - leftPadding);\n  }\n  getClass() {\n    const cls = this.searchSettings && this.searchSettings.size === 'large' ? 'usa-search--big' : 'usa-search--small';\n    return this.searchSettings.dropdown && this.searchSettings.dropdown.inverse ? `${cls} sds-inverse` : cls;\n  }\n  clearInput(ev) {\n    this.inputEl.nativeElement.value = '';\n    this.writeValueToModel();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input::-ms-clear {\n  display: none;\n}\n\n.suffix-icon {\n  input::-webkit-search-cancel-button {\n    display: none;\n  }\n\n  .postfix ~ input {\n    width: 80%;\n    width: calc(100% - 8rem);\n    margin-left: 0px;\n    margin-right: 6rem !important;\n  }\n\n  .postfix {\n    color: #3f57a6;\n    position: absolute;\n    right: 15px;\n    font-size: 2rem;\n    -webkit-transition: color 0.2s;\n    transition: color 0.2s;\n    margin-bottom: 2px;\n  }\n\n  .close-icon {\n    width: 3rem;\n    top: -1px;\n  }\n}\n.no-drop {\n  width: 100%;\n}\n\n@media only screen and (min-width: 480px) {\n  .usa-form.usa-search select {\n    max-width: unset;\n  }\n}\n",
                    "styleUrl": "search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "ControlValueAccessor"
            ],
            "templateData": "<form class=\"usa-form usa-search grid-row\" [ngClass]=\"getClass()\" role=\"search\">\n  <label *ngIf=\"hasDropdown()\" class=\"usa-sr-only\" [attr.for]=\"searchSettings.dropdown.id\">Dropdown label</label>\n  <select\n    *ngIf=\"hasDropdown()\"\n    [value]=\"model.searchCategory ? model.searchCategory : ''\"\n    #selectEl\n    name=\"search options\"\n    aria-label=\"Search Options\"\n    class=\"usa-select grid-col-12 tablet:grid-col-auto\"\n    [attr.id]=\"searchSettings.dropdown.id\"\n    (change)=\"writeValueToModel()\"\n  >\n    <ng-container *ngFor=\"let item of searchSettings.dropdown.options\">\n      <optgroup *ngIf=\"item.group\" label=\"{{ item.label }}\">\n        <option\n          *ngFor=\"let child of item.group\"\n          [value]=\"child.value\"\n          [selected]=\"model.searchCategory == child.value\"\n          [disabled]=\"child.disabled\"\n        >\n          {{ child.label }}\n        </option>\n      </optgroup>\n      <option\n        *ngIf=\"!item.group\"\n        [value]=\"item.value\"\n        [selected]=\"model.searchCategory == item.value\"\n        [disabled]=\"item.disabled\"\n        >{{ item.label }}</option\n      >\n    </ng-container>\n  </select>\n  <ng-container [ngTemplateOutlet]=\"inputTemplate\"></ng-container>\n</form>\n\n<ng-template #inputTemplate>\n  <div\n    class=\"position-relative grid-col-12\"\n    [ngClass]=\"{\n      'suffix-icon': searchSettings.isSuffixSearchIcon,\n      'tablet:grid-col': hasDropdown()\n    }\"\n  >\n    <label class=\"usa-sr-only\" [attr.for]=\"searchSettings.id\">Search</label>\n    <input\n      #inputEl\n      [value]=\"model.searchText ? model.searchText : ''\"\n      [ngClass]=\"[searchSettings?.inputClass ? searchSettings?.inputClass : '', !hasDropdown() ? 'no-drop' : '']\"\n      [attr.id]=\"searchSettings.id\"\n      type=\"search\"\n      class=\"usa-input sds-min-width-160\"\n      name=\"search\"\n      [placeholder]=\"searchSettings.placeholder ? searchSettings.placeholder : 'type here'\"\n      [attr.aria-label]=\"searchSettings.ariaLabel\"\n      (blur)=\"focusChange()\"\n      (input)=\"writeValueToModel()\"\n    />\n\n    <span *ngIf=\"searchSettings.isSuffixSearchIcon\" class=\"cursor-pointer display-flex flex-align-center\">\n      <span\n        *ngIf=\"model.searchText\"\n        class=\"postfix close-icon\"\n        role=\"button\"\n        aria-label=\"Clear input\"\n        (click)=\"clearInput($event)\"\n        (keyup.enter)=\"clearInput($event)\"\n        tabindex=\"0\"\n      >\n        <usa-icon [icon]=\"'x'\" class=\"text-ink\" [size]=\"searchSettings.size === 'large' ? '1x' : 'xs'\"></usa-icon>\n      </span>\n      <span\n        class=\"postfix search-icon\"\n        role=\"button\"\n        aria-label=\"search input\"\n        (click)=\"handleClick($event)\"\n        (keyup.enter)=\"handleClick($event)\"\n        tabindex=\"0\"\n      >\n        <usa-icon [icon]=\"'search'\" [size]=\"searchSettings.size === 'large' ? '1x' : 'xs'\"> </usa-icon>\n      </span>\n    </span>\n    <button\n      *ngIf=\"!searchSettings.isSuffixSearchIcon\"\n      #buttonEl\n      class=\"usa-button\"\n      type=\"submit\"\n      [attr.aria-label]=\"searchSettings.ariaLabel ? searchSettings.ariaLabel : 'Search'\"\n      (click)=\"handleClick($event)\"\n    >\n      <usa-icon class=\"text-white\" [icon]=\"'search'\"></usa-icon>\n    </button>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "SdsSearchResultListComponent",
            "id": "component-SdsSearchResultListComponent-93d2389be4cab9495403fe1652d8613b3dd3b547c6d578d94c6b24ad2e919c5aa79fa13cf407bc93b81087496e88b2965ad1fed094be47456fab5c025f8daa3c",
            "file": "libs/packages/components/src/lib/search-result-list/search-result-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-search-result-list",
            "styleUrls": [
                "./search-result-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-result-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customResultsTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllow to insert a customized template for no results to use\n",
                    "description": "<p>Allow to insert a customized template for no results to use</p>\n",
                    "line": 14,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "divider",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow divider between results\n",
                    "description": "<p>Show divider between results</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDefaultModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModel for search results\n",
                    "description": "<p>Model for search results</p>\n",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "resultContentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Child Template to be used to display the data for each item in the list of items</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nChild Template to be used to display the data for each item in the list of items\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'resultContent'"
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "defaultValue": "new SearchModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ContentChild, TemplateRef, OnInit } from '@angular/core';\nimport { SearchModel } from './model/search-results.model';\nimport { Location } from '@angular/common';\n@Component({\n  selector: 'sds-search-result-list',\n  templateUrl: './search-result-list.component.html',\n  styleUrls: ['./search-result-list.component.scss'],\n})\nexport class SdsSearchResultListComponent {\n  public updateModel = new SearchModel();\n  /**\n   * Allow to insert a customized template for no results to use\n   */\n  @Input() customResultsTemplate: TemplateRef<any>;\n\n  @Input() isDefaultModel: boolean;\n\n  /**\n   * Model for search results\n   */\n  @Input('model')\n  set model(value) {\n    if (Array.isArray(value)) {\n      const items = value;\n      this.updateModel = new SearchModel();\n      this.updateModel.results = items;\n    } else {\n      this.updateModel = value;\n    }\n  }\n\n  /**\n   * Show divider between results\n   */\n  @Input() divider = true;\n\n  constructor(private _location: Location) {}\n\n  /**\n   * Child Template to be used to display the data for each item in the list of items\n   */\n  @ContentChild('resultContent') resultContentTemplate: TemplateRef<any>;\n\n  goBack() {\n    this._location.back();\n  }\n  isTemplate() {\n    if (this.updateModel && this.updateModel.metadata) {\n      return Array.isArray(this.updateModel.metadata.messages);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./search-result-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "rawdescription": "\n\nModel for search results\n",
                        "description": "<p>Model for search results</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"updateModel?.results?.length\">\n  <div *ngFor=\"let item of updateModel.results\">\n    <hr *ngIf=\"divider\" class=\"fine\" />\n    <ng-container *ngTemplateOutlet=\"resultContentTemplate; context: { $implicit: item }\"></ng-container>\n  </div>\n  <hr *ngIf=\"divider && updateModel?.results?.length\" class=\"fine\" />\n</ng-container>\n\n<ng-container\n  *ngIf=\"customResultsTemplate && !updateModel?.results?.length\"\n  [ngTemplateOutlet]=\"customResultsTemplate\"\n  [ngTemplateOutletContext]=\"{ $implicit: updateModel }\"\n>\n</ng-container>\n\n<!-- <ng-container *ngIf=\"(!updateModel?.metadata?.messages && updateModel?.results?.length === 0)\">\n  <div class=\"sds-card sds-card--vertical sds-card--shadowed sds-card--bordered\">\n    This is initial template\n  </div>\n</ng-container> -->\n<div aria-live=\"polite\" aria-atomic=\"true\">\n  <ng-container *ngIf=\"!customResultsTemplate\">\n    <ng-container\n      *ngIf=\"updateModel == null || (!updateModel?.metadata?.messages && updateModel?.results?.length === 0)\"\n    >\n      <ng-container *ngIf=\"!isDefaultModel\">\n        <div class=\"sds-card sds-card--vertical sds-card--shadowed sds-card--bordered bg-base-lightest\">\n          <div class=\"sds-card__header padding-3\">\n            <usa-stacked-icon [size]=\"'2x'\" aria-label=\"search results\">\n              <usa-icon class=\"usa-stack-icon\" [size]=\"'3x'\" [icon]=\"'circle'\"></usa-icon>\n              <usa-icon class=\"usa-stack-icon\" [size]=\"'2x'\" [icon]=\"'search'\"></usa-icon>\n            </usa-stacked-icon>\n          </div>\n          <div class=\"sds-card__body margin-2\">\n            <h1 class=\"sds-card__title\">No matches found</h1>\n            <p>We couldn't find a match for your search criteria.</p>\n            <p>Please try another search or go back to previous results.</p>\n            <div class=\"margin-top-3\">\n              <button class=\"usa-button usa-button--outline\" (click)=\"goBack()\">Go Back</button>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"isDefaultModel\">\n        <div class=\"sds-card sds-card--vertical sds-card--shadowed sds-card--bordered bg-base-lightest\">\n          <div class=\"sds-card__header\">\n            <usa-icon [icon]=\"'arrow-left-circle-fill'\" [size]=\"'5x'\"></usa-icon>\n          </div>\n          <div class=\"sds-card__body margin-2\">\n            <h1 class=\"sds-card__title\">Select Criteria</h1>\n            <p>Choose your filters and run your report to begin.</p>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"updateModel?.metadata?.messages\">\n      <ng-container *ngIf=\"!isTemplate()\">\n        <ng-container *ngTemplateOutlet=\"updateModel?.metadata?.messages\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"isTemplate()\">\n        <div\n          *ngFor=\"let msg of updateModel.metadata.messages\"\n          class=\"sds-card sds-card--shadowed sds-card--bordered\"\n          [ngClass]=\"[msg.type !== 'loading' ? 'sds-card--vertical' : '', msg.classes ? msg.classes : '']\"\n        >\n          <ng-container *ngIf=\"msg.type !== 'loading'; else loading\">\n            <div class=\"sds-card__header\">\n              <usa-icon\n                [icon]=\"\n                  msg.type === 'error'\n                    ? ['sds', 'alert-error']\n                    : msg.type === 'info'\n                    ? 'info-circle'\n                    : msg.type === 'initial'\n                    ? 'arrow-left-circle-fill'\n                    : 'search'\n                \"\n                [size]=\"'5x'\"\n              >\n              </usa-icon>\n            </div>\n            <div class=\"sds-card__body margin-2\">\n              <h1 class=\"sds-card__title\">{{ msg.title }}</h1>\n              <p [innerHTML]=\"msg.message\"></p>\n              <div class=\"sds-card__buttons\">\n                <button\n                  *ngFor=\"let button of msg.buttons\"\n                  class=\"usa-button\"\n                  [attr.aria-label]=\"button.ariaLabel\"\n                  [ngClass]=\"button.classes ? button.classes : 'usa-button--outline'\"\n                  (click)=\"button.action()\"\n                >\n                  {{ button.text }}\n                </button>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #loading>\n  <div class=\"grid-container padding-left-0\">\n    <div class=\"sds-load grid-row\">\n      <div class=\"grid-col-5 sds-load__title\"></div>\n    </div>\n    <div class=\"sds-load margin-top-1\">\n      <div class=\"tablet:grid-col-fill sds-load__element\"></div>\n    </div>\n    <div class=\"sds-load margin-top-1\">\n      <div class=\"grid-col-8 height-4 sds-load__content\"></div>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "SDSSelectedResultComponent",
            "id": "component-SDSSelectedResultComponent-138867b293b6b6d5f0370fe644adbca5daf3bd86e688fb29f3a424cd2c87b284e1415e899af8eaadd3db8a02a29e3ee2adf5ec4fc5a101da37707c3096a578cd",
            "file": "libs/packages/components/src/lib/selected-result/selected-result.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SDS_SelectedResult_VALUE_ACCESSOR"
                }
            ],
            "selector": "sds-selected-result",
            "styleUrls": [
                "./selected-result.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selected-result.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConfiguration for the Selected Results control\n",
                    "description": "<p>Configuration for the Selected Results control</p>\n",
                    "line": 34,
                    "type": "SDSSelectedResultConfiguration",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllow to insert a customized template for suggestions to use\n",
                    "description": "<p>Allow to insert a customized template for suggestions to use</p>\n",
                    "line": 23,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SDSSelectedItemModel",
                    "optional": false,
                    "description": "<p>The data model that has the selected item</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nThe data model that has the selected item\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouchedCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "propogateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getObjectValue",
                    "args": [
                        {
                            "name": "object",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyFields",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the string value from the specifed properties of an object\n",
                    "description": "<p>Gets the string value from the specifed properties of an object</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2209,
                                "end": 2215,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 147,
                                "escapedText": "object"
                            },
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2203,
                                "end": 2208,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2228,
                                "end": 2242,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "propertyFields"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2222,
                                "end": 2227,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>comma seperated list with periods depth of object</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2305,
                                "end": 2310,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2299,
                                "end": 2304,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>the index location of the value in model&#39;s item list</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves item from the model\n",
                    "description": "<p>Removes item from the model</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1505,
                                "end": 1509,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1499,
                                "end": 1504,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef, forwardRef } from '@angular/core';\nimport { SDSSelectedItemModel } from './models/sds-selectedItem.model';\nimport { SDSSelectedResultConfiguration } from './models/SDSSelectedResultConfiguration';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { SDSSelectedItemModelHelper } from './models/sds-selected-item-model-helper';\n\nconst SDS_SelectedResult_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSSelectedResultComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'sds-selected-result',\n  templateUrl: './selected-result.component.html',\n  styleUrls: ['./selected-result.component.scss'],\n  providers: [SDS_SelectedResult_VALUE_ACCESSOR],\n})\nexport class SDSSelectedResultComponent implements ControlValueAccessor {\n  /**\n   * Allow to insert a customized template for suggestions to use\n   */\n  @Input() itemTemplate: TemplateRef<any>;\n\n  /**\n   * The data model that has the selected item\n   */\n  public model: SDSSelectedItemModel;\n\n  /**\n   * Configuration for the Selected Results control\n   */\n  @Input()\n  public configuration: SDSSelectedResultConfiguration;\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public onTouchedCallback: () => void = () => null;\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public propogateChange: (_: any) => void = (_: any) => null;\n\n  @Input()\n  public disabled: boolean;\n\n  /**\n   * Removes item from the model\n   * @param item\n   */\n  removeItem(item: object) {\n    if (!this.disabled) {\n      SDSSelectedItemModelHelper.removeItem(item, this.configuration.primaryKeyField, this.model);\n      this.propogateChange(this.model);\n      this.onTouchedCallback();\n    }\n  }\n\n  writeValue(obj: any): void {\n    if (obj instanceof SDSSelectedItemModel) {\n      this.model = obj as SDSSelectedItemModel;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propogateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * Gets the string value from the specifed properties of an object\n   * @param object\n   * @param propertyFields comma seperated list with periods depth of object\n   * @param index - the index location of the value in model's item list\n   */\n  getObjectValue(object: Object, propertyFields: string, index?: number): string {\n    let value = '';\n    let current = object;\n    let fieldSplit = propertyFields.split(',');\n    for (let i = 0; i < fieldSplit.length; i++) {\n      let fieldValue = fieldSplit[i];\n      let fieldPartSplit = fieldValue.split('.');\n      for (let j = 0; j < fieldPartSplit.length; j++) {\n        let fieldCheckValue = fieldPartSplit[j];\n        if (current) {\n          current = current[fieldCheckValue];\n        }\n      }\n\n      if (current) {\n        value += current.toString() + ' ';\n      }\n      current = object;\n    }\n\n    return this.configuration.displayModifierFn\n      ? this.configuration.displayModifierFn(value.trim(), index)\n      : value.trim();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./selected-result.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<ul\n  *ngIf=\"model\"\n  [attr.aria-label]=\"configuration.labelText + ' results'\"\n  class=\"usa-list usa-list--unstyled sds-autocomplete-selected\"\n  aria-relevant=\"additions\"\n  role=\"listbox\"\n  aria-live=\"polite\"\n>\n  <li role=\"option\" *ngFor=\"let result of model.items; let i = index\">\n    <div class=\"sds-tag sds-tag--chip sds-tag--input\" [ngClass]=\"disabled ? 'sds-tag--disabled' : ''\">\n      <ng-container\n        *ngIf=\"itemTemplate\"\n        [ngTemplateOutlet]=\"itemTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: result }\"\n      >\n      </ng-container>\n      <ng-container *ngIf=\"!itemTemplate\">\n        <div class=\"sds--tag__item\">\n          <div>\n            {{ getObjectValue(result, configuration.primaryTextField, i) }}\n          </div>\n          <div *ngIf=\"configuration.secondaryTextField && result[configuration.secondaryTextField]\">\n            {{ result[configuration.secondaryTextField] }}\n          </div>\n        </div>\n      </ng-container>\n      <button\n        *ngIf=\"!disabled\"\n        [attr.aria-label]=\"'Remove Item ' + getObjectValue(result, configuration.primaryTextField, i)\"\n        [class.text-base]=\"disabled\"\n        aria-hidden=\"false\"\n        class=\"sds-tag__close\"\n        (click)=\"removeItem(result)\"\n        (keyup.enter)=\"removeItem(result)\"\n      >\n        <usa-icon [icon]=\"'x'\" size=\"lg\"></usa-icon>\n      </button>\n    </div>\n  </li>\n</ul>\n"
        },
        {
            "name": "SdsSelectionPanelComponent",
            "id": "component-SdsSelectionPanelComponent-d2200acf6f5fd5d5b3b68a238b9f7a37cc9e136aa60bea6bd1fb1ad5bbec57235db1ef64e9a501959e94492bf41cc9ff8c42c8a33ac79dfb09605390475128f8",
            "file": "libs/packages/components/src/lib/selection-panel/selection-panel-wrapper/selection-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-selection-panel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./selection-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows users to programatically select panel item. Can also be used\nto select initial panel\n",
                    "description": "<p>Allows users to programatically select panel item. Can also be used\nto select initial panel</p>\n",
                    "line": 27,
                    "type": "NavigationLink",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModel containing navigation links as well as a selection mode property.\nNavigation mode is implied if no selection mode is passed in\n",
                    "description": "<p>Model containing navigation links as well as a selection mode property.\nNavigation mode is implied if no selection mode is passed in</p>\n",
                    "line": 14,
                    "type": "SelectionPanelModel",
                    "decorators": []
                },
                {
                    "name": "navigateOnClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrue if users would prefer to navigate on panel selection, false otherwise.\nNavigation feature is not supported on SELECTION mode. On NAVIGATION mode,\nthis is enabled by default\n",
                    "description": "<p>True if users would prefer to navigate on panel selection, false otherwise.\nNavigation feature is not supported on SELECTION mode. On NAVIGATION mode,\nthis is enabled by default</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "panelSelected",
                    "defaultValue": "new EventEmitter<NavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs a NavigationLink item when it is selected from the panel\n",
                    "description": "<p>Outputs a NavigationLink item when it is selected from the panel</p>\n",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NavigationLink } from '../../side-navigation/model/side-navigation-model';\nimport { SelectionPanelModel } from '../model/selection-panel.model';\n\n@Component({\n  selector: 'sds-selection-panel',\n  templateUrl: './selection-panel.component.html',\n})\nexport class SdsSelectionPanelComponent {\n  /**\n   * Model containing navigation links as well as a selection mode property.\n   * Navigation mode is implied if no selection mode is passed in\n   */\n  @Input() model: SelectionPanelModel;\n\n  /**\n   * True if users would prefer to navigate on panel selection, false otherwise.\n   * Navigation feature is not supported on SELECTION mode. On NAVIGATION mode,\n   * this is enabled by default\n   */\n  @Input() navigateOnClick: boolean;\n\n  /**\n   * Allows users to programatically select panel item. Can also be used\n   * to select initial panel\n   */\n  @Input() currentSelection: NavigationLink;\n\n  /**\n   * Outputs a NavigationLink item when it is selected from the panel\n   */\n  @Output() panelSelected = new EventEmitter<NavigationLink>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"model.selectionMode && model.selectionMode === 'SELECTION'; else selectionMode\">\n  <sds-selection-panel-selection-mode\n    [model]=\"model\"\n    [currentSelection]=\"currentSelection\"\n    (panelSelected)=\"panelSelected.emit($event)\"\n  >\n  </sds-selection-panel-selection-mode>\n</ng-container>\n\n<!-- Default mode if no selectionMode is passed in -->\n<ng-template #selectionMode>\n  <sds-selection-panel-navigation-mode\n    [model]=\"model\"\n    [navigateOnClick]=\"navigateOnClick\"\n    [currentSelection]=\"currentSelection\"\n    (panelSelected)=\"panelSelected.emit($event)\"\n  >\n  </sds-selection-panel-navigation-mode>\n</ng-template>\n"
        },
        {
            "name": "SdsSelectionPanelNavigationModeComponent",
            "id": "component-SdsSelectionPanelNavigationModeComponent-3591549dff19f3b1477f51413a1245d63d38bf37a9f8dc95f6911acaf3d1918d2e5dec5c766fa7dc09a8bc9bf57b539e169afe158d72699abc9dab4e087071e1",
            "file": "libs/packages/components/src/lib/selection-panel/navigation-mode/navigation-mode.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-selection-panel-navigation-mode",
            "styleUrls": [
                "./navigation-mode.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-mode.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "NavigationLink",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "SelectionPanelModel",
                    "decorators": []
                },
                {
                    "name": "navigateOnClick",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "panelSelected",
                    "defaultValue": "new EventEmitter<NavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deselectSideNav",
                    "args": [
                        {
                            "name": "sidenavItems",
                            "type": "NavigationLink[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselects any previously selected sidenav item\n",
                    "description": "<p>Deselects any previously selected sidenav item</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1979,
                                "end": 1991,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "sidenavItems"
                            },
                            "type": "NavigationLink[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1973,
                                "end": 1978,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "navigateToSelectedItem",
                    "args": [
                        {
                            "name": "selectedPanel",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedPanel",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPanelItemClick",
                    "args": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectPanel",
                    "args": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPublic interface to select panel item",
                    "description": "<p>Public interface to select panel item</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectSideNav",
                    "args": [
                        {
                            "name": "selectedItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allNavItems",
                            "type": "NavigationLink[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelects the clicked sidenav item as we as any parent\n",
                    "description": "<p>Selects the clicked sidenav item as we as any parent</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2327,
                                "end": 2339,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "selectedItem"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2321,
                                "end": 2326,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2352,
                                "end": 2363,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "allNavItems"
                            },
                            "type": "NavigationLink[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2346,
                                "end": 2351,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\nimport { NavigationLink, SideNavigationModel } from '../../side-navigation/model/side-navigation-model';\nimport { SelectionPanelModel } from '../model/selection-panel.model';\n\n@Component({\n  selector: 'sds-selection-panel-navigation-mode',\n  templateUrl: './navigation-mode.component.html',\n  styleUrls: ['./navigation-mode.component.scss'],\n})\nexport class SdsSelectionPanelNavigationModeComponent implements OnChanges {\n  @Input() model: SelectionPanelModel;\n\n  @Input() navigateOnClick = true;\n\n  @Input() currentSelection: NavigationLink;\n\n  @Output() panelSelected = new EventEmitter<NavigationLink>();\n\n  constructor(private router: Router, private activatedRoute: ActivatedRoute) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.model && this.currentSelection && changes.currentSelection) {\n      this.selectPanel(this.currentSelection);\n\n      if (this.navigateOnClick) {\n        this.navigateToSelectedItem(this.currentSelection);\n      }\n    }\n  }\n\n  onPanelItemClick(panelItem: NavigationLink) {\n    this.selectPanel(panelItem);\n    this.currentSelection = panelItem;\n\n    if (this.navigateOnClick) {\n      this.navigateToSelectedItem(panelItem);\n    }\n\n    this.panelSelected.emit(panelItem);\n  }\n\n  navigateToSelectedItem(selectedPanel: NavigationLink) {\n    const navigationExtras: NavigationExtras = {\n      queryParams: selectedPanel.queryParams,\n      relativeTo: this.activatedRoute,\n    };\n\n    this.router.navigateByUrl(selectedPanel.route, navigationExtras);\n  }\n\n  /** Public interface to select panel item */\n  public selectPanel(panelItem: NavigationLink) {\n    this.deselectSideNav(this.model.navigationLinks);\n    this.selectSideNav(panelItem, this.model.navigationLinks);\n  }\n\n  /**\n   * Deselects any previously selected sidenav item\n   * @param sidenavItems\n   */\n  private deselectSideNav(sidenavItems: NavigationLink[]): void {\n    sidenavItems.forEach((sideNavItem) => {\n      if (sideNavItem.children) {\n        this.deselectSideNav(sideNavItem.children);\n      }\n      sideNavItem.selected = false;\n    });\n  }\n\n  /**\n   * Selects the clicked sidenav item as we as any parent\n   * @param selectedItem\n   * @param allNavItems\n   */\n  private selectSideNav(selectedItem: NavigationLink, allNavItems: NavigationLink[]): boolean {\n    for (const item of allNavItems) {\n      if (item === selectedItem) {\n        item.selected = true;\n        return true;\n      } else if (item.children) {\n        const isChildSelected = this.selectSideNav(selectedItem, item.children);\n        if (isChildSelected) {\n          item.selected = true;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navigation-mode.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ul class=\"usa-sidenav usa-sidenav--styled\">\n  <li *ngFor=\"let panelItem of model.navigationLinks\">\n    <ng-container [ngTemplateOutlet]=\"subPanelTemplate\" [ngTemplateOutletContext]=\"{ $implicit: panelItem }\">\n    </ng-container>\n  </li>\n</ul>\n\n<ng-template #subPanelTemplate let-panelItem>\n  <a\n    href=\"javascript:void(0);\"\n    class=\"usa-sidenav__item\"\n    (click)=\"onPanelItemClick(panelItem)\"\n    [ngClass]=\"{ 'usa-current': panelItem.selected }\"\n  >\n    <span>{{ panelItem.text }}</span>\n  </a>\n  <ul *ngIf=\"panelItem.children\" class=\"usa-sidenav__sublist\">\n    <li *ngFor=\"let panelItem of panelItem.children\">\n      <ng-container [ngTemplateOutlet]=\"subPanelTemplate\" [ngTemplateOutletContext]=\"{ $implicit: panelItem }\">\n      </ng-container>\n    </li>\n  </ul>\n</ng-template>\n"
        },
        {
            "name": "SdsSelectionPanelSelectionModeComponent",
            "id": "component-SdsSelectionPanelSelectionModeComponent-aec52547fabb4c49a535217406d0a279bf16c9c27ef557a6da7886eacf3b43ede60f78d529a5fc3543e5b1370b81b96aa17760c5634b4391648618de1b5e5a42",
            "file": "libs/packages/components/src/lib/selection-panel/selection-mode/selection-mode.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-selection-panel-selection-mode",
            "styleUrls": [
                "./selection-mode.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selection-mode.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "NavigationLink",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SideNavigationModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "panelSelected",
                    "defaultValue": "new EventEmitter<NavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onPanelItemClick",
                    "args": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NavigationLink, SideNavigationModel } from '../..//side-navigation/model/side-navigation-model';\n\n@Component({\n  selector: 'sds-selection-panel-selection-mode',\n  templateUrl: './selection-mode.component.html',\n  styleUrls: ['./selection-mode.component.scss'],\n})\nexport class SdsSelectionPanelSelectionModeComponent {\n  @Input()\n  model: SideNavigationModel;\n\n  @Input() currentSelection: NavigationLink;\n\n  @Output() panelSelected = new EventEmitter<NavigationLink>();\n\n  onPanelItemClick(panelItem: NavigationLink) {\n    this.currentSelection = panelItem;\n    this.panelSelected.emit(panelItem);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./selection-mode.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ul class=\"usa-sidenav usa-sidenav--styled\">\n  <li\n    *ngFor=\"let panelItem of model.navigationLinks\"\n    class=\"usa-sidenav__item\"\n    [ngClass]=\"{ 'usa-current': currentSelection && panelItem.id === currentSelection.id }\"\n  >\n    <a href=\"javascript:void(0);\" (click)=\"onPanelItemClick(panelItem)\">{{ panelItem.text }}</a>\n  </li>\n</ul>\n"
        },
        {
            "name": "SdsSideNavigationComponent",
            "id": "component-SdsSideNavigationComponent-5b4fa58e4546c15d01ebe06f25111c1edb318a7ce211bed97d7cb4f07ce69a03ff0477119c90d7c72cbac43d9ebe6f5f1fa6e355c365133797fd4c6f30a64c9e",
            "file": "libs/packages/components/src/lib/side-navigation/side-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-side-navigation",
            "styleUrls": [
                "./side-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA brief description of the purpose of the navigation, omitting the term \"navigation\",\nas the screen reader will read both the role and the contents of the label\n",
                    "description": "<p>A brief description of the purpose of the navigation, omitting the term &quot;navigation&quot;,\nas the screen reader will read both the role and the contents of the label</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModel used for the different display portions of the side navigation\n",
                    "description": "<p>Model used for the different display portions of the side navigation</p>\n",
                    "line": 76,
                    "type": "SideNavigationModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "linkEvent",
                    "defaultValue": "new EventEmitter<INavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent for event based\n",
                    "description": "<p>event for event based</p>\n",
                    "line": 148,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "navigationHelper",
                    "defaultValue": "new NavigationHelper()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Navigation helper</p>\n",
                    "line": 71,
                    "rawdescription": "\n\nNavigation helper\n"
                },
                {
                    "name": "sideNavEVENTLinkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the the Template used for event response</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nReference to the the Template used for event response\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNavEVENTLinkTemplate', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sideNavHREFLinkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the the Template used for external href</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nReference to the the Template used for external href\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNavHREFLinkTemplate', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sideNavLabelLinkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the the Template used for side menu items that are a label</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nReference to the the Template used for side menu items that are a label\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNavLabelLinkTemplate', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sideNavRouteLinkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the the Template used for internal links</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nReference to the the Template used for internal links\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNavRouteLinkTemplate', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deselect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselects all the items in the side navigation model\n",
                    "description": "<p>Deselects all the items in the side navigation model</p>\n"
                },
                {
                    "name": "deselectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if item is selected and if selcted will check children and will unselect\n",
                    "description": "<p>checks if item is selected and if selcted will check children and will unselect</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemTemplate",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TemplateRef<any>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes the navigation item and returns the template to be used\n",
                    "description": "<p>Takes the navigation item and returns the template to be used</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1606,
                                "end": 1610,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1600,
                                "end": 1605,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>navigation item</p>\n"
                        }
                    ]
                },
                {
                    "name": "linkClickEvent",
                    "args": [
                        {
                            "name": "link",
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLink clicked and emits the link data into an event\n",
                    "description": "<p>Link clicked and emits the link data into an event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4219,
                                "end": 4223,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "link"
                            },
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4213,
                                "end": 4218,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "queryStringBuilder",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreates query string\n",
                    "description": "<p>creates query string</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4831,
                                "end": 4835,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4825,
                                "end": 4830,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelects new item and parents and deselects previous\n",
                    "description": "<p>Selects new item and parents and deselects previous</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2509,
                                "end": 2511,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2503,
                                "end": 2508,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selectItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelects item if matches passed in id and will select parent\n",
                    "description": "<p>Selects item if matches passed in id and will select parent</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2809,
                                "end": 2811,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2803,
                                "end": 2808,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2824,
                                "end": 2828,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2818,
                                "end": 2823,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2841,
                                "end": 2847,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "parent"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2835,
                                "end": 2840,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "urlBuilder",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreates url from provided route and query params\n",
                    "description": "<p>creates url from provided route and query params</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4398,
                                "end": 4402,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4392,
                                "end": 4397,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ViewChild, TemplateRef } from '@angular/core';\nimport { SideNavigationModel, NavigationLink } from './model/side-navigation-model';\nimport { INavigationLink, NavigationMode } from '../common-navigation/common-navigation-model';\nimport { NavigationHelper } from '../common-navigation/navigation-helper';\n\n@Component({\n  selector: 'sds-side-navigation',\n  templateUrl: './side-navigation.component.html',\n  styleUrls: ['./side-navigation.component.scss'],\n})\nexport class SdsSideNavigationComponent {\n  /**\n   * Reference to the the Template used for internal links\n   */\n  @ViewChild('sideNavRouteLinkTemplate', { static: false })\n  private sideNavRouteLinkTemplate: TemplateRef<any>;\n\n  /**\n   * Reference to the the Template used for side menu items that are a label\n   */\n  @ViewChild('sideNavLabelLinkTemplate', { static: false })\n  private sideNavLabelLinkTemplate: TemplateRef<any>;\n\n  /**\n   * Reference to the the Template used for external href\n   */\n  @ViewChild('sideNavHREFLinkTemplate', { static: false })\n  private sideNavHREFLinkTemplate: TemplateRef<any>;\n\n  /**\n   * Reference to the the Template used for event response\n   */\n  @ViewChild('sideNavEVENTLinkTemplate', { static: false })\n  private sideNavEVENTLinkTemplate: TemplateRef<any>;\n\n  /**\n   * A brief description of the purpose of the navigation, omitting the term \"navigation\",\n   * as the screen reader will read both the role and the contents of the label\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Takes the navigation item and returns the template to be used\n   * @param item navigation item\n   */\n  getItemTemplate(item: NavigationLink): TemplateRef<any> {\n    let template = null;\n    switch (item.mode) {\n      case NavigationMode.EVENT:\n        template = this.sideNavEVENTLinkTemplate;\n        break;\n      case NavigationMode.EXTERNAL:\n        template = this.sideNavHREFLinkTemplate;\n        break;\n      case NavigationMode.INTERNAL:\n        template = this.sideNavRouteLinkTemplate;\n        break;\n      case NavigationMode.LABEL:\n        template = this.sideNavLabelLinkTemplate;\n        break;\n      default:\n        template = null;\n        break;\n    }\n    return template;\n  }\n\n  /**\n   * Navigation helper\n   */\n  navigationHelper = new NavigationHelper();\n\n  /**\n   * Model used for the different display portions of the side navigation\n   */\n  @Input() model: SideNavigationModel;\n\n  /**\n   * Selects new item and parents and deselects previous\n   * @param id\n   */\n  select(id: string) {\n    this.deselect();\n    for (let i = 0; i < this.model.navigationLinks.length; i++) {\n      let item = this.model.navigationLinks[i];\n      this.selectItem(id, item, null);\n    }\n  }\n\n  /**\n   * Selects item if matches passed in id and will select parent\n   * @param id\n   * @param item\n   * @param parent\n   */\n  private selectItem(id: string, item: NavigationLink, parent: NavigationLink) {\n    if (item.id === id) {\n      item.selected = true;\n      if (parent) {\n        parent.selected = true;\n      }\n    } else {\n      if (item.children) {\n        for (let i = 0; i < item.children.length; i++) {\n          let childItem = item.children[i];\n          this.selectItem(id, childItem, item);\n        }\n        if (item.selected) {\n          if (parent) {\n            parent.selected = true;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Deselects all the items in the side navigation model\n   */\n  deselect() {\n    if (this.model) {\n      if (this.model.navigationLinks) {\n        for (let i = 0; i < this.model.navigationLinks.length; i++) {\n          this.deselectItem(this.model.navigationLinks[i]);\n        }\n      }\n    }\n  }\n\n  /**\n   * checks if item is selected and if selcted will check children and will unselect\n   */\n  private deselectItem(item: NavigationLink) {\n    if (item.selected) {\n      item.selected = false;\n      if (item.children) {\n        for (let i = 0; i < item.children.length; i++) {\n          this.deselectItem(item.children[i]);\n        }\n      }\n    }\n  }\n\n  /**\n   * event for event based\n   */\n  @Output()\n  linkEvent = new EventEmitter<INavigationLink>();\n\n  /**\n   * Link clicked and emits the link data into an event\n   * @param link\n   */\n  linkClickEvent(link: INavigationLink) {\n    this.linkEvent.emit(link);\n    return false;\n  }\n\n  /**\n   * creates url from provided route and query params\n   * @param item\n   */\n  urlBuilder(item: NavigationLink) {\n    let url = item.route;\n    let queryParams = this.queryStringBuilder(item);\n    if (queryParams) {\n      if (url.indexOf('?') === -1) {\n        url += '?' + queryParams;\n      } else if (url.indexOf('?') === url.length - 1) {\n        url += queryParams;\n      } else {\n        url += '&' + queryParams;\n      }\n    }\n    return url;\n  }\n\n  /**\n   * creates query string\n   * @param item\n   */\n  private queryStringBuilder(item: NavigationLink) {\n    const ret = [];\n    for (let d in item.queryParams) {\n      ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(item.queryParams[d]));\n    }\n    return ret.join('&');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./side-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<nav [attr.aria-label]=\"ariaLabel\">\n  <ul class=\"usa-sidenav\">\n    <li *ngFor=\"let link of model.navigationLinks\" class=\"sidenav__item\">\n      <ng-container [ngTemplateOutlet]=\"sideNavLinkTemplate\" [ngTemplateOutletContext]=\"{ $implicit: link }\">\n      </ng-container>\n    </li>\n  </ul>\n</nav>\n\n<ng-template #sideNavLinkTemplate let-link>\n  <ng-container [ngTemplateOutlet]=\"getItemTemplate(link)\" [ngTemplateOutletContext]=\"{ $implicit: link }\">\n  </ng-container>\n  <ul *ngIf=\"link.children\" class=\"usa-sidenav__sublist\">\n    <li *ngFor=\"let link of link.children\" class=\"sidenav__item\">\n      <ng-container [ngTemplateOutlet]=\"sideNavLinkTemplate\" [ngTemplateOutletContext]=\"{ $implicit: link }\">\n      </ng-container>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #sideNavRouteLinkTemplate let-link>\n  <a\n    [attr.class]=\"link.selected ? ' usa-current' : ''\"\n    [routerLink]=\"[link.route]\"\n    (click)=\"linkClickEvent(link)\"\n    [queryParams]=\"link.queryParams\"\n    [queryParamsHandling]=\"link.queryParamsHandling\"\n  >\n    <span>{{ link.text }}</span>\n  </a>\n</ng-template>\n\n<ng-template #sideNavHREFLinkTemplate let-link>\n  <a [attr.class]=\"link.selected ? ' usa-current' : ''\" [attr.href]=\"urlBuilder(link)\" (click)=\"linkClickEvent(link)\"\n    ><span>{{ link.text }}</span></a\n  >\n</ng-template>\n\n<ng-template #sideNavLabelLinkTemplate let-link>\n  <span [attr.class]=\"link.selected ? ' usa-current' : ''\"\n    ><span>{{ link.text }}</span></span\n  >\n</ng-template>\n\n<ng-template #sideNavEVENTLinkTemplate let-link>\n  <a [attr.class]=\"link.selected ? ' usa-current' : ''\" href=\"javascript:void(0)\" (click)=\"linkClickEvent(link)\"\n    ><span>{{ link.text }}</span></a\n  >\n</ng-template>\n"
        },
        {
            "name": "SdsSideToolbarComponent",
            "id": "component-SdsSideToolbarComponent-e06b49b0375be022d04ffaea7110b2f0b8f41352eb47ad9abb3c0a08cc01d4c54cffbcbf2b8f92415d2fc5317d25ca456debbbd741eaaf0a973e4259866ffcbe",
            "file": "libs/packages/components/src/lib/side-toolbar/side-toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-side-toolbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./side-toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backButtonAria",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dialogTitleText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "responsiveButtonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "responsiveDialogOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "SdsDialogConfig",
                    "decorators": []
                },
                {
                    "name": "responsiveSize",
                    "defaultValue": "480",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "showApply",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onApply",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "responsiveDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                },
                {
                    "name": "responsiveView",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isResponsiveView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "mobile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'mobile'"
                        }
                    ]
                },
                {
                    "name": "openResponsiveDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsDialogRef<TemplateRef<any>>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "observeViewChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onApplyClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancelClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResponsiveViewButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { SdsDialogRef } from '../dialog/dialog-ref';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Subscription } from 'rxjs';\nimport { SdsDialogConfig } from '../dialog/dialog-config';\nimport { SdsDialogService } from '../dialog/dialog';\n\n@Component({\n  selector: 'sds-side-toolbar',\n  templateUrl: './side-toolbar.component.html',\n})\nexport class SdsSideToolbarComponent implements OnInit, OnDestroy {\n  @ContentChild(TemplateRef) template: TemplateRef<any>;\n\n  @ViewChild('mobile') mobile: TemplateRef<any>;\n\n  // Text for button in responsive view\n  @Input() responsiveButtonText: string;\n\n  // Text for title bar in responsive view. If not provided, will default to responsiveButtonText\n  @Input() dialogTitleText: string;\n\n  // Aria label to apply to back button. If not provided, will default to \"Cancel + ${dialogTitleText}\"\n  @Input() backButtonAria: string;\n\n  @Input() responsiveDialogOptions: SdsDialogConfig;\n\n  // default value is size of mobile view in px\n  @Input() responsiveSize = 480;\n\n  @Input() showApply: boolean = false;\n\n  @Output() onCancel: EventEmitter<any> = new EventEmitter();\n  @Output() onApply: EventEmitter<any> = new EventEmitter();\n\n  @Output() responsiveDialog = new EventEmitter();\n  @Output() responsiveView = new EventEmitter();\n\n  isResponsiveView = false;\n\n  private subscription: Subscription = new Subscription();\n  private openResponsiveDialog: SdsDialogRef<TemplateRef<any>>;\n\n  constructor(\n    private sdsDialogService: SdsDialogService,\n    private breakpointObserver: BreakpointObserver // Will watch for changes between mobile and non-mobile screen size\n  ) {}\n\n  ngOnInit() {\n    this.observeViewChange();\n    if (this.dialogTitleText === undefined) {\n      this.dialogTitleText = this.responsiveButtonText;\n    }\n    if (this.backButtonAria === undefined) {\n      this.backButtonAria = `Cancel ${this.dialogTitleText}`;\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  onResponsiveViewButtonClicked() {\n    let dialogOptions = {\n      height: '100vh',\n      width: '100vw',\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      hasBackdrop: false,\n      displayCloseBtn: false,\n      panelClass: ['sds-dialog--full'],\n    };\n\n    let allOptions = this.responsiveDialogOptions\n      ? { ...dialogOptions, ...this.responsiveDialogOptions }\n      : dialogOptions;\n\n    this.openResponsiveDialog = this.sdsDialogService.open(this.mobile, allOptions);\n\n    this.responsiveDialog.emit(this.openResponsiveDialog);\n\n    this.openResponsiveDialog.afterClosed().subscribe(() => {\n      this.openResponsiveDialog = undefined;\n    });\n  }\n\n  private observeViewChange() {\n    const breakpointUnsubscription = this.breakpointObserver\n      .observe([`(max-width: ${this.responsiveSize}px)`])\n      .subscribe((result) => {\n        if (result.matches) {\n          this.isResponsiveView = true;\n        } else {\n          this.isResponsiveView = false;\n          if (this.openResponsiveDialog) {\n            this.openResponsiveDialog.close();\n            this.openResponsiveDialog = undefined;\n            this.responsiveDialog.emit(this.openResponsiveDialog);\n          }\n        }\n\n        this.responsiveView.emit(this.isResponsiveView);\n      });\n\n    this.subscription.add(breakpointUnsubscription);\n  }\n\n  onCancelClicked() {\n    this.openResponsiveDialog.close();\n    this.openResponsiveDialog = undefined;\n    this.onCancel.emit();\n  }\n\n  onApplyClicked() {\n    this.openResponsiveDialog.close();\n    this.openResponsiveDialog = undefined;\n    this.onApply.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sdsDialogService",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "sdsDialogService",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"!isResponsiveView\">\n  <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n</div>\n\n<div *ngIf=\"isResponsiveView\">\n  <button\n    class=\"usa-button usa-button--accent-cool usa-button--hover text-secondary-dar\"\n    id=\"responsiveViewButton\"\n    (click)=\"onResponsiveViewButtonClicked()\"\n    [attr.aria-label]=\"responsiveButtonText\"\n  >\n    {{ responsiveButtonText }}\n  </button>\n</div>\n\n<ng-template #mobile>\n  <div class=\"sds-card\">\n    <div class=\"sds-card__header sds-card__header--accent-cool grid-row\">\n      <button\n        id=\"cancelButton\"\n        class=\"sds-button sds-button--circular sds-button--white\"\n        (click)=\"onCancelClicked()\"\n        [attr.aria-label]=\"backButtonAria\"\n      >\n        <usa-icon [icon]=\"'chevron-left'\"></usa-icon>\n      </button>\n      <div class=\"margin-x-auto\">\n        <h2 class=\"sds-card__title margin-top-1 margin-left-neg-2\">{{ dialogTitleText }}</h2>\n      </div>\n    </div>\n  </div>\n  <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n  <div class=\"sds-card\" *ngIf=\"showApply\">\n    <div class=\"sds-card__body sds-card__body--accent-cool\">\n      <button class=\"usa-button\" id=\"applyButton\" aria-label=\"Apply\" (click)=\"onApplyClicked()\">Apply</button>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "SdsStepArrowComponent",
            "id": "component-SdsStepArrowComponent-27dc4b6ede3f629cb47418a93984b6549ee5bf15f2dad68d145f7093d5b82ff20a17fa0274c9af07d2e6c4cfd7f352ba53350b89627c958a789c4d81ae8b926c",
            "file": "libs/packages/components/src/lib/step-arrow/step-arrow.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-step-arrow",
            "styleUrls": [
                "./step-arrow.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./step-arrow.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "status",
                    "defaultValue": "'inactive'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sds-step-arrow',\n  templateUrl: './step-arrow.component.html',\n  styleUrls: ['./step-arrow.component.scss'],\n})\nexport class SdsStepArrowComponent {\n  @Input() status: string = 'inactive';\n  @Input() number: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".step-arrow {\n  stroke: #21c834;\n  &.active {\n    fill: #21c834;\n  }\n  &.inactive {\n    fill: #e3f5e1;\n  }\n}\n.wrap-layer {\n  position: relative;\n}\n.text-layer {\n  font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans;\n  font-size: 1.5rem;\n  text-align: center;\n  line-height: 1.1;\n  font-weight: 700;\n  position: absolute;\n  width: 75%;\n  margin-top: 2px;\n  height: auto;\n\n  /* non-critical styles left out */\n}\n",
                    "styleUrl": "./step-arrow.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"grid-row\">\n  <div class=\"wrap-layer\">\n    <div class=\"text-layer\">\n      <p>{{ number }}</p>\n    </div>\n    <div>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"80\" height=\"40\" viewBox=\"105 90 5 50\">\n        <polygon\n          class=\"step-arrow\"\n          [ngClass]=\"{ active: status === 'active', inactive: status === 'inactive' }\"\n          stroke-width=\"2\"\n          points=\"120,95 60,95 60,130 120,130 140,112\"\n        />\n      </svg>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SdsSubPanelComponent",
            "id": "component-SdsSubPanelComponent-c9d6943258547c795271c959fd7dea7265a4bec9d643893b5d57e0fb47640df8e5470fc7c9f0a2c1d51bed8082bf2354817d198ebf049fa4e4d65f6954336207",
            "file": "libs/packages/components/src/lib/selection-panel/sub-panel/sub-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-sub-panel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sub-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "NavigationLink",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "NavigationLink[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "subPanelClicked",
                    "defaultValue": "new EventEmitter<NavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onSubPanelItemClicked",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NavigationLink, SideNavigationModel } from '../../side-navigation/model/side-navigation-model';\n\n@Component({\n  selector: `sds-sub-panel`,\n  templateUrl: './sub-panel.component.html',\n})\nexport class SdsSubPanelComponent {\n  @Input() model: NavigationLink[];\n\n  @Input() currentSelection: NavigationLink;\n\n  @Output() subPanelClicked = new EventEmitter<NavigationLink>();\n\n  onSubPanelItemClicked(item: NavigationLink) {\n    this.currentSelection = item;\n    this.subPanelClicked.emit(item);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<ul class=\"usa-sidenav sds-subpanel sds-list\">\n  <li *ngFor=\"let panelItem of model\" class=\"usa-sidenav__item\">\n    <ng-container [ngTemplateOutlet]=\"subPanelTemplate\" [ngTemplateOutletContext]=\"{ $implicit: panelItem }\">\n    </ng-container>\n  </li>\n</ul>\n\n<ng-template #subPanelTemplate let-panelItem>\n  <a\n    href=\"javascript:void(0);\"\n    class=\"usa-link margin-right-neg-2\"\n    [ngClass]=\"{\n      'usa-link--active': currentSelection && panelItem.id === currentSelection.id\n    }\"\n    (click)=\"onSubPanelItemClicked(panelItem)\"\n  >\n    {{ panelItem.text }}</a\n  >\n  <ul *ngIf=\"panelItem.children\" class=\"usa-sidenav__sublist\">\n    <li *ngFor=\"let panelItem of panelItem.children\" class=\"sidenav__item\">\n      <ng-container [ngTemplateOutlet]=\"subPanelTemplate\" [ngTemplateOutletContext]=\"{ $implicit: panelItem }\">\n      </ng-container>\n    </li>\n  </ul>\n</ng-template>\n"
        },
        {
            "name": "SdsTextChildComponent",
            "id": "component-SdsTextChildComponent-89994a63551f32a55c9e5ca265c88479334837bcb6a7354fdbd4205ad041a68a24401396bf5b0e5782a6ac950e7bd0d23b03d0263bf6ec588349565e16dc4901",
            "file": "libs/packages/components/src/lib/text/child.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-text-child",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"items\">\n  <span\n    class=\"sds-tag sds-tag--chip margin-x-05\"\n    style=\"cursor:pointer;\"\n    *ngFor=\"let item of items; let i = index\"\n    (click)=\"removeItem(i)\"\n    >{{ item }} <small class=\"margin-left-05\">(x)</small></span\n  >\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemsChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'sds-text-child',\n  template: `\n    <ng-container *ngIf=\"items\">\n      <span\n        class=\"sds-tag sds-tag--chip margin-x-05\"\n        style=\"cursor:pointer;\"\n        *ngFor=\"let item of items; let i = index\"\n        (click)=\"removeItem(i)\"\n        >{{ item }} <small class=\"margin-left-05\">(x)</small></span\n      >\n    </ng-container>\n  `,\n})\nexport class SdsTextChildComponent {\n  @Input() items;\n  @Output() itemsChange = new EventEmitter();\n\n  // Method to remove an item from the items array, emits an event that the parent component is listening for\n  removeItem(index) {\n    this.items.splice(index, 1);\n    this.itemsChange.emit(this.items);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SdsTextComponent",
            "id": "component-SdsTextComponent-6f43749fa922b264bb815351c9b9fe7f8effdd0f9115ee6bc55b0f711f3cac34b34ef0e40ba519b9ff6ece3df7849490eced5ff9cbac1178699ba5fcbb2cd7e4",
            "file": "libs/packages/components/src/lib/text/text.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SdsTextComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "sds-text",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <input #searchInput class=\"usa-input display-inline-block\" [attr.aria-label]=\"label\" />\n  <button\n    class=\"usa-button margin-left-05 display-inline-block\"\n    (click)=\"addItem(searchInput.value); searchInput.value = ''\"\n  >\n    Add Item\n  </button>\n</div>\n\n<h4>Component Items</h4>\n<pre>{{ items | json }}</pre>\n\n<hr />\n\n<h4>Child Component Items <small>(click to remove)</small></h4>\n<sds-text-child [(items)]=\"items\" (itemsChange)=\"updateItems($event)\"></sds-text-child>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModel",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItems",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, ChangeDetectionStrategy, ChangeDetectorRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'sds-text',\n  template: `\n    <div>\n      <input #searchInput class=\"usa-input display-inline-block\" [attr.aria-label]=\"label\" />\n      <button\n        class=\"usa-button margin-left-05 display-inline-block\"\n        (click)=\"addItem(searchInput.value); searchInput.value = ''\"\n      >\n        Add Item\n      </button>\n    </div>\n\n    <h4>Component Items</h4>\n    <pre>{{ items | json }}</pre>\n\n    <hr />\n\n    <h4>Child Component Items <small>(click to remove)</small></h4>\n    <sds-text-child [(items)]=\"items\" (itemsChange)=\"updateItems($event)\"></sds-text-child>\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SdsTextComponent),\n      multi: true,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsTextComponent implements ControlValueAccessor {\n  items = [];\n  multiple = true;\n\n  @Input() label: string;\n\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  // Helper method to programatically add a value to the existing items array\n  addItem(val) {\n    if (this.multiple) {\n      this.items = [...this.items, val];\n      this.updateModel();\n    }\n  }\n\n  // Method that is fired when the child component event notifies us that the items array has been modified within the child component\n  updateItems($event) {\n    this.updateModel();\n  }\n\n  // Helper method that gets a new instance of the model and notifies ControlValueAccessor that we have a new model for this FormControl (our custom component)\n  updateModel() {\n    const model = this.getModel();\n    this._onChange(model);\n  }\n\n  // Helper method to return a new instance of an array that contains our items\n  getModel() {\n    return [...this.items];\n  }\n\n  // ControlValueAccessor (and Formly) is trying to update the value of the FormControl (our custom component) programatically\n  // If there is a value we will just overwrite items\n  // If there is no value we reset the items array to be empty\n  writeValue(value: any) {\n    if (value && value.length && this.items !== value) {\n      this.items = value;\n      this.cd.markForCheck();\n    } else {\n      this.items = [];\n      this.cd.markForCheck();\n    }\n  }\n\n  // ControlValueAccessor hook that lets us call this._onChange(var) to let the form know our variable has changed (in this case model)\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  // ControlValueAccessor hook (not used)\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "SdsToastComponent",
            "id": "component-SdsToastComponent-6f827f097e17bfd34a02e8f7fd60c148daa53b111bda1133d344164fda509403bbe9a01cec470a587233e0880a7052dce068542bbaf735d67d4e50870569b8e8",
            "file": "libs/packages/components/src/lib/toast/toast-single.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-toast",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        position: relative;\n      }\n    "
            ],
            "templateUrl": [
                "./toast-single.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "toastPackage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastPackage",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "action",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIcon",
                    "args": [
                        {
                            "name": "toastType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"check2-circle\" | \"info-circle\" | \"exclamation-triangle\" | \"slash-circle\"",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toastType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToastSr",
                    "args": [
                        {
                            "name": "toastType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"Success\" | \"Info\" | \"Warning\" | \"Error\"",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toastType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from 'ngx-toastr';\n\n@Component({\n  selector: 'sds-toast',\n  styles: [\n    `\n      :host {\n        position: relative;\n      }\n    `,\n  ],\n  templateUrl: './toast-single.component.html',\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({ opacity: 0 })),\n      state('active', style({ opacity: 1 })),\n      state('removed', style({ opacity: 0 })),\n      transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n      transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n    ]),\n  ],\n\n  preserveWhitespaces: false,\n})\nexport class SdsToastComponent extends Toast {\n  constructor(protected toastrService: ToastrService, public toastPackage: ToastPackage) {\n    super(toastrService, toastPackage);\n  }\n\n  action(event: Event) {\n    event.stopPropagation();\n    this.toastPackage.triggerAction();\n    return false;\n  }\n\n  getIcon(toastType) {\n    switch (toastType) {\n      case 'sds-toast--success':\n        return 'check2-circle';\n      case 'sds-toast--info':\n        return 'info-circle';\n      case 'sds-toast--warning':\n        return 'exclamation-triangle';\n      case 'sds-toast--error':\n        return 'slash-circle';\n      default:\n        return 'info-circle';\n    }\n  }\n  getToastSr(toastType) {\n    switch (toastType) {\n      case 'sds-toast--success':\n        return 'Success';\n      case 'sds-toast--info':\n        return 'Info';\n      case 'sds-toast--warning':\n        return 'Warning';\n      case 'sds-toast--error':\n        return 'Error';\n      default:\n        return 'Info';\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        position: relative;\n      }\n    \n",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastrService",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastPackage",
                        "type": "ToastPackage",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "toastrService",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastPackage",
                        "type": "ToastPackage",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Toast",
            "templateData": "<div class=\"sds-toast__content\" role=\"alert\" aria-live=\"assertive\">\n  <div class=\"usa-sr-only\">{{ getToastSr(toastPackage.toastType) }}</div>\n  <div class=\"sds-toast__content__icon\">\n    <usa-icon [icon]=\"getIcon(toastPackage.toastType)\" size=\"2x\"></usa-icon>\n  </div>\n  <span *ngIf=\"message && options.enableHtml\" class=\"sds-toast__content__text\" [innerHTML]=\"message\"></span>\n  <span *ngIf=\"message && !options.enableHtml\" class=\"sds-toast__content__text\">{{ message }}</span>\n  <div *ngIf=\"options.closeButton\" class=\"sds-toast__content__close\" (click)=\"remove()\">\n    <usa-icon [icon]=\"'x'\"></usa-icon>\n  </div>\n</div>\n"
        },
        {
            "name": "SdsTopBannerComponent",
            "id": "component-SdsTopBannerComponent-7d69824ce4fcd107524cda16fe416d2534ae7a06a423e21278d0855f244a6e372abc0239b1cdc75c176f632506214d75c4c8de138ea738a0d44749bb99bbc170",
            "file": "libs/packages/components/src/lib/top-banner/top-banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-top-banner",
            "styleUrls": [
                "./top-banner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-banner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showDetail",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sds-top-banner',\n  templateUrl: './top-banner.component.html',\n  styleUrls: ['./top-banner.component.scss'],\n})\nexport class SdsTopBannerComponent {\n  showDetail = false;\n  @Input() description = '';\n\n  toggleDetails() {\n    this.showDetail = !this.showDetail;\n  }\n\n  closeDetail() {\n    if (this.showDetail) {\n      this.showDetail = false;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./top-banner.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"usa-banner\">\n  <div class=\"usa-accordion\">\n    <header class=\"usa-banner__header\" [class.sam-banner__header--expanded]=\"showDetail\">\n      <div class=\"usa-banner__inner\">\n        <div class=\"grid-col-auto\">\n          <span class=\"usa-banner__header-flag\"></span>\n        </div>\n        <div class=\"grid-col-fill tablet:grid-col-auto\">\n          <p class=\"usa-banner__header-text\">\n            An official website of the United States government\n          </p>\n          <p class=\"usa-banner__header-action\" aria-hidden=\"true\">\n            Here’s how you know\n          </p>\n        </div>\n        <button\n          class=\"usa-accordion__button usa-banner__button\"\n          (click)=\"toggleDetails()\"\n          (blur)=\"closeDetail()\"\n          [attr.aria-expanded]=\"showDetail\"\n          aria-controls=\"gov-banner\"\n        >\n          <span class=\"usa-banner__button-text\">Here’s how you know</span>\n        </button>\n        <div class=\"usa-banner__header-description\">\n          <em>{{ description }}</em>\n        </div>\n      </div>\n    </header>\n    <div class=\"usa-banner__content usa-accordion__content\" id=\"gov-banner\" [hidden]=\"!showDetail\">\n      <div class=\"grid-row grid-gap-lg\">\n        <div class=\"usa-banner__guidance tablet:grid-col-6\">\n          <span class=\"usa-banner__icon usa-media-block__img\"></span>\n          <div class=\"usa-media-block__body\">\n            <p>\n              <strong>The .gov means it’s official.</strong> <br />\n              Federal government websites often end in .gov or .mil. Before sharing sensitive information, make sure\n              you’re on a federal government site.\n            </p>\n          </div>\n        </div>\n        <div class=\"usa-banner__guidance tablet:grid-col-6\">\n          <span class=\"usa-banner__icon usa-media-block__img\"></span>\n          <div class=\"usa-media-block__body\">\n            <p>\n              <strong>The site is secure.</strong> <br />\n              The <strong>https://</strong> ensures that you are connecting to the official website and that any\n              information you provide is encrypted and transmitted securely.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SdsTreeTableComponent",
            "id": "component-SdsTreeTableComponent-d5ca2860f4e2bd7628d236428111b1502478ad8d01b88e0c9f75c2fed4dfa59e9d3892b3a8a6b02a15b5c7809f0ede1d92ba26c4d1bd878c9e262ebe361c115f",
            "file": "libs/packages/components/src/lib/tree-table/tree-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-tree-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tree-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "childrenLimit",
                    "defaultValue": "Number.MAX_SAFE_INTEGER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1088,
                            "end": 1126,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1089,
                                "end": 1096,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<ul>\n<li>Number.MAX_SAFE_INTEGER</li>\n</ul>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefines maximum number of children to show to the user\nIE - if a row has 20 children available, and childrenLimit\nvalue is 10, then the amount of children displayed to the\nuser will be numChildrenToDisplay amount, and the rest\nis toggled behind a 'View All' button,\nThis should be greater than or equal to numChildrenToDisplay\n",
                    "description": "<p>Defines maximum number of children to show to the user\nIE - if a row has 20 children available, and childrenLimit\nvalue is 10, then the amount of children displayed to the\nuser will be numChildrenToDisplay amount, and the rest\nis toggled behind a &#39;View All&#39; button,\nThis should be greater than or equal to numChildrenToDisplay</p>\n",
                    "line": 44,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRows of table tada to display",
                    "description": "<p>Rows of table tada to display</p>\n",
                    "line": 30,
                    "type": "SdsTreeTableData[]",
                    "decorators": []
                },
                {
                    "name": "displayColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nColumn header text",
                    "description": "<p>Column header text</p>\n",
                    "line": 33,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "numChildrenToDisplay",
                    "defaultValue": "this.childrenLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1900,
                            "end": 1938,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1901,
                                "end": 1908,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<ul>\n<li>Number.MAX_SAFE_INTEGER</li>\n</ul>\n"
                        }
                    ],
                    "rawdescription": "\n\nNumber of children to Display to users if a row's children length\nexceeds childrenLimit. This should be less than or equal to childrenLimit\n\nGeneral Cases:\nIf numChildrenToDisplay is 5, childrenLimit is 10, and row has 20 children\n 5 children will be shown and the remaining can be displayed through View All button\n\nIf numChildrenToDisplay is 5, childrenLimit is 10, and row has 10 children\n All 10 children will be displayed because the row's children does not exceed childrenLimit\n\nIf numChildren is 5, childrenLimit is 10, and row has 4 children\n All 4 children will be displayed because row's children does not exceed childrenLimit\n\n",
                    "description": "<p>Number of children to Display to users if a row&#39;s children length\nexceeds childrenLimit. This should be less than or equal to childrenLimit</p>\n<p>General Cases:\nIf numChildrenToDisplay is 5, childrenLimit is 10, and row has 20 children\n 5 children will be shown and the remaining can be displayed through View All button</p>\n<p>If numChildrenToDisplay is 5, childrenLimit is 10, and row has 10 children\n All 10 children will be displayed because the row&#39;s children does not exceed childrenLimit</p>\n<p>If numChildren is 5, childrenLimit is 10, and row has 4 children\n All 4 children will be displayed because row&#39;s children does not exceed childrenLimit</p>\n",
                    "line": 62,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "rowExpanded",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmitted anytime a row 's expansion / collapse value changes",
                    "description": "<p>Emitted anytime a row &#39;s expansion / collapse value changes</p>\n",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "viewAll",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmitted for a row if there are more children to display and user clicked view all",
                    "description": "<p>Emitted for a row if there are more children to display and user clicked view all</p>\n",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_selectedRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "_selectedRowParent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "cdr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "treetableRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsTreeTableRow",
                    "optional": false,
                    "description": "<p>Reference for content projection. User defined values for how to\ndisplay each cell in a row</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nReference for content projection. User defined values for how to\ndisplay each cell in a row\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "SdsTreeTableRow"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPublic Interface - close all opened children\n",
                    "description": "<p>Public Interface - close all opened children</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "collapseRow",
                    "args": [
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPublic Interface - Collapse a single row given an id.\nThe row's successors will also be collapsed\n",
                    "description": "<p>Public Interface - Collapse a single row given an id.\nThe row&#39;s successors will also be collapsed</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3348,
                                "end": 3353,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "rowId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3342,
                                "end": 3347,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>id of row to collapse</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "collapseRowHelper",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayVerticalBorder",
                    "args": [
                        {
                            "name": "parentRow",
                            "type": "SdsTreeTableData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "siblingRows",
                            "type": "SdsTreeTableRow[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether or not to display vertical border from this row. Vertical borders generally\nstart from the last child and extend to the parent. However, if we are truncating the number\nof children displayed, then the vertical border would need to start from the child we\ntruncate at.\n",
                    "description": "<p>Defines whether or not to display vertical border from this row. Vertical borders generally\nstart from the last child and extend to the parent. However, if we are truncating the number\nof children displayed, then the vertical border would need to start from the child we\ntruncate at.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "parentRow",
                            "type": "SdsTreeTableData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "siblingRows",
                            "type": "SdsTreeTableRow[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "expandAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPublic interface - open all panels with children\n",
                    "description": "<p>Public interface - open all panels with children</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "expandRow",
                    "args": [
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPublic interface - expand a single row given an ID.\nThe row's predecessors will also be expanded\n",
                    "description": "<p>Public interface - expand a single row given an ID.\nThe row&#39;s predecessors will also be expanded</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3067,
                                "end": 3072,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "rowId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3061,
                                "end": 3066,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>id of row to expand</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "expandRowHelper",
                    "args": [
                        {
                            "name": "allRows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "allRows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findRow",
                    "args": [
                        {
                            "name": "allRows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "allRows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParentOfRow",
                    "args": [
                        {
                            "name": "allRows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "allRows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTemplateContext",
                    "args": [
                        {
                            "name": "parent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentSelected",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "parentRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{ row: any; level: number; index: number; size: any; rows: any; parentSelected: boolean; parent: any; parentRow: HTMLTableRowElement; }",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentSelected",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moreChildrenThanInitialLimit",
                    "args": [
                        {
                            "name": "row",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moreChildrenThanShowing",
                    "args": [
                        {
                            "name": "row",
                            "type": "SdsTreeTableData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "SdsTreeTableData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tableRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRowClicked",
                    "args": [
                        {
                            "name": "row",
                            "type": "SdsTreeTableData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tableRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "SdsTreeTableData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeight",
                    "args": [
                        {
                            "name": "row",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "border",
                            "type": "HTMLSpanElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets height of vertical border on the tree table view",
                    "description": "<p>Sets height of vertical border on the tree table view</p>\n",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "border",
                            "type": "HTMLSpanElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleAllHelper",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expanded",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expanded",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewAllClicked",
                    "args": [
                        {
                            "name": "row",
                            "type": "SdsTreeTableData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tableRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "SdsTreeTableData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableRow",
                            "type": "HTMLTableRowElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  Output,\n  TemplateRef,\n} from '@angular/core';\nimport { SdsTreeTableData } from './tree-table.model';\n\n@Directive({\n  selector: `[sdsTreeTableRow]`,\n})\nexport class SdsTreeTableRow {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n\n@Component({\n  selector: `sds-tree-table`,\n  templateUrl: `./tree-table.component.html`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsTreeTableComponent {\n  /** Rows of table tada to display */\n  @Input() dataSource: SdsTreeTableData[];\n\n  /** Column header text */\n  @Input() displayColumns: string[];\n\n  /**\n   * Defines maximum number of children to show to the user\n   * IE - if a row has 20 children available, and childrenLimit\n   * value is 10, then the amount of children displayed to the\n   * user will be numChildrenToDisplay amount, and the rest\n   * is toggled behind a 'View All' button,\n   * This should be greater than or equal to numChildrenToDisplay\n   * @default - Number.MAX_SAFE_INTEGER\n   */\n  @Input() childrenLimit: number = Number.MAX_SAFE_INTEGER;\n\n  /**\n   * Number of children to Display to users if a row's children length\n   * exceeds childrenLimit. This should be less than or equal to childrenLimit\n   *\n   * General Cases:\n   * If numChildrenToDisplay is 5, childrenLimit is 10, and row has 20 children\n   *  5 children will be shown and the remaining can be displayed through View All button\n   *\n   * If numChildrenToDisplay is 5, childrenLimit is 10, and row has 10 children\n   *  All 10 children will be displayed because the row's children does not exceed childrenLimit\n   *\n   * If numChildren is 5, childrenLimit is 10, and row has 4 children\n   *  All 4 children will be displayed because row's children does not exceed childrenLimit\n   *\n   * @default - Number.MAX_SAFE_INTEGER\n   */\n  @Input() numChildrenToDisplay: number = this.childrenLimit;\n\n  /**\n   * Reference for content projection. User defined values for how to\n   * display each cell in a row\n   */\n  @ContentChild(SdsTreeTableRow) treetableRow: SdsTreeTableRow;\n\n  /** Emitted for a row if there are more children to display and user clicked view all */\n  @Output() viewAll = new EventEmitter<any>();\n\n  /** Emitted anytime a row 's expansion / collapse value changes */\n  @Output() rowExpanded = new EventEmitter<any>();\n\n  _selectedRow: any;\n  _selectedRowParent: any;\n\n  constructor(private elementRef: ElementRef, public cdr: ChangeDetectorRef, private ngZone: NgZone) {}\n\n  /**\n   * Public Interface - close all opened children\n   */\n  public collapseAll() {\n    this.toggleAllHelper(this.dataSource, false);\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Public interface - open all panels with children\n   */\n  public expandAll() {\n    this.toggleAllHelper(this.dataSource, true);\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Public interface - expand a single row given an ID.\n   * The row's predecessors will also be expanded\n   * @param rowId - id of row to expand\n   */\n  public expandRow(rowId: string) {\n    this.expandRowHelper(this.dataSource, rowId);\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Public Interface - Collapse a single row given an id.\n   * The row's successors will also be collapsed\n   * @param rowId - id of row to collapse\n   */\n  public collapseRow(rowId: string) {\n    const row = this.findRow(this.dataSource, rowId);\n    if (!row) {\n      return;\n    }\n\n    this.collapseRowHelper(row);\n    this.cdr.detectChanges();\n  }\n\n  viewAllClicked(row: SdsTreeTableData, currentRow: HTMLTableRowElement, tableRow: HTMLTableRowElement) {\n    currentRow.setAttribute('tabindex', undefined);\n    tableRow.setAttribute('tabindex', '0');\n    row.viewAllChildren = true;\n    setTimeout(() => tableRow.focus());\n    if (!row.children && !row.totalChildren) {\n      return;\n    }\n    if (\n      (row.totalChildren && this.moreChildrenThanShowing(row)) ||\n      (row.children && this.moreChildrenThanInitialLimit(row))\n    ) {\n      this.viewAll.emit(row);\n    }\n  }\n\n  private moreChildrenThanShowing(row: SdsTreeTableData): boolean {\n    return row.totalChildren > row.children?.length;\n  }\n\n  private moreChildrenThanInitialLimit(row): boolean {\n    return row.children.length > this.childrenLimit;\n  }\n\n  private toggleAllHelper(data: any[], expanded: boolean) {\n    data.forEach((data) => {\n      if (data.children) {\n        this.toggleAllHelper(data.children, expanded);\n        data.expanded = expanded;\n\n        if (!expanded) {\n          data.viewAllChildren = false;\n        }\n      }\n    });\n  }\n\n  private expandRowHelper(allRows: any[], id: string) {\n    for (let i = 0; i < allRows.length; i++) {\n      const row = allRows[i];\n      if (row.id === id) {\n        return true;\n      } else if (row.children) {\n        const isChildExpanded = this.expandRowHelper(row.children, id);\n        if (isChildExpanded) {\n          row.expanded = true;\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private findRow(allRows: any[], id: string) {\n    for (let i = 0; i < allRows.length; i++) {\n      const row = allRows[i];\n      if (row.id === id) {\n        return row;\n      } else if (row.children) {\n        return this.findRow(allRows, id);\n      }\n    }\n    return null;\n  }\n\n  private collapseRowHelper(row: any) {\n    row.expanded = false;\n    row.viewAllChildren = false;\n    if (row.children) {\n      row.children.forEach((child) => this.collapseRowHelper(child));\n    }\n  }\n\n  /** Sets height of vertical border on the tree table view */\n  setHeight(row: HTMLTableRowElement, parentRow: HTMLTableRowElement, border: HTMLSpanElement) {\n    if (!row || !parentRow) {\n      return;\n    }\n\n    /**\n     * We run outside ngZone because we don't want the setTimeout to trigger change detection,\n     * which would re-run changes on template, and re-evalute this function, causing infinite loop\n     */\n    this.ngZone.runOutsideAngular(() => {\n      /**\n       * We do set timeout to let the table rows finish rendering. If a row was\n       * expanded / collapsed, then the height of the vertical border will need to\n       * be re-evaluated based on new distance from child to parent. We let the\n       * view finish refreshing so that bounding rectangle is re-evaluated, and then\n       * we can re-calculate height. Doing this synchronously without setTimeout\n       * would give us incorrect value for height because the bouunding rectangle\n       * has yet to update from the collapse / expand change\n       */\n      setTimeout(() => {\n        const firstRect = parentRow.getBoundingClientRect();\n        const rowRect = row.getBoundingClientRect();\n\n        const yFirstRect = firstRect.top + firstRect.height / 2;\n        const yRowRect = rowRect.top + rowRect.height / 2;\n\n        const height = yRowRect - yFirstRect - 20;\n        border.style.height = `${height}px`;\n        border.style.bottom = `${rowRect.height / 2}px`;\n      });\n    });\n  }\n\n  /**\n   * Defines whether or not to display vertical border from this row. Vertical borders generally\n   * start from the last child and extend to the parent. However, if we are truncating the number\n   * of children displayed, then the vertical border would need to start from the child we\n   * truncate at.\n   * */\n  displayVerticalBorder(parentRow: SdsTreeTableData, index: number, siblingRows: SdsTreeTableRow[]): boolean {\n    if (!siblingRows) return false;\n\n    // Decide whether last child displayed is last child in row's children index or is at numChildrenToDisplay\n    if (parentRow.viewAllChildren || siblingRows.length <= this.childrenLimit) {\n      return index === siblingRows.length - 1;\n    } else {\n      return index === this.numChildrenToDisplay - 1;\n    }\n  }\n\n  getTemplateContext(\n    parent: any,\n    row: any,\n    index: number,\n    level: number,\n    parentSelected?: boolean,\n    parentRow?: HTMLTableRowElement\n  ) {\n    const updatedLevel = level + 1;\n    const posinset = index + 1;\n    return {\n      row: row,\n      level: updatedLevel,\n      index: posinset,\n      size: parent.children ? parent.children.length : 1,\n      rows: parent.children,\n      parentSelected: parentSelected,\n      parent: parent,\n      parentRow: parentRow,\n    };\n  }\n\n  onRowClicked(row: SdsTreeTableData, tableRow: HTMLTableRowElement) {\n    if (row.children || row.totalChildren > 0) {\n      row.expanded = !row.expanded;\n    }\n\n    if (!row.expanded) {\n      row.viewAllChildren = false;\n    }\n\n    this._selectedRow = row;\n    this._selectedRowParent = this.getParentOfRow(this.dataSource, row);\n    setTimeout(() => tableRow.focus());\n    this.rowExpanded.emit(row);\n  }\n\n  onKeyDown($event: KeyboardEvent, tableRow: HTMLTableRowElement) {\n    if ($event.target != tableRow) {\n      return;\n    }\n\n    let siblingRow: HTMLTableRowElement;\n\n    if ($event.key === 'ArrowUp') {\n      siblingRow = ($event.target as HTMLTableRowElement).previousElementSibling as HTMLTableRowElement;\n    } else if ($event.key === 'ArrowDown') {\n      siblingRow = ($event.target as HTMLTableRowElement).nextElementSibling as HTMLTableRowElement;\n    } else if ($event.key === 'Home') {\n      siblingRow = this.elementRef.nativeElement.querySelector('tbody tr');\n    } else if ($event.key === 'End') {\n      siblingRow = this.elementRef.nativeElement.querySelector('tbody tr:last-child');\n    }\n\n    if (!siblingRow) return;\n\n    ($event.target as HTMLTableRowElement).setAttribute('tabindex', undefined);\n    siblingRow.setAttribute('tabindex', '0');\n    siblingRow.focus();\n    $event.preventDefault();\n  }\n\n  getParentOfRow(allRows: any[], row: any) {\n    let retRow = null;\n    for (let i = 0; i < allRows.length; i++) {\n      if (allRows[i] === row) {\n        retRow = allRows[i];\n        break;\n      } else if (allRows[i].children) {\n        const isChildRow = this.getParentOfRow(allRows[i].children, row);\n        if (isChildRow) {\n          retRow = allRows[i];\n        }\n      }\n    }\n\n    return retRow;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"sds-tree-table--scrollable\">\n  <table role=\"grid\" class=\"usa-table sds-tree-table padding-x-1\">\n    <thead role=\"rowgroup\">\n      <tr role=\"row\">\n        <th>Related</th>\n        <th *ngFor=\"let col of displayColumns\">{{ col }}</th>\n      </tr>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container\n        *ngFor=\"let data of dataSource; index as i\"\n        [ngTemplateOutlet]=\"treeTablePanel\"\n        [ngTemplateOutletContext]=\"getTemplateContext(dataSource, data, i, 0, data === _selectedRowParent)\"\n      >\n      </ng-container>\n    </tbody>\n  </table>\n</div>\n\n<!-- TODO: Extract this into separate component -->\n<ng-template\n  #treeTablePanel\n  let-row=\"row\"\n  let-level=\"level\"\n  let-index=\"index\"\n  let-size=\"size\"\n  let-rows=\"rows\"\n  let-parentSelected=\"parentSelected\"\n  let-parent=\"parent\"\n  let-parentRow=\"parentRow\"\n>\n  <tr\n    role=\"row\"\n    #tableRow\n    [attr.id]=\"row.id\"\n    [attr.aria-level]=\"level\"\n    [attr.aria-posinset]=\"index\"\n    [attr.aria-setsize]=\"size\"\n    [attr.aria-expanded]=\"row.children ? (row.expanded ? true : false) : undefined\"\n    [attr.tabindex]=\"level === 1 && index === 1 && !_selectedRow ? 0 : row === _selectedRow ? 0 : undefined\"\n    (keydown.enter)=\"onRowClicked(row, tableRow)\"\n    (keydown)=\"onKeyDown($event, tableRow)\"\n    [ngClass]=\"{\n      'sds-tree-table__row--selected': row === _selectedRow,\n      'sds-tree-table__row--highlight-border': parentSelected\n    }\"\n  >\n    <td>\n      <span *ngIf=\"displayVerticalBorder(parent, index - 1, rows)\" #border class=\"vertical-border\">\n        <!-- Programitcally set height of vertical border because we won't know the height until view finishes rendering -->\n        {{ setHeight(tableRow, parentRow, border) }}\n      </span>\n      <span class=\"horizontal-border\"></span>\n      <button\n        class=\"usa-button sds-button--circle border-0 bg-white\"\n        *ngIf=\"row.children || row.totalChildren > 0\"\n        [attr.tabindex]=\"row === _selectedRow ? 1 : -1\"\n        (click)=\"onRowClicked(row, tableRow)\"\n      >\n        <span class=\"usa-sr-only\">{{ row.expanded ? 'Collapse' : 'Expand' }} current row</span>\n        <usa-icon [icon]=\"row.expanded ? 'dash-circle-fill' : 'plus-circle-fill'\" [size]=\"'2x'\"> </usa-icon>\n      </button>\n    </td>\n    <ng-container\n      [ngTemplateOutlet]=\"treetableRow.templateRef\"\n      [ngTemplateOutletContext]=\"{ $implicit: row, index: index - 1, level: level }\"\n    >\n    </ng-container>\n  </tr>\n\n  <ng-container *ngIf=\"row.expanded\">\n    <ng-container *ngFor=\"let data of row.children; index as i\">\n      <ng-container\n        *ngIf=\"row.children.length <= childrenLimit || row.viewAllChildren || i < numChildrenToDisplay\"\n        [ngTemplateOutlet]=\"treeTablePanel\"\n        [ngTemplateOutletContext]=\"getTemplateContext(row, data, i, level, parentSelected, tableRow)\"\n      >\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <tr\n    role=\"row\"\n    class=\"text-center\"\n    #viewAllRow\n    *ngIf=\"\n      row.expanded &&\n      !row.viewAllChildren &&\n      (row.totalChildren > row.children?.length || row.children?.length > childrenLimit)\n    \"\n    (keydown.enter)=\"viewAllClicked(row, viewAllRow, tableRow)\"\n    (keydown)=\"onKeyDown($event, viewAllRow)\"\n  >\n    <td></td>\n    <td class=\"width-100\">\n      <button class=\"usa-button usa-button--base\" (click)=\"viewAllClicked(row, viewAllRow, tableRow)\">\n        View All (\n        <span *ngIf=\"row.totalChildren && row.totalChildren > row.children?.length; else childrenLength\">\n          {{ row.totalChildren }}\n        </span>\n        )\n        <ng-template #childrenLength>{{ row.children?.length }}</ng-template>\n      </button>\n    </td>\n  </tr>\n</ng-template>\n"
        },
        {
            "name": "SdsTruncatedTextContainerComponent",
            "id": "component-SdsTruncatedTextContainerComponent-1c2a0378b6c97195f412acbbea88810f69a975a7589d6e980f77484cfa6a739ee747f73343adb57c12b0f3a69e05ee3b59d189289047c45df63a178c5eb0998e",
            "file": "libs/packages/components/src/lib/truncate-text/truncate-text-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-truncated-text-container",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"sds-overlay maxw-mobile radius-overlay padding-2\">{{ data.text }}</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_animationState",
                    "defaultValue": "'void'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'@container'"
                        }
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsTruncateTextData",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "SDS_TRUNCATED_TEXT_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_onAnimationDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIntentionally left empty to trigger change detection",
                    "description": "<p>Intentionally left empty to trigger change detection</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'@container.done'"
                        }
                    ]
                },
                {
                    "name": "resetAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nResets the animation to its initial state.",
                    "description": "<p>Resets the animation to its initial state.</p>\n"
                },
                {
                    "name": "startAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStarts the animation.",
                    "description": "<p>Starts the animation.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@container",
                    "defaultValue": "'void'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "@container.done",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIntentionally left empty to trigger change detection",
                    "description": "<p>Intentionally left empty to trigger change detection</p>\n",
                    "line": 31
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, HostBinding, HostListener } from '@angular/core';\nimport { SDS_TRUNCATED_TEXT_DATA } from './truncates-text-base';\nimport { sdsTruncateTextAnimations } from './truncate-text-animations';\n\nexport interface SdsTruncateTextData {\n  text: string;\n}\n\n@Component({\n  selector: 'sds-truncated-text-container',\n  template: ` <div class=\"sds-overlay maxw-mobile radius-overlay padding-2\">{{ data.text }}</div> `,\n  animations: [sdsTruncateTextAnimations.container],\n})\nexport class SdsTruncatedTextContainerComponent {\n  @HostBinding('@container') _animationState = 'void';\n\n  constructor(@Inject(SDS_TRUNCATED_TEXT_DATA) public data: SdsTruncateTextData) {}\n\n  /** Starts the animation. */\n  startAnimation() {\n    this._animationState = 'enter';\n  }\n\n  /** Resets the animation to its initial state. */\n  resetAnimation() {\n    this._animationState = 'void';\n  }\n\n  /** Intentionally left empty to trigger change detection */\n  @HostListener('@container.done')\n  _onAnimationDone() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "SdsTruncateTextData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "SdsTruncateTextData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsVideoPlayerComponent",
            "id": "component-SdsVideoPlayerComponent-5b9a1d7ae46abeef513ee0d120424283c2a111dc9bf489a810d652f395aa36fd20a29ed91877e9c8f2ec8d07a84cad6f6d35aa61023ebfada10016cab720862a",
            "file": "libs/packages/components/src/lib/video-player/video-player.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-video-player",
            "styleUrls": [
                "./css/px-video.css"
            ],
            "styles": [],
            "templateUrl": [
                "./video-player.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "crossorigin",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "VPConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "VPInterface",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InitPxVideoConfig",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadVideoSource",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'video'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_loadVideoSourceOnDemand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIE and Edge ignore preload attribute and load video data eagerly. In order to\nworkaround those such browsers, we add video source only after user clicks\non play or restart button of the video.\n",
                    "description": "<p>IE and Edge ignore preload attribute and load video data eagerly. In order to\nworkaround those such browsers, we add video source only after user clicks\non play or restart button of the video.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  Input,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  Renderer2,\n  OnChanges,\n  AfterContentInit,\n  OnInit,\n  ChangeDetectorRef,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport { GLOBAL_STRINGS } from 'accessible-html5-video-player/js/strings.js';\nimport * as InitPxVideo from 'accessible-html5-video-player/js/px-video.js';\nimport { VPInterface } from './video-player';\nimport { DOCUMENT } from '@angular/common';\n\ninterface InitPxVideoConfig {\n  videoId: string;\n  captionsOnDefault: boolean;\n  seekInterval: number;\n  videoTitle: string;\n  debug: boolean;\n}\n\ndeclare const GLOBAL_STRINGS: any;\n\ndeclare class InitPxVideo {\n  constructor(config: InitPxVideoConfig);\n}\n\n@Component({\n  selector: 'sds-video-player',\n  templateUrl: './video-player.component.html',\n  styleUrls: ['./css/px-video.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SdsVideoPlayerComponent implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n  @Input() VPConfiguration: VPInterface;\n  @ViewChild('video') video: ElementRef;\n  private config: InitPxVideoConfig;\n  @Input() crossorigin = '';\n\n  loadVideoSource = false;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer2: Renderer2,\n    private cdr: ChangeDetectorRef,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnDestroy() {\n    let element = this.document.getElementById('px-video-aria-announce');\n    if (element) {\n      this.renderer2.removeChild(this.elementRef, element);\n    }\n  }\n  ngOnInit() {\n    if (this.VPConfiguration.preload != 'none') {\n      this.loadVideoSource = true;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.crossorigin) {\n      const id = this.video.nativeElement;\n      id.setAttribute('crossorigin', this.crossorigin);\n    }\n    this.config = {\n      videoId: this.VPConfiguration.id,\n      captionsOnDefault: false,\n      seekInterval: this.VPConfiguration.seekInterval,\n      videoTitle: 'Video Player',\n      debug: this.VPConfiguration.debug,\n    };\n\n    const video = new InitPxVideo(this.config); // Required to ensure that browser controls are replaced with custom controls\n\n    this.video.nativeElement.setAttribute('style', 'width:' + this.VPConfiguration.width + ';');\n\n    const progressElement: HTMLProgressElement = this.elementRef.nativeElement.querySelector('progress');\n\n    if (progressElement) {\n      this.renderer2.setAttribute(progressElement, 'aria-label', this.VPConfiguration.description + ' progress bar');\n    }\n\n    if (this.VPConfiguration.preload === 'none') {\n      this._loadVideoSourceOnDemand();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (this.video && changes && changes.crossorigin) {\n      const id = this.video.nativeElement;\n      if (id) {\n        id.setAttribute('crossorigin', this.crossorigin);\n      }\n    }\n  }\n\n  /**\n   * IE and Edge ignore preload attribute and load video data eagerly. In order to\n   * workaround those such browsers, we add video source only after user clicks\n   * on play or restart button of the video.\n   */\n  private _loadVideoSourceOnDemand() {\n    const playButton: HTMLButtonElement = this.elementRef.nativeElement.querySelector('.px-video-play');\n    const restartButton: HTMLButtonElement = this.elementRef.nativeElement.querySelector('.px-video-restart');\n    const video: HTMLVideoElement = this.video.nativeElement;\n\n    const loadVideo = ($event) => {\n      if (this.loadVideoSource) {\n        return;\n      }\n\n      this.loadVideoSource = true;\n\n      // Due to event handler timing issues in safari, the browser does not load the source\n      // when play and source are set at the same time. So we first set the source, wait for\n      // an event loop, pause, then play the video to trigger source loading\n      setTimeout(() => {\n        video.pause();\n        video.play();\n      });\n    };\n\n    if (!playButton || !restartButton) {\n      // Edge case - if the button to toggle video source does not exist in dom, then add in the\n      // video source and let the browser decide when to fetch video data\n      this.loadVideoSource = true;\n    } else {\n      playButton.onclick = loadVideo;\n      restartButton.onclick = loadVideo;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* utilities */\n.pull-left {\n  float: left;\n}\n\n.sr-only {\n  position: absolute !important;\n  clip: rect(1px, 1px, 1px, 1px);\n  padding: 0 !important;\n  border: 0 !important;\n  height: 1px !important;\n  width: 1px !important;\n  overflow: hidden;\n}\n\n.hide {\n  display: none;\n}\n\n.show-inline {\n  display: inline-block;\n}\n\n/* containers */\n.px-video-img-captions-container * {\n  box-sizing: border-box;\n}\n\n.px-video-img-captions-container {\n  position: relative;\n}\n\n/* progress indicator */\n.px-video-progress {\n  width: 100%;\n  height: 10px;\n  cursor: pointer;\n}\n\n.px-video-progress[value] {\n  /* Reset the default appearance */\n  -webkit-appearance: none;\n  border: none;\n}\n\n.px-video-progress[value]::-webkit-progress-bar {\n  background-color: #e6e6e6;\n}\n\n.px-video-progress[value]::-webkit-progress-value {\n  background-color: #009cdf;\n}\n\n/* time */\n.px-video-time {\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  float: right;\n  margin-top: 2px;\n  font-size: 14px;\n}\n\n/* caption area */\n.px-video-captions {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  padding: 0.5em;\n  min-height: 2.5em;\n  background-color: #000;\n  color: #fff;\n  font-size: 1.1em;\n  text-align: center;\n  opacity: 0.75;\n}\n\n/* buttons */\n.px-video-controls button {\n  border: 1px #fff solid;\n  background: transparent;\n  padding: 0;\n  margin: 0 5px;\n  width: 25px;\n  height: 20px;\n  overflow: hidden;\n  background: no-repeat url('./px-video-sprite.svg');\n}\n\n.px-video-controls button {\n  cursor: pointer;\n}\n\n/* restart button */\n.px-video-controls button.px-video-restart {\n  background-position: -6px -333px;\n  margin-left: 0;\n}\n\n.px-video-controls button.px-video-restart:hover,\n.px-video-controls button.px-video-restart:focus {\n  background-position: -6px -297px;\n}\n\n/* rewind button */\n.px-video-controls button.px-video-rewind {\n  background-position: -6px -189px;\n}\n\n.px-video-controls button.px-video-rewind:hover,\n.px-video-controls button.px-video-rewind:focus {\n  background-position: -6px -153px;\n}\n\n/* play button */\n.px-video-controls button.px-video-play {\n  background-position: -6px -45px;\n}\n\n.px-video-controls button.px-video-play:hover,\n.px-video-controls button.px-video-play:focus {\n  background-position: -6px -9px;\n}\n\n/* pause button */\n.px-video-controls button.px-video-pause {\n  background-position: -6px -117px;\n}\n\n.px-video-controls button.px-video-pause:hover,\n.px-video-controls button.px-video-pause:focus {\n  background-position: -6px -81px;\n}\n\n/* forward button */\n.px-video-controls button.px-video-forward {\n  background-position: -6px -261px;\n}\n\n.px-video-controls button.px-video-forward:hover,\n.px-video-controls button.px-video-forward:focus {\n  background-position: -6px -225px;\n}\n\n.px-video-fullscreen-btn-container label {\n  display: inline-block;\n  width: 25px;\n  height: 20px;\n  margin-left: 10px;\n  background: no-repeat url('./px-video-sprite.svg');\n  background-position: -6px -907px;\n}\n\n.px-video-fullscreen-btn-container input[type='checkbox']:focus + label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -943px;\n}\n\n.px-video-fullscreen-btn-container input[type='checkbox']:hover + label {\n  background-position: -6px -943px;\n  cursor: pointer;\n}\n\n.px-video-fullscreen-btn-container input[type='checkbox']:focus + label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -943px;\n}\n\n.px-video-fullscreen-btn-container input[type='checkbox']:checked + label {\n  background-position: -6px -979px;\n}\n\n.px-video-fullscreen-btn-container input[type='checkbox']:checked:hover + label {\n  background-position: -6px -1015px;\n}\n\n/* captions button */\n.px-video-captions-btn-container label {\n  display: inline-block;\n  width: 25px;\n  height: 20px;\n  margin-left: 10px;\n  background: no-repeat url('./px-video-sprite.svg');\n  background-position: -6px -835px;\n}\n\n.px-video-captions-btn-container input[type='checkbox']:focus + label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -799px;\n}\n\n.px-video-captions-btn-container input[type='checkbox']:hover + label {\n  background-position: -6px -799px;\n  cursor: pointer;\n}\n\n.px-video-captions-btn-container input[type='checkbox']:focus + label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -799px;\n}\n\n.px-video-captions-btn-container input[type='checkbox']:checked + label {\n  background-position: -6px -871px;\n}\n\n/* mute button */\n.px-video-mute-btn-container label {\n  display: inline-block;\n  width: 25px;\n  height: 20px;\n  margin-left: 240px;\n  margin-top: 2px;\n  background: no-repeat url('./px-video-sprite.svg');\n  background-position: -6px -476px;\n}\n\n.px-video-mute-btn-container input[type='checkbox']:focus + label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -440px;\n}\n\n.px-video-mute-btn-container input[type='checkbox']:hover + label {\n  background-position: -6px -440px;\n  cursor: pointer;\n}\n\n.px-video-mute-btn-container input[type='checkbox']:focus + label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -440px;\n}\n\n/* checked state of mute button */\n.px-video-mute-btn-container input[type='checkbox']:checked + label {\n  background-position: -6px -692px;\n}\n\n.px-video-mute-btn-container input[type='checkbox']:checked:hover + label,\n.px-video-mute-btn-container input[type='checkbox']:checked:focus + label {\n  background-position: -6px -656px;\n}\n\n/* volume range input */\n.px-video-controls input[type='range'] {\n  -webkit-appearance: none;\n  height: 6px;\n  width: 100px;\n  margin-top: 8px;\n  background-color: #e6e6e6;\n  outline: none;\n}\n\n.px-video-controls input[type='range']:focus::-webkit-slider-thumb {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n}\n\n.px-video-controls input[type='range']::-moz-range-track {\n  -moz-appearance: none;\n  height: 6px;\n  background-color: #e6e6e6;\n  border: none;\n}\n\n.px-video-controls input[type='range']::-webkit-slider-thumb {\n  -webkit-appearance: none !important;\n  height: 10px;\n  width: 6px;\n  background-color: #666;\n}\n\n.px-video-controls input[type='range']::-moz-range-thumb {\n  height: 12px;\n  width: 8px;\n  background-color: #666;\n}\n\n/* fixing display for IE10+ */\n@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n  .px-video-controls input[type='range'] {\n    position: relative;\n    padding: 0;\n    height: 8px;\n    top: -3px;\n  }\n\n  .px-video-time {\n    margin-top: 4px;\n  }\n\n  .px-video-captions {\n    padding: 8px;\n    min-height: 36px;\n  }\n}\n\n.px-video-container {\n  position: relative;\n  min-width: 200px;\n}\n\n#videoPlayer {\n  min-width: 200px;\n}\n\n.px-video-container.fullscreen {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  -webkit-cursor-visibility: auto-hide;\n}\n\n/* Fullscreen styles */\n\n/* style applied through js */\n.px-video-controls.js-fullscreen-controls {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  z-index: 940;\n  background: white;\n}\n\n.px-video-captions.js-fullscreen-captions {\n  min-height: 3.5em;\n  font-size: 2.5em;\n  padding: 1em;\n}\n\n.px-timetip {\n  padding: 5px 10px;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  background: rgba(0, 0, 0, 0.83);\n  border-radius: 3px;\n  color: #fff;\n  width: auto;\n  bottom: 20px;\n}\n\n.px-timetip:after {\n  top: 100%;\n  left: 50%;\n  border: solid transparent;\n  content: ' ';\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n  border-color: rgba(43, 43, 43, 0);\n  border-top-color: #2b2b2b;\n  border-width: 10px;\n  margin-left: -10px;\n}\n",
                    "styleUrl": "./css/px-video.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnChanges",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div #video class=\"px-video-container\" id=\"{{ VPConfiguration.id }}\" [style.width]=\"VPConfiguration.width\">\n  <div class=\"px-video-img-captions-container\">\n    <div class=\"px-video-captions hide\" aria-hidden=\"true\"></div>\n    <video\n      [id]=\"'videoPlayer' + VPConfiguration.id\"\n      [style.width]=\"VPConfiguration.width\"\n      [style.height]=\"VPConfiguration.height\"\n      poster=\"{{ VPConfiguration.poster }}\"\n      controls\n      preload=\"{{ VPConfiguration.preload }}\"\n      [attr.aria-label]=\"VPConfiguration.description\"\n    >\n      <!-- if Safari/Chrome-->\n      <source *ngIf=\"loadVideoSource\" src=\"{{ VPConfiguration.sourceMp4 }}\" type=\"video/mp4\" />\n      <!-- If Firefox/Opera/Chrome/IE -->\n      <source *ngIf=\"loadVideoSource\" src=\"{{ VPConfiguration.sourceWebm }}\" type=\"video/webm\" />\n      <track\n        kind=\"subtitles\"\n        kind=\"captions\"\n        label=\"English captions\"\n        src=\"{{ VPConfiguration.caption }}\"\n        srclang=\"en\"\n        default\n      />\n    </video>\n  </div>\n  <div class=\"px-video-controls\"></div>\n</div>\n"
        },
        {
            "name": "TabPanelComponent",
            "id": "component-TabPanelComponent-9bb995d9e842fe75a95ca0d5345ff22bd11568fe58ccdfdbee9f5af73317a6a18da5bd5afc8408b3768ecd2e3fad20f5835ff0b9f1bff4502953d46da4d21f0e",
            "file": "libs/packages/components/src/lib/tabs/tab-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-tab-panel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAria label for tab header\n",
                    "description": "<p>Aria label for tab header</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether this tab panel is disabled for selection\n",
                    "description": "<p>Whether this tab panel is disabled for selection</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe associated id of this tab panel\n",
                    "description": "<p>The associated id of this tab panel</p>\n",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrue if panel is currently selected.\nOnly one tabpanel should be selected at a time\n",
                    "description": "<p>True if panel is currently selected.\nOnly one tabpanel should be selected at a time</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHeader content for the tab panel. May be a string or a template\n",
                    "description": "<p>Header content for the tab panel. May be a string or a template</p>\n",
                    "line": 22,
                    "type": "string | TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef } from '@angular/core';\n\n@Component({\n  selector: `sds-tab-panel`,\n  templateUrl: `./tab-panel.component.html`,\n})\nexport class TabPanelComponent {\n  /**\n   * The associated id of this tab panel\n   */\n  @Input() id: string;\n\n  /**\n   * True if panel is currently selected.\n   * Only one tabpanel should be selected at a time\n   */\n  @Input() selected: boolean;\n\n  /**\n   * Header content for the tab panel. May be a string or a template\n   */\n  @Input() tabHeader: string | TemplateRef<any>;\n\n  /**\n   * Aria label for tab header\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Whether this tab panel is disabled for selection\n   */\n  @Input() disabled: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div\n  [attr.aria-hidden]=\"!selected\"\n  [attr.id]=\"id\"\n  role=\"tabpanel\"\n  [ngClass]=\"{ 'display-none': !selected, 'display-block': selected }\"\n>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-ca06aa555172d87bd793a0ff3d6d8412049fee1bc05e4925e0804419188f4058d3f3b2c0fd65f4415a7f6f9b0a7b8536464670c2661087afb05e10f4456fbedb",
            "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-tabs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "automaticActivation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnable automatic activation for tabs when cycling through tabs using\nLeft or Right arrow keys. Automatic activated tabs will automatically\nbe selected on focus as user presses left or right arrow to move\nthrough each tab. By default, tabs will need to be manually selected\nwhen using keyboard only by pressing either Enter or Space to select\nthe focused tab\n",
                    "description": "<p>Enable automatic activation for tabs when cycling through tabs using\nLeft or Right arrow keys. Automatic activated tabs will automatically\nbe selected on focus as user presses left or right arrow to move\nthrough each tab. By default, tabs will need to be manually selected\nwhen using keyboard only by pressing either Enter or Space to select\nthe focused tab</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "interceptTabChange",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectedTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCurrently selected tab for display.\n",
                    "description": "<p>Currently selected tab for display.</p>\n",
                    "line": 34,
                    "type": "TabPanelComponent",
                    "decorators": []
                },
                {
                    "name": "tabClass",
                    "defaultValue": "'sds-tabs--default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCSS styling class for tabs\n",
                    "description": "<p>CSS styling class for tabs</p>\n",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "preTabChange",
                    "defaultValue": "new EventEmitter<TabPanelComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter<TabPanelComponent>"
                },
                {
                    "name": "selectedTabChange",
                    "defaultValue": "new EventEmitter<TabPanelComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits an event whenever a tab is selected by the user containing the selected\nTabPanelComponent. Please note that because this output contains `Change` suffix\nto the `tabSelected` input, users can 2-way bind to the `selectedTab` input\n",
                    "description": "<p>Emits an event whenever a tab is selected by the user containing the selected\nTabPanelComponent. Please note that because this output contains <code>Change</code> suffix\nto the <code>tabSelected</code> input, users can 2-way bind to the <code>selectedTab</code> input</p>\n",
                    "line": 59,
                    "type": "EventEmitter<TabPanelComponent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "focusedTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabPanelComponent",
                    "optional": false,
                    "description": "<p>Currently focused tab - can differ from selected tab when tab panels are manually activated</p>\n",
                    "line": 69,
                    "rawdescription": "\n\nCurrently focused tab - can differ from selected tab when tab panels are manually activated\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabPanels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabPanelComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSelectedTabPanel",
                    "args": [
                        {
                            "name": "newTabPanel",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInternal method to change currently selected tab panel and display another panel\nto the user. External components should not use this method, but rather\ntwo-way bind the selectedTab input and modify that value.\n",
                    "description": "<p>Internal method to change currently selected tab panel and display another panel\nto the user. External components should not use this method, but rather\ntwo-way bind the selectedTab input and modify that value.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4593,
                                "end": 4604,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "newTabPanel"
                            },
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4587,
                                "end": 4592,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getNextTabLeft",
                    "args": [
                        {
                            "name": "tabPanels",
                            "type": "TabPanelComponent[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets next tab panel to the left of currently selected panel when Left Arrow is pressed.\nSkips disabled panels until it finds next left panel that is not disabled\n",
                    "description": "<p>Gets next tab panel to the left of currently selected panel when Left Arrow is pressed.\nSkips disabled panels until it finds next left panel that is not disabled</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5163,
                                "end": 5172,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tabPanels"
                            },
                            "type": "TabPanelComponent[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5157,
                                "end": 5162,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>List of TabPanelComponents in the tab group</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 5231,
                                "end": 5241,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "startIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5225,
                                "end": 5230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Current index of focused tab panel</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "getNextTabRight",
                    "args": [
                        {
                            "name": "tabPanels",
                            "type": "TabPanelComponent[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets next tab panel to the right of currently selected panel when Right Arrow is pressed\nSkips disabled panels until it finds next right panel that is not disabled\n",
                    "description": "<p>Gets next tab panel to the right of currently selected panel when Right Arrow is pressed\nSkips disabled panels until it finds next right panel that is not disabled</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5793,
                                "end": 5802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tabPanels"
                            },
                            "type": "TabPanelComponent[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5787,
                                "end": 5792,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>List of TabPanelComponents in the tab group</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 5861,
                                "end": 5871,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "startIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5855,
                                "end": 5860,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Current index of focused tab panel</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "isObj",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf user has not given any tabs to select initially,\nselect the first tab panel.\n",
                    "description": "<p>If user has not given any tabs to select initially,\nselect the first tab panel.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListens for programmatic change to selected tab. When a tab is changed\nprogrammatically, we must disable previously selected tab, set selected\nproperty of the new tab to true, and adjust bookkeeping values.\n",
                    "description": "<p>Listens for programmatic change to selected tab. When a tab is changed\nprogrammatically, we must disable previously selected tab, set selected\nproperty of the new tab to true, and adjust bookkeeping values.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAssigns selected tab value was given. Otherwise, the first\ntab panel in the list will be selected after content has initialized.\n",
                    "description": "<p>Assigns selected tab value was given. Otherwise, the first\ntab panel in the list will be selected after content has initialized.</p>\n"
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLooks for Left and Right arrow presses and moves selected tab accordingly.\n",
                    "description": "<p>Looks for Left and Right arrow presses and moves selected tab accordingly.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3296,
                                "end": 3302,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3290,
                                "end": 3295,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Keyboard Event</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "onTabClicked",
                    "args": [
                        {
                            "name": "clickEvent",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tabPanel",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clickEvent",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tabPanel",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  TemplateRef,\n} from '@angular/core';\nimport { TabPanelComponent } from './tab-panel.component';\n\n/** CONSTANTS\n * Adding in the constant values for keycodes\n * to handle onKeyDown events\n */\nconst LEFT_ARROW = 37;\nconst RIGHT_ARROW = 39;\n\n@Component({\n  selector: `sds-tabs`,\n  templateUrl: `./tabs.component.html`,\n})\nexport class TabsComponent implements OnInit, OnChanges, AfterContentInit {\n  /**\n   * Currently selected tab for display.\n   */\n  @Input()\n  selectedTab: TabPanelComponent;\n\n  /**\n   * Enable automatic activation for tabs when cycling through tabs using\n   * Left or Right arrow keys. Automatic activated tabs will automatically\n   * be selected on focus as user presses left or right arrow to move\n   * through each tab. By default, tabs will need to be manually selected\n   * when using keyboard only by pressing either Enter or Space to select\n   * the focused tab\n   */\n  @Input() automaticActivation: boolean = false;\n\n  /**\n   * CSS styling class for tabs\n   */\n  @Input() tabClass: string = 'sds-tabs--default';\n\n  @Input() interceptTabChange: boolean = false;\n\n  /**\n   * Emits an event whenever a tab is selected by the user containing the selected\n   * TabPanelComponent. Please note that because this output contains `Change` suffix\n   * to the `tabSelected` input, users can 2-way bind to the `selectedTab` input\n   */\n  @Output()\n  selectedTabChange: EventEmitter<TabPanelComponent> = new EventEmitter<TabPanelComponent>();\n\n  @Output()\n  preTabChange: EventEmitter<TabPanelComponent> = new EventEmitter<TabPanelComponent>();\n\n  @ContentChildren(TabPanelComponent) tabPanels: QueryList<TabPanelComponent>;\n\n  /**\n   * Currently focused tab - can differ from selected tab when tab panels are manually activated\n   */\n  private focusedTab: TabPanelComponent;\n\n  /**\n   * Assigns selected tab value was given. Otherwise, the first\n   * tab panel in the list will be selected after content has initialized.\n   */\n  ngOnInit() {\n    if (this.selectedTab) {\n      this.selectedTab.selected = true;\n      this.focusedTab = this.selectedTab;\n    }\n  }\n\n  /**\n   * Listens for programmatic change to selected tab. When a tab is changed\n   * programmatically, we must disable previously selected tab, set selected\n   * property of the new tab to true, and adjust bookkeeping values.\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.selectedTab && changes.selectedTab.currentValue) {\n      this.tabPanels.forEach((tab) => (tab.selected = false));\n      changes.selectedTab.currentValue.selected = true;\n      this.focusedTab = this.selectedTab;\n    }\n  }\n\n  /**\n   * If user has not given any tabs to select initially,\n   * select the first tab panel.\n   */\n  ngAfterContentInit() {\n    if (!this.selectedTab) {\n      this.tabPanels.first.selected = true;\n      this.selectedTab = this.tabPanels.first;\n      this.focusedTab = this.selectedTab;\n    }\n  }\n\n  onTabClicked(clickEvent: MouseEvent, tabPanel: TabPanelComponent) {\n    this.changeSelectedTabPanel(tabPanel);\n  }\n\n  /**\n   * Looks for Left and Right arrow presses and moves selected tab accordingly.\n   * @param $event - Keyboard Event\n   */\n  onKeyDown($event) {\n    console.log($event);\n    const tabPanelArray = this.tabPanels.toArray();\n    let selectedTabIndex = tabPanelArray.findIndex((tabPanel) => tabPanel === this.focusedTab);\n\n    switch ($event.keyCode) {\n      case LEFT_ARROW:\n        selectedTabIndex = this.getNextTabLeft(tabPanelArray, selectedTabIndex);\n        break;\n      case RIGHT_ARROW:\n        selectedTabIndex = this.getNextTabRight(tabPanelArray, selectedTabIndex);\n        break;\n    }\n\n    // Move focus to newly selected panel\n    $event.target.parentElement.children[selectedTabIndex].focus();\n    this.focusedTab = tabPanelArray[selectedTabIndex];\n\n    if (this.automaticActivation) {\n      this.changeSelectedTabPanel(this.focusedTab);\n    }\n  }\n\n  isObj(obj: any) {\n    if (typeof obj === 'object' && (obj as TemplateRef<any>).elementRef) {\n      return true;\n    } else if (typeof obj === 'string') {\n      return false;\n    } else {\n      throw new Error('Tab header must be either a string or a template reference');\n    }\n  }\n\n  /**\n   * Internal method to change currently selected tab panel and display another panel\n   * to the user. External components should not use this method, but rather\n   * two-way bind the selectedTab input and modify that value.\n   * @param newTabPanel\n   */\n  private changeSelectedTabPanel(newTabPanel: TabPanelComponent) {\n    this.preTabChange.emit(newTabPanel);\n    if (this.interceptTabChange) {\n      return;\n    }\n    this.selectedTab.selected = false;\n    newTabPanel.selected = true;\n    this.selectedTab = newTabPanel;\n    this.focusedTab = newTabPanel;\n    this.selectedTabChange.emit(this.selectedTab);\n  }\n\n  /**\n   * Gets next tab panel to the left of currently selected panel when Left Arrow is pressed.\n   * Skips disabled panels until it finds next left panel that is not disabled\n   * @param tabPanels - List of TabPanelComponents in the tab group\n   * @param startIndex - Current index of focused tab panel\n   */\n  private getNextTabLeft(tabPanels: TabPanelComponent[], startIndex: number) {\n    for (let i = 0; i < tabPanels.length; i++) {\n      startIndex = startIndex == 0 ? tabPanels.length - 1 : (startIndex - 1) % tabPanels.length;\n      if (!tabPanels[startIndex].disabled) {\n        return startIndex;\n      }\n    }\n  }\n\n  /**\n   * Gets next tab panel to the right of currently selected panel when Right Arrow is pressed\n   * Skips disabled panels until it finds next right panel that is not disabled\n   * @param tabPanels - List of TabPanelComponents in the tab group\n   * @param startIndex - Current index of focused tab panel\n   */\n  private getNextTabRight(tabPanels: TabPanelComponent[], startIndex: number) {\n    for (let i = 0; i < tabPanels.length; i++) {\n      startIndex = (startIndex + 1) % this.tabPanels.length;\n      if (!tabPanels[startIndex].disabled) {\n        return startIndex;\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnChanges",
                "AfterContentInit"
            ],
            "templateData": "<div role=\"tablist\" [attr.class]=\"tabClass\">\n  <button\n    *ngFor=\"let tabPanel of tabPanels\"\n    role=\"tab\"\n    class=\"sds-tabs__item\"\n    [attr.aria-selected]=\"tabPanel.selected\"\n    [attr.tabindex]=\"tabPanel.selected ? 0 : -1\"\n    [attr.aria-controls]=\"tabPanel.id\"\n    [attr.aria-label]=\"tabPanel.ariaLabel\"\n    [disabled]=\"tabPanel.disabled\"\n    (click)=\"onTabClicked($event, tabPanel)\"\n    (keydown)=\"onKeyDown($event)\"\n  >\n    <ng-container *ngIf=\"isObj(tabPanel.tabHeader); else textHeader\">\n      <ng-template *ngTemplateOutlet=\"tabPanel.tabHeader\"></ng-template>\n    </ng-container>\n    <ng-template #textHeader>\n      {{ tabPanel.tabHeader }}\n    </ng-template>\n  </button>\n</div>\n<div class=\"sds-tabs__content\" tabindex=\"0\">\n  <ng-content></ng-content>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "PaginationModule",
            "id": "module-PaginationModule-0d9f9d9952ab3fffaba147b18ebb3021dffe28ca6d34d0e11898a4bd92607062fd4a5cb708e8a91519028c170f8baf8d3feccbc2e69a5303c78af1b85b2195c1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/pagination/pagination.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  declarations: [PaginationComponent],\n  imports: [CommonModule, FormsModule],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsAccordionModule",
            "id": "module-SdsAccordionModule-69d36cd747671fde64b8cfdfe7a79899b8c9b220dafc28cc45585c9e8f1173d6655f6d288be54f29a29ec1844096ada7483b8e7d8763f1db65b44d39d8b60a1a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/accordion/accordion.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { SdsAccordionDirective } from './accordion.directive';\nimport { SdsAccordionItemComponent } from './accordion-item.component';\nimport { SdsAccordionItemHeaderComponent } from './accordion-item-header.component';\nimport { SdsAccordionItemContentDirective } from './accordion-item-content.directive';\n\n@NgModule({\n  imports: [CommonModule, PortalModule],\n  exports: [\n    SdsAccordionDirective,\n    SdsAccordionItemComponent,\n    SdsAccordionItemHeaderComponent,\n    SdsAccordionItemContentDirective,\n  ],\n  declarations: [\n    SdsAccordionDirective,\n    SdsAccordionItemComponent,\n    SdsAccordionItemHeaderComponent,\n    SdsAccordionItemContentDirective,\n  ],\n  providers: [],\n})\nexport class SdsAccordionModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsAccordionDirective"
                        },
                        {
                            "name": "SdsAccordionItemComponent"
                        },
                        {
                            "name": "SdsAccordionItemContentDirective"
                        },
                        {
                            "name": "SdsAccordionItemHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsAccordionDirective"
                        },
                        {
                            "name": "SdsAccordionItemComponent"
                        },
                        {
                            "name": "SdsAccordionItemContentDirective"
                        },
                        {
                            "name": "SdsAccordionItemHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsActionsMenuModule",
            "id": "module-SdsActionsMenuModule-8e734451d74fcf48e5fd018b828907cad826af112e23fe1c9a5f56c5b128ee33aef9dc47d18c577c00bcf49086b46d9cad713e3664d4a973343ab883f97d7a62",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/actions-menu/actions-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsActionsMenuComponent } from './actions-menu.component';\nimport { CommonModule } from '@angular/common';\nimport { NgxBootstrapIconsModule, threeDotsVertical, x } from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\nimport { SdsMenuModule } from '../menu/menu.module';\n\n@NgModule({\n  imports: [CommonModule, IconModule, SdsMenuModule, NgxBootstrapIconsModule.pick({ threeDotsVertical, x })],\n  exports: [SdsActionsMenuComponent],\n  declarations: [SdsActionsMenuComponent],\n  providers: [],\n})\nexport class SdsActionsMenuModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsActionsMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SdsMenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsActionsMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsAutocompleteModule",
            "id": "module-SdsAutocompleteModule-b3153cef7800850537bfbc969ddfdc3af1e2d16534fcccc43b84e450f67c6262782102e590fe9044070522c757c9351185e9e89a23905ec579e19539b40d5bf5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/autocomplete/autocomplete.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSAutocompleteComponent } from './autocomplete.component';\nimport { RouterModule } from '@angular/router';\nimport { SdsSelectedResultsModule } from '../selected-result/selected-result.module';\nimport { SdsAutocompleteSearchModule } from '../autocomplete-search/autocomplete-search.module';\n@NgModule({\n  imports: [CommonModule, FormsModule, RouterModule, SdsSelectedResultsModule, SdsAutocompleteSearchModule],\n  declarations: [SDSAutocompleteComponent],\n  exports: [SDSAutocompleteComponent],\n})\nexport class SdsAutocompleteModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSAutocompleteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SdsAutocompleteSearchModule"
                        },
                        {
                            "name": "SdsSelectedResultsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSAutocompleteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsAutocompleteSearchModule",
            "id": "module-SdsAutocompleteSearchModule-c29400da69a598bea10f9c1f78fa0346aac95c4a64cdc0457de0ed7349a851307677b4382bbd4b3ed725d37dcaf8dbb242a5497e16ebe2a7631bb555a46076c7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSAutocompleteSearchComponent } from './autocomplete-search.component';\nimport { SDSClickOutsideModule } from '../click-outside/click-outside.module';\nimport { SdsTabOutsideModule } from '../tab-outside/taboutside.module';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { NgxBootstrapIconsModule, x, caretDownFill, caretUpFill } from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    SDSClickOutsideModule,\n    SdsTabOutsideModule,\n    OverlayModule,\n    IconModule,\n    NgxBootstrapIconsModule.pick({ x, caretDownFill, caretUpFill }),\n  ],\n  declarations: [SDSAutocompleteSearchComponent],\n  exports: [SDSAutocompleteSearchComponent],\n})\nexport class SdsAutocompleteSearchModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSAutocompleteSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SDSClickOutsideModule"
                        },
                        {
                            "name": "SdsTabOutsideModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSAutocompleteSearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SDSClickOutsideModule",
            "id": "module-SDSClickOutsideModule-3094bd22cde9ca88cef6647b6e54851b00646b2fd778d098981c0b80ddf4a770f848621860d7c9e486a90cb6b5f71521c06c5f242bdaadc6d331851b8e4f0397",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/click-outside/click-outside.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSClickOutsideDirective } from './click-outside.directive';\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [SDSClickOutsideDirective],\n  exports: [SDSClickOutsideDirective],\n})\nexport class SDSClickOutsideModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSClickOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSClickOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsCollapseModule",
            "id": "module-SdsCollapseModule-93b4c9a40803281b991934b569fedf497ee4a5041cb8929cae51e0b05d64f6d92a29d39991c0fe60bd770fbcdfdf4efd65e2b636e8f72d7358dddf8f343a7263",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/collapse/collapse.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CollapseDirective } from './collapse.directive';\n\n@NgModule({\n  declarations: [CollapseDirective],\n  imports: [CommonModule],\n  exports: [CollapseDirective],\n})\nexport class SdsCollapseModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CollapseDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CollapseDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsDateModule",
            "id": "module-SdsDateModule-c552d8910269e7e6684764b5a503137dc8c81a406bfae8b6317c0752b7a4efe0c697729307ae12b79b6f83e2be12c0cecbfe84fb32cf0d3383152b939bc73f4e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/date/sds-date.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { SdsDatePipe } from './sds-date.pipe';\n\n@NgModule({\n  declarations: [SdsDatePipe],\n  imports: [CommonModule],\n  exports: [SdsDatePipe],\n  providers: [DatePipe],\n})\nexport class SdsDateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsDatePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsDatePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsDialogModule",
            "id": "module-SdsDialogModule-84f9b3057cebf789c41c4bb1bf12cad6088ebc066629e88b06c57d91e0bcf0aed296406b0ab0e56937e66f254f8d90afda0d04b084e43e24acf3b5b23fd4c932",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxBootstrapIconsModule, x, infoCircle, exclamationTriangle, exclamationCircle } from 'ngx-bootstrap-icons';\nimport {\n  SDS_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER,\n  SdsDialogService,\n} from './dialog';\nimport { SdsDialogContainerComponent } from './dialog-container.component';\nimport { IconModule, alertError } from '@gsa-sam/ngx-uswds-icons';\n\nimport {\n  SdsDialogActionsDirective,\n  SdsDialogCloseDirective,\n  SdsDialogContentDirective,\n  SdsDialogTitleDirective,\n  SdsDialogSubtitleDirective,\n} from './dialog-content.directives';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    IconModule,\n    NgxBootstrapIconsModule.pick({ x, alertError, infoCircle, exclamationTriangle, exclamationCircle }),\n  ],\n  exports: [\n    SdsDialogContainerComponent,\n    SdsDialogCloseDirective,\n    SdsDialogTitleDirective,\n    SdsDialogSubtitleDirective,\n    SdsDialogContentDirective,\n    SdsDialogActionsDirective,\n  ],\n  declarations: [\n    SdsDialogContainerComponent,\n    SdsDialogCloseDirective,\n    SdsDialogTitleDirective,\n    SdsDialogSubtitleDirective,\n    SdsDialogActionsDirective,\n    SdsDialogContentDirective,\n  ],\n  providers: [SdsDialogService, SDS_DIALOG_SCROLL_STRATEGY_PROVIDER, SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER],\n})\nexport class SdsDialogModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SdsDialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsDialogActionsDirective"
                        },
                        {
                            "name": "SdsDialogCloseDirective"
                        },
                        {
                            "name": "SdsDialogContainerComponent"
                        },
                        {
                            "name": "SdsDialogContentDirective"
                        },
                        {
                            "name": "SdsDialogSubtitleDirective"
                        },
                        {
                            "name": "SdsDialogTitleDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsDialogActionsDirective"
                        },
                        {
                            "name": "SdsDialogCloseDirective"
                        },
                        {
                            "name": "SdsDialogContainerComponent"
                        },
                        {
                            "name": "SdsDialogContentDirective"
                        },
                        {
                            "name": "SdsDialogSubtitleDirective"
                        },
                        {
                            "name": "SdsDialogTitleDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsEditorModule",
            "id": "module-SdsEditorModule-646c068da59e4a70967552e8452b6d81e9da6f43528bdeb5b3db70fb5e86058bf19d7a4532b1e7f7bd8f1152e8b924051b58c6320a069e165aa729abe079cd03",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/editor/editor.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsEditorComponent } from './editor.component';\n\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, A11yModule, FormsModule],\n  exports: [SdsEditorComponent],\n  declarations: [SdsEditorComponent],\n  providers: [],\n})\nexport class SdsEditorModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsEditorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsEditorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsExpiresModule",
            "id": "module-SdsExpiresModule-47744b65d8408f0abaeab450d4fabe860a9f5b81b4de7b7db3efdc74f641b3859bdb80c77ac8112859ed2a811c146ddb349fcdfbbeca9c0121bcbed556d4bc62",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/expires/expires.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SdsExpiresDirective } from './expires.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SdsExpiresDirective],\n  exports: [SdsExpiresDirective],\n})\nexport class SdsExpiresModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsExpiresDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsExpiresDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsExternalLinkDirectivesModule",
            "id": "module-SdsExternalLinkDirectivesModule-38e52f4102fa4697983b8aafb0368fcbd84655820b415dbcac7e6e723f9a4d3be19b7550a0f8b4d817f35a7b4daf261da93f90d53bdfe7bb1ce3a6a3c7bcfcd8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/external-link/external-link.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExternalLinkDirective } from './external-link.directive';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  declarations: [ExternalLinkDirective],\n  imports: [CommonModule, IconModule],\n  exports: [ExternalLinkDirective],\n})\nexport class SdsExternalLinkDirectivesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExternalLinkDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExternalLinkDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsMenuModule",
            "id": "module-SdsMenuModule-4fb2d9bec49405a9eae50e028e95526ce7149751beb816add3315aac7f7e98251db941ec87983d6ff9ff4803294f4cd1719466eb3bdf31222464fd882db23d57",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { SdsMenuComponent } from './menu.component';\nimport { SdsMenuItemComponent } from './menu-item.component';\nimport { SdsMenuTriggerForDirective } from './menu-trigger.directive';\nimport { SdsMenuHeaderComponent } from './menu-header.component';\nimport { NgxBootstrapIconsModule, x } from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  imports: [CommonModule, OverlayModule, IconModule, NgxBootstrapIconsModule.pick({ x })],\n  exports: [SdsMenuComponent, SdsMenuItemComponent, SdsMenuTriggerForDirective, SdsMenuHeaderComponent],\n  declarations: [SdsMenuComponent, SdsMenuItemComponent, SdsMenuTriggerForDirective, SdsMenuHeaderComponent],\n  providers: [],\n})\nexport class SdsMenuModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsMenuComponent"
                        },
                        {
                            "name": "SdsMenuHeaderComponent"
                        },
                        {
                            "name": "SdsMenuItemComponent"
                        },
                        {
                            "name": "SdsMenuTriggerForDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsMenuComponent"
                        },
                        {
                            "name": "SdsMenuHeaderComponent"
                        },
                        {
                            "name": "SdsMenuItemComponent"
                        },
                        {
                            "name": "SdsMenuTriggerForDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsObserversModule",
            "id": "module-SdsObserversModule-869120947d5221b194c965392329d396464303ea73d77239a37466bb30d7ac6ae808efd350257b977f1a4010d41a0ea26317fdacbf1bcea5974b5f41fc48e1c1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/observers/observer.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsObserveWidthDirective } from './observe-width.directive';\n\n@NgModule({\n  imports: [],\n  exports: [SdsObserveWidthDirective],\n  declarations: [SdsObserveWidthDirective],\n  providers: [],\n})\nexport class SdsObserversModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsObserveWidthDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsObserveWidthDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsPageModule",
            "id": "module-SdsPageModule-c85866a9e7e19b4dcef72c01216abc5b8766c8c03b6f097152dc74f3613872f13e09a92ba9a10c908c9e95d171ad65cad03100e8b1818d97825af57c2047c293",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/page/page.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsPageComponent, SdsPageOptionsComponent } from './page.component';\n\n@NgModule({\n  imports: [],\n  exports: [SdsPageComponent, SdsPageOptionsComponent],\n  declarations: [SdsPageComponent, SdsPageOptionsComponent],\n  providers: [],\n})\nexport class SdsPageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsPageComponent"
                        },
                        {
                            "name": "SdsPageOptionsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsPageComponent"
                        },
                        {
                            "name": "SdsPageOptionsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsPopoverModule",
            "id": "module-SdsPopoverModule-c4e66292b3e8e1fd2329a981c931dae655d283f4032d763a94c377bbb5fffe5c589e2ee900c64d2f778147cc08d026944fd31810cc04dd91de8a6f1ddfd39c2f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/popover/popover.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsPopoverDirective } from './popover.directive';\n\n@NgModule({\n  declarations: [SdsPopoverDirective],\n  imports: [CommonModule],\n  exports: [SdsPopoverDirective],\n})\nexport class SdsPopoverModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsPopoverDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsPopoverDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsPopupModule",
            "id": "module-SdsPopupModule-18678b96287b91cb8367b56e10fa8ca4bd22404fea7badf8b25c4cf3b38e18cfec66266dc27a2c98f5a4b66a2bd6765e6b0268715d620f2cf4a1abcaa4eabe75",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/popup/popup.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsPopupDirective } from './popup.directive';\n\n@NgModule({\n  declarations: [SdsPopupDirective],\n  imports: [CommonModule],\n  exports: [SdsPopupDirective],\n})\nexport class SdsPopupModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsPopupDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsPopupDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsRichTextModule",
            "id": "module-SdsRichTextModule-42996042f028d25d15b7d2351b2d129040346e76f7041f5a751399c3cf4ac1334b640dd0e84a0200d5a3d9893196c3aaaa631874dbafcd897275b99c4eab9ab0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/rich-text/rich-text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { SdsRichTextComponent } from './rich-text.component';\nimport { CKEditorModule } from '@ckeditor/ckeditor5-angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, CKEditorModule, ReactiveFormsModule, FormsModule],\n  exports: [SdsRichTextComponent],\n  declarations: [SdsRichTextComponent],\n  providers: [],\n})\nexport class SdsRichTextModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsRichTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsRichTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSearchModule",
            "id": "module-SdsSearchModule-cefe0df403bfe04fa4f84d31aefe4beceed7f2c30c67416ee06c51789989e57d6a0692e95dae7217413c5d68ca7ec53aeea2e556d6c40cc719b29952203969af",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/search/search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsSearchComponent } from './search.component';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgxBootstrapIconsModule, x, search } from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  imports: [CommonModule, A11yModule, FormsModule, IconModule, NgxBootstrapIconsModule.pick({ x, search })],\n  exports: [SdsSearchComponent],\n  declarations: [SdsSearchComponent],\n  providers: [],\n})\nexport class SdsSearchModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsSearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSearchResultListModule",
            "id": "module-SdsSearchResultListModule-d75f6d7e9c8cad5686a7f0acb678427fa391e03bc99eb7bdb25820755c89c7b2c764915e8a9cd22a868b67d468f8759938a6093ea6d1f9174e4c52d528c881c8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/search-result-list/search-result-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SdsSearchResultListComponent } from './search-result-list.component';\nimport { IconModule, alertError, StackedIconModule } from '@gsa-sam/ngx-uswds-icons';\nimport { NgxBootstrapIconsModule, search, arrowLeftCircleFill, infoCircle, circle } from 'ngx-bootstrap-icons';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IconModule,\n    StackedIconModule,\n    NgxBootstrapIconsModule.pick({\n      search,\n      arrowLeftCircleFill,\n      infoCircle,\n      alertError,\n      circle,\n    }),\n  ],\n  declarations: [SdsSearchResultListComponent],\n  exports: [SdsSearchResultListComponent],\n})\nexport class SdsSearchResultListModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsSearchResultListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsSearchResultListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSelectedResultsModule",
            "id": "module-SdsSelectedResultsModule-71f2a616648e4ee57b9ca8eb68c442c5cd26f197ab1439fa91bceadc861dc26afc6edea4fe11aaf07cc554818190acf1215dd29aa93065fb75472280ed420a15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/selected-result/selected-result.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSSelectedResultComponent } from './selected-result.component';\nimport { RouterModule } from '@angular/router';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, RouterModule, IconModule],\n  declarations: [SDSSelectedResultComponent],\n  exports: [SDSSelectedResultComponent],\n})\nexport class SdsSelectedResultsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSSelectedResultComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSSelectedResultComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSelectionPanelModule",
            "id": "module-SdsSelectionPanelModule-f3b3182d6eb47522a11512766b9f6c00e0e88d7df7612ec2d85ed0eb784317ad9f93c66e450c39bfe69fed2c711a64c05728fcf000654c905388270ce4a1ec2c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/selection-panel/selection-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { SdsSelectionPanelComponent } from './selection-panel-wrapper/selection-panel.component';\nimport { SdsSubPanelComponent } from './sub-panel/sub-panel.component';\nimport { SdsSelectionPanelSelectionModeComponent } from './selection-mode/selection-mode.component';\nimport { SdsSelectionPanelNavigationModeComponent } from './navigation-mode/navigation-mode.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [\n    SdsSelectionPanelComponent,\n    SdsSubPanelComponent,\n    SdsSelectionPanelSelectionModeComponent,\n    SdsSelectionPanelNavigationModeComponent,\n  ],\n  exports: [SdsSelectionPanelComponent, SdsSubPanelComponent],\n})\nexport class SdsSelectionPanelModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsSelectionPanelComponent"
                        },
                        {
                            "name": "SdsSelectionPanelNavigationModeComponent"
                        },
                        {
                            "name": "SdsSelectionPanelSelectionModeComponent"
                        },
                        {
                            "name": "SdsSubPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsSelectionPanelComponent"
                        },
                        {
                            "name": "SdsSubPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSideNavigationModule",
            "id": "module-SdsSideNavigationModule-6d1b11041f90f40ae5930b830cbd3728677c6f6c3b8aae685143be5195bae567a3b21f1b99c59a3f6ab1a4db4bf9bcb54b5972553da94ec8c92c67681dde1b6c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/side-navigation/side-navigation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SdsSideNavigationComponent } from './side-navigation.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, RouterModule],\n  declarations: [SdsSideNavigationComponent],\n  exports: [SdsSideNavigationComponent],\n})\nexport class SdsSideNavigationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsSideNavigationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsSideNavigationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSideToolbarModule",
            "id": "module-SdsSideToolbarModule-1a3d1c63f832903785833280bc1f5bea700ffb538f54527767b4b3e119441d96a858f55d7d779d858fa1621e5d3c1b9e92d1cc70bf386efa033d26ff114d61d7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/side-toolbar/side-toolbar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsSideToolbarComponent } from './side-toolbar.component';\nimport { SdsDialogModule } from '../dialog/dialog.module';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  declarations: [SdsSideToolbarComponent],\n  imports: [CommonModule, SdsDialogModule, IconModule],\n  exports: [SdsSideToolbarComponent],\n})\nexport class SdsSideToolbarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsSideToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SdsDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsSideToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsStepArrowModule",
            "id": "module-SdsStepArrowModule-4e3b092fce677b44f897de9fbfb3ea28805c5d616b68a05c68cb89d3a514d2e30e6e3c4c416b72274b38db772596a81054ccf8be95f3aa6b184b64a79e254dce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/step-arrow/step-arrow.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { SdsStepArrowComponent } from './step-arrow.component';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [SdsStepArrowComponent],\n  declarations: [SdsStepArrowComponent],\n  providers: [],\n})\nexport class SdsStepArrowModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsStepArrowComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsStepArrowComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTabOutsideModule",
            "id": "module-SdsTabOutsideModule-6a375379a67ad5f43874c60af02a463e1a0c86ae23bf201647529fcbf220aa45ffc90a765bc5124bbba28d92fd571a75617ee6745d2e93f5cd1cd0d70d245630",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/tab-outside/taboutside.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSTabOutsideDirective } from './taboutside.directive';\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [SDSTabOutsideDirective],\n  exports: [SDSTabOutsideDirective],\n})\nexport class SdsTabOutsideModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSTabOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSTabOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTabsModule",
            "id": "module-SdsTabsModule-63226c3578a3659c00f5253f945ab07f7e0fbe1acd9bf48b847b8809b9759e6ec0d1ca44b6b3e576dd1e957738673ca70377df5d47c01e8771efd779f51e1a20",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabPanelComponent } from './tab-panel.component';\nimport { TabsComponent } from './tabs.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TabsComponent, TabPanelComponent],\n  exports: [TabsComponent, TabPanelComponent],\n})\nexport class SdsTabsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabPanelComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabPanelComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTextModule",
            "id": "module-SdsTextModule-818907fff92e2116a82ffddb2a19e281e047fe266ae398723f667e3a3ccb4fa16ce8a8f6abfd16212b229f65a3c991278e0eebd6dd23142a09e39e99590438a1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/text/text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsTextComponent } from './text.component';\nimport { SdsTextChildComponent } from './child.component';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, A11yModule, FormsModule],\n  exports: [SdsTextComponent, SdsTextChildComponent],\n  declarations: [SdsTextComponent, SdsTextChildComponent],\n  providers: [],\n})\nexport class SdsTextModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsTextChildComponent"
                        },
                        {
                            "name": "SdsTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsTextChildComponent"
                        },
                        {
                            "name": "SdsTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsToastModule",
            "id": "module-SdsToastModule-44a53a899f9c2003ba3ba4c11d421878b960eff90c41ccf3814f09dc5b3d34ccdf16622c797af24b1d637d7b1b5c40a9abfec85a0adc3ffd68785e1e14995458",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/toast/toast.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { SdsToastComponent } from './toast-single.component';\nimport { CommonModule } from '@angular/common';\nimport {\n  NgxBootstrapIconsModule,\n  check2Circle,\n  infoCircle,\n  exclamationTriangle,\n  slashCircle,\n  x,\n} from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\nexport let SdsToastSettings = {\n  toastComponent: SdsToastComponent,\n  timeOut: 6000,\n  toastClass: 'sds-toast',\n  positionClass: 'toast-bottom-left',\n};\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IconModule,\n    NgxBootstrapIconsModule.pick({ check2Circle, infoCircle, exclamationTriangle, slashCircle, x }),\n  ],\n  exports: [SdsToastComponent],\n  declarations: [SdsToastComponent],\n  providers: [],\n})\nexport class SdsToastModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsToastComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsToastComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTooltipModule",
            "id": "module-SdsTooltipModule-3178054cf74dd750f90c59475c13e879dfab90ad5ea82fa713144e3545a7585b99ac174c1d083019e4c174c11230e8e7af19345eeda1be11346c25875a8a3afa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsTooltipDirective } from './tooltip.directive';\n\n@NgModule({\n  declarations: [SdsTooltipDirective],\n  imports: [CommonModule],\n  exports: [SdsTooltipDirective],\n})\nexport class SdsTooltipModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsTooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsTooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTopBannerModule",
            "id": "module-SdsTopBannerModule-c923ffeee60a6cf90bbee63661a372b3f46d8ba659492b5e400abace327a2f5851c3477da3478401be824c812d1e0c1088a3d276f8bb79c312bed9964f964dbd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/top-banner/top-banner.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsTopBannerComponent } from './top-banner.component';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [SdsTopBannerComponent],\n  declarations: [SdsTopBannerComponent],\n  providers: [],\n})\nexport class SdsTopBannerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsTopBannerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsTopBannerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTreeTableModule",
            "id": "module-SdsTreeTableModule-5065630212a7c62ef42a5e80014a83893be9fd78c4d6f3227fb1a862e71a441c3bd6d6d347c006251f874cf3fbf8c4292a1f0bb926508967bcfdf8e2f1dbaf17",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/tree-table/tree-table.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SdsTreeTableComponent, SdsTreeTableRow } from './tree-table.component';\nimport { UsaTableModule } from '@gsa-sam/ngx-uswds';\nimport { NgxBootstrapIconsModule, plusCircleFill, dashCircleFill } from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  imports: [CommonModule, UsaTableModule, IconModule, NgxBootstrapIconsModule.pick({ plusCircleFill, dashCircleFill })],\n  declarations: [SdsTreeTableComponent, SdsTreeTableRow],\n  exports: [SdsTreeTableComponent, SdsTreeTableRow],\n})\nexport class SdsTreeTableModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsTreeTableComponent"
                        },
                        {
                            "name": "SdsTreeTableRow"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsTreeTableComponent"
                        },
                        {
                            "name": "SdsTreeTableRow"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTruncateModule",
            "id": "module-SdsTruncateModule-126e5eae296b5062a7237cbb4cdd0dc87e3f8d9b1aeba04f75757b53d22f04b8430104acec7acd7e9b5647bdcb04b0dee7674f7807df119fe486ce9a25538840",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/truncate-text/truncate.text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsTruncateTextByLineDirective } from './truncate-text.directive';\nimport { SdsTruncatedTextContainerComponent } from './truncate-text-container.component';\n\n@NgModule({\n  imports: [],\n  exports: [SdsTruncateTextByLineDirective],\n  declarations: [SdsTruncateTextByLineDirective, SdsTruncatedTextContainerComponent],\n  providers: [],\n})\nexport class SdsTruncateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsTruncateTextByLineDirective"
                        },
                        {
                            "name": "SdsTruncatedTextContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsTruncateTextByLineDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsVideoPlayerModule",
            "id": "module-SdsVideoPlayerModule-4a13fa0eea3545465a54899799dd1c2b79b01af9ccd61fd9bf76636b47c25fb211a580cce0c9834203b920429fa8817530f81637243305a99e9631880a9e5beb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/video-player/video-player.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsVideoPlayerComponent } from './video-player.component';\n\n@NgModule({\n  declarations: [SdsVideoPlayerComponent],\n  exports: [SdsVideoPlayerComponent],\n  imports: [CommonModule],\n  providers: [],\n})\nexport class SdsVideoPlayerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsVideoPlayerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsVideoPlayerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACCORDION_ITEM_ANIMATION_TIMING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/accordion/accordion-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                "rawdescription": "Time and timing curve for accordion item animations.",
                "description": "<p>Time and timing curve for accordion item animations.</p>\n"
            },
            {
                "name": "animationBody",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  transition('* => enter', [\n    style({ opacity: 0, transform: 'scale(0.7)' }),\n    animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n  ]),\n  transition('* => void, * => exit', [\n    style({ transform: 'none' }),\n    animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n  ]),\n  transition('* => slideEnter', [\n    useAnimation(\n      animation([\n        style({ right: '-{{ width }}' }),\n        animate('{{ time }} cubic-bezier(0, 0, 0.2, 1)', style({ right: '0rem' })),\n      ])\n    ),\n  ]),\n  transition('* => slideExit', [\n    useAnimation(\n      animation([\n        style({ right: '0rem' }),\n        animate('{{ time }} cubic-bezier(0, 0, 0.2, 1)', style({ right: '-{{ width }}' })),\n      ])\n    ),\n  ]),\n]"
            },
            {
                "name": "Autocomplete_Autocomplete_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteSearchComponent),\n  multi: true,\n}"
            },
            {
                "name": "Autocomplete_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/autocomplete/autocomplete.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteComponent),\n  multi: true,\n}"
            },
            {
                "name": "ChromeFirefoxMocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  enter: {\n    charCode: 13,\n    code: 'Enter',\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38,\n  },\n  down: {\n    charCode: 0,\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40,\n  },\n  left: {\n    charCode: 0,\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37,\n  },\n  right: {\n    charCode: 0,\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39,\n  },\n  tab: {\n    charCode: 0,\n    code: 'Tab',\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9,\n  },\n  esc: {\n    charCode: 0,\n    code: 'Escape',\n    key: 'Escape',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27,\n  },\n  space: {\n    charCode: 0,\n    code: 'Space',\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32,\n  },\n  shift: {\n    charCode: 0,\n    code: 'ShiftLeft',\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16,\n  },\n  backspace: {\n    charCode: 0,\n    code: 'Backspace',\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8,\n  },\n  delete: {\n    charCode: 0,\n    code: 'Delete',\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46,\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48,\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49,\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50,\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51,\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52,\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53,\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54,\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55,\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56,\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57,\n  },\n}"
            },
            {
                "name": "dialogElementUid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "Counter used to generate unique IDs for dialog elements.",
                "description": "<p>Counter used to generate unique IDs for dialog elements.</p>\n"
            },
            {
                "name": "EdgeMocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: undefined,\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: undefined,\n    key: 'Up',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38,\n  },\n  down: {\n    charCode: 0,\n    code: undefined,\n    key: 'Down',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40,\n  },\n  left: {\n    charCode: 0,\n    code: undefined,\n    key: 'Left',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37,\n  },\n  right: {\n    charCode: 0,\n    code: undefined,\n    key: 'Right',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39,\n  },\n  tab: {\n    charCode: 0,\n    code: undefined,\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9,\n  },\n  esc: {\n    charCode: 0,\n    code: undefined,\n    key: 'Esc',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27,\n  },\n  space: {\n    charCode: 0,\n    code: undefined,\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32,\n  },\n  shift: {\n    charCode: 0,\n    code: undefined,\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16,\n  },\n  backspace: {\n    charCode: 0,\n    code: undefined,\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8,\n  },\n  delete: {\n    charCode: 0,\n    code: undefined,\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46,\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48,\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49,\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50,\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51,\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52,\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53,\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54,\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55,\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56,\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57,\n  },\n}"
            },
            {
                "name": "GLOBAL_STRINGS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/video-player/video-player.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "GropupSampleAutocompleteData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-sample.data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    code: 'A',\n    elements: [\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001001',\n        value: 'Formula Grants',\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001002',\n        value: 'Formula Grants (Apportionments)',\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001003',\n        value: 'Formula Grants (Cooperative Agreements)',\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001004',\n        value: 'Formula Grants (Health Incentive Grants)',\n      },\n    ],\n    description:\n      'Formula Grants - Allocations of money to States or their subdivisions in accordance with a distribution formula prescribed by law or administrative regulation, for activities of a continuing nature not confined to a specific project.',\n    element_id: '0001',\n    value: 'FORMULA GRANTS',\n  },\n  {\n    code: 'B',\n    elements: [\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003001',\n        value: 'Cooperative Agreements',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003002',\n        value: 'Cooperative Agreements (Discretionary Grants)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003003',\n        value: 'Project Grants',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003004',\n        value: 'Project Grants (Capacity Building and Complaint Processing, Training)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003005',\n        value: 'Project Grants (Contracts)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003006',\n        value: 'Project Grants (Cooperative Agreements or Contracts)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003007',\n        value: 'Project Grants (Cooperative Agreements)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003008',\n        value: 'Project Grants (Discretionary)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003009',\n        value: 'Project Grants (Fellowships)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003010',\n        value: 'Project Grants (for administration projects authorized under Section',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003011',\n        value: 'Project Grants (for collaborative design of curriculum, production of',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003012',\n        value: 'Project Grants (for specified projects)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003013',\n        value: 'Project Grants (including individual awards)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003014',\n        value: 'Project Grants (including travel grants)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003015',\n        value: 'Project Grants (Rehabilitation of existing indoor and outdoor recreat',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003016',\n        value: 'Project Grants (Special)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003017',\n        value: 'Project Grants (to capitalize loan funds)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003018',\n        value: 'Project Grants (with Formula Distribution)',\n      },\n    ],\n    description:\n      'Project Grants - The funding, for fixed or known periods, of specific projects or the delivery of specific services or products without liability for damages for failure to perform. Project grants include fellowships, scholarships, research grants, training grants, traineeships, experimental and demonstration grants, evaluation grants, planning grants, technical assistance grants, survey grants, construction grants, and unsolicited contractual agreements.',\n    element_id: '0003',\n    value: 'PROJECT GRANTS',\n  },\n  {\n    code: 'C',\n    elements: [\n      {\n        code: 'C',\n        elements: null,\n        description: null,\n        element_id: '0005001',\n        value: 'Direct Payments for Specified Use',\n      },\n      {\n        code: 'C',\n        elements: null,\n        description: null,\n        element_id: '0005002',\n        value: 'Direct Payments for Specified Use (Cooperative Agreements)',\n      },\n    ],\n    description:\n      'Direct Payments for a Specified Use - Financial assistance provided directly to individuals, private firms, and other private institutions to encourage or subsidize a particular activity by conditioning the receipt of the on a particular performance by the recipient. This does not include solicited contracts for the procurement of goods and services for the Federal government.',\n    element_id: '0005',\n    value: 'DIRECT PAYMENTS FOR A SPECIFIED USE',\n  },\n  {\n    code: 'D',\n    elements: [\n      {\n        code: 'D',\n        elements: null,\n        description: null,\n        element_id: '0007001',\n        value: 'Direct Payments with Unrestricted Use',\n      },\n    ],\n    description:\n      'Direct Payments with Unrestricted Use - Financial assistance provided directly to beneficiaries who satisfy eligibility requirements with no restrictions imposed on the recipient as to how the money is spent. Included are payments under retirement, pension, and compensation programs.',\n    element_id: '0007',\n    value: 'DIRECT PAYMENTS WITH UNRESTRICTED USE',\n  },\n  {\n    code: 'E',\n    elements: [\n      {\n        code: 'E',\n        elements: null,\n        description: null,\n        element_id: '0009001',\n        value: 'Direct Loans',\n      },\n    ],\n    description:\n      'Direct Loans - Financial assistance provided through the lending of Federal monies for a specific period of time, with a reasonable expectation of repayment. Such loans may or may not require the payment of interest.',\n    element_id: '0009',\n    value: 'DIRECT LOANS',\n  },\n  {\n    code: 'F',\n    elements: [\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011001',\n        value: 'Guaranteed/Insured Loans',\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011002',\n        value: 'Guaranteed/Insured Loans (including Guaranty Participation Loans)',\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011003',\n        value: 'Guaranteed/Insured Loans (including Immediate Participation Loans)',\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011004',\n        value: 'Loan Guarantees/Grants',\n      },\n    ],\n    description:\n      'Guaranteed/Insured Loans - Programs in which the Federal Government makes an arrangement to indemnify a lender against all or part of all of any defaults by those responsible for the repayment of loans.',\n    element_id: '0011',\n    value: 'GUARANTEED/INSURED LOANS',\n  },\n  {\n    code: 'G',\n    elements: [\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013001',\n        value: 'Insurance',\n      },\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013002',\n        value: 'Insurance (Guaranteed Surety Bonds)',\n      },\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013003',\n        value: 'Insurance (Reimbursement)',\n      },\n    ],\n    description:\n      'Insurance - Financial assistance provided to assure reimbursement for losses sustained under specified conditions. Coverage may be provided directly by the Federal Government or through private carriers and may or may not involve the payment of premiums.',\n    element_id: '0013',\n    value: 'INSURANCE',\n  },\n  {\n    code: 'H',\n    elements: [\n      {\n        code: 'H',\n        elements: null,\n        description: null,\n        element_id: '0015001',\n        value: 'Sale, Exchange, or Donation of Property and Goods',\n      },\n    ],\n    description:\n      'Sale, Exchange, or Donation of Property or Goods - Programs that provide for the sale, exchange, or donation of Federal real property, personal property, commodities, and other goods including land, buildings, equipment, food, and drugs. This does not include the loan of, use of, or access to Federal facilities or property.',\n    element_id: '0015',\n    value: 'SALE, EXCHANGE, OR DONATION OF PROPERTY OR GOODS',\n  },\n  {\n    code: 'I',\n    elements: [\n      {\n        code: 'I',\n        elements: null,\n        description: null,\n        element_id: '0017001',\n        value: 'Use of Property, Facilities, and Equipment',\n      },\n    ],\n    description:\n      'Use of Property, Facilities, or Equipment - Programs that provide for the loan of, use of, or access to Federal facilities or property wherein the federally owned facilities or property do not remain in the possession of the recipient of the assistance.',\n    element_id: '0017',\n    value: 'USE OF PROPERTY, FACILITIES, OR EQUIPMENT',\n  },\n  {\n    code: 'J',\n    elements: [\n      {\n        code: 'J',\n        elements: null,\n        description: null,\n        element_id: '0019001',\n        value: 'Provision of Specialized Services',\n      },\n    ],\n    description:\n      'Provision of Specialized Services - Programs that provide Federal personnel to directly perform certain tasks for the benefit of communities or individuals. These services may be performed in conjunction with non-Federal personnel, but they involve more than consultation, advice, or counseling.',\n    element_id: '0019',\n    value: 'PROVISION OF SPECIALIZED SERVICES',\n  },\n  {\n    code: 'K',\n    elements: [\n      {\n        code: 'K',\n        elements: null,\n        description: null,\n        element_id: '0021001',\n        value: 'Advisory Services and Counseling',\n      },\n      {\n        code: 'K',\n        elements: null,\n        description: null,\n        element_id: '0021002',\n        value: 'Advisory Services on Compliance',\n      },\n    ],\n    description:\n      'Advisory Services and Counseling - Programs that provide Federal specialists to consult, advise, or counsel communities or individuals including conferences, workshops, or personal contacts. This may involve the use of published information, but only in a secondary capacity.',\n    element_id: '0021',\n    value: 'ADVISORY SERVICES AND COUNSELING',\n  },\n  {\n    code: 'L',\n    elements: [\n      {\n        code: 'L',\n        elements: null,\n        description: null,\n        element_id: '0023001',\n        value: 'Dissemination of Technical Information',\n      },\n      {\n        code: 'L',\n        elements: null,\n        description: null,\n        element_id: '0023002',\n        value: 'Information',\n      },\n    ],\n    description:\n      'Dissemination of Technical Information - Programs that provide for the publication and distribution of information or data of a specialized technical nature, frequently through clearinghouses or libraries. This does not include conventional public information services designed for general public consumption.',\n    element_id: '0023',\n    value: 'DISSEMINATION OF TECHNICAL INFORMATION',\n  },\n  {\n    code: 'M',\n    elements: [\n      {\n        code: 'M',\n        elements: null,\n        description: null,\n        element_id: '0025001',\n        value: 'Training',\n      },\n    ],\n    description:\n      'Training - Programs that provide instructional activities conducted directly by a Federal agency for individuals not employed by the Federal Government.',\n    element_id: '0025',\n    value: 'TRAINING',\n  },\n  {\n    code: 'N',\n    elements: [\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027020',\n        value: 'Resolution of Disputes',\n      },\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027001',\n        value: 'Investigation of Complaints',\n      },\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027002',\n        value: 'Investigation of Complaints (Compliance Reviews)',\n      },\n    ],\n    description:\n      'Investigation of Complaints - Federal administrative agency activities that are initiated in response to requests, either formal or informal, to examine or investigate claims of violations of Federal statutes, policy, or procedure. Such claims must come from outside the Federal Government.',\n    element_id: '0027',\n    value: 'INVESTIGATION OF COMPLAINTS',\n  },\n  {\n    code: 'O',\n    elements: [\n      {\n        code: 'O',\n        elements: null,\n        description: null,\n        element_id: '0029001',\n        value: 'Federal Employment',\n      },\n    ],\n    description:\n      'Federal Employment - Programs that reflect the government-wide resposibilities of the Office of Personnel Management in the recruitment and hiring of Federal civilian agency personnel.',\n    element_id: '0029',\n    value: 'FEDERAL EMPLOYMENT',\n  },\n  {\n    code: 'Z',\n    elements: [\n      {\n        code: 'Z',\n        elements: null,\n        description: null,\n        element_id: '0090001',\n        value: 'Salaries and Expenses',\n      },\n    ],\n    description: null,\n    element_id: '0090',\n    value: 'SALARIES AND EXPENSES',\n  },\n]"
            },
            {
                "name": "IEMocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: undefined,\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: undefined,\n    key: 'Up',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38,\n  },\n  down: {\n    charCode: 0,\n    code: undefined,\n    key: 'Down',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40,\n  },\n  left: {\n    charCode: 0,\n    code: undefined,\n    key: 'Left',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37,\n  },\n  right: {\n    charCode: 0,\n    code: undefined,\n    key: 'Right',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39,\n  },\n  tab: {\n    charCode: 0,\n    code: undefined,\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9,\n  },\n  esc: {\n    charCode: 0,\n    code: undefined,\n    key: 'Esc',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27,\n  },\n  space: {\n    charCode: 0,\n    code: undefined,\n    key: 'Spacebar',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32,\n  },\n  shift: {\n    charCode: 0,\n    code: undefined,\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16,\n  },\n  backspace: {\n    charCode: 0,\n    code: undefined,\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8,\n  },\n  delete: {\n    charCode: 0,\n    code: undefined,\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46,\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48,\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49,\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50,\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51,\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52,\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53,\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54,\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55,\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56,\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57,\n  },\n}"
            },
            {
                "name": "LEFT_ARROW",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "37",
                "rawdescription": "CONSTANTS\nAdding in the constant values for keycodes\nto handle onKeyDown events",
                "description": "<p>CONSTANTS\nAdding in the constant values for keycodes\nto handle onKeyDown events</p>\n"
            },
            {
                "name": "mocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ie: IEMocks,\n  edge: EdgeMocks,\n  default: ChromeFirefoxMocks,\n  safari: SafariMocks,\n}"
            },
            {
                "name": "RIGHT_ARROW",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "39"
            },
            {
                "name": "SafariMocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: 'Enter',\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: 'Enter',\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    keyCode: 38,\n    keyIdentifier: 'Up',\n    which: 38,\n  },\n  down: {\n    charCode: 0,\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    keyCode: 40,\n    keyIdentifier: 'Down',\n    which: 40,\n  },\n  left: {\n    charCode: 0,\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    keyCode: 37,\n    keyIdentifier: 'Left',\n    which: 37,\n  },\n  right: {\n    charCode: 0,\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    keyCode: 39,\n    keyIdentifier: 'Right',\n    which: 39,\n  },\n  tab: {\n    charCode: 0,\n    code: 'Tab',\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: 'U+0009',\n    which: 9,\n  },\n  esc: {\n    charCode: 0,\n    code: 'Escape',\n    key: 'Escape',\n    keyCode: 27,\n    keyIdentifier: 'U+001B',\n    which: 27,\n  },\n  space: {\n    charCode: 0,\n    code: 'Space',\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: 'U+0020',\n    which: 32,\n  },\n  shift: {\n    charCode: 0,\n    code: 'ShiftLeft',\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: 'Shift',\n    which: 16,\n  },\n  backspace: {\n    charCode: 0,\n    code: 'Backspace',\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: 'U+0008',\n    which: 8,\n  },\n  delete: {\n    charCode: 0,\n    code: 'Delete',\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: 'U+007F',\n    which: 46,\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48,\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49,\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50,\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51,\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52,\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53,\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54,\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55,\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56,\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57,\n  },\n}"
            },
            {
                "name": "SDS_ACCORDION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<SdsAccordionBase>('SDS_ACCORDION')",
                "rawdescription": "Token used to provide a `SdsAccordion` to `SdsAccordionItem`.\nUsed primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.",
                "description": "<p>Token used to provide a <code>SdsAccordion</code> to <code>SdsAccordionItem</code>.\nUsed primarily to avoid circular imports between <code>SdsAccordion</code> and <code>SdsAccordionItem</code>.</p>\n"
            },
            {
                "name": "SDS_DIALOG_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<any>('SdsDialogData')",
                "rawdescription": "Injection token that can be used to access the data that was passed in to a dialog.",
                "description": "<p>Injection token that can be used to access the data that was passed in to a dialog.</p>\n"
            },
            {
                "name": "SDS_DIALOG_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<SdsDialogConfig>('sds-dialog-default-options')",
                "rawdescription": "Injection token that can be used to specify default dialog options.",
                "description": "<p>Injection token that can be used to specify default dialog options.</p>\n"
            },
            {
                "name": "SDS_DIALOG_SCROLL_STRATEGY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<() => ScrollStrategy>('sds-dialog-scroll-strategy')",
                "rawdescription": "Injection token that determines the scroll handling while the dialog is open.",
                "description": "<p>Injection token that determines the scroll handling while the dialog is open.</p>\n"
            },
            {
                "name": "SDS_DIALOG_SCROLL_STRATEGY_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  provide: SDS_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
            },
            {
                "name": "SDS_MENU_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<SdsMenuInterface>('SDS_MENU_TOKEN')",
                "rawdescription": "Injection token used to provide the parent menu to menu items.",
                "description": "<p>Injection token used to provide the parent menu to menu items.</p>\n"
            },
            {
                "name": "SDS_SelectedResult_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/selected-result/selected-result.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSSelectedResultComponent),\n  multi: true,\n}"
            },
            {
                "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<() => ScrollStrategy>('sds-slide-out-scroll-strategy')"
            },
            {
                "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  provide: SDS_SLIDE_OUT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
            },
            {
                "name": "SDS_TRUNCATED_TEXT_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/truncate-text/truncates-text-base.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<any>('SdsTruncatedTextData')",
                "rawdescription": "Used primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.",
                "description": "<p>Used primarily to avoid circular imports between <code>SdsAccordion</code> and <code>SdsAccordionItem</code>.</p>\n"
            },
            {
                "name": "sdsDialogAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n}",
                "rawdescription": "Animations used by SdsDialog.",
                "description": "<p>Animations used by SdsDialog.</p>\n"
            },
            {
                "name": "sdsExpansionAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/accordion/accordion-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  /** Animation that expands and collapses the accordion item content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n    state('expanded', style({ height: '*', visibility: 'visible' })),\n    transition('expanded <=> collapsed, void => collapsed', animate(ACCORDION_ITEM_ANIMATION_TIMING)),\n  ]),\n}"
            },
            {
                "name": "sdsMenuAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/menu/menu-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  transformMenu: trigger('transformMenu', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(0.8)',\n      })\n    ),\n    transition(\n      'void => enter',\n      group([\n        query(\n          '.sds-menu',\n          animate(\n            '100ms linear',\n            style({\n              opacity: 1,\n            })\n          )\n        ),\n        animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n      ])\n    ),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n  ]),\n}"
            },
            {
                "name": "SdsToastSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/toast/toast.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  toastComponent: SdsToastComponent,\n  timeOut: 6000,\n  toastClass: 'sds-toast',\n  positionClass: 'toast-bottom-left',\n}"
            },
            {
                "name": "sdsTruncateTextAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/truncate-text/truncate-text-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  container: trigger('container', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(0.8)',\n      })\n    ),\n    transition(\n      'void => enter',\n      group([\n        query(\n          '.sds-overlay',\n          animate(\n            '100ms linear',\n            style({\n              opacity: 1,\n            })\n          )\n        ),\n        animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n      ])\n    ),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n  ]),\n}"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "Counter for generating unique element ids.",
                "description": "<p>Counter for generating unique element ids.</p>\n"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog-ref.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            }
        ],
        "functions": [
            {
                "name": "_applyConfigDefaults",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Applies default options to the dialog config.</p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "defaultOptions",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "SdsDialogConfig",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 14624,
                            "end": 14630,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 14618,
                            "end": 14623,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Config to be modified.</p>\n"
                    },
                    {
                        "name": {
                            "pos": 14664,
                            "end": 14678,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "defaultOptions"
                        },
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 14658,
                            "end": 14663,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Default options provided.</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 14709,
                            "end": 14716,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The new configuration object.</p>\n"
                    }
                ]
            },
            {
                "name": "createFakeEvent",
                "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a fake event object with any desired event type.</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "canBubble",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "cancelable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "canBubble",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cancelable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createKeyboardEvent",
                "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Dispatches a keydown event from an element.</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "keyCode",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "target",
                        "type": "Element",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "keyCode",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "type": "Element",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createMouseEvent",
                "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "button",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "button",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createTouchEvent",
                "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a browser TouchEvent with the specified pointer coordinates.</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageX",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "pageY",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageX",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageY",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "debounce",
                "file": "libs/packages/components/src/lib/popover/debounce.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Delays calling of a function for <code>delay</code> number of milliseconds.</p>\n",
                "args": [
                    {
                        "name": "delay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "300"
                    }
                ],
                "returnType": "MethodDecorator",
                "jsdoctags": [
                    {
                        "name": "delay",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "300",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility to dispatch any event on a Node.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "event",
                        "type": "Event",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Event",
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "event",
                        "type": "Event",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchFakeEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Shorthand to dispatch a fake event on a specified node.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "canBubble",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Event",
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "canBubble",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchKeyboardEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Shorthand to dispatch a keyboard event with a specified key code.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "type": "Node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "keyCode",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "target",
                        "type": "Element",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "KeyboardEvent",
                "jsdoctags": [
                    {
                        "name": "node",
                        "type": "Node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "keyCode",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "type": "Element",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchMouseEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Shorthand to dispatch a mouse event on the specified coordinates.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "type": "Node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "event",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "createMouseEvent(type, x, y)"
                    }
                ],
                "returnType": "MouseEvent",
                "jsdoctags": [
                    {
                        "name": "node",
                        "type": "Node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "event",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "createMouseEvent(type, x, y)",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchTouchEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Shorthand to dispatch a touch event on the specified coordinates.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "type": "Node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "type": "Node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getClosestDialog",
                "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Finds the closest SdsDialogRef to an element by looking at the DOM.</p>\n",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "openDialogs",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3907,
                            "end": 3914,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "element"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3901,
                            "end": 3906,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Element relative to which to look for a dialog.</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3973,
                            "end": 3984,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "openDialogs"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3967,
                            "end": 3972,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>References to the currently-open dialogs.</p>\n"
                    }
                ]
            },
            {
                "name": "patchElementFocus",
                "file": "libs/packages/components/src/lib/testing/element-focus.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Patches an elements focus and blur methods to emit events consistently and predictably.\nThis is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\nwhile others won&#39;t fire them at all if the browser window is not focused.</p>\n",
                "args": [
                    {
                        "name": "element",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SDS_DIALOG_SCROLL_STRATEGY_FACTORY",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ScrollStrategy",
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ScrollStrategy",
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ScrollStrategy",
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "throwSdsDialogContentAlreadyAttachedError",
                "file": "libs/packages/components/src/lib/dialog/dialog-container.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Throws an exception for the case when a ComponentPortal is\nattached to a DomPortalOutlet without an origin.</p>\n",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "DialogRole",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dialog\" | \"alertdialog\"",
                "file": "libs/packages/components/src/lib/dialog/dialog-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Valid ARIA roles for a dialog element.</p>\n",
                "kind": 186
            },
            {
                "name": "MenuPositionX",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"before\" | \"after\"",
                "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Menu Positions</p>\n",
                "kind": 186
            },
            {
                "name": "MenuPositionY",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"above\" | \"below\"",
                "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "MenuSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Menu available sizes</p>\n",
                "kind": 195
            },
            {
                "name": "PaginationDisplayMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"results\"",
                "file": "libs/packages/components/src/lib/pagination/pagination.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>pagination display modes.</p>\n",
                "kind": 186
            },
            {
                "name": "SdsAccordionDisplayMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"basic\"",
                "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Accordion&#39;s display modes.</p>\n",
                "kind": 186
            },
            {
                "name": "SdsAccordionItemState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"expanded\" | \"collapsed\"",
                "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Accordion Item&#39;s states.</p>\n",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "ActionMenuMode",
                "childs": [
                    {
                        "name": "SHOWN",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "DISABLED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "HIDDEN",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/packages/components/src/lib/actions-menu/action-menu.model.ts"
            },
            {
                "name": "KEYS",
                "childs": [
                    {
                        "name": "ENTER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "enter"
                    },
                    {
                        "name": "ALT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "alt"
                    },
                    {
                        "name": "UP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "up"
                    },
                    {
                        "name": "DOWN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "down"
                    },
                    {
                        "name": "LEFT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left"
                    },
                    {
                        "name": "RIGHT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right"
                    },
                    {
                        "name": "TAB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tab"
                    },
                    {
                        "name": "ESC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "esc"
                    },
                    {
                        "name": "SPACE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "space"
                    },
                    {
                        "name": "SHIFT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "shift"
                    },
                    {
                        "name": "BACKSPACE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "backspace"
                    },
                    {
                        "name": "ONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "TWO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "THREE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    },
                    {
                        "name": "FOUR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "4"
                    },
                    {
                        "name": "FIVE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "5"
                    },
                    {
                        "name": "SIX",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "6"
                    },
                    {
                        "name": "SEVEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "7"
                    },
                    {
                        "name": "EIGHT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "8"
                    },
                    {
                        "name": "NINE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "9"
                    },
                    {
                        "name": "ZERO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "DELETE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "delete"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/packages/components/src/lib/key-helper/key-helper.ts"
            },
            {
                "name": "NavigationMode",
                "childs": [
                    {
                        "name": "INTERNAL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EXTERNAL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EVENT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LABEL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts"
            },
            {
                "name": "SelectionMode",
                "childs": [
                    {
                        "name": "SINGLE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "MULTIPLE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/packages/components/src/lib/selected-result/models/sds-selected-item-model-helper.ts"
            }
        ],
        "groupedVariables": {
            "libs/packages/components/src/lib/accordion/accordion-animations.ts": [
                {
                    "name": "ACCORDION_ITEM_ANIMATION_TIMING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/accordion/accordion-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                    "rawdescription": "Time and timing curve for accordion item animations.",
                    "description": "<p>Time and timing curve for accordion item animations.</p>\n"
                },
                {
                    "name": "sdsExpansionAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/accordion/accordion-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  /** Animation that expands and collapses the accordion item content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n    state('expanded', style({ height: '*', visibility: 'visible' })),\n    transition('expanded <=> collapsed, void => collapsed', animate(ACCORDION_ITEM_ANIMATION_TIMING)),\n  ]),\n}"
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-animations.ts": [
                {
                    "name": "animationBody",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  transition('* => enter', [\n    style({ opacity: 0, transform: 'scale(0.7)' }),\n    animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n  ]),\n  transition('* => void, * => exit', [\n    style({ transform: 'none' }),\n    animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n  ]),\n  transition('* => slideEnter', [\n    useAnimation(\n      animation([\n        style({ right: '-{{ width }}' }),\n        animate('{{ time }} cubic-bezier(0, 0, 0.2, 1)', style({ right: '0rem' })),\n      ])\n    ),\n  ]),\n  transition('* => slideExit', [\n    useAnimation(\n      animation([\n        style({ right: '0rem' }),\n        animate('{{ time }} cubic-bezier(0, 0, 0.2, 1)', style({ right: '-{{ width }}' })),\n      ])\n    ),\n  ]),\n]"
                },
                {
                    "name": "sdsDialogAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n}",
                    "rawdescription": "Animations used by SdsDialog.",
                    "description": "<p>Animations used by SdsDialog.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.component.ts": [
                {
                    "name": "Autocomplete_Autocomplete_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteSearchComponent),\n  multi: true,\n}"
                }
            ],
            "libs/packages/components/src/lib/autocomplete/autocomplete.component.ts": [
                {
                    "name": "Autocomplete_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/autocomplete/autocomplete.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteComponent),\n  multi: true,\n}"
                }
            ],
            "libs/packages/components/src/lib/key-helper/key-mocks.ts": [
                {
                    "name": "ChromeFirefoxMocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  enter: {\n    charCode: 13,\n    code: 'Enter',\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38,\n  },\n  down: {\n    charCode: 0,\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40,\n  },\n  left: {\n    charCode: 0,\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37,\n  },\n  right: {\n    charCode: 0,\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39,\n  },\n  tab: {\n    charCode: 0,\n    code: 'Tab',\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9,\n  },\n  esc: {\n    charCode: 0,\n    code: 'Escape',\n    key: 'Escape',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27,\n  },\n  space: {\n    charCode: 0,\n    code: 'Space',\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32,\n  },\n  shift: {\n    charCode: 0,\n    code: 'ShiftLeft',\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16,\n  },\n  backspace: {\n    charCode: 0,\n    code: 'Backspace',\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8,\n  },\n  delete: {\n    charCode: 0,\n    code: 'Delete',\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46,\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48,\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49,\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50,\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51,\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52,\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53,\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54,\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55,\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56,\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57,\n  },\n}"
                },
                {
                    "name": "EdgeMocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: undefined,\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: undefined,\n    key: 'Up',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38,\n  },\n  down: {\n    charCode: 0,\n    code: undefined,\n    key: 'Down',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40,\n  },\n  left: {\n    charCode: 0,\n    code: undefined,\n    key: 'Left',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37,\n  },\n  right: {\n    charCode: 0,\n    code: undefined,\n    key: 'Right',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39,\n  },\n  tab: {\n    charCode: 0,\n    code: undefined,\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9,\n  },\n  esc: {\n    charCode: 0,\n    code: undefined,\n    key: 'Esc',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27,\n  },\n  space: {\n    charCode: 0,\n    code: undefined,\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32,\n  },\n  shift: {\n    charCode: 0,\n    code: undefined,\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16,\n  },\n  backspace: {\n    charCode: 0,\n    code: undefined,\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8,\n  },\n  delete: {\n    charCode: 0,\n    code: undefined,\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46,\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48,\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49,\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50,\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51,\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52,\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53,\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54,\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55,\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56,\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57,\n  },\n}"
                },
                {
                    "name": "IEMocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: undefined,\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: undefined,\n    key: 'Up',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38,\n  },\n  down: {\n    charCode: 0,\n    code: undefined,\n    key: 'Down',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40,\n  },\n  left: {\n    charCode: 0,\n    code: undefined,\n    key: 'Left',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37,\n  },\n  right: {\n    charCode: 0,\n    code: undefined,\n    key: 'Right',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39,\n  },\n  tab: {\n    charCode: 0,\n    code: undefined,\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9,\n  },\n  esc: {\n    charCode: 0,\n    code: undefined,\n    key: 'Esc',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27,\n  },\n  space: {\n    charCode: 0,\n    code: undefined,\n    key: 'Spacebar',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32,\n  },\n  shift: {\n    charCode: 0,\n    code: undefined,\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16,\n  },\n  backspace: {\n    charCode: 0,\n    code: undefined,\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8,\n  },\n  delete: {\n    charCode: 0,\n    code: undefined,\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46,\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48,\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49,\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50,\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51,\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52,\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53,\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54,\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55,\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56,\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57,\n  },\n}"
                },
                {
                    "name": "mocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ie: IEMocks,\n  edge: EdgeMocks,\n  default: ChromeFirefoxMocks,\n  safari: SafariMocks,\n}"
                },
                {
                    "name": "SafariMocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: 'Enter',\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: 'Enter',\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    keyCode: 38,\n    keyIdentifier: 'Up',\n    which: 38,\n  },\n  down: {\n    charCode: 0,\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    keyCode: 40,\n    keyIdentifier: 'Down',\n    which: 40,\n  },\n  left: {\n    charCode: 0,\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    keyCode: 37,\n    keyIdentifier: 'Left',\n    which: 37,\n  },\n  right: {\n    charCode: 0,\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    keyCode: 39,\n    keyIdentifier: 'Right',\n    which: 39,\n  },\n  tab: {\n    charCode: 0,\n    code: 'Tab',\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: 'U+0009',\n    which: 9,\n  },\n  esc: {\n    charCode: 0,\n    code: 'Escape',\n    key: 'Escape',\n    keyCode: 27,\n    keyIdentifier: 'U+001B',\n    which: 27,\n  },\n  space: {\n    charCode: 0,\n    code: 'Space',\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: 'U+0020',\n    which: 32,\n  },\n  shift: {\n    charCode: 0,\n    code: 'ShiftLeft',\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: 'Shift',\n    which: 16,\n  },\n  backspace: {\n    charCode: 0,\n    code: 'Backspace',\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: 'U+0008',\n    which: 8,\n  },\n  delete: {\n    charCode: 0,\n    code: 'Delete',\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: 'U+007F',\n    which: 46,\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48,\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49,\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50,\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51,\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52,\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53,\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54,\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55,\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56,\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57,\n  },\n}"
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-content.directives.ts": [
                {
                    "name": "dialogElementUid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "Counter used to generate unique IDs for dialog elements.",
                    "description": "<p>Counter used to generate unique IDs for dialog elements.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/video-player/video-player.component.ts": [
                {
                    "name": "GLOBAL_STRINGS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/video-player/video-player.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "libs/packages/components/src/lib/autocomplete-search/autocomplete-sample.data.ts": [
                {
                    "name": "GropupSampleAutocompleteData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-sample.data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    code: 'A',\n    elements: [\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001001',\n        value: 'Formula Grants',\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001002',\n        value: 'Formula Grants (Apportionments)',\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001003',\n        value: 'Formula Grants (Cooperative Agreements)',\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001004',\n        value: 'Formula Grants (Health Incentive Grants)',\n      },\n    ],\n    description:\n      'Formula Grants - Allocations of money to States or their subdivisions in accordance with a distribution formula prescribed by law or administrative regulation, for activities of a continuing nature not confined to a specific project.',\n    element_id: '0001',\n    value: 'FORMULA GRANTS',\n  },\n  {\n    code: 'B',\n    elements: [\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003001',\n        value: 'Cooperative Agreements',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003002',\n        value: 'Cooperative Agreements (Discretionary Grants)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003003',\n        value: 'Project Grants',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003004',\n        value: 'Project Grants (Capacity Building and Complaint Processing, Training)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003005',\n        value: 'Project Grants (Contracts)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003006',\n        value: 'Project Grants (Cooperative Agreements or Contracts)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003007',\n        value: 'Project Grants (Cooperative Agreements)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003008',\n        value: 'Project Grants (Discretionary)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003009',\n        value: 'Project Grants (Fellowships)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003010',\n        value: 'Project Grants (for administration projects authorized under Section',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003011',\n        value: 'Project Grants (for collaborative design of curriculum, production of',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003012',\n        value: 'Project Grants (for specified projects)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003013',\n        value: 'Project Grants (including individual awards)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003014',\n        value: 'Project Grants (including travel grants)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003015',\n        value: 'Project Grants (Rehabilitation of existing indoor and outdoor recreat',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003016',\n        value: 'Project Grants (Special)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003017',\n        value: 'Project Grants (to capitalize loan funds)',\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003018',\n        value: 'Project Grants (with Formula Distribution)',\n      },\n    ],\n    description:\n      'Project Grants - The funding, for fixed or known periods, of specific projects or the delivery of specific services or products without liability for damages for failure to perform. Project grants include fellowships, scholarships, research grants, training grants, traineeships, experimental and demonstration grants, evaluation grants, planning grants, technical assistance grants, survey grants, construction grants, and unsolicited contractual agreements.',\n    element_id: '0003',\n    value: 'PROJECT GRANTS',\n  },\n  {\n    code: 'C',\n    elements: [\n      {\n        code: 'C',\n        elements: null,\n        description: null,\n        element_id: '0005001',\n        value: 'Direct Payments for Specified Use',\n      },\n      {\n        code: 'C',\n        elements: null,\n        description: null,\n        element_id: '0005002',\n        value: 'Direct Payments for Specified Use (Cooperative Agreements)',\n      },\n    ],\n    description:\n      'Direct Payments for a Specified Use - Financial assistance provided directly to individuals, private firms, and other private institutions to encourage or subsidize a particular activity by conditioning the receipt of the on a particular performance by the recipient. This does not include solicited contracts for the procurement of goods and services for the Federal government.',\n    element_id: '0005',\n    value: 'DIRECT PAYMENTS FOR A SPECIFIED USE',\n  },\n  {\n    code: 'D',\n    elements: [\n      {\n        code: 'D',\n        elements: null,\n        description: null,\n        element_id: '0007001',\n        value: 'Direct Payments with Unrestricted Use',\n      },\n    ],\n    description:\n      'Direct Payments with Unrestricted Use - Financial assistance provided directly to beneficiaries who satisfy eligibility requirements with no restrictions imposed on the recipient as to how the money is spent. Included are payments under retirement, pension, and compensation programs.',\n    element_id: '0007',\n    value: 'DIRECT PAYMENTS WITH UNRESTRICTED USE',\n  },\n  {\n    code: 'E',\n    elements: [\n      {\n        code: 'E',\n        elements: null,\n        description: null,\n        element_id: '0009001',\n        value: 'Direct Loans',\n      },\n    ],\n    description:\n      'Direct Loans - Financial assistance provided through the lending of Federal monies for a specific period of time, with a reasonable expectation of repayment. Such loans may or may not require the payment of interest.',\n    element_id: '0009',\n    value: 'DIRECT LOANS',\n  },\n  {\n    code: 'F',\n    elements: [\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011001',\n        value: 'Guaranteed/Insured Loans',\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011002',\n        value: 'Guaranteed/Insured Loans (including Guaranty Participation Loans)',\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011003',\n        value: 'Guaranteed/Insured Loans (including Immediate Participation Loans)',\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011004',\n        value: 'Loan Guarantees/Grants',\n      },\n    ],\n    description:\n      'Guaranteed/Insured Loans - Programs in which the Federal Government makes an arrangement to indemnify a lender against all or part of all of any defaults by those responsible for the repayment of loans.',\n    element_id: '0011',\n    value: 'GUARANTEED/INSURED LOANS',\n  },\n  {\n    code: 'G',\n    elements: [\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013001',\n        value: 'Insurance',\n      },\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013002',\n        value: 'Insurance (Guaranteed Surety Bonds)',\n      },\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013003',\n        value: 'Insurance (Reimbursement)',\n      },\n    ],\n    description:\n      'Insurance - Financial assistance provided to assure reimbursement for losses sustained under specified conditions. Coverage may be provided directly by the Federal Government or through private carriers and may or may not involve the payment of premiums.',\n    element_id: '0013',\n    value: 'INSURANCE',\n  },\n  {\n    code: 'H',\n    elements: [\n      {\n        code: 'H',\n        elements: null,\n        description: null,\n        element_id: '0015001',\n        value: 'Sale, Exchange, or Donation of Property and Goods',\n      },\n    ],\n    description:\n      'Sale, Exchange, or Donation of Property or Goods - Programs that provide for the sale, exchange, or donation of Federal real property, personal property, commodities, and other goods including land, buildings, equipment, food, and drugs. This does not include the loan of, use of, or access to Federal facilities or property.',\n    element_id: '0015',\n    value: 'SALE, EXCHANGE, OR DONATION OF PROPERTY OR GOODS',\n  },\n  {\n    code: 'I',\n    elements: [\n      {\n        code: 'I',\n        elements: null,\n        description: null,\n        element_id: '0017001',\n        value: 'Use of Property, Facilities, and Equipment',\n      },\n    ],\n    description:\n      'Use of Property, Facilities, or Equipment - Programs that provide for the loan of, use of, or access to Federal facilities or property wherein the federally owned facilities or property do not remain in the possession of the recipient of the assistance.',\n    element_id: '0017',\n    value: 'USE OF PROPERTY, FACILITIES, OR EQUIPMENT',\n  },\n  {\n    code: 'J',\n    elements: [\n      {\n        code: 'J',\n        elements: null,\n        description: null,\n        element_id: '0019001',\n        value: 'Provision of Specialized Services',\n      },\n    ],\n    description:\n      'Provision of Specialized Services - Programs that provide Federal personnel to directly perform certain tasks for the benefit of communities or individuals. These services may be performed in conjunction with non-Federal personnel, but they involve more than consultation, advice, or counseling.',\n    element_id: '0019',\n    value: 'PROVISION OF SPECIALIZED SERVICES',\n  },\n  {\n    code: 'K',\n    elements: [\n      {\n        code: 'K',\n        elements: null,\n        description: null,\n        element_id: '0021001',\n        value: 'Advisory Services and Counseling',\n      },\n      {\n        code: 'K',\n        elements: null,\n        description: null,\n        element_id: '0021002',\n        value: 'Advisory Services on Compliance',\n      },\n    ],\n    description:\n      'Advisory Services and Counseling - Programs that provide Federal specialists to consult, advise, or counsel communities or individuals including conferences, workshops, or personal contacts. This may involve the use of published information, but only in a secondary capacity.',\n    element_id: '0021',\n    value: 'ADVISORY SERVICES AND COUNSELING',\n  },\n  {\n    code: 'L',\n    elements: [\n      {\n        code: 'L',\n        elements: null,\n        description: null,\n        element_id: '0023001',\n        value: 'Dissemination of Technical Information',\n      },\n      {\n        code: 'L',\n        elements: null,\n        description: null,\n        element_id: '0023002',\n        value: 'Information',\n      },\n    ],\n    description:\n      'Dissemination of Technical Information - Programs that provide for the publication and distribution of information or data of a specialized technical nature, frequently through clearinghouses or libraries. This does not include conventional public information services designed for general public consumption.',\n    element_id: '0023',\n    value: 'DISSEMINATION OF TECHNICAL INFORMATION',\n  },\n  {\n    code: 'M',\n    elements: [\n      {\n        code: 'M',\n        elements: null,\n        description: null,\n        element_id: '0025001',\n        value: 'Training',\n      },\n    ],\n    description:\n      'Training - Programs that provide instructional activities conducted directly by a Federal agency for individuals not employed by the Federal Government.',\n    element_id: '0025',\n    value: 'TRAINING',\n  },\n  {\n    code: 'N',\n    elements: [\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027020',\n        value: 'Resolution of Disputes',\n      },\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027001',\n        value: 'Investigation of Complaints',\n      },\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027002',\n        value: 'Investigation of Complaints (Compliance Reviews)',\n      },\n    ],\n    description:\n      'Investigation of Complaints - Federal administrative agency activities that are initiated in response to requests, either formal or informal, to examine or investigate claims of violations of Federal statutes, policy, or procedure. Such claims must come from outside the Federal Government.',\n    element_id: '0027',\n    value: 'INVESTIGATION OF COMPLAINTS',\n  },\n  {\n    code: 'O',\n    elements: [\n      {\n        code: 'O',\n        elements: null,\n        description: null,\n        element_id: '0029001',\n        value: 'Federal Employment',\n      },\n    ],\n    description:\n      'Federal Employment - Programs that reflect the government-wide resposibilities of the Office of Personnel Management in the recruitment and hiring of Federal civilian agency personnel.',\n    element_id: '0029',\n    value: 'FEDERAL EMPLOYMENT',\n  },\n  {\n    code: 'Z',\n    elements: [\n      {\n        code: 'Z',\n        elements: null,\n        description: null,\n        element_id: '0090001',\n        value: 'Salaries and Expenses',\n      },\n    ],\n    description: null,\n    element_id: '0090',\n    value: 'SALARIES AND EXPENSES',\n  },\n]"
                }
            ],
            "libs/packages/components/src/lib/tabs/tabs.component.ts": [
                {
                    "name": "LEFT_ARROW",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "37",
                    "rawdescription": "CONSTANTS\nAdding in the constant values for keycodes\nto handle onKeyDown events",
                    "description": "<p>CONSTANTS\nAdding in the constant values for keycodes\nto handle onKeyDown events</p>\n"
                },
                {
                    "name": "RIGHT_ARROW",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "39"
                }
            ],
            "libs/packages/components/src/lib/accordion/accordion-base.ts": [
                {
                    "name": "SDS_ACCORDION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<SdsAccordionBase>('SDS_ACCORDION')",
                    "rawdescription": "Token used to provide a `SdsAccordion` to `SdsAccordionItem`.\nUsed primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.",
                    "description": "<p>Token used to provide a <code>SdsAccordion</code> to <code>SdsAccordionItem</code>.\nUsed primarily to avoid circular imports between <code>SdsAccordion</code> and <code>SdsAccordionItem</code>.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog.ts": [
                {
                    "name": "SDS_DIALOG_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('SdsDialogData')",
                    "rawdescription": "Injection token that can be used to access the data that was passed in to a dialog.",
                    "description": "<p>Injection token that can be used to access the data that was passed in to a dialog.</p>\n"
                },
                {
                    "name": "SDS_DIALOG_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<SdsDialogConfig>('sds-dialog-default-options')",
                    "rawdescription": "Injection token that can be used to specify default dialog options.",
                    "description": "<p>Injection token that can be used to specify default dialog options.</p>\n"
                },
                {
                    "name": "SDS_DIALOG_SCROLL_STRATEGY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<() => ScrollStrategy>('sds-dialog-scroll-strategy')",
                    "rawdescription": "Injection token that determines the scroll handling while the dialog is open.",
                    "description": "<p>Injection token that determines the scroll handling while the dialog is open.</p>\n"
                },
                {
                    "name": "SDS_DIALOG_SCROLL_STRATEGY_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  provide: SDS_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
                },
                {
                    "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<() => ScrollStrategy>('sds-slide-out-scroll-strategy')"
                },
                {
                    "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  provide: SDS_SLIDE_OUT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
                }
            ],
            "libs/packages/components/src/lib/menu/menu.component.ts": [
                {
                    "name": "SDS_MENU_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<SdsMenuInterface>('SDS_MENU_TOKEN')",
                    "rawdescription": "Injection token used to provide the parent menu to menu items.",
                    "description": "<p>Injection token used to provide the parent menu to menu items.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/selected-result/selected-result.component.ts": [
                {
                    "name": "SDS_SelectedResult_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/selected-result/selected-result.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSSelectedResultComponent),\n  multi: true,\n}"
                }
            ],
            "libs/packages/components/src/lib/truncate-text/truncates-text-base.ts": [
                {
                    "name": "SDS_TRUNCATED_TEXT_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/truncate-text/truncates-text-base.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('SdsTruncatedTextData')",
                    "rawdescription": "Used primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.",
                    "description": "<p>Used primarily to avoid circular imports between <code>SdsAccordion</code> and <code>SdsAccordionItem</code>.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/menu/menu-animations.ts": [
                {
                    "name": "sdsMenuAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/menu/menu-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  transformMenu: trigger('transformMenu', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(0.8)',\n      })\n    ),\n    transition(\n      'void => enter',\n      group([\n        query(\n          '.sds-menu',\n          animate(\n            '100ms linear',\n            style({\n              opacity: 1,\n            })\n          )\n        ),\n        animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n      ])\n    ),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n  ]),\n}"
                }
            ],
            "libs/packages/components/src/lib/toast/toast.module.ts": [
                {
                    "name": "SdsToastSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/toast/toast.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  toastComponent: SdsToastComponent,\n  timeOut: 6000,\n  toastClass: 'sds-toast',\n  positionClass: 'toast-bottom-left',\n}"
                }
            ],
            "libs/packages/components/src/lib/truncate-text/truncate-text-animations.ts": [
                {
                    "name": "sdsTruncateTextAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/truncate-text/truncate-text-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  container: trigger('container', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(0.8)',\n      })\n    ),\n    transition(\n      'void => enter',\n      group([\n        query(\n          '.sds-overlay',\n          animate(\n            '100ms linear',\n            style({\n              opacity: 1,\n            })\n          )\n        ),\n        animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n      ])\n    ),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n  ]),\n}"
                }
            ],
            "libs/packages/components/src/lib/accordion/accordion-item.component.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "Counter for generating unique element ids.",
                    "description": "<p>Counter for generating unique element ids.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-ref.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog-ref.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ]
        },
        "groupedFunctions": {
            "libs/packages/components/src/lib/dialog/dialog.ts": [
                {
                    "name": "_applyConfigDefaults",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Applies default options to the dialog config.</p>\n",
                    "args": [
                        {
                            "name": "config",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "defaultOptions",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "SdsDialogConfig",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14624,
                                "end": 14630,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 14618,
                                "end": 14623,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Config to be modified.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 14664,
                                "end": 14678,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "defaultOptions"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 14658,
                                "end": 14663,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Default options provided.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 14709,
                                "end": 14716,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The new configuration object.</p>\n"
                        }
                    ]
                },
                {
                    "name": "SDS_DIALOG_SCROLL_STRATEGY_FACTORY",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "overlay",
                            "type": "Overlay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ScrollStrategy",
                    "jsdoctags": [
                        {
                            "name": "overlay",
                            "type": "Overlay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "overlay",
                            "type": "Overlay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ScrollStrategy",
                    "jsdoctags": [
                        {
                            "name": "overlay",
                            "type": "Overlay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "overlay",
                            "type": "Overlay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ScrollStrategy",
                    "jsdoctags": [
                        {
                            "name": "overlay",
                            "type": "Overlay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/testing/event-objects.ts": [
                {
                    "name": "createFakeEvent",
                    "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a fake event object with any desired event type.</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "canBubble",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "cancelable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "canBubble",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cancelable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createKeyboardEvent",
                    "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Dispatches a keydown event from an element.</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyCode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keyCode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMouseEvent",
                    "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "button",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTouchEvent",
                    "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a browser TouchEvent with the specified pointer coordinates.</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "pageY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/popover/debounce.decorator.ts": [
                {
                    "name": "debounce",
                    "file": "libs/packages/components/src/lib/popover/debounce.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Delays calling of a function for <code>delay</code> number of milliseconds.</p>\n",
                    "args": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "300"
                        }
                    ],
                    "returnType": "MethodDecorator",
                    "jsdoctags": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "300",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/testing/dispatch-events.ts": [
                {
                    "name": "dispatchEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility to dispatch any event on a Node.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Event",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchFakeEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Shorthand to dispatch a fake event on a specified node.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "canBubble",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Event",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "canBubble",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchKeyboardEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Shorthand to dispatch a keyboard event with a specified key code.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyCode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "KeyboardEvent",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keyCode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchMouseEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Shorthand to dispatch a mouse event on the specified coordinates.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "createMouseEvent(type, x, y)"
                        }
                    ],
                    "returnType": "MouseEvent",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "createMouseEvent(type, x, y)",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchTouchEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Shorthand to dispatch a touch event on the specified coordinates.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-content.directives.ts": [
                {
                    "name": "getClosestDialog",
                    "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Finds the closest SdsDialogRef to an element by looking at the DOM.</p>\n",
                    "args": [
                        {
                            "name": "element",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "openDialogs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3907,
                                "end": 3914,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "element"
                            },
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3901,
                                "end": 3906,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Element relative to which to look for a dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3973,
                                "end": 3984,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "openDialogs"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3967,
                                "end": 3972,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>References to the currently-open dialogs.</p>\n"
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/testing/element-focus.ts": [
                {
                    "name": "patchElementFocus",
                    "file": "libs/packages/components/src/lib/testing/element-focus.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Patches an elements focus and blur methods to emit events consistently and predictably.\nThis is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\nwhile others won&#39;t fire them at all if the browser window is not focused.</p>\n",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-container.component.ts": [
                {
                    "name": "throwSdsDialogContentAlreadyAttachedError",
                    "file": "libs/packages/components/src/lib/dialog/dialog-container.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Throws an exception for the case when a ComponentPortal is\nattached to a DomPortalOutlet without an origin.</p>\n",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "libs/packages/components/src/lib/actions-menu/action-menu.model.ts": [
                {
                    "name": "ActionMenuMode",
                    "childs": [
                        {
                            "name": "SHOWN",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "DISABLED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "HIDDEN",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/packages/components/src/lib/actions-menu/action-menu.model.ts"
                }
            ],
            "libs/packages/components/src/lib/key-helper/key-helper.ts": [
                {
                    "name": "KEYS",
                    "childs": [
                        {
                            "name": "ENTER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "enter"
                        },
                        {
                            "name": "ALT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "alt"
                        },
                        {
                            "name": "UP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "up"
                        },
                        {
                            "name": "DOWN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "down"
                        },
                        {
                            "name": "LEFT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left"
                        },
                        {
                            "name": "RIGHT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right"
                        },
                        {
                            "name": "TAB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tab"
                        },
                        {
                            "name": "ESC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "esc"
                        },
                        {
                            "name": "SPACE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "space"
                        },
                        {
                            "name": "SHIFT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "shift"
                        },
                        {
                            "name": "BACKSPACE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "backspace"
                        },
                        {
                            "name": "ONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "TWO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "THREE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        },
                        {
                            "name": "FOUR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "4"
                        },
                        {
                            "name": "FIVE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "5"
                        },
                        {
                            "name": "SIX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "6"
                        },
                        {
                            "name": "SEVEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "7"
                        },
                        {
                            "name": "EIGHT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "8"
                        },
                        {
                            "name": "NINE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "9"
                        },
                        {
                            "name": "ZERO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "DELETE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "delete"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/packages/components/src/lib/key-helper/key-helper.ts"
                }
            ],
            "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts": [
                {
                    "name": "NavigationMode",
                    "childs": [
                        {
                            "name": "INTERNAL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EXTERNAL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EVENT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LABEL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts"
                }
            ],
            "libs/packages/components/src/lib/selected-result/models/sds-selected-item-model-helper.ts": [
                {
                    "name": "SelectionMode",
                    "childs": [
                        {
                            "name": "SINGLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "MULTIPLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/packages/components/src/lib/selected-result/models/sds-selected-item-model-helper.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "libs/packages/components/src/lib/dialog/dialog-config.ts": [
                {
                    "name": "DialogRole",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dialog\" | \"alertdialog\"",
                    "file": "libs/packages/components/src/lib/dialog/dialog-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Valid ARIA roles for a dialog element.</p>\n",
                    "kind": 186
                }
            ],
            "libs/packages/components/src/lib/menu/menu.component.ts": [
                {
                    "name": "MenuPositionX",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"before\" | \"after\"",
                    "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Menu Positions</p>\n",
                    "kind": 186
                },
                {
                    "name": "MenuPositionY",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"above\" | \"below\"",
                    "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "MenuSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Menu available sizes</p>\n",
                    "kind": 195
                }
            ],
            "libs/packages/components/src/lib/pagination/pagination.component.ts": [
                {
                    "name": "PaginationDisplayMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"results\"",
                    "file": "libs/packages/components/src/lib/pagination/pagination.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>pagination display modes.</p>\n",
                    "kind": 186
                }
            ],
            "libs/packages/components/src/lib/accordion/accordion-base.ts": [
                {
                    "name": "SdsAccordionDisplayMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"basic\"",
                    "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Accordion&#39;s display modes.</p>\n",
                    "kind": 186
                }
            ],
            "libs/packages/components/src/lib/accordion/accordion-item.component.ts": [
                {
                    "name": "SdsAccordionItemState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"expanded\" | \"collapsed\"",
                    "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Accordion Item&#39;s states.</p>\n",
                    "kind": 186
                }
            ]
        }
    }
}