(self.webpackChunksam_design_system=self.webpackChunksam_design_system||[]).push([[8697],{"./libs/documentation/src/lib/storybook/utilities/icons/icons-coloring/icons-coloring.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"usa-icon {\n  padding-right: 1rem;\n  display: inline-block;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/documentation/src/lib/storybook/utilities/icons/icons-rotation/icons-rotation.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".icon-wrapper {\n  text-align: center;\n  padding-right: 1rem;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/documentation/src/lib/storybook/utilities/icons/icons-scaling/icons-scaling.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".icon-wrapper {\n  text-align: center;\n  padding-right: 1rem;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/documentation/src/lib/storybook/utilities/icons/icons-skewing/icons-skewing.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".icon-wrapper {\n  text-align: center;\n  padding-right: 2rem;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/documentation/src/lib/storybook/utilities/icons/icons.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Bootstrap:()=>Bootstrap,Coloring:()=>Coloring,Custom:()=>Custom,Rotating:()=>Rotating,Sizing:()=>Sizing,Skewing:()=>Skewing,Stacking:()=>Stacking,Uswds:()=>Uswds,__namedExportsOrder:()=>__namedExportsOrder,default:()=>icons_stories});var common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),animations=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/animations.mjs"),src=__webpack_require__("./libs/packages/sam-formly/src/index.ts"),ngx_formly_core=__webpack_require__("./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),sandbox_utils=__webpack_require__("./libs/documentation/src/sandbox/sandbox-utils.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),gsa_sam_ngx_uswds_icons=__webpack_require__("./node_modules/@gsa-sam/ngx-uswds-icons/fesm2022/gsa-sam-ngx-uswds-icons.mjs");var icons_coloring_componentngResource=__webpack_require__("./libs/documentation/src/lib/storybook/utilities/icons/icons-coloring/icons-coloring.component.scss?ngResource"),icons_coloring_componentngResource_default=__webpack_require__.n(icons_coloring_componentngResource);let IconsColoring=class IconsColoring{};IconsColoring=(0,tslib_es6.Cg)([(0,core.Component)({template:'<p>\n  The color of a given icon can be changed by applying one of the color tokens to the icon itself or to an ancestor.\n</p>\n<p>For example: <code>class="text-base"</code></p>\n<div>\n  <usa-icon class="text-base" [icon]="\'alarm\'" [size]="\'2x\'"></usa-icon>\n  <usa-icon class="text-primary" [icon]="\'alarm\'" [size]="\'2x\'"></usa-icon>\n  <usa-icon class="text-secondary" [icon]="\'alarm\'" [size]="\'2x\'"></usa-icon>\n  <usa-icon class="text-accent-warm" [icon]="\'alarm\'" [size]="\'2x\'"></usa-icon>\n  <usa-icon class="text-accent-cool" [icon]="\'alarm\'" [size]="\'2x\'"></usa-icon>\n</div>\n',selector:"usa-icon-coloring-demo",styles:[icons_coloring_componentngResource_default()]})],IconsColoring);var ngx_bootstrap_icons=__webpack_require__("./node_modules/ngx-bootstrap-icons/fesm2020/ngx-bootstrap-icons.mjs");let IconsColoringModule=class IconsColoringModule{};IconsColoringModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,gsa_sam_ngx_uswds_icons.opy,ngx_bootstrap_icons.YWJ.pick({alarm:ngx_bootstrap_icons.yz6})],declarations:[IconsColoring],exports:[IconsColoring],bootstrap:[IconsColoring]})],IconsColoringModule);var icons_rotation_componentngResource=__webpack_require__("./libs/documentation/src/lib/storybook/utilities/icons/icons-rotation/icons-rotation.component.scss?ngResource"),icons_rotation_componentngResource_default=__webpack_require__.n(icons_rotation_componentngResource);let IconsRotation=class IconsRotation{};IconsRotation=(0,tslib_es6.Cg)([(0,core.Component)({template:'<p>\n  Icons can be rotated at 30 and 45 degree increments. If no rotation value is provided, icons will not be rotated by\n  default.\n</p>\n<p>For example: <code>[rotate]="270"</code></p>\n<div style="display: flex; align-items: flex-end">\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'"></usa-icon>\n    <p>0</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="30"></usa-icon>\n    <p>30</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="45"></usa-icon>\n    <p>45</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="60"></usa-icon>\n    <p>60</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="90"></usa-icon>\n    <p>90</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="120"></usa-icon>\n    <p>120</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="135"></usa-icon>\n    <p>135</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="150"></usa-icon>\n    <p>150</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="180"></usa-icon>\n    <p>180</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="210"></usa-icon>\n    <p>210</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="225"></usa-icon>\n    <p>225</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="240"></usa-icon>\n    <p>240</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="270"></usa-icon>\n    <p>270</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="300"></usa-icon>\n    <p>300</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="315"></usa-icon>\n    <p>315</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'" [rotate]="330"></usa-icon>\n    <p>330</p>\n  </div>\n</div>\n',selector:"usa-icon-rotation-demo",styles:[icons_rotation_componentngResource_default()]})],IconsRotation);let IconsRotationModule=class IconsRotationModule{};IconsRotationModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,gsa_sam_ngx_uswds_icons.opy,ngx_bootstrap_icons.YWJ.pick({alarm:ngx_bootstrap_icons.yz6})],declarations:[IconsRotation],exports:[IconsRotation],bootstrap:[IconsRotation]})],IconsRotationModule);var icons_scaling_componentngResource=__webpack_require__("./libs/documentation/src/lib/storybook/utilities/icons/icons-scaling/icons-scaling.component.scss?ngResource"),icons_scaling_componentngResource_default=__webpack_require__.n(icons_scaling_componentngResource);let IconsScaling=class IconsScaling{};IconsScaling=(0,tslib_es6.Cg)([(0,core.Component)({template:'<p>\n  Icons inherit the font-size of their parent container. By setting the\n  <code>size</code> input with any of the following input values the size of the resulting icon can be made larger or\n  smaller relative to any text which may appear in the parent container\n</p>\n<p>By default <code>[size]="\'lg\'"</code> is applied to icons.</p>\n<div style="display: flex; align-items: flex-end">\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'xs\'"></usa-icon>\n    <p>xs</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'sm\'"></usa-icon>\n    <p>sm</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'lg\'"></usa-icon>\n    <p>lg</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'2x\'"></usa-icon>\n    <p>2x</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'3x\'"></usa-icon>\n    <p>3x</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'4x\'"></usa-icon>\n    <p>4x</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'5x\'"></usa-icon>\n    <p>5x</p>\n  </div>\n</div>\n<div style="display: flex; align-items: flex-end">\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'6x\'"></usa-icon>\n    <p>6x</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'7x\'"></usa-icon>\n    <p>7x</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'8x\'"></usa-icon>\n    <p>8x</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'9x\'"></usa-icon>\n    <p>9x</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'alarm\'" [size]="\'10x\'"></usa-icon>\n    <p>10x</p>\n  </div>\n</div>\n',selector:"usa-icon-scaling-demo",styles:[icons_scaling_componentngResource_default()]})],IconsScaling);let IconsScalingModule=class IconsScalingModule{};IconsScalingModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,gsa_sam_ngx_uswds_icons.opy],declarations:[IconsScaling],exports:[IconsScaling],bootstrap:[IconsScaling]})],IconsScalingModule);var icons_skewing_componentngResource=__webpack_require__("./libs/documentation/src/lib/storybook/utilities/icons/icons-skewing/icons-skewing.component.scss?ngResource"),icons_skewing_componentngResource_default=__webpack_require__.n(icons_skewing_componentngResource);let IconSkewingComponent=class IconSkewingComponent{};IconSkewingComponent=(0,tslib_es6.Cg)([(0,core.Component)({template:'<p>\n  Icons can be skewed using the <code>skew</code> input. This input expects an array of up to two numbers to indicate\n  the degree value(s) to skew icon. The first element determines the horizontal skewing. The second element determines\n  the vertical skewing. The second element is optional. if it is not provided, 0 will be used.\n</p>\n<div style="display: flex; align-items: flex-end">\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'square\'" [size]="\'2x\'" [skew]="[-45]"></usa-icon>\n    <p>-45</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'square\'" [size]="\'2x\'" [skew]="[45]"></usa-icon>\n    <p>45</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'square\'" [size]="\'2x\'" [skew]="[0, -45]"></usa-icon>\n    <p>0, -45</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'square\'" [size]="\'2x\'" [skew]="[0, 45]"></usa-icon>\n    <p>0, 45</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'square\'" [size]="\'2x\'" [skew]="[15, 15]"></usa-icon>\n    <p>15, 15</p>\n  </div>\n  <div class="icon-wrapper">\n    <usa-icon [icon]="\'square\'" [size]="\'2x\'" [skew]="[-15, 15]"></usa-icon>\n    <p>-15, 15</p>\n  </div>\n</div>\n',selector:"usa-icon-skewing-demo",styles:[icons_skewing_componentngResource_default()]})],IconSkewingComponent);let IconsSkewingModule=class IconsSkewingModule{};IconsSkewingModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,gsa_sam_ngx_uswds_icons.opy,ngx_bootstrap_icons.YWJ.pick({square:ngx_bootstrap_icons.EwI})],declarations:[IconSkewingComponent],exports:[IconSkewingComponent],bootstrap:[IconSkewingComponent]})],IconsSkewingModule);let IconsStackingComponent=class IconsStackingComponent{};IconsStackingComponent=(0,tslib_es6.Cg)([(0,core.Component)({template:'<p>\n  In order to stack two or more icons, <code>StackedIconModule</code> must be imported into the module where you wish to\n  use a stacked icon.\n</p>\n<p style="max-width: unset">\n  <code>import &#123; NgxBootstrapIconsModule, square &#125; from \'ngx-bootstrap-icons\';</code><br />\n  <code>import &#123; add, IconModule, StackedIconModule &#125; from \'&#64;gsa-sam/ngx-uswds-icons\';</code>\n</p>\n\x3c!-- <p>test</p> --\x3e\n<p>\n  <code\n    >&#64;NgModule(&#123;<br />\n    &emsp;imports: [<br />\n    &emsp;&emsp;CommonModule,<br />\n    &emsp;&emsp;IconModule,<br />\n    &emsp;&emsp;StackedIconModule,<br />\n    &emsp;&emsp;NgxBootstrapIconsModule.pick(&#123;add, square&#125;)<br />\n    &emsp;],<br />\n    &emsp;declarations: [YourComponent],<br />\n    &emsp;exports: [YourComponent]<br />\n    &#125;)\n  </code>\n</p>\n<p>\n  After importing the module you can update your template to include <code>&#060;usa-stacked-icon&#062;</code>. The only\n  input for this component is <code>size</code> which can be used to scale the stacked icon using the same values as\n  those used to modify the size of individual icons.\n</p>\n<p>\n  The icons you want to appear stacked should then be inserted as children of <code>&#060;usa-stacked-icon&#062;</code>.\n  In order for the stacking css to work, make sure that the class <code>usa-stack-icon</code> is applied to the icons\n  you are stacking.\n</p>\n<p style="max-width: unset">\n  <code\n    >&#060;usa-stacked-icon [size]="\'sm\'"&#062;<br />\n    &emsp;&#060;usa-icon class="usa-stack-icon" [size]="\'2x\'" [icon]="\'square-fill\'"&#062;&#060;/usa-icon&#062;<br />\n    &emsp;&#060;usa-icon class="usa-stack-icon text-base-lightest" [size]="\'lg\'"\n    [icon]="\'hand-thumbs-down\'"&#062;&#060;/usa-icon&#062;<br />\n    &#060;/usa-stacked-icon&#062;\n  </code>\n</p>\n<div style="display: flex; align-items: flex-end">\n  <div style="padding-right: 1em; text-align: center">\n    <usa-stacked-icon [size]="\'sm\'">\n      <usa-icon class="usa-stack-icon" [size]="\'2x\'" [icon]="\'square-fill\'"></usa-icon>\n      <usa-icon class="usa-stack-icon text-base-lightest" [size]="\'lg\'" [icon]="\'hand-thumbs-down\'"></usa-icon>\n    </usa-stacked-icon>\n    <p>sm</p>\n  </div>\n  <div style="padding-right: 1em; text-align: center">\n    <usa-stacked-icon [size]="\'2x\'">\n      <usa-icon class="usa-stack-icon" [size]="\'2x\'" [icon]="\'circle-fill\'"></usa-icon>\n      <usa-icon class="usa-stack-icon text-warning" [size]="\'lg\'" [icon]="\'cone\'"></usa-icon>\n    </usa-stacked-icon>\n    <p>2x</p>\n  </div>\n  <div style="padding-right: 1em; text-align: center">\n    <usa-stacked-icon [size]="\'4x\'">\n      <usa-icon class="usa-stack-icon text-secondary-dark" [size]="\'2x\'" [icon]="\'diamond-fill\'"></usa-icon>\n      <usa-icon class="usa-stack-icon text-base-lightest" [size]="\'lg\'" [icon]="\'diamond\'"></usa-icon>\n    </usa-stacked-icon>\n    <p>4x</p>\n  </div>\n</div>\n',selector:"usa-icon-stacking-demo",preserveWhitespaces:!0})],IconsStackingComponent);let IconsStackingModule=class IconsStackingModule{};IconsStackingModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,gsa_sam_ngx_uswds_icons.opy,gsa_sam_ngx_uswds_icons.hTG,ngx_bootstrap_icons.YWJ.pick({squareFill:ngx_bootstrap_icons.lHT,handThumbsDown:ngx_bootstrap_icons.FAr,circleFill:ngx_bootstrap_icons.Ip5,cone:ngx_bootstrap_icons.qDJ,diamond:ngx_bootstrap_icons.zkv,diamondFill:ngx_bootstrap_icons.qhE})],declarations:[IconsStackingComponent],exports:[IconsStackingComponent],bootstrap:[IconsStackingComponent]})],IconsStackingModule);var kebabCase=__webpack_require__("./node_modules/lodash-es/kebabCase.js"),lodash=__webpack_require__("./node_modules/lodash/lodash.js");let IconsBasic=class IconsBasic{constructor(){this.sdsIcons=Object.keys(this.appendPrefix(gsa_sam_ngx_uswds_icons.Wzl,"sds")).map((iconName=>(0,kebabCase.A)(iconName))),this.displayName=Object.keys(gsa_sam_ngx_uswds_icons.Wzl).map((iconName=>(0,kebabCase.A)(iconName)))}appendPrefix(iconsObject,prefix){const prefixedIconsObject={};return Object.keys(iconsObject).forEach((key=>{prefixedIconsObject[`${prefix}${lodash.upperFirst(key)}`]=iconsObject[key]})),prefixedIconsObject}};IconsBasic=(0,tslib_es6.Cg)([(0,core.Component)({template:'<p>\n  In order to use an icon as a part of usa-icon it must be selected in the module which declares the component where you\n  wish to display the icon.\n</p>\n<p>\n  To select an icon you wish you use, you must first import the icon from either ngx-bootstrap-icons or\n  &#64;gsa-sam/ngx-uswds-icons into the module which declares your component.\n</p>\n<code>import &#123; NgxBootstrapIconsModule, square &#125; from \'ngx-bootstrap-icons\';</code><br />\n<code>import &#123; add, IconModule &#125; from \'&#64;gsa-sam/ngx-uswds-icons\';</code>\n<p>\n  Next you must add NgxBootstrapIconsModule to your imports and call it\'s\n  <code>pick</code> function. As an input to this function you should provide an object which contains all of the icons\n  you imported in the previous step\n</p>\n<code>\n  &#64;NgModule(&#123;<br />\n  &emsp;imports: [<br />\n  &emsp;&emsp;CommonModule,<br />\n  &emsp;&emsp;IconModule,<br />\n  &emsp;&emsp;NgxBootstrapIconsModule.pick(&#123;add, square&#125;)<br />\n  &emsp;],<br />\n  &emsp;declarations: [YourComponent],<br />\n  &emsp;exports: [YourComponent]<br />\n  &#125;)\n</code>\n<p>\n  Finally in your template you can include usa-icon and set the value of the\n  <code>icon</code> input to be one of the icons you just selected.\n</p>\n<p>\n  <code> &#060;usa-icon [icon]="\'add\'" [size]="\'2x\'"&#062;&#060;/usa-icon&#062; </code>\n</p>\n<div class="display-inline-flex flex-wrap">\n  <ng-container *ngFor="let item of sdsIcons; let i = index">\n    <span class="display-flex flex-column flex-align-center height-10.5 width-15" *ngIf="item">\n      <usa-icon [icon]="item" [size]="\'2x\'"></usa-icon>\n      <p class="font-sans-3xs margin-y-auto">{{ displayName[i] }}</p>\n    </span>\n  </ng-container>\n</div>\n',selector:"sds-icons-basic-demo",preserveWhitespaces:!0})],IconsBasic);var upperFirst=__webpack_require__("./node_modules/lodash-es/upperFirst.js"),cloneDeep=__webpack_require__("./node_modules/lodash-es/cloneDeep.js");let IconsBasicModule=class IconsBasicModule{};IconsBasicModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,gsa_sam_ngx_uswds_icons.opy,ngx_bootstrap_icons.YWJ.pick(Object.assign(cloneDeep.A(ngx_bootstrap_icons.Wzl),((iconsObject,prefix)=>{const prefixedIconsObject={};return Object.keys(iconsObject).forEach((key=>{prefixedIconsObject[`${prefix}${upperFirst.A(key)}`]=iconsObject[key]})),prefixedIconsObject})(cloneDeep.A(gsa_sam_ngx_uswds_icons.Wzl),"sds"),cloneDeep.A(gsa_sam_ngx_uswds_icons.Gu)))],declarations:[IconsBasic],exports:[IconsBasic],bootstrap:[IconsBasic]})],IconsBasicModule);let IconsBootstrap=class IconsBootstrap{constructor(){this.bootstrapIcons=Object.keys(ngx_bootstrap_icons.Wzl).map((iconName=>(0,kebabCase.A)(iconName))).map(this.xByXCorrection).map(this.degCorrection).map(this.xKCorrection)}xByXCorrection(possibleXByXString){return possibleXByXString.replace(/(\d)-x-(\d)/,"$1x$2")}degCorrection(possibleDegString){return possibleDegString.replace(/(\d+)-deg/,"$1deg")}xKCorrection(possibleXKString){return possibleXKString.replace(/(\d)-k(-?)/,"$1k$2")}};IconsBootstrap=(0,tslib_es6.Cg)([(0,core.Component)({template:'<p>\n  In order to use an icon as a part of usa-icon it must be selected in the module which declares the component where you\n  wish to display the icon.\n</p>\n<p>\n  To select an icon you wish you use, you must first import the icon from either ngx-bootstrap-icons or\n  &#64;gsa-sam/ngx-uswds-icons into the module which declares your component.\n</p>\n<code>import &#123; NgxBootstrapIconsModule, square &#125; from \'ngx-bootstrap-icons\';</code><br />\n<code>import &#123; add, IconModule &#125; from \'&#64;gsa-sam/ngx-uswds-icons\';</code>\n<p>\n  Next you must add NgxBootstrapIconsModule to your imports and call it\'s\n  <code>pick</code> function. As an input to this function you should provide an object which contains all of the icons\n  you imported in the previous step\n</p>\n<code>\n  &#64;NgModule(&#123;<br />\n  &emsp;imports: [<br />\n  &emsp;&emsp;CommonModule,<br />\n  &emsp;&emsp;IconModule,<br />\n  &emsp;&emsp;NgxBootstrapIconsModule.pick(&#123;add, square&#125;)<br />\n  &emsp;],<br />\n  &emsp;declarations: [YourComponent],<br />\n  &emsp;exports: [YourComponent]<br />\n  &#125;)\n</code>\n<p>\n  Finally in your template you can include usa-icon and set the value of the\n  <code>icon</code> input to be one of the icons you just selected.\n</p>\n<p>\n  <code> &#060;usa-icon [icon]="\'add\'" [size]="\'2x\'"&#062;&#060;/usa-icon&#062; </code>\n</p>\n<div class="display-inline-flex flex-wrap">\n  <ng-container *ngFor="let item of bootstrapIcons">\n    <span class="display-flex flex-column flex-align-center height-10.5 width-15" *ngIf="item">\n      <usa-icon [icon]="item" [size]="\'2x\'"></usa-icon>\n      <p class="font-sans-3xs margin-y-auto">{{ item }}</p>\n    </span>\n  </ng-container>\n</div>\n',selector:"sds-icons-bootstrap-demo",preserveWhitespaces:!0})],IconsBootstrap);let IconsBootstrapModule=class IconsBootstrapModule{};IconsBootstrapModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,gsa_sam_ngx_uswds_icons.opy,ngx_bootstrap_icons.YWJ.pick(Object.assign(cloneDeep.A(ngx_bootstrap_icons.Wzl),((iconsObject,prefix)=>{const prefixedIconsObject={};return Object.keys(iconsObject).forEach((key=>{prefixedIconsObject[`${prefix}${upperFirst.A(key)}`]=iconsObject[key]})),prefixedIconsObject})(cloneDeep.A(gsa_sam_ngx_uswds_icons.Wzl),"sds"),cloneDeep.A(gsa_sam_ngx_uswds_icons.Gu)))],declarations:[IconsBootstrap],exports:[IconsBootstrap],bootstrap:[IconsBootstrap]})],IconsBootstrapModule);let IconsUswds=class IconsUswds{constructor(){this.bootstrapIcons=Object.keys(gsa_sam_ngx_uswds_icons.Gu).map((iconName=>(0,kebabCase.A)(iconName)))}};IconsUswds=(0,tslib_es6.Cg)([(0,core.Component)({template:'<p>\n  In order to use an icon as a part of usa-icon it must be selected in the module which declares the component where you\n  wish to display the icon.\n</p>\n<p>\n  To select an icon you wish you use, you must first import the icon from either ngx-bootstrap-icons or\n  &#64;gsa-sam/ngx-uswds-icons into the module which declares your component.\n</p>\n<code>import &#123; NgxBootstrapIconsModule, square &#125; from \'ngx-bootstrap-icons\';</code><br />\n<code>import &#123; add, IconModule &#125; from \'&#64;gsa-sam/ngx-uswds-icons\';</code>\n<p>\n  Next you must add NgxBootstrapIconsModule to your imports and call it\'s\n  <code>pick</code> function. As an input to this function you should provide an object which contains all of the icons\n  you imported in the previous step\n</p>\n<code>\n  &#64;NgModule(&#123;<br />\n  &emsp;imports: [<br />\n  &emsp;&emsp;CommonModule,<br />\n  &emsp;&emsp;IconModule,<br />\n  &emsp;&emsp;NgxBootstrapIconsModule.pick(&#123;add, square&#125;)<br />\n  &emsp;],<br />\n  &emsp;declarations: [YourComponent],<br />\n  &emsp;exports: [YourComponent]<br />\n  &#125;)\n</code>\n<p>\n  Finally in your template you can include usa-icon and set the value of the\n  <code>icon</code> input to be one of the icons you just selected.\n</p>\n<p>\n  <code> &#060;usa-icon [icon]="\'add\'" [size]="\'2x\'"&#062;&#060;/usa-icon&#062; </code>\n</p>\n<div class="display-inline-flex flex-wrap">\n  <ng-container *ngFor="let item of bootstrapIcons">\n    <span class="display-flex flex-column flex-align-center height-10.5 width-15" *ngIf="item">\n      <usa-icon [icon]="item" [size]="\'2x\'"></usa-icon>\n      <p class="font-sans-3xs margin-y-auto">{{ item }}</p>\n    </span>\n  </ng-container>\n</div>\n',selector:"usa-icon-icons-demo",preserveWhitespaces:!0})],IconsUswds);let IconsUswdsModule=class IconsUswdsModule{};IconsUswdsModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[common.CommonModule,gsa_sam_ngx_uswds_icons.opy,ngx_bootstrap_icons.YWJ.pick(Object.assign(cloneDeep.A(ngx_bootstrap_icons.Wzl),((iconsObject,prefix)=>{const prefixedIconsObject={};return Object.keys(iconsObject).forEach((key=>{prefixedIconsObject[`${prefix}${upperFirst.A(key)}`]=iconsObject[key]})),prefixedIconsObject})(cloneDeep.A(gsa_sam_ngx_uswds_icons.Wzl),"sds"),cloneDeep.A(gsa_sam_ngx_uswds_icons.Gu)))],declarations:[IconsUswds],exports:[IconsUswds],bootstrap:[IconsUswds]})],IconsUswdsModule);const icons_stories={title:"Utilities/Icons",decorators:[(0,dist.moduleMetadata)({imports:[common.CommonModule,fesm2022_forms.X1,src.qt,fesm2022_forms.YN,ngx_formly_core.qy.forRoot(),IconsColoringModule,IconsRotationModule,IconsScalingModule,IconsSkewingModule,IconsStackingModule,IconsBasicModule,IconsBootstrapModule,IconsUswdsModule]}),(0,dist.applicationConfig)({providers:[(0,animations.provideAnimations)()]})]},Coloring=args=>({template:"<usa-icon-coloring-demo></usa-icon-coloring-demo>",props:args});Coloring.parameters={controls:{disable:!0,hideNoControlsWarning:!0},actions:{disable:!0},preview:(0,sandbox_utils.CC)("storybook/utilities/icons/icons-coloring","IconsColoringModule","usa-icon-coloring-demo"),stackblitzLink:(0,sandbox_utils.ft)("icons","coloring")};const Rotating=args=>({template:"<usa-icon-rotation-demo></usa-icon-rotation-demo>",props:args});Rotating.parameters={controls:{disable:!0,hideNoControlsWarning:!0},actions:{disable:!0},preview:(0,sandbox_utils.CC)("storybook/utilities/icons/icons-rotation","IconsRotationModule","usa-icon-rotation-demo"),stackblitzLink:(0,sandbox_utils.ft)("icons","rotation")};const Sizing=args=>({template:"<usa-icon-scaling-demo></usa-icon-scaling-demo>",props:args});Sizing.parameters={controls:{disable:!0,hideNoControlsWarning:!0},actions:{disable:!0},preview:(0,sandbox_utils.CC)("storybook/utilities/icons/icons-scaling","IconsScalingModule","usa-icon-scaling-demo"),stackblitzLink:(0,sandbox_utils.ft)("icons","scaling")};const Skewing=args=>({template:"<usa-icon-skewing-demo></usa-icon-skewing-demo>",props:args});Skewing.parameters={controls:{disable:!0,hideNoControlsWarning:!0},actions:{disable:!0},preview:(0,sandbox_utils.CC)("storybook/utilities/icons/icons-skewing","IconsSkewingModule","usa-icon-skewing-demo"),stackblitzLink:(0,sandbox_utils.ft)("icons","skewing")};const Stacking=args=>({template:"<usa-icon-stacking-demo></usa-icon-stacking-demo>",props:args});Stacking.parameters={controls:{disable:!0,hideNoControlsWarning:!0},actions:{disable:!0},preview:(0,sandbox_utils.CC)("storybook/utilities/icons/icons-stacking","IconsStackingModule","usa-icon-stacking-demo"),stackblitzLink:(0,sandbox_utils.ft)("icons","stacking")};const Custom=args=>({template:"<sds-icons-basic-demo></sds-icons-basic-demo>",props:args});Custom.parameters={controls:{disable:!0,hideNoControlsWarning:!0},actions:{disable:!0},preview:(0,sandbox_utils.CC)("storybook/utilities/icons/icons-basic","IconsBasicModule","sds-icons-basic-demo"),stackblitzLink:(0,sandbox_utils.ft)("icons","basic")};const Bootstrap=args=>({template:"<sds-icons-bootstrap-demo></sds-icons-bootstrap-demo>",props:args});Bootstrap.parameters={controls:{disable:!0,hideNoControlsWarning:!0},actions:{disable:!0},preview:(0,sandbox_utils.CC)("storybook/utilities/icons/icons-bootstrap","IconsBootstrapModule","sds-icons-bootstrap-demo"),stackblitzLink:(0,sandbox_utils.ft)("icons","bootstrap")};const Uswds=args=>({template:"<usa-icon-icons-demo></usa-icon-icons-demo>",props:args});Uswds.parameters={controls:{disable:!0,hideNoControlsWarning:!0},actions:{disable:!0},preview:(0,sandbox_utils.CC)("storybook/utilities/icons/icons-uswds","IconsUswdsModule","usa-icon-icons-demo"),stackblitzLink:(0,sandbox_utils.ft)("icons","uswds")},Coloring.parameters={...Coloring.parameters,docs:{...Coloring.parameters?.docs,source:{originalSource:"args => ({\n  template: '<usa-icon-coloring-demo></usa-icon-coloring-demo>',\n  props: args\n})",...Coloring.parameters?.docs?.source}}},Rotating.parameters={...Rotating.parameters,docs:{...Rotating.parameters?.docs,source:{originalSource:"args => ({\n  template: '<usa-icon-rotation-demo></usa-icon-rotation-demo>',\n  props: args\n})",...Rotating.parameters?.docs?.source}}},Sizing.parameters={...Sizing.parameters,docs:{...Sizing.parameters?.docs,source:{originalSource:"args => ({\n  template: '<usa-icon-scaling-demo></usa-icon-scaling-demo>',\n  props: args\n})",...Sizing.parameters?.docs?.source}}},Skewing.parameters={...Skewing.parameters,docs:{...Skewing.parameters?.docs,source:{originalSource:"args => ({\n  template: '<usa-icon-skewing-demo></usa-icon-skewing-demo>',\n  props: args\n})",...Skewing.parameters?.docs?.source}}},Stacking.parameters={...Stacking.parameters,docs:{...Stacking.parameters?.docs,source:{originalSource:"args => ({\n  template: '<usa-icon-stacking-demo></usa-icon-stacking-demo>',\n  props: args\n})",...Stacking.parameters?.docs?.source}}},Custom.parameters={...Custom.parameters,docs:{...Custom.parameters?.docs,source:{originalSource:"args => ({\n  template: '<sds-icons-basic-demo></sds-icons-basic-demo>',\n  props: args\n})",...Custom.parameters?.docs?.source}}},Bootstrap.parameters={...Bootstrap.parameters,docs:{...Bootstrap.parameters?.docs,source:{originalSource:"args => ({\n  template: '<sds-icons-bootstrap-demo></sds-icons-bootstrap-demo>',\n  props: args\n})",...Bootstrap.parameters?.docs?.source}}},Uswds.parameters={...Uswds.parameters,docs:{...Uswds.parameters?.docs,source:{originalSource:"args => ({\n  template: '<usa-icon-icons-demo></usa-icon-icons-demo>',\n  props: args\n})",...Uswds.parameters?.docs?.source}}};const __namedExportsOrder=["Coloring","Rotating","Sizing","Skewing","Stacking","Custom","Bootstrap","Uswds"]}}]);