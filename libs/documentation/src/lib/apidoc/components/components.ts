const COMPONENTS = {
    "pipes": [
        {
            "name": "SdsDatePipe",
            "id": "pipe-SdsDatePipe-9a8b1ee059f6b5ed6b79441f4ee7b7e9",
            "file": "libs/packages/components/src/lib/date/sds-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "sdsDate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({\n  name: 'sdsDate'\n})\nexport class SdsDatePipe implements PipeTransform {\n\n  constructor(private datePipe: DatePipe) { }\n\n  transform(value: string | number): string {\n    const passedInDate = new Date(value);\n    const now = new Date();\n\n    if(\n      now.getFullYear() === passedInDate.getFullYear() &&\n      now.getMonth() === passedInDate.getMonth() &&\n      now.getDate() === passedInDate.getDate()\n    ){\n      return this.datePipe.transform(passedInDate, 'shortTime');\n    } else if(now.getFullYear() === passedInDate.getFullYear()){\n      return this.datePipe.transform(passedInDate, 'MMM d');\n    } else {\n      return this.datePipe.transform(passedInDate, 'mediumDate');\n    }\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "DialogPosition",
            "id": "interface-DialogPosition-9b8eea9614311bd51a2fb1fc54f8f7aa",
            "file": "libs/packages/components/src/lib/dialog/dialog-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewContainerRef } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the SdsDialog service.\n */\nexport class SdsDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?= true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?= '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?= false;\n\n  /** Width of the dialog. */\n  width?= '';\n\n  /** Height of the dialog. */\n  height?= '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?= true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?= true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?= true;\n\n  /**\n   * Wheter the dialog its an alert\n   */\n  alert?: 'warning' | 'info' | 'error' | 'success';\n\n  /**\n   * Whether to display the close button in dialog header\n   */\n  displayCloseBtn?= true;\n\n  /**\n   * Whether dialog is a slide-out. Changes enter and exit animation, and adds\n   * class `dialog-slide-out` to container\n   */\n  slideOut?= false;\n}\n",
            "properties": [
                {
                    "name": "bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Override for the dialog&#39;s bottom position.</p>\n",
                    "line": 14,
                    "rawdescription": "\nOverride for the dialog's bottom position."
                },
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Override for the dialog&#39;s left position.</p>\n",
                    "line": 17,
                    "rawdescription": "\nOverride for the dialog's left position."
                },
                {
                    "name": "right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Override for the dialog&#39;s right position.</p>\n",
                    "line": 20,
                    "rawdescription": "\nOverride for the dialog's right position."
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Override for the dialog&#39;s top position.</p>\n",
                    "line": 11,
                    "rawdescription": "\nOverride for the dialog's top position."
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Possible overrides for a dialog&#39;s position.</p>\n",
            "rawdescription": "\nPossible overrides for a dialog's position.",
            "methods": []
        },
        {
            "name": "INavigationLink",
            "id": "interface-INavigationLink-77ea232dd64ab74fe9e2f7c81b3b5ff4",
            "file": "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface INavigationLink {\n    /**\n     * Text to be displayed in the link\n     */\n    text: string;\n\n    /**\n     * Navigation Route \n     */\n    route: string;\n\n    /**\n     * Internal Angualr Routes, External HREF, EVENT: event on parent component\n     */\n    mode: NavigationMode;\n}\n\nexport enum NavigationMode {\n    INTERNAL, EXTERNAL, EVENT, LABEL\n}\n\nexport interface Selectable {\n    /**\n     * Identifier for the item when search for selected \n     */\n    id: string;\n\n    /**\n     * Status of if the item is selected \n     */\n    selected?: boolean;\n}\n",
            "properties": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationMode",
                    "optional": false,
                    "description": "<p>Internal Angualr Routes, External HREF, EVENT: event on parent component</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nInternal Angualr Routes, External HREF, EVENT: event on parent component\n"
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Navigation Route</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nNavigation Route\n"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text to be displayed in the link</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nText to be displayed in the link\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "InitPxVideoConfig",
            "id": "interface-InitPxVideoConfig-8a5633d645af5ee69ebab40d5246abcc",
            "file": "libs/packages/components/src/lib/video-player/video-player.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  Input,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  Renderer2,\n  OnChanges,\n  AfterContentInit,\n  OnInit,\n  ChangeDetectorRef,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport { GLOBAL_STRINGS } from 'accessible-html5-video-player/js/strings.js';\nimport * as InitPxVideo from 'accessible-html5-video-player/js/px-video.js';\nimport { VPInterface } from './video-player';\nimport { DOCUMENT } from '@angular/common';\n\ninterface InitPxVideoConfig {\n  videoId: string;\n  captionsOnDefault: boolean;\n  seekInterval: number;\n  videoTitle: string;\n  debug: boolean;\n}\n\ndeclare const GLOBAL_STRINGS: any;\n\ndeclare class InitPxVideo {\n  constructor(config: InitPxVideoConfig);\n}\n\n@Component({\n  selector: 'sds-video-player',\n  templateUrl: './video-player.component.html',\n  styleUrls: ['./css/px-video.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SdsVideoPlayerComponent\n  implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n  @Input() VPConfiguration: VPInterface;\n  @ViewChild('video') video: ElementRef;\n  private config: InitPxVideoConfig;\n  @Input() crossorigin = '';\n\n  loadVideoSource = false;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer2: Renderer2,\n    private cdr: ChangeDetectorRef,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnDestroy() {\n    let element = this.document.getElementById('px-video-aria-announce');\n    if (element) {\n      this.renderer2.removeChild(this.elementRef, element);\n    }\n  }\n  ngOnInit() {\n    if (this.VPConfiguration.preload != 'none') {\n      this.loadVideoSource = true;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.crossorigin) {\n      const id = this.elementRef.nativeElement.querySelector('#videoPlayer');\n      id.setAttribute('crossorigin', this.crossorigin);\n    }\n    this.config = {\n      videoId: this.VPConfiguration.id,\n      captionsOnDefault: false,\n      seekInterval: this.VPConfiguration.seekInterval,\n      videoTitle: 'Video Player',\n      debug: this.VPConfiguration.debug,\n    };\n\n    const video = new InitPxVideo(this.config);\n    this.video.nativeElement.setAttribute(\n      'style',\n      'width:' + this.VPConfiguration.width + ';'\n    );\n\n    const progressElement: HTMLProgressElement = this.elementRef.nativeElement.querySelector(\n      'progress'\n    );\n    \n    if (progressElement) {\n      this.renderer2.setAttribute(\n        progressElement,\n        'aria-label',\n        this.VPConfiguration.description + ' progress bar'\n      );\n    }\n\n    if (this.VPConfiguration.preload === 'none') {\n      this._loadVideoSourceOnDemand();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes && changes.crossorigin) {\n      const id = this.elementRef.nativeElement.querySelector('#videoPlayer');\n      if (id) {\n        id.setAttribute('crossorigin', this.crossorigin);\n      }\n    }\n  }\n\n  /**\n   * IE and Edge ignore preload attribute and load video data eagerly. In order to\n   * workaround those such browsers, we add video source only after user clicks\n   * on play or restart button of the video.\n   */\n  private _loadVideoSourceOnDemand() {\n    const playButton: HTMLButtonElement = this.elementRef.nativeElement.querySelector(\n      '.px-video-play'\n    );\n    const restartButton: HTMLButtonElement = this.elementRef.nativeElement.querySelector(\n      '.px-video-restart'\n    );\n    const video: HTMLVideoElement = this.elementRef.nativeElement.querySelector(\n      '#videoPlayer'\n    );\n\n    const loadVideo = ($event) => {\n      if (this.loadVideoSource) {\n        return;\n      }\n\n      this.loadVideoSource = true;\n\n      // Due to event handler timing issues in safari, the browser does not load the source\n      // when play and source are set at the same time. So we first set the source, wait for\n      // an event loop, pause, then play the video to trigger source loading\n      setTimeout(() => {\n        video.pause();\n        video.play();\n      });\n    };\n\n    if (!playButton || !restartButton) {\n      // Edge case - if the button to toggle video source does not exist in dom, then add in the\n      // video source and let the browser decide when to fetch video data\n      this.loadVideoSource = true;\n    } else {\n      playButton.onclick = loadVideo;\n      restartButton.onclick = loadVideo;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "captionsOnDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "debug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "seekInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "videoId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "videoTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SdsAccordionBase",
            "id": "interface-SdsAccordionBase-2b6e6aeafd6e6801eb33c71834068be0",
            "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** Accordion's display modes. */\nexport type SdsAccordionDisplayMode = 'default' | 'basic';\n\n/**\n * Base interface for a `SdsAccordion`.\n */\nexport interface SdsAccordionBase extends CdkAccordion {\n  /** Display mode used for all accordion items in the accordion. */\n  displayMode: SdsAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the item headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the item headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `SdsAccordion` to `SdsAccordionItem`.\n * Used primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.\n */\nexport const SDS_ACCORDION = new InjectionToken<SdsAccordionBase>('SDS_ACCORDION');\n",
            "properties": [
                {
                    "name": "_handleHeaderFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Handles focus events on the item headers.</p>\n",
                    "line": 19,
                    "rawdescription": "\nHandles focus events on the item headers."
                },
                {
                    "name": "_handleHeaderKeydown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Handles keyboard events coming in from the item headers.</p>\n",
                    "line": 16,
                    "rawdescription": "\nHandles keyboard events coming in from the item headers."
                },
                {
                    "name": "displayMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsAccordionDisplayMode",
                    "optional": false,
                    "description": "<p>Display mode used for all accordion items in the accordion.</p>\n",
                    "line": 13,
                    "rawdescription": "\nDisplay mode used for all accordion items in the accordion."
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Base interface for a <code>SdsAccordion</code>.</p>\n",
            "rawdescription": "\n\nBase interface for a `SdsAccordion`.\n",
            "methods": [],
            "extends": "CdkAccordion"
        },
        {
            "name": "SDSAutocompleteServiceInterface",
            "id": "interface-SDSAutocompleteServiceInterface-789c2f09fc917454d7d68b1fa43ff91c",
            "file": "libs/packages/components/src/lib/autocomplete-search/models/SDSAutocompleteServiceInterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nexport interface SDSAutocompleteServiceInterface {\n    /**\n     * \n     * @param searchValue \n     */\n    getDataByText(currentItems: number, searchValue?: string): Observable<SDSHiercarchicalServiceResult>;\n}\n\nexport interface SDSHiercarchicalServiceResult {\n    /**\n     * \n     */\n    items: object[];\n\n    /**\n     * \n     */\n    totalItems: number;\n}\n\nexport class SDSHiercarchicalServiceSearchItem {\n\n    /**\n     * \n     */\n    id: string;\n\n    /**\n     * \n     */\n    searchValue: string;\n\n    /**\n     * \n     */\n    // sort: Sort;\n\n    /**\n     * \n     */\n    currentItemCount: number;\n}\n\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 165,
            "methods": [
                {
                    "name": "getDataByText",
                    "args": [
                        {
                            "name": "currentItems",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SDSHiercarchicalServiceResult>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "currentItems",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 116,
                                "end": 127,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "searchValue"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 110,
                                "end": 115,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "SDSHiercarchicalServiceResult",
            "id": "interface-SDSHiercarchicalServiceResult-789c2f09fc917454d7d68b1fa43ff91c",
            "file": "libs/packages/components/src/lib/autocomplete-search/models/SDSAutocompleteServiceInterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nexport interface SDSAutocompleteServiceInterface {\n    /**\n     * \n     * @param searchValue \n     */\n    getDataByText(currentItems: number, searchValue?: string): Observable<SDSHiercarchicalServiceResult>;\n}\n\nexport interface SDSHiercarchicalServiceResult {\n    /**\n     * \n     */\n    items: object[];\n\n    /**\n     * \n     */\n    totalItems: number;\n}\n\nexport class SDSHiercarchicalServiceSearchItem {\n\n    /**\n     * \n     */\n    id: string;\n\n    /**\n     * \n     */\n    searchValue: string;\n\n    /**\n     * \n     */\n    // sort: Sort;\n\n    /**\n     * \n     */\n    currentItemCount: number;\n}\n\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "rawdescription": "\n\n\n"
                },
                {
                    "name": "totalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "rawdescription": "\n\n\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SdsMenuInterface",
            "id": "interface-SdsMenuInterface-99189209fb0bfc13ba0d62e8ec0e324e",
            "file": "libs/packages/components/src/lib/menu/menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit\n} from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport {\n  ESCAPE,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey\n} from '@angular/cdk/keycodes';\nimport { FocusKeyManager, FocusOrigin } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subscription } from 'rxjs';\nimport { sdsMenuAnimations } from './menu-animations';\nimport { SdsMenuItemComponent } from './menu-item.component';\n\n/** Menu Positions */\nexport type MenuPositionX = 'before' | 'after';\nexport type MenuPositionY = 'above' | 'below';\n\n/** Menu available sizes */\n// sm = 'small'\nexport type MenuSizes = 'sm';\n\n/** Injection token used to provide the parent menu to menu items. */\nexport const SDS_MENU_TOKEN = new InjectionToken<SdsMenuInterface>(\n  'SDS_MENU_TOKEN'\n);\n\n/** Menu Interface */\nexport interface SdsMenuInterface<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: SdsMenuInterface;\n  size?: MenuSizes;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  addItem?: (item: T) => void;\n  insertItem?: (item: T, index: number) => void;\n  removeItem?: (item: T) => void;\n}\n\n@Component({\n  selector: 'sds-menu',\n  exportAs: 'sdsMenu',\n  templateUrl: 'menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [sdsMenuAnimations.transformMenu],\n  providers: [\n    { provide: SDS_MENU_TOKEN, useExisting: SdsMenuComponent }\n  ]\n})\nexport class SdsMenuComponent\n  implements\n  OnInit,\n  AfterContentInit,\n  OnDestroy,\n  SdsMenuInterface<SdsMenuItemComponent> {\n  /** After | Before the menu triger element */\n  private _xPosition: MenuPositionX = 'after';\n\n  /** Above | Below the menu triger element */\n  private _yPosition: MenuPositionY = 'below';\n\n  /** Manage browser focus */\n  private _keyManager: FocusKeyManager<SdsMenuItemComponent>;\n\n  /** Menu items inside the current menu. */\n  private _items: SdsMenuItemComponent[] = [];\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Stores <sds-menu> classes */\n  private _previousPanelClass: string;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: { [key: string]: boolean } = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Grab the component template */\n  @ViewChild(TemplateRef, { static: false }) templateRef: TemplateRef<any>;\n\n  /**\n   * Size of menu component.\n   * Affects the font-size of the menu items and\n   * the size of the close button in the menu header\n   */\n  @Input() size: MenuSizes;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX {\n    return this._xPosition;\n  }\n  set xPosition(value: MenuPositionX) {\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY {\n    return this._yPosition;\n  }\n  set yPosition(value: MenuPositionY) {\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Whether menu panel overlaps trigger element */\n  @Input()\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger = false;\n\n  /** Transfer classes from the sds-menu to the overlay container */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n    // Remove previous classes from current set of classes\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    // Adds new classes to current set of classes\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      // Remove all classes from <sds-menu>\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<SdsMenuItemComponent>(\n      this._items\n    ).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() =>\n      this.closed.emit('tab')\n    );\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Focus the first item in the menu */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /** Adds classes to the menu panel based on its position */\n  setPositionClasses(\n    posX: MenuPositionX = this.xPosition,\n    posY: MenuPositionY = this.yPosition\n  ) {\n    const classes = this._classList;\n    classes['sds-menu-before'] = posX === 'before';\n    classes['sds-menu-after'] = posX === 'after';\n    classes['sds-menu-above'] = posY === 'above';\n    classes['sds-menu-below'] = posY === 'below';\n  }\n\n  /** Adds a menu item with the menu. */\n  addItem(item: SdsMenuItemComponent) {\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n    }\n  }\n\n  /** Inserts a menu item at an index */\n  insertItem(item: SdsMenuItemComponent, index: number) {\n    if (this._items.indexOf(item) === -1 && index < this._items.length) {\n      this._items.splice(index, 0, item);\n    }\n  }\n\n  /** Removes an item from the menu. */\n  removeItem(item: SdsMenuItemComponent) {\n    const index = this._items.indexOf(item);\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n    }\n  }\n\n  /** Handle a keyboard event from the menu */\n  _handleKeydown(event: KeyboardEvent) {\n    // tslint:disable-next-line: deprecation\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME\n            ? manager.setFirstItemActive()\n            : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) { }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    // Scroll the content element to the top as soon as the animation starts.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "addItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void | \"click\" | \"keydown\" | \"tab\">",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "focusFirstItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "insertItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "overlapTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "parentMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsMenuInterface",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "removeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "setPositionClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuSizes",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "xPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuPositionX",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "yPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuPositionY",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Menu Interface</p>\n",
            "rawdescription": "\nMenu Interface",
            "methods": []
        },
        {
            "name": "SdsTruncateTextData",
            "id": "interface-SdsTruncateTextData-8a0fa5c4ffa157b927aac5b53d6e5e46",
            "file": "libs/packages/components/src/lib/truncate-text/truncate-text-container.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject, HostBinding, HostListener } from '@angular/core';\nimport { SDS_TRUNCATED_TEXT_DATA } from './truncates-text-base';\nimport { sdsTruncateTextAnimations } from './truncate-text-animations';\n\nexport interface SdsTruncateTextData {\n  text: string;\n}\n\n@Component({\n  selector: 'sds-truncated-text-container',\n  template: `\n    <div class=\"sds-overlay maxw-mobile radius-overlay padding-2\">{{ data.text }}</div>\n  `,\n  animations: [sdsTruncateTextAnimations.container]\n})\nexport class SdsTruncatedTextContainerComponent {\n  @HostBinding('@container') _animationState = 'void';\n\n  constructor(@Inject(SDS_TRUNCATED_TEXT_DATA) public data: SdsTruncateTextData) {}\n\n  /** Starts the animation. */\n  startAnimation() {\n    this._animationState = 'enter';\n  }\n\n  /** Resets the animation to its initial state. */\n  resetAnimation() {\n    this._animationState = 'void';\n  }\n\n  /** Intentionally left empty to trigger change detection */\n  @HostListener('@container.done')\n  _onAnimationDone() {}\n}\n",
            "properties": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Selectable",
            "id": "interface-Selectable-77ea232dd64ab74fe9e2f7c81b3b5ff4",
            "file": "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface INavigationLink {\n    /**\n     * Text to be displayed in the link\n     */\n    text: string;\n\n    /**\n     * Navigation Route \n     */\n    route: string;\n\n    /**\n     * Internal Angualr Routes, External HREF, EVENT: event on parent component\n     */\n    mode: NavigationMode;\n}\n\nexport enum NavigationMode {\n    INTERNAL, EXTERNAL, EVENT, LABEL\n}\n\nexport interface Selectable {\n    /**\n     * Identifier for the item when search for selected \n     */\n    id: string;\n\n    /**\n     * Status of if the item is selected \n     */\n    selected?: boolean;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Identifier for the item when search for selected</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nIdentifier for the item when search for selected\n"
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Status of if the item is selected</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nStatus of if the item is selected\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "VPInterface",
            "id": "interface-VPInterface-aef0e62b658b36ee1c0d330f95fc35a8",
            "file": "libs/packages/components/src/lib/video-player/video-player.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VPInterface{\n  sourceWebm: string;\n  sourceMp4: string;\n  height: string;\n  width: string;\n \tcaption: string;\n  poster: string;\n  id: string;\n \tseekInterval: number;\n \tdebug: boolean;\n  preload: string;\n  description?: string;\n}\n",
            "properties": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "debug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "poster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "preload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "seekInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "sourceMp4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "sourceWebm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "SdsDialogService",
            "id": "injectable-SdsDialogService-20484071e70a1983928235d992d346ef",
            "file": "libs/packages/components/src/lib/dialog/dialog.ts",
            "properties": [
                {
                    "name": "_afterAllClosedAtThisLevel",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "_afterOpenedAtThisLevel",
                    "defaultValue": "new Subject<SdsDialogRef<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "_ariaHiddenElements",
                    "defaultValue": "new Map<Element, string|null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_openDialogsAtThisLevel",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsDialogRef<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_scrollStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_slideOutScrollStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "afterAllClosed",
                    "defaultValue": "defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Stream that emits when all open dialog have finished closing.\nWill emit on subscribe if there are no open dialogs to begin with.</p>\n",
                    "line": 104,
                    "rawdescription": "\n\nStream that emits when all open dialog have finished closing.\nWill emit on subscribe if there are no open dialogs to begin with.\n",
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_attachDialogContainer",
                    "args": [
                        {
                            "name": "overlay",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SdsDialogContainerComponent",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttaches an SdsDialogContainerComponent to a dialog's already-created overlay.\n",
                    "description": "<p>Attaches an SdsDialogContainerComponent to a dialog&#39;s already-created overlay.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8327,
                                "end": 8334,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "overlay"
                            },
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8321,
                                "end": 8326,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the dialog&#39;s underlying overlay.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8393,
                                "end": 8399,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8387,
                                "end": 8392,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 8432,
                                "end": 8439,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise resolving to a ComponentRef for the attached container.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_attachDialogContent",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dialogContainer",
                            "type": "SdsDialogContainerComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SdsDialogRef<T, R>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttaches the user-provided component to the already-created SdsDialogContainerComponent.\n    or a TemplateRef to instantiate as the content.\n",
                    "description": "<p>Attaches the user-provided component to the already-created SdsDialogContainerComponent.\n    or a TemplateRef to instantiate as the content.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9205,
                                "end": 9227,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "componentOrTemplateRef"
                            },
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9199,
                                "end": 9204,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>The type of component being loaded into the dialog,\nor a TemplateRef to instantiate as the content.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9349,
                                "end": 9364,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "dialogContainer"
                            },
                            "type": "SdsDialogContainerComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9343,
                                "end": 9348,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the wrapping SdsDialogContainerComponent.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9432,
                                "end": 9442,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "overlayRef"
                            },
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9426,
                                "end": 9431,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the overlay in which the dialog resides.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9509,
                                "end": 9515,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9503,
                                "end": 9508,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 9548,
                                "end": 9555,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise resolving to the SdsDialogRef that should be returned to the user.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_closeDialogs",
                    "args": [
                        {
                            "name": "dialogs",
                            "type": "SdsDialogRef<any>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 391,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCloses all of the dialogs in an array.",
                    "description": "<p>Closes all of the dialogs in an array.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "dialogs",
                            "type": "SdsDialogRef<any>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_createInjector",
                    "args": [
                        {
                            "name": "config",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dialogRef",
                            "type": "SdsDialogRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dialogContainer",
                            "type": "SdsDialogContainerComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PortalInjector",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a custom injector to be used inside the dialog. This allows a component loaded inside\nof a dialog to close itself and, optionally, to return a value.\n",
                    "description": "<p>Creates a custom injector to be used inside the dialog. This allows a component loaded inside\nof a dialog to close itself and, optionally, to return a value.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11189,
                                "end": 11195,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11183,
                                "end": 11188,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Config object that is used to construct the dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 11260,
                                "end": 11269,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "dialogRef"
                            },
                            "type": "SdsDialogRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11254,
                                "end": 11259,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the dialog.</p>\n"
                        },
                        {
                            "name": "dialogContainer",
                            "type": "SdsDialogContainerComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 11380,
                                "end": 11387,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The custom injector that can be used inside the dialog.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_createOverlay",
                    "args": [
                        {
                            "name": "config",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates the overlay into which the dialog will be loaded.\n",
                    "description": "<p>Creates the overlay into which the dialog will be loaded.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6988,
                                "end": 6994,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6982,
                                "end": 6987,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 7027,
                                "end": 7034,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise resolving to the OverlayRef for the created overlay.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [
                        {
                            "name": "dialogConfig",
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates an overlay config from a dialog config.\n",
                    "description": "<p>Creates an overlay config from a dialog config.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7350,
                                "end": 7362,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "dialogConfig"
                            },
                            "type": "SdsDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7344,
                                "end": 7349,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 7395,
                                "end": 7402,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The overlay configuration.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_hideNonDialogContentFromAssistiveTechnology",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 368,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides all of the content that isn't an overlay from assistive technology.\n",
                    "description": "<p>Hides all of the content that isn&#39;t an overlay from assistive technology.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_removeOpenDialog",
                    "args": [
                        {
                            "name": "dialogRef",
                            "type": "SdsDialogRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 342,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves a dialog from the array of open dialogs.\n",
                    "description": "<p>Removes a dialog from the array of open dialogs.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12659,
                                "end": 12668,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "dialogRef"
                            },
                            "type": "SdsDialogRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12653,
                                "end": 12658,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Dialog to be removed.</p>\n"
                        }
                    ]
                },
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses all of the currently-open dialogs.\n",
                    "description": "<p>Closes all of the currently-open dialogs.</p>\n"
                },
                {
                    "name": "getDialogById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SdsDialogRef | undefined",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFinds an open dialog by its id.\n",
                    "description": "<p>Finds an open dialog by its id.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6454,
                                "end": 6456,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6448,
                                "end": 6453,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>ID to use when looking up the dialog.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SdsDialogConfig<D>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "SdsDialogRef<T, R>",
                    "typeParameters": [
                        "T",
                        "D",
                        "R"
                    ],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens a modal dialog containing the given component.\n    or a TemplateRef to instantiate as the dialog content.\n",
                    "description": "<p>Opens a modal dialog containing the given component.\n    or a TemplateRef to instantiate as the dialog content.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4371,
                                "end": 4393,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "componentOrTemplateRef"
                            },
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4365,
                                "end": 4370,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Type of the component to load into the dialog,\nor a TemplateRef to instantiate as the dialog content.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4517,
                                "end": 4523,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "config"
                            },
                            "type": "SdsDialogConfig<D>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4511,
                                "end": 4516,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Extra configuration options.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4559,
                                "end": 4566,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Reference to the newly-opened dialog.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service to open modal dialogs.</p>\n",
            "rawdescription": "\n\nService to open modal dialogs.\n",
            "sourceCode": "import {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {SdsDialogConfig} from './dialog-config';\nimport {SdsDialogContainerComponent} from './dialog-container.component';\nimport {SdsDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const SDS_DIALOG_DATA = new InjectionToken<any>('SdsDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const SDS_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<SdsDialogConfig>('sds-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const SDS_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('sds-dialog-scroll-strategy');\n\nexport const SDS_SLIDE_OUT_SCROLL_STRATEGY =\n  new InjectionToken<() => ScrollStrategy>('sds-slide-out-scroll-strategy');\n\n/** @docs-private */\nexport function SDS_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const SDS_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: SDS_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nexport const SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER = {\n  provide: SDS_SLIDE_OUT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open modal dialogs.\n */\n@Injectable()\nexport class SdsDialogService implements OnDestroy {\n  private _openDialogsAtThisLevel: SdsDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<SdsDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n  private _slideOutScrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): SdsDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<SdsDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(SDS_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: SdsDialogConfig,\n      @Inject(SDS_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Inject(SDS_SLIDE_OUT_SCROLL_STRATEGY) slideOutScrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: SdsDialogService,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n    this._slideOutScrollStrategy = slideOutScrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: SdsDialogConfig<D>): SdsDialogRef<T, R> {\n\n    // Convenience widths names: small | medium | large\n    // added to help with standardization\n    if (config && config.width) {\n      switch (config.width) {\n        case 'small': {\n          config.width = '370px';\n          break;\n        }\n        case 'medium': {\n          config.width = '730px';\n          break;\n        }\n        case 'large': {\n          config.width = '960px';\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n    }\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new SdsDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): SdsDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: SdsDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: SdsDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || (dialogConfig.slideOut ? this._slideOutScrollStrategy() : this._scrollStrategy()),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an SdsDialogContainerComponent to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: SdsDialogConfig): SdsDialogContainerComponent {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [SdsDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(SdsDialogContainerComponent, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<SdsDialogContainerComponent>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created SdsDialogContainerComponent.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping SdsDialogContainerComponent.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the SdsDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: SdsDialogContainerComponent,\n      overlayRef: OverlayRef,\n      config: SdsDialogConfig): SdsDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new SdsDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: SdsDialogConfig,\n      dialogRef: SdsDialogRef<T>,\n      dialogContainer: SdsDialogContainerComponent): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The SdsDialogContainerComponent is injected in the portal as the SdsDialogContainerComponent and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the SdsDialogContainerComponent is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [SdsDialogContainerComponent, dialogContainer],\n      [SDS_DIALOG_DATA, config.data],\n      [SdsDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: SdsDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        const sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: SdsDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: SdsDialogConfig, defaultOptions?: SdsDialogConfig): SdsDialogConfig {\n  return {...defaultOptions, ...config};\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_defaultOptions",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scrollStrategy",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "slideOutScrollStrategy",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_parentDialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_overlayContainer",
                        "type": "OverlayContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 106,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_defaultOptions",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scrollStrategy",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "slideOutScrollStrategy",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentDialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlayContainer",
                        "type": "OverlayContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "openDialogs": {
                    "name": "openDialogs",
                    "getSignature": {
                        "name": "openDialogs",
                        "type": "[]",
                        "returnType": "SdsDialogRef[]",
                        "line": 86,
                        "rawdescription": "Keeps track of the currently-open dialogs.",
                        "description": "<p>Keeps track of the currently-open dialogs.</p>\n"
                    }
                },
                "afterOpened": {
                    "name": "afterOpened",
                    "getSignature": {
                        "name": "afterOpened",
                        "type": "",
                        "returnType": "Subject<SdsDialogRef<any>>",
                        "line": 91,
                        "rawdescription": "Stream that emits when a dialog has been opened.",
                        "description": "<p>Stream that emits when a dialog has been opened.</p>\n"
                    }
                },
                "_afterAllClosed": {
                    "name": "_afterAllClosed",
                    "getSignature": {
                        "name": "_afterAllClosed",
                        "type": "",
                        "returnType": "Subject<void>",
                        "line": 95
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Button",
            "id": "class-Button-c99f0414ab1510d4ed7080f5fda40447",
            "file": "libs/packages/components/src/lib/search-result-list/model/search-results.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class SearchModel {\n  results: any[];\n  metadata: {\n    messages: Message[] | TemplateRef<any>;\n  };\n}\nexport class Message {\n  type: string;\n  title: string;\n  message: string;\n  classes: string;\n  buttons: Button[];\n}\nexport class Button {\n  id: string;\n  text: string;\n  classes: string;\n  action: any;\n  ariaLabel?: string;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "KeyHelper",
            "id": "class-KeyHelper-f1f2ea19e2924a992295147e9521db45",
            "file": "libs/packages/components/src/lib/key-helper/key-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class KeyHelper {\n\n  private _allowedKeys: string[] = [];\n\n  private _currentlySupported = [\n    'alt','enter','up','down','left','right','tab','esc','space',\n    'shift','backspace','1','2','3','4','5','6','7','8',\n    '9','0', 'delete'\n  ];\n\n  constructor (...keys) {\n    this._setAllowedKeys(...keys);\n  }\n\n  public isAllowed (event): boolean {\n    const val = this._allowedKeys\n      .reduce(\n        (val, key) => {\n          return KeyHelper.is(key, event) || val;\n        },\n        false\n      );\n    return val;\n  }\n\n  private _setAllowedKeys(...keys) {\n    keys.forEach(\n      key => {\n        if (this._currentlySupported.indexOf(key) !== -1) {\n          this._allowedKeys.push(key);\n        } else {\n          const ok = this._allowedToString();\n          const msg = `Only supports ${ok} at this time`;\n          throw new TypeError(msg);\n        }\n      }\n    );\n  }\n\n  private _allowedToString (): string {\n    return this._allowedKeys.join(', ');\n  }\n\n  public static getKeyCode (event: any): string {\n\n    if (!event) {\n      return undefined;\n    } else if (event.key) {\n      return event.key;\n    } else if (event.code) {\n      return event.code;\n    } else if (event.keyIdentifier) {\n      return event.keyIdentifier;\n    } else {\n      return undefined;\n    }\n\n  }\n\n  public static getNumberFromKey (event): number {\n    const tests = [\n      KeyHelper._zero, KeyHelper._one, KeyHelper._two,\n      KeyHelper._three, KeyHelper._four, KeyHelper._five,\n      KeyHelper._six, KeyHelper._seven, KeyHelper._eight,\n      KeyHelper._nine\n    ];\n\n    return tests.reduce(\n      (val: number | undefined, test: Function) => {\n        return val !== undefined\n          ? val\n          : test(event);\n      }, undefined\n    );\n  }\n\n  public static is (\n    validKeyParam: string,\n    event: KeyboardEvent | any): boolean {\n    let lowercased = validKeyParam.toLowerCase();\n    switch (lowercased) {\n      case 'alt'  :\n        return this._isAltKey(event);\n      case 'enter':\n        return this._isEnter(event);\n      case 'up':\n        return this._isArrowUp(event);\n      case 'down':\n        return this._isArrowDown(event);\n      case 'left':\n        return this._isArrowLeft(event);\n      case 'right':\n        return this._isArrowRight(event);\n      case 'tab':\n        return this._isTab(event);\n      case 'esc':\n        return this._isEscape(event);\n      case 'space':\n        return this._isSpace(event);\n      case 'shift':\n        return this._isShift(event);\n      case 'backspace':\n        return this._isBackspace(event);\n      case 'delete':\n        return this._isDelete(event);\n      case '0':\n        return this._isExpectedNumber(0, event);\n      case '1':\n        return this._isExpectedNumber(1, event);\n      case '2':\n        return this._isExpectedNumber(2, event);\n      case '3':\n        return this._isExpectedNumber(3, event);\n      case '4':\n        return this._isExpectedNumber(4, event);\n      case '5':\n        return this._isExpectedNumber(5, event);\n      case '6':\n        return this._isExpectedNumber(6, event);\n      case '7':\n        return this._isExpectedNumber(7, event);\n      case '8':\n        return this._isExpectedNumber(8, event);\n      case '9':\n        return this._isExpectedNumber(9, event);\n      default:\n        return false;\n    }\n  }\n\n  private static _isEnter (e: KeyboardEvent | any) {\n    if (e.code === 'Enter'\n      || e.key === 'Enter'\n      || e.keyIdentifier === 'Enter'\n      || e.which === 13\n      || e.charCode === 13\n      || e.keyCode === 13) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  private static _isAltKey (e: KeyboardEvent | any) {\n    if (e.code === 'Alt'\n      || e.key === 'Alt'\n      || e.keyIdentifier === 'Alt'\n      || e.which === 18\n      || e.charCode === 18\n      || e.keyCode === 18) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n\n  private static _isArrowUp (e: KeyboardEvent | any) {\n    if (e.code === 'ArrowUp'\n      || e.key === 'ArrowUp'\n      || e.key === 'Up'\n      || e.keyIdentifier === 'Up'\n      || e.which === 38\n      || e.keyCode === 38) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isArrowDown (e: KeyboardEvent | any) {\n    if (e.code === 'ArrowDown'\n      || e.key === 'ArrowDown'\n      || e.key === 'Down'\n      || e.keyIdentifier === 'Down'\n      || e.which === 40\n      || e.keyCode === 40) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isArrowLeft (e: KeyboardEvent | any) {\n    if (e.code === 'ArrowLeft'\n      || e.key === 'ArrowLeft'\n      || e.key === 'Left'\n      || e.keyIdentifier === 'Left'\n      || e.which === 37\n      || e.keyCode === 37) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isArrowRight (e: KeyboardEvent | any) {\n    if (e.code === 'ArrowRight'\n      || e.key === 'ArrowRight'\n      || e.key === 'Right'\n      || e.keyIdentifier === 'Right'\n      || e.which === 39\n      || e.keyCode === 39) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isTab (e: KeyboardEvent | any) {\n    if (e.code === 'Tab'\n      || e.key === 'Tab'\n      || e.keyIdentifier === 'U+0009'\n      || e.which === 9\n      || e.keyCode === 9) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isEscape (e: KeyboardEvent | any) {\n    if (e.code === 'Escape'\n      || e.key === 'Escape'\n      || e.key === 'Esc'\n      || e.keyIdentifier === 'U+001B'\n      || e.which === 27\n      || e.keyCode === 27) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isSpace (e: KeyboardEvent | any) {\n    if (e.code === 'Space'\n      || e.key === ' '\n      || e.key === 'Spacebar'\n      || e.keyIdentifier === 'U+0020'\n      || e.which === 32\n      || e.keyCode === 32) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isShift (e: KeyboardEvent | any) {\n    if (e.code === 'ShiftLeft'\n      || e.code === 'ShiftRight'\n      || e.key === 'Shift'\n      || e.keyIdentifier === 'Shift'\n      || e.which === 16\n      || e.keyCode === 16) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isBackspace (e: KeyboardEvent | any) {\n    if (e.code === 'Backspace'\n      || e.key === 'Backspace'\n      || e.keyIdentifier === 'U+0008'\n      || e.which === 8\n      || e.keyCode === 8) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _isDelete (e: KeyboardEvent | any) {\n    if (e.code === 'Delete'\n      || e.key === 'Delete'\n      || e.keyIdentifier === 'U+007F'\n      || e.which === 46\n      || e.keyCode === 46) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _zero (e): number {\n    if (e.code === 'Digit0'\n      || e.code === 'Numpad0'\n      || e.key === 0\n      || e.keyCode === 48\n      || e.keyCode === 96\n      || e.keyIdentifier === 'U+0030'\n      || e.which === 48) {\n      return 0;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _one (e): number {\n    if (e.code === 'Digit1'\n      || e.code === 'Numpad1'\n      || e.key === 1\n      || e.keyCode === 49\n      || e.keyCode === 97\n      || e.keyIdentifier === 'U+0031'\n      || e.which === 49) {\n      return 1;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _two (e): number {\n    if (e.code === 'Digit2'\n      || e.code === 'Numpad2'\n      || e.key === 2\n      || e.keyCode === 50\n      || e.keyCode === 98\n      || e.keyIdentifier === 'U+0032'\n      || e.which === 50) {\n      return 2;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _three (e): number {\n    if (e.code === 'Digit3'\n      || e.code === 'Numpad3'\n      || e.key === 3\n      || e.keyCode === 51\n      || e.keyCode === 99\n      || e.keyIdentifier === 'U+0033'\n      || e.which === 51) {\n      return 3;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _four (e): number {\n    if (e.code === 'Digit4'\n      || e.code === 'Numpad4'\n      || e.key === 4\n      || e.keyCode === 52\n      || e.keyCode === 100\n      || e.keyIdentifier === 'U+0034'\n      || e.which === 52) {\n      return 4;\n    } else {\n      return undefined;\n    }\n  }\n  private static _five (e): number {\n    if (e.code === 'Digit5'\n      || e.code === 'Numpad5'\n      || e.key === 5\n      || e.keyCode === 53\n      || e.keyCode === 101\n      || e.keyIdentifier === 'U+0035'\n      || e.which === 53) {\n      return 5;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _six (e): number {\n    if (e.code === 'Digit6'\n      || e.code === 'Numpad6'\n      || e.key === 6\n      || e.keyCode === 54\n      || e.keyCode === 102\n      || e.keyIdentifier === 'U+0036'\n      || e.which === 54) {\n      return 6;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _seven (e): number {\n    if (e.code === 'Digit7'\n      || e.code === 'Numpad7'\n      || e.key === 7\n      || e.keyCode === 55\n      || e.keyCode === 103\n      || e.keyIdentifier === 'U+0037'\n      || e.which === 55) {\n      return 7;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _eight (e): number {\n    if (e.code === 'Digit8'\n      || e.code === 'Numpad8'\n      || e.key === 8\n      || e.keyCode === 56\n      || e.keyCode === 104\n      || e.keyIdentifier === 'U+0038'\n      || e.which === 56) {\n      return 8;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _nine (e): number {\n    if (e.code === 'Digit9'\n      || e.code === 'Numpad9'\n      || e.key === 9\n      || e.keyCode === 57\n      || e.keyCode === 105\n      || e.keyIdentifier === 'U+0039'\n      || e.which === 57) {\n      return 9;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static _isExpectedNumber (expected, event)\n    : boolean {\n    return expected === KeyHelper.getNumberFromKey(event);\n  }\n\n}\n\nexport enum KEYS {\n  'ENTER' = 'enter',\n  'ALT' = 'alt',\n  'UP' = 'up',\n  'DOWN' = 'down',\n  'LEFT' = 'left',\n  'RIGHT' = 'right',\n  'TAB' = 'tab',\n  'ESC' = 'esc',\n  'SPACE' = 'space',\n  'SHIFT' = 'shift',\n  'BACKSPACE' = 'backspace',\n  'ONE' = '1',\n  'TWO' = '2',\n  'THREE' = '3',\n  'FOUR' = '4',\n  'FIVE' = '5',\n  'SIX' = '6',\n  'SEVEN' = '7',\n  'EIGHT' = '8',\n  'NINE' = '9',\n  'ZERO' = '0',\n  'DELETE' = 'delete'\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "keys",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "keys",
                        "type": "any[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_allowedKeys",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_currentlySupported",
                    "defaultValue": "[\n    'alt','enter','up','down','left','right','tab','esc','space',\n    'shift','backspace','1','2','3','4','5','6','7','8',\n    '9','0', 'delete'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_allowedToString",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_eight",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 395,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_five",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_four",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isAltKey",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isArrowDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isArrowLeft",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isArrowRight",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isArrowUp",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isBackspace",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isDelete",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isEnter",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isEscape",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isExpectedNumber",
                    "args": [
                        {
                            "name": "expected",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 423,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "expected",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isShift",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isSpace",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isTab",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_nine",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_one",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setAllowedKeys",
                    "args": [
                        {
                            "name": "keys",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "keys",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_seven",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 381,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_six",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 367,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_three",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_two",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_zero",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKeyCode",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNumberFromKey",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "is",
                    "args": [
                        {
                            "name": "validKeyParam",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "validKeyParam",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "KeyboardEvent | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAllowed",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Message",
            "id": "class-Message-c99f0414ab1510d4ed7080f5fda40447",
            "file": "libs/packages/components/src/lib/search-result-list/model/search-results.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class SearchModel {\n  results: any[];\n  metadata: {\n    messages: Message[] | TemplateRef<any>;\n  };\n}\nexport class Message {\n  type: string;\n  title: string;\n  message: string;\n  classes: string;\n  buttons: Button[];\n}\nexport class Button {\n  id: string;\n  text: string;\n  classes: string;\n  action: any;\n  ariaLabel?: string;\n}\n",
            "properties": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NavigationHelper",
            "id": "class-NavigationHelper-4ecdafa8ba2dfaeb583d08a13a9bad4b",
            "file": "libs/packages/components/src/lib/common-navigation/navigation-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { INavigationLink, NavigationMode } from './common-navigation-model';\nexport class NavigationHelper {\n\n    /**\n     * checks if link is internal\n     * @param link \n     */\n    isLinkInternal(link: INavigationLink) {\n        return link.mode === NavigationMode.INTERNAL;\n    }\n\n    /**\n     * checks if link is external\n     * @param link \n     */\n    isLinkExternal(link: INavigationLink) {\n        return link.mode === NavigationMode.EXTERNAL;\n    }\n}",
            "properties": [],
            "methods": [
                {
                    "name": "isLinkExternal",
                    "args": [
                        {
                            "name": "link",
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if link is external\n",
                    "description": "<p>checks if link is external</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 341,
                                "end": 345,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "link"
                            },
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 335,
                                "end": 340,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isLinkInternal",
                    "args": [
                        {
                            "name": "link",
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if link is internal\n",
                    "description": "<p>checks if link is internal</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 166,
                                "end": 170,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "link"
                            },
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 160,
                                "end": 165,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NavigationLink",
            "id": "class-NavigationLink-295cd59da07c4ec4067ea8a525ff10bf",
            "file": "libs/packages/components/src/lib/side-navigation/model/side-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { QueryParamsHandling } from '@angular/router';\nimport { INavigationLink, NavigationMode, Selectable } from '../../common-navigation/common-navigation-model';\n\nexport class SideNavigationModel {\n\n    /**\n     * \n     */\n    navigationLinks: NavigationLink[];\n}\n\n\nexport class NavigationLink implements Selectable, INavigationLink {\n\n    /**\n     * Internal Angualr Routes, External HREF, EVENT: event on parent component\n     */\n    mode: NavigationMode;\n\n    /**\n     * Text to be displayed in the link or button\n     */\n    text: string;\n\n    /**\n     * Navigation Route \n     */\n    route: string;\n\n    /**\n     * List of child navigation items that will show when no route is provieded\n     */\n    children?: NavigationLink[];\n\n    /**\n     * Identifier for the item when search for selected \n     */\n    id: string;\n\n    /**\n     * Status of if the item is selected \n     */\n    selected?: boolean;\n\n\n    /**\n     * Query string paramaters supporeted with external and internal links\n     * ex. { 'name': 'value',...}\n     */\n    queryParams?: {\n        [k: string]: any;\n    }\n\n    queryParamsHandling?: QueryParamsHandling;\n}\n\n\n\n\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationLink[]",
                    "optional": true,
                    "description": "<p>List of child navigation items that will show when no route is provieded</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nList of child navigation items that will show when no route is provieded\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Identifier for the item when search for selected</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nIdentifier for the item when search for selected\n"
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationMode",
                    "optional": false,
                    "description": "<p>Internal Angualr Routes, External HREF, EVENT: event on parent component</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nInternal Angualr Routes, External HREF, EVENT: event on parent component\n"
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "<p>Query string paramaters supporeted with external and internal links\nex. { &#39;name&#39;: &#39;value&#39;,...}</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nQuery string paramaters supporeted with external and internal links\nex. { 'name': 'value',...}\n"
                },
                {
                    "name": "queryParamsHandling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryParamsHandling",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Navigation Route</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nNavigation Route\n"
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Status of if the item is selected</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nStatus of if the item is selected\n"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text to be displayed in the link or button</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nText to be displayed in the link or button\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Selectable",
                "INavigationLink"
            ]
        },
        {
            "name": "PaginationConfigurationModel",
            "id": "class-PaginationConfigurationModel-e22700d6799a2fbbeca5d7b2f30c4157",
            "file": "libs/packages/components/src/lib/pagination/model/paginationModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PaginationConfigurationModel {\n\n    /**\n     * used to distinguish fields\n     */\n    id: string;\n}\n\nexport class PaginationModel {\n\n    /**\n     * current page number\n     */\n    pageNumber: number;\n\n    /**\n     * size of page ex 25, 50,100\n     */\n    pageSize: number;\n\n    /**\n     * total number of pages\n     */\n    totalPages: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>used to distinguish fields</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nused to distinguish fields\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaginationModel",
            "id": "class-PaginationModel-e22700d6799a2fbbeca5d7b2f30c4157",
            "file": "libs/packages/components/src/lib/pagination/model/paginationModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PaginationConfigurationModel {\n\n    /**\n     * used to distinguish fields\n     */\n    id: string;\n}\n\nexport class PaginationModel {\n\n    /**\n     * current page number\n     */\n    pageNumber: number;\n\n    /**\n     * size of page ex 25, 50,100\n     */\n    pageSize: number;\n\n    /**\n     * total number of pages\n     */\n    totalPages: number;\n}\n",
            "properties": [
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>current page number</p>\n",
                    "line": 15,
                    "rawdescription": "\n\ncurrent page number\n"
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>size of page ex 25, 50,100</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nsize of page ex 25, 50,100\n"
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total number of pages</p>\n",
                    "line": 25,
                    "rawdescription": "\n\ntotal number of pages\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSAutocompletelConfiguration",
            "id": "class-SDSAutocompletelConfiguration-4a6933c477edf1fd886261f49c19dde6",
            "file": "libs/packages/components/src/lib/autocomplete/models/SDSAutocompletelConfiguration.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SDSSelectedResultConfiguration } from '../../selected-result/models/SDSSelectedResultConfiguration';\nimport { SDSAutocompleteSearchConfiguration } from '../../autocomplete-search/models/SDSAutocompleteConfiguration';\nimport { SelectionMode } from '../../selected-result/models/sds-selected-item-model-helper';\nimport { Observable } from 'rxjs';\n\nexport class SDSAutocompletelConfiguration\n  implements\n    SDSSelectedResultConfiguration,\n    SDSAutocompleteSearchConfiguration {\n  /**\n   * sets the default debounce time to 250 milliseconds\n   */\n  constructor() {\n    this.debounceTime = 250;\n    this.minimumCharacterCountSearch = 0;\n  }\n\n  /**\n   * Used to describe the drop down (Text should match the label that will be supplied)\n   */\n  public labelText: string;\n\n  /**\n   * Used for the Id of the control\n   */\n  public id: string;\n\n  /**\n   *  This is the primary field used to identify each object in the results\n   */\n  public primaryKeyField: string;\n\n  /**\n   *  Property from supplied model used for the top part of the basic template\n   */\n  public primaryTextField: string;\n\n  /**\n   *  Property from supplied model used for the bottom part of the basic template\n   */\n  public secondaryTextField: string;\n\n  /**\n   *  Sets the time waited for addional key actions Default is 250 milliseconds\n   */\n  public debounceTime: number;\n\n  /**\n   * Place holder text for autocomplete input\n   */\n  public autocompletePlaceHolderText: string;\n\n  /**\n   * Mininumn Characters for search\n   */\n  public minimumCharacterCountSearch: number;\n\n  /**\n   * Mode of the model either allows a single item or multiple items\n   */\n  public selectionMode: SelectionMode = SelectionMode.SINGLE;\n\n  /**\n   * Allows option to allow user text not in the standard results\n   */\n  public isFreeTextEnabled: boolean = false;\n\n  /**\n   * Text appeneded ad the end of free text\n   */\n  public freeTextSubtext: string = 'search';\n\n  /**\n   * Focus into autocomplete search\n   */\n  public focusInSearch: boolean = true;\n\n  /**\n   * The aria-label for the auto-complete\n   */\n  public ariaLabelText: string;\n\n  /**\n   * To enable the tag mode\n   */\n  public isTagModeEnabled: boolean = false;\n\n  /**\n   * To make input readonly\n   */\n  public inputReadOnly = false;\n\n  /**\n   * Name of the children filed\n   */\n  public groupByChild: string = 'children';\n\n  /**\n   * To enable the Grouping mode\n   */\n  public isGroupingEnabled: boolean = false;\n\n  /**\n   * To enable the Group item selectable\n   */\n  public isSelectableGroup: boolean = true;\n\n  /**\n   * Toggle whether or not to display chips. This can be useful if some custom UI is used\n   * for rendering autocomplete values in multi-select mode\n   * @default false\n   */\n  public hideChips: boolean = false;\n\n  /** \n   * Modifiier function to change display of how primary text field is shown\n   * Allows adding prefix / suffix values when displaying tags\n   */\n  public displayModifierFn: (displayValue: string, index?: number) => string;\n\n  /**\n   * Provides a way for external components to force change detection\n   * on internal components. Any time this observable is emitted, a change\n   * detection will be preformed, ensuring data model and template values are\n   * in sync. This can be useful if some external changes are made and visual\n   * updates need to be made\n   */\n  public registerChanges$: Observable<void>;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>sets the default debounce time to 250 milliseconds</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9,
                "rawdescription": "\n\nsets the default debounce time to 250 milliseconds\n"
            },
            "properties": [
                {
                    "name": "ariaLabelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The aria-label for the auto-complete</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nThe aria-label for the auto-complete\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "autocompletePlaceHolderText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Place holder text for autocomplete input</p>\n",
                    "line": 51,
                    "rawdescription": "\n\nPlace holder text for autocomplete input\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "debounceTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p> Sets the time waited for addional key actions Default is 250 milliseconds</p>\n",
                    "line": 46,
                    "rawdescription": "\n\n Sets the time waited for addional key actions Default is 250 milliseconds\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "displayModifierFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Modifiier function to change display of how primary text field is shown\nAllows adding prefix / suffix values when displaying tags</p>\n",
                    "line": 119,
                    "rawdescription": "\n\nModifiier function to change display of how primary text field is shown\nAllows adding prefix / suffix values when displaying tags\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "focusInSearch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Focus into autocomplete search</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nFocus into autocomplete search\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "freeTextSubtext",
                    "defaultValue": "'search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text appeneded ad the end of free text</p>\n",
                    "line": 71,
                    "rawdescription": "\n\nText appeneded ad the end of free text\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "groupByChild",
                    "defaultValue": "'children'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of the children filed</p>\n",
                    "line": 96,
                    "rawdescription": "\n\nName of the children filed\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "hideChips",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Toggle whether or not to display chips. This can be useful if some custom UI is used\nfor rendering autocomplete values in multi-select mode</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nToggle whether or not to display chips. This can be useful if some custom UI is used\nfor rendering autocomplete values in multi-select mode\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "pos": 2698,
                            "end": 2716,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 2699,
                                "end": 2706,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 87,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used for the Id of the control</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nUsed for the Id of the control\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "inputReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>To make input readonly</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nTo make input readonly\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isFreeTextEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Allows option to allow user text not in the standard results</p>\n",
                    "line": 66,
                    "rawdescription": "\n\nAllows option to allow user text not in the standard results\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isGroupingEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the Grouping mode</p>\n",
                    "line": 101,
                    "rawdescription": "\n\nTo enable the Grouping mode\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isSelectableGroup",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the Group item selectable</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nTo enable the Group item selectable\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isTagModeEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the tag mode</p>\n",
                    "line": 86,
                    "rawdescription": "\n\nTo enable the tag mode\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "labelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used to describe the drop down (Text should match the label that will be supplied)</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nUsed to describe the drop down (Text should match the label that will be supplied)\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "minimumCharacterCountSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Mininumn Characters for search</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nMininumn Characters for search\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "primaryKeyField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> This is the primary field used to identify each object in the results</p>\n",
                    "line": 31,
                    "rawdescription": "\n\n This is the primary field used to identify each object in the results\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "primaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the top part of the basic template</p>\n",
                    "line": 36,
                    "rawdescription": "\n\n Property from supplied model used for the top part of the basic template\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "registerChanges$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Provides a way for external components to force change detection\non internal components. Any time this observable is emitted, a change\ndetection will be preformed, ensuring data model and template values are\nin sync. This can be useful if some external changes are made and visual\nupdates need to be made</p>\n",
                    "line": 128,
                    "rawdescription": "\n\nProvides a way for external components to force change detection\non internal components. Any time this observable is emitted, a change\ndetection will be preformed, ensuring data model and template values are\nin sync. This can be useful if some external changes are made and visual\nupdates need to be made\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "secondaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the bottom part of the basic template</p>\n",
                    "line": 41,
                    "rawdescription": "\n\n Property from supplied model used for the bottom part of the basic template\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "SelectionMode.SINGLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionMode",
                    "optional": false,
                    "description": "<p>Mode of the model either allows a single item or multiple items</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nMode of the model either allows a single item or multiple items\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "SDSSelectedResultConfiguration",
                "SDSAutocompleteSearchConfiguration"
            ]
        },
        {
            "name": "SDSAutocompleteSearchConfiguration",
            "id": "class-SDSAutocompleteSearchConfiguration-939ad8908dc395cc0b4a82d9e4ac7565",
            "file": "libs/packages/components/src/lib/autocomplete-search/models/SDSAutocompleteConfiguration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SelectionMode } from '../../selected-result/models/sds-selected-item-model-helper';\n\nexport class SDSAutocompleteSearchConfiguration {\n  /**\n   * sets the default debounce time to 250 milliseconds\n   */\n  constructor() {\n    this.debounceTime = 250;\n    this.minimumCharacterCountSearch = 0;\n  }\n\n  /**\n   * Used to describe the drop down (Text should match the label that will be supplied)\n   */\n  public labelText: string;\n\n  /**\n   * Used for the Id of the control\n   */\n  public id: string;\n\n  /**\n   *  This is the primary field used to identify each object in the results\n   */\n  public primaryKeyField: string;\n\n  /**\n   *  Property from supplied model used for the top part of the basic template\n   *  and the text for single selection\n   */\n  public primaryTextField: string;\n\n  /**\n   *  Property from supplied model used for the bottom part of the basic template\n   */\n  public secondaryTextField: string;\n\n  /**\n   *  Sets the time waited for addional key actions Default is 250 milliseconds\n   */\n  public debounceTime: number;\n\n  /**\n   * Place holder text for autocomplete input\n   */\n  public autocompletePlaceHolderText: string;\n\n  /**\n   * Mininumn Characters for search\n   */\n  public minimumCharacterCountSearch: number;\n\n  /**\n   * Mode of the model either allows a single item or multiple items\n   */\n  public selectionMode: SelectionMode = SelectionMode.SINGLE;\n\n  /**\n   * Allows option to allow user text not in the standard results\n   */\n  public isFreeTextEnabled: boolean = false;\n\n  /**\n   * Text appeneded ad the end of free text\n   */\n  public freeTextSubtext: string = 'search';\n\n  /**\n   * Focus into autocomplete search\n   */\n  public focusInSearch: boolean = true;\n\n  /**\n   * The aria-label for the auto-complete\n   */\n  public ariaLabelText: string;\n\n  /**\n   * To enable the tag mode\n   */\n  public isTagModeEnabled: boolean = false;\n\n  /**\n   * To make input readonly\n   */\n  public inputReadOnly = false;\n\n  /**\n   * Name of the children filed\n   */\n  public groupByChild: string = 'children';\n\n  /**\n   * To enable the Grouping mode\n   */\n  public isGroupingEnabled: boolean = false;\n\n  /**\n   * To enable the Group item selectable\n   */\n  public isSelectableGroup: boolean = true;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>sets the default debounce time to 250 milliseconds</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 3,
                "rawdescription": "\n\nsets the default debounce time to 250 milliseconds\n"
            },
            "properties": [
                {
                    "name": "ariaLabelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The aria-label for the auto-complete</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nThe aria-label for the auto-complete\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "autocompletePlaceHolderText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Place holder text for autocomplete input</p>\n",
                    "line": 46,
                    "rawdescription": "\n\nPlace holder text for autocomplete input\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "debounceTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p> Sets the time waited for addional key actions Default is 250 milliseconds</p>\n",
                    "line": 41,
                    "rawdescription": "\n\n Sets the time waited for addional key actions Default is 250 milliseconds\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "focusInSearch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Focus into autocomplete search</p>\n",
                    "line": 71,
                    "rawdescription": "\n\nFocus into autocomplete search\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "freeTextSubtext",
                    "defaultValue": "'search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Text appeneded ad the end of free text</p>\n",
                    "line": 66,
                    "rawdescription": "\n\nText appeneded ad the end of free text\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "groupByChild",
                    "defaultValue": "'children'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of the children filed</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nName of the children filed\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used for the Id of the control</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nUsed for the Id of the control\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "inputReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>To make input readonly</p>\n",
                    "line": 86,
                    "rawdescription": "\n\nTo make input readonly\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isFreeTextEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Allows option to allow user text not in the standard results</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nAllows option to allow user text not in the standard results\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isGroupingEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the Grouping mode</p>\n",
                    "line": 96,
                    "rawdescription": "\n\nTo enable the Grouping mode\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isSelectableGroup",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the Group item selectable</p>\n",
                    "line": 101,
                    "rawdescription": "\n\nTo enable the Group item selectable\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isTagModeEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>To enable the tag mode</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nTo enable the tag mode\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "labelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used to describe the drop down (Text should match the label that will be supplied)</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nUsed to describe the drop down (Text should match the label that will be supplied)\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "minimumCharacterCountSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Mininumn Characters for search</p>\n",
                    "line": 51,
                    "rawdescription": "\n\nMininumn Characters for search\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "primaryKeyField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> This is the primary field used to identify each object in the results</p>\n",
                    "line": 25,
                    "rawdescription": "\n\n This is the primary field used to identify each object in the results\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "primaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the top part of the basic template\n and the text for single selection</p>\n",
                    "line": 31,
                    "rawdescription": "\n\n Property from supplied model used for the top part of the basic template\n and the text for single selection\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "secondaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the bottom part of the basic template</p>\n",
                    "line": 36,
                    "rawdescription": "\n\n Property from supplied model used for the bottom part of the basic template\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "SelectionMode.SINGLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionMode",
                    "optional": false,
                    "description": "<p>Mode of the model either allows a single item or multiple items</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nMode of the model either allows a single item or multiple items\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SdsDialogConfig",
            "id": "class-SdsDialogConfig-9b8eea9614311bd51a2fb1fc54f8f7aa",
            "file": "libs/packages/components/src/lib/dialog/dialog-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ViewContainerRef } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the SdsDialog service.\n */\nexport class SdsDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?= true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?= '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?= false;\n\n  /** Width of the dialog. */\n  width?= '';\n\n  /** Height of the dialog. */\n  height?= '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?= true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?= true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?= true;\n\n  /**\n   * Wheter the dialog its an alert\n   */\n  alert?: 'warning' | 'info' | 'error' | 'success';\n\n  /**\n   * Whether to display the close button in dialog header\n   */\n  displayCloseBtn?= true;\n\n  /**\n   * Whether dialog is a slide-out. Changes enter and exit animation, and adds\n   * class `dialog-slide-out` to container\n   */\n  slideOut?= false;\n}\n",
            "properties": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"warning\" | \"info\" | \"error\" | \"success\"",
                    "optional": true,
                    "description": "<p>Wheter the dialog its an alert</p>\n",
                    "line": 109,
                    "rawdescription": "\n\nWheter the dialog its an alert\n"
                },
                {
                    "name": "ariaDescribedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "<p>ID of the element that describes the dialog.</p>\n",
                    "line": 82,
                    "rawdescription": "\nID of the element that describes the dialog."
                },
                {
                    "name": "ariaLabel",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "<p>Aria label to assign to the dialog element</p>\n",
                    "line": 85,
                    "rawdescription": "\nAria label to assign to the dialog element"
                },
                {
                    "name": "autoFocus",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the dialog should focus the first focusable element on open.</p>\n",
                    "line": 88,
                    "rawdescription": "\nWhether the dialog should focus the first focusable element on open."
                },
                {
                    "name": "backdropClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Custom class for the backdrop,</p>\n",
                    "line": 49,
                    "rawdescription": "\nCustom class for the backdrop,"
                },
                {
                    "name": "closeOnNavigation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the dialog should close when the user goes backwards/forwards in history.\nNote that this usually doesn&#39;t include clicking on links (unless the user is using\nthe <code>HashLocationStrategy</code>).</p>\n",
                    "line": 104,
                    "rawdescription": "\n\nWhether the dialog should close when the user goes backwards/forwards in history.\nNote that this usually doesn't include clicking on links (unless the user is using\nthe `HashLocationStrategy`).\n"
                },
                {
                    "name": "data",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "D | null",
                    "optional": true,
                    "description": "<p>Data being injected into the child component.</p>\n",
                    "line": 76,
                    "rawdescription": "\nData being injected into the child component."
                },
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Direction",
                    "optional": true,
                    "description": "<p>Layout direction for the dialog&#39;s content.</p>\n",
                    "line": 79,
                    "rawdescription": "\nLayout direction for the dialog's content."
                },
                {
                    "name": "disableClose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the user can use escape or clicking on the backdrop to close the modal.</p>\n",
                    "line": 52,
                    "rawdescription": "\nWhether the user can use escape or clicking on the backdrop to close the modal."
                },
                {
                    "name": "displayCloseBtn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether to display the close button in dialog header</p>\n",
                    "line": 114,
                    "rawdescription": "\n\nWhether to display the close button in dialog header\n"
                },
                {
                    "name": "hasBackdrop",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the dialog has a backdrop.</p>\n",
                    "line": 46,
                    "rawdescription": "\nWhether the dialog has a backdrop."
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Height of the dialog.</p>\n",
                    "line": 58,
                    "rawdescription": "\nHeight of the dialog."
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>ID for the dialog. If omitted, a unique one will be generated.</p>\n",
                    "line": 37,
                    "rawdescription": "\nID for the dialog. If omitted, a unique one will be generated."
                },
                {
                    "name": "maxHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "<p>Max-height of the dialog. If a number is provided, pixel units are assumed.</p>\n",
                    "line": 70,
                    "rawdescription": "\nMax-height of the dialog. If a number is provided, pixel units are assumed."
                },
                {
                    "name": "maxWidth",
                    "defaultValue": "'80vw'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "<p>Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw</p>\n",
                    "line": 67,
                    "rawdescription": "\nMax-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw"
                },
                {
                    "name": "minHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "<p>Min-height of the dialog. If a number is provided, pixel units are assumed.</p>\n",
                    "line": 64,
                    "rawdescription": "\nMin-height of the dialog. If a number is provided, pixel units are assumed."
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "<p>Min-width of the dialog. If a number is provided, pixel units are assumed.</p>\n",
                    "line": 61,
                    "rawdescription": "\nMin-width of the dialog. If a number is provided, pixel units are assumed."
                },
                {
                    "name": "panelClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Custom class for the overlay pane.</p>\n",
                    "line": 43,
                    "rawdescription": "\nCustom class for the overlay pane."
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogPosition",
                    "optional": true,
                    "description": "<p>Position overrides.</p>\n",
                    "line": 73,
                    "rawdescription": "\nPosition overrides."
                },
                {
                    "name": "restoreFocus",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether the dialog should restore focus to the\npreviously-focused element, after it&#39;s closed.</p>\n",
                    "line": 94,
                    "rawdescription": "\n\nWhether the dialog should restore focus to the\npreviously-focused element, after it's closed.\n"
                },
                {
                    "name": "role",
                    "defaultValue": "'dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRole",
                    "optional": true,
                    "description": "<p>The ARIA role of the dialog element.</p>\n",
                    "line": 40,
                    "rawdescription": "\nThe ARIA role of the dialog element."
                },
                {
                    "name": "scrollStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScrollStrategy",
                    "optional": true,
                    "description": "<p>Scroll strategy to be used for the dialog.</p>\n",
                    "line": 97,
                    "rawdescription": "\nScroll strategy to be used for the dialog."
                },
                {
                    "name": "slideOut",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Whether dialog is a slide-out. Changes enter and exit animation, and adds\nclass <code>dialog-slide-out</code> to container</p>\n",
                    "line": 120,
                    "rawdescription": "\n\nWhether dialog is a slide-out. Changes enter and exit animation, and adds\nclass `dialog-slide-out` to container\n"
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": true,
                    "description": "<p>Where the attached component should live in Angular&#39;s <em>logical</em> component tree.\nThis affects what is available for injection and the change detection order for the\ncomponent instantiated inside of the dialog. This does not affect where the dialog\ncontent will be rendered.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nWhere the attached component should live in Angular's *logical* component tree.\nThis affects what is available for injection and the change detection order for the\ncomponent instantiated inside of the dialog. This does not affect where the dialog\ncontent will be rendered.\n"
                },
                {
                    "name": "width",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Width of the dialog.</p>\n",
                    "line": 55,
                    "rawdescription": "\nWidth of the dialog."
                }
            ],
            "description": "<p>Configuration for opening a modal dialog with the SdsDialog service.</p>\n",
            "rawdescription": "\n\nConfiguration for opening a modal dialog with the SdsDialog service.\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SdsDialogRef",
            "id": "class-SdsDialogRef-07046616d000bafc1b964555cb6e26d9",
            "file": "libs/packages/components/src/lib/dialog/dialog-ref.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {SdsDialogContainerComponent} from './dialog-container.component';\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the SdsDialog service.\n */\nexport class SdsDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: SdsDialogContainerComponent,\n    _location?: Location,\n    readonly id: string = `sds-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && (event.toState === 'enter' || event.toState === 'slideEnter')),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && (event.toState === 'exit' || event.toState === 'slideExit')),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    const strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_overlayRef",
                        "type": "OverlayRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_containerInstance",
                        "type": "SdsDialogContainerComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "`sds-dialog-${uniqueId++}`"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "_overlayRef",
                        "type": "OverlayRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_containerInstance",
                        "type": "SdsDialogContainerComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "`sds-dialog-${uniqueId++}`",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_afterClosed",
                    "defaultValue": "new Subject<R | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subject for notifying the user that the dialog has finished closing.</p>\n",
                    "line": 26,
                    "rawdescription": "\nSubject for notifying the user that the dialog has finished closing.",
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "_afterOpened",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subject for notifying the user that the dialog has finished opening.</p>\n",
                    "line": 23,
                    "rawdescription": "\nSubject for notifying the user that the dialog has finished opening.",
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "_beforeClosed",
                    "defaultValue": "new Subject<R | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subject for notifying the user that the dialog has started closing.</p>\n",
                    "line": 29,
                    "rawdescription": "\nSubject for notifying the user that the dialog has started closing.",
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "_containerInstance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsDialogContainerComponent",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "R | undefined",
                    "optional": false,
                    "description": "<p>Result to be passed to afterClosed.</p>\n",
                    "line": 32,
                    "rawdescription": "\nResult to be passed to afterClosed.",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "componentInstance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "<p>The instance of component opened into the dialog.</p>\n",
                    "line": 17,
                    "rawdescription": "\nThe instance of component opened into the dialog."
                },
                {
                    "name": "disableClose",
                    "defaultValue": "this._containerInstance._config.disableClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "optional": false,
                    "description": "<p>Whether the user is allowed to close the dialog.</p>\n",
                    "line": 20,
                    "rawdescription": "\nWhether the user is allowed to close the dialog."
                }
            ],
            "description": "<p>Reference to a dialog opened via the SdsDialog service.</p>\n",
            "rawdescription": "\n\nReference to a dialog opened via the SdsDialog service.\n",
            "methods": [
                {
                    "name": "_getPositionStrategy",
                    "args": [],
                    "optional": false,
                    "returnType": "GlobalPositionStrategy",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFetches the position strategy object from the overlay ref.",
                    "description": "<p>Fetches the position strategy object from the overlay ref.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "addPanelClass",
                    "args": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdd a CSS class or an array of classes to the overlay pane.",
                    "description": "<p>Add a CSS class or an array of classes to the overlay pane.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "afterClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R | undefined>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that is notified when the dialog is finished closing.\n",
                    "description": "<p>Gets an observable that is notified when the dialog is finished closing.</p>\n"
                },
                {
                    "name": "afterOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that is notified when the dialog is finished opening.\n",
                    "description": "<p>Gets an observable that is notified when the dialog is finished opening.</p>\n"
                },
                {
                    "name": "backdropClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MouseEvent>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that emits when the overlay's backdrop has been clicked.\n",
                    "description": "<p>Gets an observable that emits when the overlay&#39;s backdrop has been clicked.</p>\n"
                },
                {
                    "name": "beforeClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R | undefined>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that is notified when the dialog has started closing.\n",
                    "description": "<p>Gets an observable that is notified when the dialog has started closing.</p>\n"
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "dialogResult",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose the dialog.\n",
                    "description": "<p>Close the dialog.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2637,
                                "end": 2649,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "dialogResult"
                            },
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2631,
                                "end": 2636,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional result to return to the dialog opener.</p>\n"
                        }
                    ]
                },
                {
                    "name": "keydownEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<KeyboardEvent>",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that emits when keydown events are targeted on the overlay.\n",
                    "description": "<p>Gets an observable that emits when keydown events are targeted on the overlay.</p>\n"
                },
                {
                    "name": "removePanelClass",
                    "args": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRemove a CSS class or an array of classes from the overlay pane.",
                    "description": "<p>Remove a CSS class or an array of classes from the overlay pane.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePosition",
                    "args": [
                        {
                            "name": "position",
                            "type": "DialogPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the dialog's position.\n",
                    "description": "<p>Updates the dialog&#39;s position.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4152,
                                "end": 4160,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "position"
                            },
                            "type": "DialogPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4146,
                                "end": 4151,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>New dialog position.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateSize",
                    "args": [
                        {
                            "name": "width",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "height",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the dialog's width and height.\n",
                    "description": "<p>Updates the dialog&#39;s width and height.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4810,
                                "end": 4815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "width"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "pos": 4804,
                                "end": 4809,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>New width of the dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4853,
                                "end": 4859,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "height"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "pos": 4847,
                                "end": 4852,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>New height of the dialog.</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSHiercarchicalServiceSearchItem",
            "id": "class-SDSHiercarchicalServiceSearchItem-789c2f09fc917454d7d68b1fa43ff91c",
            "file": "libs/packages/components/src/lib/autocomplete-search/models/SDSAutocompleteServiceInterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nexport interface SDSAutocompleteServiceInterface {\n    /**\n     * \n     * @param searchValue \n     */\n    getDataByText(currentItems: number, searchValue?: string): Observable<SDSHiercarchicalServiceResult>;\n}\n\nexport interface SDSHiercarchicalServiceResult {\n    /**\n     * \n     */\n    items: object[];\n\n    /**\n     * \n     */\n    totalItems: number;\n}\n\nexport class SDSHiercarchicalServiceSearchItem {\n\n    /**\n     * \n     */\n    id: string;\n\n    /**\n     * \n     */\n    searchValue: string;\n\n    /**\n     * \n     */\n    // sort: Sort;\n\n    /**\n     * \n     */\n    currentItemCount: number;\n}\n\n",
            "properties": [
                {
                    "name": "currentItemCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "rawdescription": "\n\n\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "rawdescription": "\n\n\n"
                },
                {
                    "name": "searchValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "rawdescription": "\n\n\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSSelectedItemModel",
            "id": "class-SDSSelectedItemModel-26efaed51d41a8f1f286c184b063c419",
            "file": "libs/packages/components/src/lib/selected-result/models/sds-selectedItem.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SDSSelectedItemModel {\n  /**\n   * List of items selected\n   */\n  public items: object[];\n\n  constructor(items?: object[]) {\n    this.items = items ? [...items] : [];\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "items",
                        "type": "object[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "items",
                        "type": "object[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object[]",
                    "optional": false,
                    "description": "<p>List of items selected</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nList of items selected\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSSelectedItemModelHelper",
            "id": "class-SDSSelectedItemModelHelper-0fe1a23cc4fbe13701dd50729d3a4a9b",
            "file": "libs/packages/components/src/lib/selected-result/models/sds-selected-item-model-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SDSSelectedItemModel } from './sds-selectedItem.model';\n\nexport class SDSSelectedItemModelHelper {\n\n    /**\n      *  adds an item to the collection\n      * if selected mode is single it removes any existing items\n      * also checks to see if that item already exists\n      * keyfield is used to determine uniqueness of the item added\n      * @param itemToAdd \n      * @param keyField \n      * @param selectionMode \n      * @param items \n      */\n    public static addItem(itemToAdd: object, keyField: string, selectionMode: SelectionMode, model: SDSSelectedItemModel) {\n        if (!SDSSelectedItemModelHelper.containsItem(itemToAdd[keyField], keyField, model.items)) {\n            if (selectionMode === SelectionMode.SINGLE) {\n                SDSSelectedItemModelHelper.clearItems(model.items);\n            }\n            model.items.push(itemToAdd);\n        }\n    }\n\n    /**\n     * adds an array of items to the list and will not add duplicate items\n     * keyfield is used to determine uniqueness of the item added\n     * @param toAddItems \n     * @param keyField \n     * @param selectionMode \n     * @param items \n     */\n    public static addItems(toAddItems: object[], keyField: string, selectionMode: SelectionMode, model: SDSSelectedItemModel) {\n        for (let i = 0; i < toAddItems.length; i++) {\n            SDSSelectedItemModelHelper.addItem(toAddItems[i], keyField, selectionMode, model);\n        }\n    }\n\n    /**\n     * removes the item from the list\n     * keyfield is used to determine uniqueness of the item added\n     * @param item \n     * @param keyField \n     * @param items \n     */\n    public static removeItem(item: object, keyField: string, model: SDSSelectedItemModel) {\n        if (SDSSelectedItemModelHelper.containsItem(item[keyField], keyField, model.items)) {\n            model.items.splice(model.items.indexOf(item), 1)\n        }\n    }\n\n    /**\n     * checks to see if a particular item exists by the provied key\n     * keyfield is used to determine uniqueness of the item added\n     * @param key \n     * @param keyField \n     * @param items \n     */\n    public static containsItem(key: string, keyField: string, items: object[]): boolean {\n        let item = items.find(o => o[keyField] === key);\n        return item !== null && item !== undefined;\n    }\n\n    /**\n     * Clears the list of items\n     * @param items \n     */\n    public static clearItems(items: object[]) {\n        while (items.length > 0) {\n            items.pop();\n        }\n    }\n\n    /**\n     * updates an array of items to the list and will not add duplicate items\n     * keyfield is used to determine uniqueness of the item added\n     * @param selectedItems \n     * @param keyField \n     * @param selectionMode \n     * @param items \n     */\n    public static replaceItems(selectedItems: object[], keyField: string, selectionMode: SelectionMode, model: SDSSelectedItemModel) {\n        //Clears Old List\n        SDSSelectedItemModelHelper.clearItems(model.items);\n        //Adds new List\n        SDSSelectedItemModelHelper.addItems(selectedItems, keyField, selectionMode, model);\n    }\n}\n\nexport enum SelectionMode {\n    SINGLE, MULTIPLE\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "itemToAdd",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionMode",
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n adds an item to the collection\nif selected mode is single it removes any existing items\nalso checks to see if that item already exists\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p> adds an item to the collection\nif selected mode is single it removes any existing items\nalso checks to see if that item already exists\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 359,
                                "end": 368,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "itemToAdd"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 353,
                                "end": 358,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 385,
                                "end": 393,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 379,
                                "end": 384,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 410,
                                "end": 423,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "selectionMode"
                            },
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 404,
                                "end": 409,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addItems",
                    "args": [
                        {
                            "name": "toAddItems",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionMode",
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadds an array of items to the list and will not add duplicate items\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p>adds an array of items to the list and will not add duplicate items\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1041,
                                "end": 1051,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "toAddItems"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1035,
                                "end": 1040,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1067,
                                "end": 1075,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1061,
                                "end": 1066,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1091,
                                "end": 1104,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "selectionMode"
                            },
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1085,
                                "end": 1090,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears the list of items\n",
                    "description": "<p>Clears the list of items</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2352,
                                "end": 2357,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "items"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2346,
                                "end": 2351,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "containsItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "items",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks to see if a particular item exists by the provied key\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p>checks to see if a particular item exists by the provied key\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2034,
                                "end": 2037,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2028,
                                "end": 2033,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2053,
                                "end": 2061,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2047,
                                "end": 2052,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2077,
                                "end": 2082,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "items"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2071,
                                "end": 2076,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoves the item from the list\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p>removes the item from the list\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1555,
                                "end": 1559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1549,
                                "end": 1554,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1575,
                                "end": 1583,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1569,
                                "end": 1574,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replaceItems",
                    "args": [
                        {
                            "name": "selectedItems",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyField",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionMode",
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdates an array of items to the list and will not add duplicate items\nkeyfield is used to determine uniqueness of the item added\n",
                    "description": "<p>updates an array of items to the list and will not add duplicate items\nkeyfield is used to determine uniqueness of the item added</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2658,
                                "end": 2671,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "selectedItems"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2652,
                                "end": 2657,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2687,
                                "end": 2695,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "keyField"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2681,
                                "end": 2686,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2711,
                                "end": 2724,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "selectionMode"
                            },
                            "type": "SelectionMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2705,
                                "end": 2710,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "model",
                            "type": "SDSSelectedItemModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SDSSelectedResultConfiguration",
            "id": "class-SDSSelectedResultConfiguration-8cea9d3e4a71dad5ed79e10a5e35e1e4",
            "file": "libs/packages/components/src/lib/selected-result/models/SDSSelectedResultConfiguration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { SelectionMode } from './sds-selected-item-model-helper';\n\nexport class SDSSelectedResultConfiguration {\n\n  /**\n   * Used to describe the drop down (Text should match the label that will be supplied)\n   */\n  public labelText: string;\n\n  /**\n   *  This is the primary field used to identify each object in the results\n   */\n  public primaryKeyField: string;\n\n  /**\n   *  Property from supplied model used for the top part of the basic template\n   */\n  public primaryTextField: string;\n\n  /**\n   *  Property from supplied model used for the bottom part of the basic template\n   */\n  public secondaryTextField: string;\n\n  /**\n   * Mode of the model either allows a single item or multiple items\n   */\n  public selectionMode: SelectionMode = SelectionMode.SINGLE;\n\n  /** \n   * Modifiier function to change display of how primary text field is shown\n   * Allows adding prefix / suffix values when displaying tags\n   */\n  public displayModifierFn?: (displayValue: string, index?: number) => string;\n}\n",
            "properties": [
                {
                    "name": "displayModifierFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Modifiier function to change display of how primary text field is shown\nAllows adding prefix / suffix values when displaying tags</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nModifiier function to change display of how primary text field is shown\nAllows adding prefix / suffix values when displaying tags\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "labelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Used to describe the drop down (Text should match the label that will be supplied)</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nUsed to describe the drop down (Text should match the label that will be supplied)\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "primaryKeyField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> This is the primary field used to identify each object in the results</p>\n",
                    "line": 14,
                    "rawdescription": "\n\n This is the primary field used to identify each object in the results\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "primaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the top part of the basic template</p>\n",
                    "line": 19,
                    "rawdescription": "\n\n Property from supplied model used for the top part of the basic template\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "secondaryTextField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> Property from supplied model used for the bottom part of the basic template</p>\n",
                    "line": 24,
                    "rawdescription": "\n\n Property from supplied model used for the bottom part of the basic template\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "SelectionMode.SINGLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionMode",
                    "optional": false,
                    "description": "<p>Mode of the model either allows a single item or multiple items</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nMode of the model either allows a single item or multiple items\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SearchModel",
            "id": "class-SearchModel-c99f0414ab1510d4ed7080f5fda40447",
            "file": "libs/packages/components/src/lib/search-result-list/model/search-results.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class SearchModel {\n  results: any[];\n  metadata: {\n    messages: Message[] | TemplateRef<any>;\n  };\n}\nexport class Message {\n  type: string;\n  title: string;\n  message: string;\n  classes: string;\n  buttons: Button[];\n}\nexport class Button {\n  id: string;\n  text: string;\n  classes: string;\n  action: any;\n  ariaLabel?: string;\n}\n",
            "properties": [
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SearchSettings",
            "id": "class-SearchSettings-72bcc44c273e4e7b7e8665fb6faff583",
            "file": "libs/packages/components/src/lib/search/search.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nexport class SearchSettings {\n  public placeholder = 'Search';\n  public ariaLabel? = 'Search';\n  public size?: string;\n  public inputClass?: string;\n  public parentSelector?: string;\n  public id?: string;\n  public dropdown?: any = {\n    id: 'searchOptions',\n    placeholder: '-Select-',\n    options: [],\n    inverse: false,\n  };\n  public isSuffixSearchIcon?: boolean = false;\n}\n@Component({\n  selector: 'sds-search',\n  templateUrl: 'search.component.html',\n  styleUrls: ['search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SdsSearchComponent),\n      multi: true,\n    },\n  ],\n\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsSearchComponent implements AfterViewInit, ControlValueAccessor {\n  @ViewChild('inputEl', { read: ElementRef, static: false })\n  inputEl: ElementRef;\n  @ViewChild('selectEl', { read: ElementRef, static: false })\n  selectEl: ElementRef;\n  @ViewChild('buttonEl', { read: ElementRef, static: false })\n  buttonEl: ElementRef;\n\n  @Input() searchSettings: SearchSettings = new SearchSettings();\n  @Output() submit: EventEmitter<{ searchText: string }> = new EventEmitter(\n    null\n  );\n\n  model: any = {};\n  inputState = {\n    initial: { visible: undefined },\n    visible: undefined,\n  };\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  constructor(\n    private cd: ChangeDetectorRef,\n    private focusMonitor: FocusMonitor,\n    private viewportRuler: ViewportRuler\n  ) {}\n\n  ngAfterViewInit() {\n    this.inputState.initial.visible = this.isInputVisible();\n    this.inputState.visible = this.inputState.initial.visible;\n    this.viewportRuler.change(0).subscribe(() => {\n      this.inputState.initial.visible = this.isInputVisible();\n      this.inputState.visible = this.inputState.initial.visible;\n    });\n  }\n\n  hasDropdown() {\n    if (\n      this.searchSettings &&\n      this.searchSettings.dropdown &&\n      this.searchSettings.dropdown.options &&\n      this.searchSettings.dropdown.options.length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  handleClick(event) {\n    event.preventDefault();\n    if (!this.inputState.visible) {\n      this.setInputVisibleStyles();\n      this.focusMonitor.focusVia(this.inputEl, 'program');\n    } else if (this.inputEl || this.selectEl) {\n      this.submit.emit(this.model);\n    }\n  }\n\n  writeValueToModel() {\n    this.model.searchText = this.inputEl\n      ? this.inputEl.nativeElement.value\n      : '';\n    if (this.selectEl && this.selectEl.nativeElement.value) {\n      this.model.searchCategory = this.selectEl.nativeElement.value;\n    }\n    this._onChange(Object.assign({}, this.model));\n  }\n\n  writeValue(value: any) {\n    if (value && this.model !== value) {\n      this.model = value;\n      this.cd.markForCheck();\n    } else {\n      this.model = {};\n      this.cd.markForCheck();\n    }\n  }\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  isInputVisible(): boolean {\n    return this.inputEl.nativeElement.getBoundingClientRect().width\n      ? true\n      : false;\n  }\n\n  setInputVisibleStyles() {\n    const inputWidth = this.calculateInputWidth();\n    this.inputEl.nativeElement.style.setProperty(\n      'display',\n      'block',\n      'important'\n    );\n    this.inputEl.nativeElement.style.position = 'absolute';\n    this.inputEl.nativeElement.style.left = `-${inputWidth}px`;\n    this.inputEl.nativeElement.style.setProperty(\n      'width',\n      `${inputWidth}px`,\n      'important'\n    );\n    this.inputState.visible = true;\n  }\n\n  removeInputVisibleStyles() {\n    this.inputEl.nativeElement.style.display = '';\n    this.inputEl.nativeElement.style.position = '';\n    this.inputEl.nativeElement.style.left = '';\n    this.inputEl.nativeElement.style.width = '';\n    this.inputState.visible = false;\n  }\n\n  focusChange() {\n    if (!this.inputState.initial.visible) {\n      this.removeInputVisibleStyles();\n    }\n  }\n\n  calculateInputWidth(): number {\n    const leftPadding = 20;\n    const buttonElement = this.buttonEl.nativeElement;\n    const inputElement = this.inputEl.nativeElement;\n    const rightPosition = buttonElement.getBoundingClientRect().left;\n    const leftPosition = this.searchSettings.parentSelector\n      ? inputElement\n          .closest(this.searchSettings.parentSelector)\n          .getBoundingClientRect().left\n      : 0;\n    return Math.floor(rightPosition - leftPosition - leftPadding);\n  }\n  getClass() {\n    const cls =\n      this.searchSettings && this.searchSettings.size === 'large'\n        ? 'usa-search--big'\n        : 'usa-search--small';\n    return this.searchSettings.dropdown && this.searchSettings.dropdown.inverse\n      ? `${cls} sds-inverse`\n      : cls;\n  }\n  clearInput(ev) {\n    this.inputEl.nativeElement.value = '';\n    this.writeValueToModel();\n  }\n}\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dropdown",
                    "defaultValue": "{\n    id: 'searchOptions',\n    placeholder: '-Select-',\n    options: [],\n    inverse: false,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "inputClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isSuffixSearchIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "parentSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectionPanelModel",
            "id": "class-SelectionPanelModel-cf45e3c33740e59148cc1f28eb2c0908",
            "file": "libs/packages/components/src/lib/selection-panel/model/selection-panel.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SideNavigationModel } from '../../side-navigation/model/side-navigation-model';\n\nexport class SelectionPanelModel extends SideNavigationModel {\n  /**\n   * The mode selected impacts which version of the selection panel is used.\n   * 'SELECTION' mode will only display the top level navigation items and\n   * will not display children items. 'NAVIGATION' mode will display the children\n   * navigation items indented under its parent. If a mode is not passed in,\n   * then 'NAVIGATION' mode is assumed.\n   */\n  selectionMode?: 'SELECTION' | 'NAVIGATION';\n}",
            "properties": [
                {
                    "name": "selectionMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"SELECTION\" | \"NAVIGATION\"",
                    "optional": true,
                    "description": "<p>The mode selected impacts which version of the selection panel is used.\n&#39;SELECTION&#39; mode will only display the top level navigation items and\nwill not display children items. &#39;NAVIGATION&#39; mode will display the children\nnavigation items indented under its parent. If a mode is not passed in,\nthen &#39;NAVIGATION&#39; mode is assumed.</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nThe mode selected impacts which version of the selection panel is used.\n'SELECTION' mode will only display the top level navigation items and\nwill not display children items. 'NAVIGATION' mode will display the children\nnavigation items indented under its parent. If a mode is not passed in,\nthen 'NAVIGATION' mode is assumed.\n"
                },
                {
                    "name": "navigationLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationLink[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "rawdescription": "\n\n\n",
                    "inheritance": {
                        "file": "SideNavigationModel"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "SideNavigationModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SideNavigationModel",
            "id": "class-SideNavigationModel-295cd59da07c4ec4067ea8a525ff10bf",
            "file": "libs/packages/components/src/lib/side-navigation/model/side-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { QueryParamsHandling } from '@angular/router';\nimport { INavigationLink, NavigationMode, Selectable } from '../../common-navigation/common-navigation-model';\n\nexport class SideNavigationModel {\n\n    /**\n     * \n     */\n    navigationLinks: NavigationLink[];\n}\n\n\nexport class NavigationLink implements Selectable, INavigationLink {\n\n    /**\n     * Internal Angualr Routes, External HREF, EVENT: event on parent component\n     */\n    mode: NavigationMode;\n\n    /**\n     * Text to be displayed in the link or button\n     */\n    text: string;\n\n    /**\n     * Navigation Route \n     */\n    route: string;\n\n    /**\n     * List of child navigation items that will show when no route is provieded\n     */\n    children?: NavigationLink[];\n\n    /**\n     * Identifier for the item when search for selected \n     */\n    id: string;\n\n    /**\n     * Status of if the item is selected \n     */\n    selected?: boolean;\n\n\n    /**\n     * Query string paramaters supporeted with external and internal links\n     * ex. { 'name': 'value',...}\n     */\n    queryParams?: {\n        [k: string]: any;\n    }\n\n    queryParamsHandling?: QueryParamsHandling;\n}\n\n\n\n\n",
            "properties": [
                {
                    "name": "navigationLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationLink[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "rawdescription": "\n\n\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "CollapseDirective",
            "id": "directive-CollapseDirective-71f90cfbf9a60a80d4613d3df6cb8882",
            "file": "libs/packages/components/src/lib/collapse/collapse.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\n\n@Directive({\n  selector: '[sdsCollapse]',\n  exportAs: 'sdsCollapse',\n  host: {'[class.display-none]':'collapsed'}\n})\nexport class CollapseDirective {\n\n  @Input('sdsCollapse') collapsed: boolean = true;\n\n  constructor() {\n  }\n\n}\n",
            "selector": "[sdsCollapse]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "sdsCollapse",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            }
        },
        {
            "name": "ExternalLinkDirective",
            "id": "directive-ExternalLinkDirective-9519744497344088b0f99fceb62cbbd4",
            "file": "libs/packages/components/src/lib/external-link/external-link.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  HostBinding,\n  ElementRef,\n  PLATFORM_ID,\n  Inject,\n  Input,\n  ViewContainerRef,\n  OnChanges,\n  AfterViewInit,\n} from '@angular/core';\n\nimport { isPlatformBrowser } from '@angular/common';\n\n@Directive({\n  selector: 'a[href]',\n})\nexport class ExternalLinkDirective implements OnChanges {\n  @HostBinding('attr.rel') relAttr = '';\n  @HostBinding('attr.target') targetAttr = '';\n  @HostBinding('attr.href') hrefAttr = '';\n\n  @Input() href: string;\n  @Input() target: string;\n\n  @Input() public hideIcon: boolean = false;\n\n  /** Treat these domains as internal links */\n  private internalLinks = [\n    /** 'fsd.gov' - Removed until fsd.gov contains proper route back to sam.gov */\n  ];\n\n  private readonly emailLinkKeyword = 'mailto';\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: string,\n    private el: ElementRef,\n    private vc: ViewContainerRef\n  ) { }\n\n  public ngOnChanges() {\n    this.hrefAttr = this.href;\n    this.targetAttr = this.target;\n\n    if (!this.isExternalLink) {\n      return;\n    }\n\n    this.relAttr = 'noopener';\n    this.targetAttr = '_blank';\n\n    const ariaLabel = this._getAriaLabel();\n    (this.el.nativeElement as HTMLAnchorElement).setAttribute('aria-label', ariaLabel);\n\n    if (!this.hideIcon) {\n      this.createIcon();\n    }\n  }\n\n  /**\n   * Appends indication that the link will open in a separate window to the aria label.\n   * If link does not contain any aria label, then an aria label will be generated using either the inner text\n   *  or href value based on whether the anchor element contains children elements or not\n   * If link contains aria label, but the label does not contain key words 'new' or 'window',\n   *  then the text 'opens in a new window' will be appended to the end of the aria label\n   * If link contains aria label as well as the key words 'new' and 'window', then aria label will\n   *  be kept as is\n   */\n  private _getAriaLabel(): string {\n\n    const anchorElement = this.el.nativeElement as HTMLAnchorElement\n    const currentAriaLabel: string = anchorElement.getAttribute('aria-label');\n\n    /** No aria label, attach a default one using inner text if anchor does not contain additional\n     * html element as children. If anchor does contain additional html element as children, then use href \n     */\n    if (!currentAriaLabel || currentAriaLabel.length === 0) {\n      let label = anchorElement.firstElementChild ? this.href : anchorElement.innerText;\n      label = label.trim();\n      return `Open ${label} in a new window`;\n    }\n\n    const lowerCaseAriaLabel = currentAriaLabel.toLowerCase();\n\n    /** Aria label already indicates link will open in a new window, set to defined aria label */\n    if (lowerCaseAriaLabel.indexOf('new') != -1 && lowerCaseAriaLabel.indexOf('window') != -1) {\n      return currentAriaLabel;\n    }\n\n    /** Aria label is attached, but does not indicate link will open in new window. \n       Add opens in new window keyword to aria label */\n    return `${currentAriaLabel} - opens in a new window`;\n  }\n\n  private get isExternalLink(): boolean {\n    const link = this.href\n      .replace(/^https?:\\/\\//, '')\n      .replace(/^www\\./, '')\n      .split('/')[0];\n    return (\n      isPlatformBrowser(this.platformId) &&\n      !link.includes(location.hostname) &&\n      link.indexOf(this.emailLinkKeyword) !== 0  &&\n      !this.internalLinks.includes(link)\n    );\n  }\n  private createIcon() {\n    // tslint:disable-next-line:no-unused-expression\n    this.vc.constructor.name === 'ViewContainerRef_';\n    const spanElement = document.createElement('span');\n    spanElement.classList.add('margin-left-1px');\n    spanElement.classList.add('usa-link--external');\n    spanElement.classList.add('font-body-md');\n    this.el.nativeElement.appendChild(spanElement);\n  }\n}\n",
            "selector": "a[href]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "hideIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.href",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "attr.rel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "attr.target",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "emailLinkKeyword",
                    "defaultValue": "'mailto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "hrefAttr",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.href'"
                        }
                    ]
                },
                {
                    "name": "internalLinks",
                    "defaultValue": "[\n    /** 'fsd.gov' - Removed until fsd.gov contains proper route back to sam.gov */\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Treat these domains as internal links</p>\n",
                    "line": 29,
                    "rawdescription": "\nTreat these domains as internal links",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "relAttr",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.rel'"
                        }
                    ]
                },
                {
                    "name": "targetAttr",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.target'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getAriaLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAppends indication that the link will open in a separate window to the aria label.\nIf link does not contain any aria label, then an aria label will be generated using either the inner text\n or href value based on whether the anchor element contains children elements or not\nIf link contains aria label, but the label does not contain key words 'new' or 'window',\n then the text 'opens in a new window' will be appended to the end of the aria label\nIf link contains aria label as well as the key words 'new' and 'window', then aria label will\n be kept as is\n",
                    "description": "<p>Appends indication that the link will open in a separate window to the aria label.\nIf link does not contain any aria label, then an aria label will be generated using either the inner text\n or href value based on whether the anchor element contains children elements or not\nIf link contains aria label, but the label does not contain key words &#39;new&#39; or &#39;window&#39;,\n then the text &#39;opens in a new window&#39; will be appended to the end of the aria label\nIf link contains aria label as well as the key words &#39;new&#39; and &#39;window&#39;, then aria label will\n be kept as is</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "createIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vc",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vc",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isExternalLink": {
                    "name": "isExternalLink",
                    "getSignature": {
                        "name": "isExternalLink",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 95
                    }
                }
            }
        },
        {
            "name": "SdsAccordionDirective",
            "id": "directive-SdsAccordionDirective-f472d2adde26141d0d31b2a7e5aa5887",
            "file": "libs/packages/components/src/lib/accordion/accordion.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit\n} from \"@angular/core\";\n\nimport { CdkAccordion } from \"@angular/cdk/accordion\";\nimport { FocusKeyManager } from \"@angular/cdk/a11y\";\nimport { HOME, END } from \"@angular/cdk/keycodes\";\nimport {\n  SDS_ACCORDION,\n  SdsAccordionBase,\n  SdsAccordionDisplayMode\n} from \"./accordion-base\";\nimport { SdsAccordionItemHeaderComponent } from \"./accordion-item-header.component\";\n\n@Directive({\n  selector: \"sds-accordion\",\n  exportAs: \"sdsAccordion\",\n  inputs: [\"multi\"],\n  providers: [\n    {\n      provide: SDS_ACCORDION,\n      useExisting: SdsAccordionDirective\n    }\n  ],\n  host: {\n    'class': 'sds-accordion',\n    '[class.sds-accordion--basic]': 'displayMode === \"basic\"',\n  }\n})\nexport class SdsAccordionDirective extends CdkAccordion\n  implements SdsAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<SdsAccordionItemHeaderComponent>;\n\n  @ContentChildren(SdsAccordionItemHeaderComponent, { descendants: true })\n  _headers: QueryList<SdsAccordionItemHeaderComponent>;\n\n  @Input() displayMode: SdsAccordionDisplayMode = \"default\";\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the item headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const { keyCode } = event;\n    if (keyCode === HOME) {\n      this._keyManager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: SdsAccordionItemHeaderComponent) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n",
            "selector": "sds-accordion",
            "providers": [
                {
                    "name": "{\n    provide: SDS_ACCORDION, useExisting: SdsAccordionDirective\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "displayMode",
                    "defaultValue": "\"default\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "SdsAccordionDisplayMode"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SdsAccordionItemHeaderComponent>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SdsAccordionItemHeaderComponent, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "_keyManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusKeyManager<SdsAccordionItemHeaderComponent>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_handleHeaderFocus",
                    "args": [
                        {
                            "name": "header",
                            "type": "SdsAccordionItemHeaderComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "header",
                            "type": "SdsAccordionItemHeaderComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_handleHeaderKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles keyboard events coming in from the item headers.",
                    "description": "<p>Handles keyboard events coming in from the item headers.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "SdsAccordionBase",
                "AfterContentInit"
            ]
        },
        {
            "name": "SdsAccordionItemContentDirective",
            "id": "directive-SdsAccordionItemContentDirective-49da46ff547e3e35e1e0080a0699f754",
            "file": "libs/packages/components/src/lib/accordion/accordion-item-content.directive.ts",
            "type": "directive",
            "description": "<p>Accordion Item content that will be rendered lazily\nafter the accordion item is opened for the first time.</p>\n",
            "rawdescription": "\n\nAccordion Item content that will be rendered lazily\nafter the accordion item is opened for the first time.\n",
            "sourceCode": "import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Accordion Item content that will be rendered lazily\n * after the accordion item is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[sdsAccordionItemContent]'\n})\nexport class SdsAccordionItemContentDirective {\n  constructor(public _template: TemplateRef<any>) {}\n}\n",
            "selector": "ng-template[sdsAccordionItemContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SDSClickOutsideDirective",
            "id": "directive-SDSClickOutsideDirective-3330dfea755a01908dc52dcf97422719",
            "file": "libs/packages/components/src/lib/click-outside/click-outside.directive.ts",
            "type": "directive",
            "description": "<p>The <sam-click-outside> directive can detect whether a click is made inside\nthe target</p>\n",
            "rawdescription": "\n\nThe <sam-click-outside> directive can detect whether a click is made inside\nthe target\n",
            "sourceCode": "import {\n  Directive, ElementRef,\n  Output, EventEmitter,\n  HostListener\n} from '@angular/core';\n\n/**\n * The <sam-click-outside> directive can detect whether a click is made inside \n * the target\n */\n@Directive({\n  selector: '[sds-click-outside]'\n})\nexport class SDSClickOutsideDirective {\n  /**\n  * Event emitted when clicked outside the target\n  */\n  @Output() clickOutside = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  @HostListener('document:click', ['$event.target'])\n  public onClick(targetElement) {\n    const clickedInside =\n      this._elementRef.nativeElement.contains(targetElement);\n    if (!clickedInside) {\n      this.clickOutside.emit(undefined);\n    }\n  }\n}\n",
            "selector": "[sds-click-outside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when clicked outside the target\n",
                    "description": "<p>Event emitted when clicked outside the target</p>\n",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetElement",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsDialogActionsDirective",
            "id": "directive-SdsDialogActionsDirective-cb1ece29bdc266c0ee53de3641b696c6",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>Container for the bottom action buttons in a dialog.\nStays fixed to the bottom when scrolling.</p>\n",
            "rawdescription": "\n\nContainer for the bottom action buttons in a dialog.\nStays fixed to the bottom when scrolling.\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {SdsDialogService} from './dialog';\nimport {SdsDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-subtitle]': 'true'}\n})\nexport class SdsDialogSubtitleDirective {}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-content]': 'true'}\n})\nexport class SdsDialogContentDirective {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-actions]': 'true'}\n})\nexport class SdsDialogActionsDirective {}\n\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n",
            "selector": "[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "SdsDialogCloseDirective",
            "id": "directive-SdsDialogCloseDirective-cb1ece29bdc266c0ee53de3641b696c6",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>Button that will close the current dialog.</p>\n",
            "rawdescription": "\n\nButton that will close the current dialog.\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {SdsDialogService} from './dialog';\nimport {SdsDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-subtitle]': 'true'}\n})\nexport class SdsDialogSubtitleDirective {}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-content]': 'true'}\n})\nexport class SdsDialogContentDirective {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-actions]': 'true'}\n})\nexport class SdsDialogActionsDirective {}\n\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n",
            "selector": "button[sds-dialog-close], button[sdsDialogClose]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "aria-label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Screenreader label for the button.",
                    "description": "<p>Screenreader label for the button.</p>\n",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "sds-dialog-close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Dialog close input.",
                    "description": "<p>Dialog close input.</p>\n",
                    "line": 34,
                    "type": "any"
                },
                {
                    "name": "sdsDialogClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "SdsDialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_dialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "SdsDialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsDialogContentDirective",
            "id": "directive-SdsDialogContentDirective-cb1ece29bdc266c0ee53de3641b696c6",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>Scrollable content container of a dialog.</p>\n",
            "rawdescription": "\n\nScrollable content container of a dialog.\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {SdsDialogService} from './dialog';\nimport {SdsDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-subtitle]': 'true'}\n})\nexport class SdsDialogSubtitleDirective {}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-content]': 'true'}\n})\nexport class SdsDialogContentDirective {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-actions]': 'true'}\n})\nexport class SdsDialogActionsDirective {}\n\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n",
            "selector": "[sds-dialog-content], sds-dialog-content, [sdsDialogContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "SdsDialogSubtitleDirective",
            "id": "directive-SdsDialogSubtitleDirective-cb1ece29bdc266c0ee53de3641b696c6",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>SubTitle of a dialog element</p>\n",
            "rawdescription": "\n\nSubTitle of a dialog element\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {SdsDialogService} from './dialog';\nimport {SdsDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-subtitle]': 'true'}\n})\nexport class SdsDialogSubtitleDirective {}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-content]': 'true'}\n})\nexport class SdsDialogContentDirective {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-actions]': 'true'}\n})\nexport class SdsDialogActionsDirective {}\n\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n",
            "selector": "[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "SdsDialogTitleDirective",
            "id": "directive-SdsDialogTitleDirective-cb1ece29bdc266c0ee53de3641b696c6",
            "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
            "type": "directive",
            "description": "<p>Title of a dialog element. Stays fixed to the top of the dialog when scrolling.</p>\n",
            "rawdescription": "\n\nTitle of a dialog element. Stays fixed to the top of the dialog when scrolling.\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {SdsDialogService} from './dialog';\nimport {SdsDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[sds-dialog-close], button[sdsDialogClose]`,\n  exportAs: 'sdsDialogClose',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class SdsDialogCloseDirective implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('sds-dialog-close') dialogResult: any;\n\n  @Input('sdsDialogClose') _sdsDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[sds-dialog-title], [sdsDialogTitle]',\n  exportAs: 'sdsDialogTitle',\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    '[class.sds-dialog-title]': 'true',\n    '[id]': 'id',\n  },\n})\nexport class SdsDialogTitleDirective implements OnInit {\n  @Input() id = `sds-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: SdsDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: SdsDialogService) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * SubTitle of a dialog element\n */\n@Directive({\n  selector: `[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-subtitle]': 'true'}\n})\nexport class SdsDialogSubtitleDirective {}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[sds-dialog-content], sds-dialog-content, [sdsDialogContent]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-content]': 'true'}\n})\nexport class SdsDialogContentDirective {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]`,\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {'[class.sds-dialog-actions]': 'true'}\n})\nexport class SdsDialogActionsDirective {}\n\n\n/**\n * Finds the closest SdsDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: SdsDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('sds-dialog__container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n",
            "selector": "[sds-dialog-title], [sdsDialogTitle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "`sds-dialog-title-${dialogElementUid++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialogRef",
                        "type": "SdsDialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_dialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "_dialogRef",
                        "type": "SdsDialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dialog",
                        "type": "SdsDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsMenuTriggerForDirective",
            "id": "directive-SdsMenuTriggerForDirective-97cc0e5db4e572845050eea1e3279cf4",
            "file": "libs/packages/components/src/lib/menu/menu-trigger.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  ViewContainerRef,\n  HostBinding,\n  HostListener,\n} from '@angular/core';\nimport {\n  FocusMonitor,\n  FocusOrigin,\n  isFakeMousedownFromScreenReader\n} from '@angular/cdk/a11y';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { merge, Subscription } from 'rxjs';\nimport {\n  SdsMenuInterface,\n  SdsMenuComponent,\n  MenuPositionX,\n  MenuPositionY\n} from './menu.component';\n\n@Directive({\n  selector: '[sdsMenuTriggerFor]'\n})\nexport class SdsMenuTriggerForDirective implements OnDestroy {\n  /** ARIA haspopup for the menu trigger. */\n  @HostBinding('attr.aria-haspopup') ariaHasPopup = true;\n\n  /** ARIA expanded for the menu trigger. */\n  @HostBinding('attr.aria-expanded')\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** Holds the menu instance */\n  private _menu: SdsMenuInterface;\n\n  /** Holds value for menuOpen variable */\n  private _menuOpen = false;\n\n  /** CDK Portal for menu panel */\n  private _portal: TemplatePortal;\n\n  /** PortalOutlet */\n  private _overlayRef: OverlayRef | null = null;\n\n  /** Tracks input type  */\n  private _openedBy: 'mouse' | 'touch' | null = null;\n\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('sdsMenuTriggerFor')\n  get menu() {\n    return this._menu;\n  }\n  set menu(menu: SdsMenuInterface) {\n    if (menu === this._menu) {\n      return;\n    }\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.closed.asObservable().subscribe(() => {\n        this._destroyMenu();\n      });\n    }\n  }\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Handles mouse presses on the trigger. */\n  @HostListener('mousedown', ['$event'])\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n    }\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  @HostListener('click')\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  constructor(\n    private _overlay: Overlay,\n    private _element: ElementRef<HTMLElement>,\n    private _viewContainerRef: ViewContainerRef,\n    private _focusMonitor: FocusMonitor\n  ) {\n    // On touch devices set _openedBy to 'touch'\n    _element.nativeElement.addEventListener(\n      'touchstart',\n      () => (this._openedBy = 'touch'),\n      normalizePassiveListenerOptions({ passive: true })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener(\n      'touchstart',\n      () => (this._openedBy = 'touch'),\n      normalizePassiveListenerOptions({ passive: true })\n    );\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n    this._setPosition(\n      overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy\n    );\n    overlayRef.attach(this._getPortal());\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(\n      () => this.closeMenu()\n    );\n    this._initMenu();\n    if (this.menu instanceof SdsMenuComponent) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.closed.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus(origin: FocusOrigin = 'program'): void {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  /** This method sets the menu state to open and focuses the first item */\n  private _initMenu(): void {\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** sets open state */\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n  }\n\n  /**\n   * This method resets the menu when it's closed,\n   * most importantly restoring focus to the menu trigger\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    if (!this._openedBy) {\n      this.focus();\n    } else {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    this._closingActionsSubscription.unsubscribe();\n\n    this._overlayRef.detach();\n\n    if (this.menu instanceof SdsMenuComponent) {\n      this.menu._resetAnimation();\n      this._resetMenu();\n    }\n    \n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(\n        config.positionStrategy as FlexibleConnectedPositionStrategy\n      );\n      this._overlayRef = this._overlay.create(config);\n      this._overlayRef.keydownEvents().subscribe();\n    }\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay\n        .position()\n        .flexibleConnectedTo(this._element)\n        .withLockedPosition()\n        .withTransformOriginOn('.sds-overlay'),\n      hasBackdrop: true,\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._overlay.scrollStrategies.reposition()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position.\n   */\n  private _subscribeToPositions(\n    position: FlexibleConnectedPositionStrategy\n  ): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX =\n        change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY =\n        change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const [originX, originFallbackX]: HorizontalConnectionPos[] =\n      this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n      this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    const [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    const offsetY = 0;\n\n    if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    // Positions from most to least desirable\n    positionStrategy.withPositions([\n      { originX, originY, overlayX, overlayY, offsetY },\n      {\n        originX: originFallbackX,\n        originY,\n        overlayX: overlayFallbackX,\n        overlayY,\n        offsetY\n      },\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef.backdropClick();\n    const detachments = this._overlayRef.detachments();\n    return merge(backdrop, detachments);\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(\n        this.menu.templateRef,\n        this._viewContainerRef\n      );\n    }\n    return this._portal;\n  }\n}\n",
            "selector": "[sdsMenuTriggerFor]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "sdsMenuTriggerFor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "References the menu instance that the trigger is associated with.",
                    "description": "<p>References the menu instance that the trigger is associated with.</p>\n",
                    "line": 68,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "menuClosed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted when the associated menu is closed.",
                    "description": "<p>Event emitted when the associated menu is closed.</p>\n",
                    "line": 89,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "menuOpened",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted when the associated menu is opened.",
                    "description": "<p>Event emitted when the associated menu is opened.</p>\n",
                    "line": 86,
                    "type": "EventEmitter<void>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.aria-expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "ARIA expanded for the menu trigger.",
                    "description": "<p>ARIA expanded for the menu trigger.</p>\n",
                    "line": 44,
                    "type": "boolean"
                },
                {
                    "name": "attr.aria-haspopup",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "ARIA haspopup for the menu trigger.",
                    "description": "<p>ARIA haspopup for the menu trigger.</p>\n",
                    "line": 40,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles the menu between the open and closed states.",
                    "description": "<p>Toggles the menu between the open and closed states.</p>\n",
                    "line": 103
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles mouse presses on the trigger.",
                    "description": "<p>Handles mouse presses on the trigger.</p>\n",
                    "line": 93
                }
            ],
            "propertiesClass": [
                {
                    "name": "_closingActionsSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsMenuInterface",
                    "optional": false,
                    "description": "<p>Holds the menu instance</p>\n",
                    "line": 49,
                    "rawdescription": "\nHolds the menu instance",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_menuCloseSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_menuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Holds value for menuOpen variable</p>\n",
                    "line": 52,
                    "rawdescription": "\nHolds value for menuOpen variable",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_openedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"mouse\" | \"touch\" | null",
                    "optional": false,
                    "description": "<p>Tracks input type</p>\n",
                    "line": 61,
                    "rawdescription": "\nTracks input type",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_overlayRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "<p>PortalOutlet</p>\n",
                    "line": 58,
                    "rawdescription": "\nPortalOutlet",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_portal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplatePortal",
                    "optional": false,
                    "description": "<p>CDK Portal for menu panel</p>\n",
                    "line": 55,
                    "rawdescription": "\nCDK Portal for menu panel",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ariaHasPopup",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>ARIA haspopup for the menu trigger.</p>\n",
                    "line": 40,
                    "rawdescription": "\nARIA haspopup for the menu trigger.",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.aria-haspopup'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method creates the overlay from the provided menu's template and saves its\nOverlayRef so that it can be attached to the DOM when openMenu is called.\n",
                    "description": "<p>This method creates the overlay from the provided menu&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openMenu is called.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_destroyMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCloses the menu and does the necessary cleanup.",
                    "description": "<p>Closes the menu and does the necessary cleanup.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method builds the configuration object needed to create the overlay, the OverlayState.\n",
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayState.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 6181,
                                "end": 6188,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ]
                },
                {
                    "name": "_getPortal",
                    "args": [],
                    "optional": false,
                    "returnType": "TemplatePortal",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets the portal that should be attached to the overlay.",
                    "description": "<p>Gets the portal that should be attached to the overlay.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_handleMousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles mouse presses on the trigger.",
                    "description": "<p>Handles mouse presses on the trigger.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_initMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThis method sets the menu state to open and focuses the first item",
                    "description": "<p>This method sets the menu state to open and focuses the first item</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_menuClosingActions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReturns a stream that emits whenever an action that should close the menu occurs.",
                    "description": "<p>Returns a stream that emits whenever an action that should close the menu occurs.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_resetMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method resets the menu when it's closed,\nmost importantly restoring focus to the menu trigger\n",
                    "description": "<p>This method resets the menu when it&#39;s closed,\nmost importantly restoring focus to the menu trigger</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_setIsMenuOpen",
                    "args": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nsets open state",
                    "description": "<p>sets open state</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setPosition",
                    "args": [
                        {
                            "name": "positionStrategy",
                            "type": "FlexibleConnectedPositionStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the appropriate positions on a position strategy\nso the overlay connects with the trigger correctly.\n",
                    "description": "<p>Sets the appropriate positions on a position strategy\nso the overlay connects with the trigger correctly.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "positionStrategy",
                            "type": "FlexibleConnectedPositionStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_subscribeToPositions",
                    "args": [
                        {
                            "name": "position",
                            "type": "FlexibleConnectedPositionStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListens to changes in the position of the overlay and sets the correct classes\non the menu based on the new position.\n",
                    "description": "<p>Listens to changes in the position of the overlay and sets the correct classes\non the menu based on the new position.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "FlexibleConnectedPositionStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCloses the menu.",
                    "description": "<p>Closes the menu.</p>\n"
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFocuses the menu trigger.",
                    "description": "<p>Focuses the menu trigger.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpens the menu.",
                    "description": "<p>Opens the menu.</p>\n"
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles the menu between the open and closed states.",
                    "description": "<p>Toggles the menu between the open and closed states.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 105,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "menuOpen": {
                    "name": "menuOpen",
                    "getSignature": {
                        "name": "menuOpen",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44,
                        "rawdescription": "ARIA expanded for the menu trigger.",
                        "description": "<p>ARIA expanded for the menu trigger.</p>\n"
                    }
                },
                "menu": {
                    "name": "menu",
                    "setSignature": {
                        "name": "menu",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "menu",
                                "type": "SdsMenuInterface",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "menu",
                                "type": "SdsMenuInterface",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "menu",
                        "type": "",
                        "returnType": "",
                        "line": 68,
                        "rawdescription": "References the menu instance that the trigger is associated with.",
                        "description": "<p>References the menu instance that the trigger is associated with.</p>\n"
                    }
                }
            }
        },
        {
            "name": "SdsObserveWidthDirective",
            "id": "directive-SdsObserveWidthDirective-7148f6c2b90a7c6061b4c4ff44090e81",
            "file": "libs/packages/components/src/lib/observers/observe-width.directive.ts",
            "type": "directive",
            "description": "<p>Directive that triggers a callback whenever the width of\nits associated element has changed.</p>\n",
            "rawdescription": "\n\nDirective that triggers a callback whenever the width of\nits associated element has changed.\n",
            "sourceCode": "import {\n  Directive,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport { startWith } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n/**\n * Directive that triggers a callback whenever the width of\n * its associated element has changed.\n */\n@Directive({ selector: '[sdsObserveWidth]' })\nexport class SdsObserveWidthDirective implements OnInit, OnDestroy {\n  /** Event emitted for each change in the element's width. */\n  @Output('sdsObserveWidth') elementWidth = new EventEmitter<number>();\n\n  /** Subscription to window resize stream */\n  windowResize$: Subscription;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private viewportRuler: ViewportRuler\n  ) {}\n\n  ngOnInit() {\n    this.windowResize$ = this.viewportRuler\n      .change(0)\n      .pipe(startWith(this._getElementWidth()))\n      .subscribe(() => this._emitEvent());\n  }\n\n  ngOnDestroy() {\n    this.windowResize$.unsubscribe();\n  }\n\n  _emitEvent() {\n    const width = this._getElementWidth();\n    this.elementWidth.emit(width);\n  }\n\n  _getElementWidth(): number {\n    return this._elementRef.nativeElement.offsetWidth;\n  }\n}\n",
            "selector": "[sdsObserveWidth]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "sdsObserveWidth",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted for each change in the element's width.",
                    "description": "<p>Event emitted for each change in the element&#39;s width.</p>\n",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "windowResize$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>Subscription to window resize stream</p>\n",
                    "line": 23,
                    "rawdescription": "\nSubscription to window resize stream"
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "_getElementWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsPopoverDirective",
            "id": "directive-SdsPopoverDirective-2a37adf5518d4df2d746e84e8ccfed8a",
            "file": "libs/packages/components/src/lib/popover/popover.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2, TemplateRef } from '@angular/core';\nimport { debounce } from './debounce.decorator';\n\n@Directive({\n  selector: '[sdsPopover]',\n  exportAs: 'sdsPopover'\n})\nexport class SdsPopoverDirective implements AfterViewInit {\n  private _sdsPopoverContent: string | TemplateRef<any> | HTMLParagraphElement;\n  private _sdsPopoverTitle: string | TemplateRef<any> | HTMLParagraphElement;\n\n  sdsPopoverDiv: HTMLElement;\n  popoverVisible= false;\n  popoverDivId: string;\n\n  @HostListener('click', ['$event']) onClick($event: MouseEvent){\n    const clickedOnContent = this.sdsPopoverDiv.contains($event.target as any);\n    if (clickedOnContent && !this.closeOnContentClick) {\n      return;\n    }\n    \n    this.clickEvent();\n  }\n\n  @HostListener('document:click', ['$event'])\n  clickout($event: MouseEvent) {\n    if (!this.closeOnClickOutside || !this.popoverVisible) {\n      return;\n    }\n    \n    const clickedInElement = this.el.nativeElement.contains($event.target);\n    if (!clickedInElement) {\n      this.clickEvent();\n    }\n  }\n\n  /**\n   * Adding listener for keyup.enter to ensure that user can activate popover with keyboard\n   */\n  @HostListener('keyup.enter', ['$event']) onKeyUp($event: KeyboardEvent){\n    if (!this.closeOnContentClick && this.sdsPopoverDiv.contains($event.target as any)) {\n      return;\n    }\n    this.clickEvent();\n  }\n\n  @Input()\n  position: string = 'top';\n\n  @Input() closeOnContentClick = true;\n\n  @Input() closeOnClickOutside = false;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.addClass(this.el.nativeElement, 'sds-popover');\n\n    this.sdsPopoverDiv = document.createElement('div');\n  }\n\n  ngAfterViewInit() {\n    // Generating semi-random id for use with aria-describedby\n    this.popoverDivId = this.el.nativeElement.id ? `${this.el.nativeElement.id}-popover` : `${this.el.nativeElement.tagName}-${this.el.nativeElement.offsetTop}-${this.el.nativeElement.offsetWidth}-popover`\n    this.sdsPopoverDiv.id = this.popoverDivId;\n\n    this.renderer.addClass(this.sdsPopoverDiv, 'sds-popover__content');\n    this.renderer.addClass(this.sdsPopoverDiv, 'tooltip')\n    this.renderer.addClass(this.sdsPopoverDiv, 'out');\n    this.renderer.setAttribute(this.sdsPopoverDiv, 'data-position', this.position)\n    this.renderer.setAttribute(this.sdsPopoverDiv, 'aria-hidden', 'true');\n    this.renderer.addClass(this.sdsPopoverDiv, this.position);\n\n    // Add title section and divider if title included\n    if(this._sdsPopoverTitle){\n      this.renderer.appendChild(this.sdsPopoverDiv, this._sdsPopoverTitle);\n\n      const divider = document.createElement('hr');\n      this.renderer.addClass(divider, 'divider');\n      this.renderer.appendChild(this.sdsPopoverDiv, divider);\n    }\n\n    this.renderer.appendChild(this.sdsPopoverDiv, this._sdsPopoverContent);\n\n    this.renderer.setAttribute(this.el.nativeElement, 'role', 'button');\n    this.renderer.setAttribute(this.el.nativeElement, 'aria-expanded', 'false');\n    this.renderer.setAttribute(this.el.nativeElement, 'aria-haspopup', 'dialog');\n\n    this.renderer.appendChild(this.el.nativeElement, this.sdsPopoverDiv);\n  }\n\n  @Input()\n  set sdsPopover(value: string | TemplateRef<any> | HTMLParagraphElement){\n    this._sdsPopoverContent = this.handlePopoverSection(value, 'content')\n  }\n\n  get sdsPopover(): string | TemplateRef<any> | HTMLParagraphElement{\n    return this._sdsPopoverContent;\n  }\n\n  @Input()\n  set sdsPopoverTitle(value: string | TemplateRef<any> | HTMLParagraphElement){\n    this._sdsPopoverTitle = this.handlePopoverSection(value, 'title')\n  }\n\n  get sdsPopoverTitle(): string | TemplateRef<any> | HTMLParagraphElement{\n    return this._sdsPopoverTitle;\n  }\n\n  handlePopoverSection(value: string | TemplateRef<any> | HTMLParagraphElement,  classToApply: string): string | TemplateRef<any> | HTMLParagraphElement{\n    let popoverSection;\n    if(typeof value === 'string'){\n      popoverSection = document.createElement('p');\n      popoverSection.innerText = value;\n      this.renderer.addClass(popoverSection, classToApply)\n\n    } else {\n      popoverSection = value;\n    }\n    return popoverSection;\n  }\n\n  /**\n   * Using debounce decorator here to prevent a scenario where a popover is\n   * applied to a button and this function is called by both the enter key\n   * listener and click listener.\n   */\n  @debounce(100)\n  clickEvent(){\n    this.popoverVisible = !this.popoverVisible;\n    if(this.popoverVisible){\n      this.renderer.addClass(this.sdsPopoverDiv, 'sds-popover__shown');\n      this.renderer.setAttribute(this.sdsPopoverDiv, 'aria-hidden', 'false');\n      this.renderer.setAttribute(this.el.nativeElement, 'aria-describedby', this.popoverDivId)\n      this.renderer.setAttribute(this.el.nativeElement, 'aria-expanded', 'true');\n\n      this.renderer.removeClass(this.sdsPopoverDiv, 'sds-popover__hidden');\n    } else {\n      this.renderer.addClass(this.sdsPopoverDiv, 'sds-popover__hidden');\n      this.renderer.setAttribute(this.sdsPopoverDiv, 'aria-hidden', 'true');\n      this.renderer.setAttribute(this.el.nativeElement, 'aria-expanded', 'false');\n\n      this.renderer.removeClass(this.sdsPopoverDiv, 'sds-popover__shown');\n      this.renderer.removeAttribute(this.el.nativeElement, 'aria-describedby')\n    }\n  }\n}\n",
            "selector": "[sdsPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "closeOnClickOutside",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean"
                },
                {
                    "name": "closeOnContentClick",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean"
                },
                {
                    "name": "position",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "sdsPopover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": ""
                },
                {
                    "name": "sdsPopoverTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16
                },
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26
                },
                {
                    "name": "keyup.enter",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdding listener for keyup.enter to ensure that user can activate popover with keyboard\n",
                    "description": "<p>Adding listener for keyup.enter to ensure that user can activate popover with keyboard</p>\n",
                    "line": 40
                }
            ],
            "propertiesClass": [
                {
                    "name": "_sdsPopoverContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | TemplateRef<any> | HTMLParagraphElement",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_sdsPopoverTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | TemplateRef<any> | HTMLParagraphElement",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "popoverDivId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "popoverVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "sdsPopoverDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "clickEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUsing debounce decorator here to prevent a scenario where a popover is\napplied to a button and this function is called by both the enter key\nlistener and click listener.\n",
                    "description": "<p>Using debounce decorator here to prevent a scenario where a popover is\napplied to a button and this function is called by both the enter key\nlistener and click listener.</p>\n",
                    "decorators": [
                        {
                            "name": "debounce",
                            "stringifiedArguments": "100"
                        }
                    ]
                },
                {
                    "name": "clickout",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePopoverSection",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | TemplateRef<any> | HTMLParagraphElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "classToApply",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | TemplateRef | HTMLParagraphElement",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | TemplateRef<any> | HTMLParagraphElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "classToApply",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdding listener for keyup.enter to ensure that user can activate popover with keyboard\n",
                    "description": "<p>Adding listener for keyup.enter to ensure that user can activate popover with keyboard</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup.enter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sdsPopover": {
                    "name": "sdsPopover",
                    "setSignature": {
                        "name": "sdsPopover",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLParagraphElement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 91,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLParagraphElement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sdsPopover",
                        "type": "",
                        "returnType": "string | TemplateRef | HTMLParagraphElement",
                        "line": 95
                    }
                },
                "sdsPopoverTitle": {
                    "name": "sdsPopoverTitle",
                    "setSignature": {
                        "name": "sdsPopoverTitle",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLParagraphElement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 100,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLParagraphElement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sdsPopoverTitle",
                        "type": "",
                        "returnType": "string | TemplateRef | HTMLParagraphElement",
                        "line": 104
                    }
                }
            }
        },
        {
            "name": "SdsPopupDirective",
            "id": "directive-SdsPopupDirective-f90e258a1339ca9bbf2c49725c31b0e5",
            "file": "libs/packages/components/src/lib/popup/popup.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, ElementRef, Renderer2, AfterViewInit, OnInit } from '@angular/core';\n\n\n@Directive({\n  selector: '[sdsPopup]',\n  exportAs: 'sdsPopup'\n})\nexport class SdsPopupDirective implements AfterViewInit {\n  @Input() sdsPopup: HTMLElement;\n  @Input() position: string;\n  @Input() placement: string;\n  sdsPopupDiv: HTMLElement;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.addClass(this.el.nativeElement, 'sds-popup');\n    this.sdsPopupDiv = document.createElement('div');\n    this.renderer.addClass(this.sdsPopupDiv, 'sds-popup__content');\n  }\n\n\n  ngAfterViewInit() {\n    this.renderer.appendChild(this.el.nativeElement, this.sdsPopup);\n    this.renderer.addClass(this.sdsPopupDiv, this.placement);\n    this.renderer.addClass(this.sdsPopupDiv, this.position);\n    this.renderer.appendChild(this.sdsPopupDiv, this.el.nativeElement.children[0]);\n    this.renderer.appendChild(this.el.nativeElement, this.sdsPopupDiv);\n  }\n}\n",
            "selector": "[sdsPopup]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "placement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "sdsPopup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "HTMLElement"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "sdsPopupDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SDSTabOutsideDirective",
            "id": "directive-SDSTabOutsideDirective-b3f19222ac9324a35928c2f49ee140f0",
            "file": "libs/packages/components/src/lib/tab-outside/taboutside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive, ElementRef, Output,\n  EventEmitter, HostListener\n} from '@angular/core';\n\n\n@Directive({\n  selector: '[sds-tab-outside]'\n})\nexport class SDSTabOutsideDirective {\n  /**\n   * Emitter for tabOutside event\n   */\n  @Output() tabOutside: EventEmitter<any> = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  @HostListener('document:keyup', ['$event.target'])\n  public hasFocusChanged(target) {\n    const isInsideHost = this._elementRef.nativeElement.contains(target);\n    if (!isInsideHost) {\n      this.tabOutside.emit(undefined);\n    }\n  }\n}\n",
            "selector": "[sds-tab-outside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "tabOutside",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmitter for tabOutside event\n",
                    "description": "<p>Emitter for tabOutside event</p>\n",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keyup",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hasFocusChanged",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keyup', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsToolbarExpandDirective",
            "id": "directive-SdsToolbarExpandDirective-c6913009548411e7fd6803737d530c6f",
            "file": "libs/packages/components/src/lib/toolbar/toolbar-expand.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, Renderer2, OnInit } from \"@angular/core\";\nimport { SdsToolbarComponent } from \"./toolbar.component\";\n\n@Directive({\n  selector: \"[sdsToolbarExpand]\"\n})\nexport class SdsToolbarExpandDirective implements OnInit {\n  /** Width of the toolbar while expanded. */\n  _expandedWidth: string;\n\n  /** References the toolbar instance that the element its associated with. */\n  @Input(\"sdsToolbarExpand\")\n  get toolbar() {\n    return this._toolbar;\n  }\n  set toolbar(toolbar: SdsToolbarComponent) {\n    if (toolbar === this._toolbar) {\n      return;\n    }\n    this._toolbar = toolbar;\n    /** Sets toolbar expanded width */\n\n    this._expandedWidth = this._toolbar.expandedSpace;\n  }\n  private _toolbar: SdsToolbarComponent;\n\n  constructor(private renderer: Renderer2, private _element: ElementRef) { }\n  ngOnInit() {\n    this.setStyle(this.toolbar.expanded);\n    this.toolbar.expandedChange.subscribe(value => {\n      this.setStyle(value);\n    });\n  }\n\n  private setStyle(value: any) {\n    if (value) {\n      this.renderer.setStyle(this._element.nativeElement, \"margin-left\", `${this._expandedWidth}`);\n    }\n    else {\n      this.renderer.removeStyle(this._element.nativeElement, \"margin-left\");\n    }\n  }\n}\n",
            "selector": "[sdsToolbarExpand]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "sdsToolbarExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "References the toolbar instance that the element its associated with.",
                    "description": "<p>References the toolbar instance that the element its associated with.</p>\n",
                    "line": 13,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_expandedWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Width of the toolbar while expanded.</p>\n",
                    "line": 9,
                    "rawdescription": "\nWidth of the toolbar while expanded."
                },
                {
                    "name": "_toolbar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsToolbarComponent",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setStyle",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "toolbar": {
                    "name": "toolbar",
                    "setSignature": {
                        "name": "toolbar",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "toolbar",
                                "type": "SdsToolbarComponent",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "toolbar",
                                "type": "SdsToolbarComponent",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "toolbar",
                        "type": "",
                        "returnType": "",
                        "line": 13,
                        "rawdescription": "References the toolbar instance that the element its associated with.",
                        "description": "<p>References the toolbar instance that the element its associated with.</p>\n"
                    }
                }
            }
        },
        {
            "name": "SdsTooltipDirective",
            "id": "directive-SdsTooltipDirective-28d098b790a314f8d0d27118cb3e8c8c",
            "file": "libs/packages/components/src/lib/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[sdsTooltip]',\n  exportAs: 'sdsTooltip'\n})\nexport class SdsTooltipDirective implements AfterViewInit {\n\n  private _sdsTooltip: string | TemplateRef<any> | HTMLDivElement;\n  sdsTooltipDiv: HTMLElement;\n\n  @Input()\n  position: string = 'top';\n\n  @HostListener('focus', ['$event']) onFocus() {\n    this.renderer.setAttribute(this.sdsTooltipDiv, 'aria-hidden', 'false')\n  }\n  @HostListener('blur', ['$event']) onBlur() {\n    this.renderer.setAttribute(this.sdsTooltipDiv, 'aria-hidden', 'true')\n  }\n\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.renderer.addClass(this.el.nativeElement, 'sds-tooltip');\n    this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '0')\n\n    this.sdsTooltipDiv = document.createElement('div');\n\n    this.renderer.addClass(this.sdsTooltipDiv, 'sds-tooltip__content');\n  }\n\n  ngAfterViewInit() {\n    this.renderer.setAttribute(this.sdsTooltipDiv, 'data-position', this.position)\n    if (this.position && this.sdsTooltip) {\n      this.renderer.addClass(this.sdsTooltipDiv, this.position);\n      this.renderer.appendChild(this.sdsTooltipDiv, this.sdsTooltip);\n      this.renderer.appendChild(this.el.nativeElement, this.sdsTooltipDiv);\n    }\n  }\n\n  @Input()\n  set sdsTooltip(value: string | TemplateRef<any> | HTMLDivElement) {\n    if (typeof value === 'string') {\n      this._sdsTooltip = document.createElement('div');\n      this._sdsTooltip.innerHTML = value;\n    } else {\n      this._sdsTooltip = value;\n    }\n\n    if (this._sdsTooltip) {\n      this.renderer.addClass(this._sdsTooltip, 'tooltip')\n    }\n  }\n\n  get sdsTooltip(): string | TemplateRef<any> | HTMLDivElement {\n    return this._sdsTooltip;\n  }\n\n}\n",
            "selector": "[sdsTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "position",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "sdsTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15
                }
            ],
            "propertiesClass": [
                {
                    "name": "_sdsTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | TemplateRef<any> | HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sdsTooltipDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur', ['$event']"
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus', ['$event']"
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sdsTooltip": {
                    "name": "sdsTooltip",
                    "setSignature": {
                        "name": "sdsTooltip",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLDivElement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | TemplateRef<any> | HTMLDivElement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sdsTooltip",
                        "type": "",
                        "returnType": "string | TemplateRef | HTMLDivElement",
                        "line": 55
                    }
                }
            }
        },
        {
            "name": "SdsTruncateTextByLineDirective",
            "id": "directive-SdsTruncateTextByLineDirective-a427ef32fe5697c69962e187aa71fc2c",
            "file": "libs/packages/components/src/lib/truncate-text/truncate-text.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  OnInit,\n  Input,\n  OnDestroy,\n  AfterViewInit,\n  HostListener,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport {\n  ViewportRuler,\n  OverlayConfig,\n  Overlay,\n  OverlayRef,\n  ConnectedPosition\n} from '@angular/cdk/overlay';\nimport { Subscription, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { PortalInjector, ComponentPortal } from '@angular/cdk/portal';\nimport { SdsTruncatedTextContainerComponent } from './truncate-text-container.component';\nimport { SDS_TRUNCATED_TEXT_DATA } from './truncates-text-base';\n\n@Directive({ selector: '[sdsTruncateTextByLine]' })\nexport class SdsTruncateTextByLineDirective\n  implements OnInit, OnDestroy, AfterViewInit {\n  /** Maximum lines of text limit */\n  @Input('sdsTruncateTextByLine')\n  get textLinesLimit(): any {\n    return this._textLinesLimit;\n  }\n  set textLinesLimit(_textLinesLimit: any) {\n    _textLinesLimit = coerceNumberProperty(_textLinesLimit);\n    if (this._textLinesLimit !== _textLinesLimit) {\n      this._textLinesLimit = _textLinesLimit;\n    }\n  }\n  private _textLinesLimit: number;\n\n  /** PortalOutlet */\n  private _overlayRef: OverlayRef | null = null;\n\n  /** Holds subscription to stream of overlay closing events */\n  private _closingActionsSubscription = Subscription.EMPTY;\n\n  /** Holds initial text */\n  private initialText: string;\n\n  /** Subscription to window resize stream */\n  windowResize$: Subscription;\n\n  /** Approximated character width of the host text */\n  private approximatedCharacterWidth: number;\n\n  constructor(\n    private _overlay: Overlay,\n    private _injector: Injector,\n    private _element: ElementRef,\n    private _viewportRuler: ViewportRuler,\n    private _viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnInit() {\n    this.initialText = this._element.nativeElement.innerText.trim();\n\n    // Clone element to facilitate calculations\n    const hostCloneEl = this._element.nativeElement.cloneNode() as HTMLElement;\n\n    // Add 1 character to calculate character width\n    hostCloneEl.innerHTML = 'x';\n\n    // Render the clone to get character width\n    this._element.nativeElement.parentElement.appendChild(hostCloneEl);\n\n    // Set the clone to inline to prevent cases where the clone\n    // expands to 100% width of the container\n    hostCloneEl.setAttribute('style', 'display: inline');\n\n    // These are close approximations that are used to better guess\n    // how many characters fit in X number of lines\n    this.approximatedCharacterWidth = hostCloneEl.offsetWidth;\n\n    // Remove clone after calculations\n    hostCloneEl.remove();\n  }\n\n  ngAfterViewInit(): void {\n    this.windowResize$ = this._viewportRuler\n      .change(0)\n      .pipe(startWith('Start'))\n      .subscribe(() => this.updateUI());\n  }\n\n  ngOnDestroy(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n    this._closingActionsSubscription.unsubscribe();\n    this.windowResize$.unsubscribe();\n  }\n\n  /** Configures and creates the CDK overlay */\n  private _createOverlay() {\n    const overlayPositions: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const config = new OverlayConfig({\n      positionStrategy: this._overlay\n        .position()\n        .flexibleConnectedTo(this._element)\n        .withLockedPosition()\n        .withPositions([overlayPositions])\n        .withTransformOriginOn('.sds-overlay'),\n      hasBackdrop: true,\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._overlay.scrollStrategies.close()\n    });\n    return this._overlay.create(config);\n  }\n\n  /** Attach a ComponentPortal to the overlay **/\n  private _attachContainer(overlay: OverlayRef) {\n    const injector = new PortalInjector(\n      this._injector,\n      new WeakMap([[SDS_TRUNCATED_TEXT_DATA, { text: this.initialText }]])\n    );\n    const containerPortal = new ComponentPortal(\n      SdsTruncatedTextContainerComponent,\n      this._viewContainerRef,\n      injector\n    );\n    const containerRef = overlay.attach(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /** Returns a stream that emits whenever an action that should close the overlay occurs. */\n  private _overlayClosingActions() {\n    const backdrop = this._overlayRef.backdropClick();\n    const detachments = this._overlayRef.detachments();\n    return merge(backdrop, detachments);\n  }\n\n  /** Width of host element */\n  private _getHostWidth(): number {\n    return this._element.nativeElement.offsetWidth;\n  }\n\n  /** Approximated number of characters that are visible in the container */\n  private _getVisibleCharacters(): number {\n    return Math.floor(\n      (this._getHostWidth() / this.approximatedCharacterWidth) *\n        this.textLinesLimit\n    );\n  }\n\n  private _isNotLongEnough(): boolean {\n    return this._getVisibleCharacters() > this.initialText.length;\n  }\n\n  @HostListener('click')\n  openOverlay(): void {\n    // Exit if all text can be visible in container\n    if (this._isNotLongEnough()) return;\n\n    this._overlayRef = this._createOverlay();\n    const container = this._attachContainer(this._overlayRef);\n    this._closingActionsSubscription = this._overlayClosingActions().subscribe(\n      () => this.closeOverlay()\n    );\n    // Wait for the next event loop tick to start the animation\n    setTimeout(() => {\n      container.startAnimation();\n    });\n  }\n\n  updateUI() {\n    // Exit if all text can be visible in container\n    if (this._isNotLongEnough()) return;\n\n    const wordCut = false;\n    const ellipsis = '...';\n    const limit = this._getVisibleCharacters() - ellipsis.length;\n\n    let visibleText = this.initialText.slice(0, limit);\n\n    if (!wordCut) {\n      const isEndofWord = this.initialText.substr(limit, limit + 1) === ' ';\n      if (!isEndofWord) {\n        const previousWord = visibleText.lastIndexOf(' ');\n        visibleText = visibleText.slice(0, previousWord);\n      }\n    }\n\n    this._element.nativeElement.innerText = visibleText + ellipsis;\n  }\n\n  closeOverlay() {\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n  }\n}\n",
            "selector": "[sdsTruncateTextByLine]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "sdsTruncateTextByLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Maximum lines of text limit",
                    "description": "<p>Maximum lines of text limit</p>\n",
                    "line": 31,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 167
                }
            ],
            "propertiesClass": [
                {
                    "name": "_closingActionsSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Holds subscription to stream of overlay closing events</p>\n",
                    "line": 46,
                    "rawdescription": "\nHolds subscription to stream of overlay closing events",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_overlayRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "<p>PortalOutlet</p>\n",
                    "line": 43,
                    "rawdescription": "\nPortalOutlet",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_textLinesLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "approximatedCharacterWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Approximated character width of the host text</p>\n",
                    "line": 55,
                    "rawdescription": "\nApproximated character width of the host text",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "initialText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Holds initial text</p>\n",
                    "line": 49,
                    "rawdescription": "\nHolds initial text",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "windowResize$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>Subscription to window resize stream</p>\n",
                    "line": 52,
                    "rawdescription": "\nSubscription to window resize stream"
                }
            ],
            "methodsClass": [
                {
                    "name": "_attachContainer",
                    "args": [
                        {
                            "name": "overlay",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAttach a ComponentPortal to the overlay",
                    "description": "<p>Attach a ComponentPortal to the overlay</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "overlay",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nConfigures and creates the CDK overlay",
                    "description": "<p>Configures and creates the CDK overlay</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_getHostWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWidth of host element",
                    "description": "<p>Width of host element</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_getVisibleCharacters",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nApproximated number of characters that are visible in the container",
                    "description": "<p>Approximated number of characters that are visible in the container</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_isNotLongEnough",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_overlayClosingActions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReturns a stream that emits whenever an action that should close the overlay occurs.",
                    "description": "<p>Returns a stream that emits whenever an action that should close the overlay occurs.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "closeOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "updateUI",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "textLinesLimit": {
                    "name": "textLinesLimit",
                    "setSignature": {
                        "name": "textLinesLimit",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_textLinesLimit",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "_textLinesLimit",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "textLinesLimit",
                        "type": "any",
                        "returnType": "any",
                        "line": 31,
                        "rawdescription": "Maximum lines of text limit",
                        "description": "<p>Maximum lines of text limit</p>\n"
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-2168abe62c9bc9ea8dd5ca1c9a136964",
            "file": "libs/packages/components/src/lib/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayMode",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "displayMode = 'default' | 'results';",
                    "description": "<p>displayMode = &#39;default&#39; | &#39;results&#39;;</p>\n",
                    "line": 55,
                    "type": "PaginationDisplayMode"
                },
                {
                    "name": "page",
                    "defaultValue": "new PaginationModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Pagination model",
                    "description": "<p>Pagination model</p>\n",
                    "line": 43,
                    "type": "PaginationModel"
                },
                {
                    "name": "paginationConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "configuration for the pagination",
                    "description": "<p>configuration for the pagination</p>\n",
                    "line": 49,
                    "type": "PaginationConfigurationModel"
                },
                {
                    "name": "totalItems",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "totalItems for display on results view;",
                    "description": "<p>totalItems for display on results view;</p>\n",
                    "line": 61,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter<PaginationModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput of the page model object\n",
                    "description": "<p>Output of the page model object</p>\n",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentPageField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Input field for the current page</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nInput field for the current page\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'currentPage', {static: false}"
                        }
                    ]
                },
                {
                    "name": "debounceTime",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>debounce time for current page input</p>\n",
                    "line": 68,
                    "rawdescription": "\n\ndebounce time for current page input\n"
                },
                {
                    "name": "options",
                    "defaultValue": "[\n    { label: '25', value: 25 },\n    { label: '50', value: 50 },\n    { label: '100', value: 100 }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Drop down options for page size</p>\n",
                    "line": 83,
                    "rawdescription": "\n\nDrop down options for page size\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "previousNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Stores the previous number</p>\n",
                    "line": 73,
                    "rawdescription": "\n\nStores the previous number\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "timeoutNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>timeout id of the debounce time</p>\n",
                    "line": 78,
                    "rawdescription": "\n\ntimeout id of the debounce time\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "currentPageFocusOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncurrent page focus out will replace with previous valid if empty\n",
                    "description": "<p>current page focus out will replace with previous valid if empty</p>\n"
                },
                {
                    "name": "handleInputOutsideBounds",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadjusts the value if not within the page limit above or below\n",
                    "description": "<p>adjusts the value if not within the page limit above or below</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3151,
                                "end": 3159,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "newValue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3145,
                                "end": 3150,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>handles</p>\n"
                        }
                    ]
                },
                {
                    "name": "maintainPreviousValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStores the previous number. Used when focus out if field empty\n",
                    "description": "<p>Stores the previous number. Used when focus out if field empty</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nnext page increase page number by one within range\n",
                    "description": "<p>next page increase page number by one within range</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\npage size selection change\n",
                    "description": "<p>page size selection change</p>\n"
                },
                {
                    "name": "previousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nprevious page lowers page number by one within range\n",
                    "description": "<p>previous page lowers page number by one within range</p>\n"
                },
                {
                    "name": "valuechange",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncurrent page changes sets new value if within range\n",
                    "description": "<p>current page changes sets new value if within range</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2438,
                                "end": 2446,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "newValue"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2432,
                                "end": 2437,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, EventEmitter, Output, ChangeDetectorRef, ViewChild, ElementRef } from '@angular/core';\nimport { PaginationConfigurationModel, PaginationModel } from './model/paginationModel';\n\n/** pagination display modes. */\nexport type PaginationDisplayMode = 'default' | 'results';\n\n@Component({\n  selector: 'sds-pagination',\n  templateUrl: './pagination.component.html',\n  styleUrls: ['./pagination.component.scss']\n})\nexport class PaginationComponent implements OnInit {\n\n  ngOnInit(): void {\n    this.maintainPreviousValue();\n  }\n\n  constructor(private change: ChangeDetectorRef) { }\n\n\n  /**\n   * Stores the previous number. Used when focus out if field empty\n   */\n  private maintainPreviousValue() {\n    this.previousNumber = this.page.pageNumber.valueOf();\n  }\n\n  /**\n   * Input field for the current page\n   */\n  @ViewChild('currentPage', { static: false }) currentPageField: ElementRef;\n\n  /**\n   * Output of the page model object\n   */\n  @Output()\n  pageChange = new EventEmitter<PaginationModel>();\n\n  /**\n   * Pagination model\n   */\n  @Input()\n  page: PaginationModel = new PaginationModel();\n\n  /**\n   * configuration for the pagination\n   */\n  @Input()\n  paginationConfiguration: PaginationConfigurationModel;\n\n  /**\n   * displayMode = 'default' | 'results';\n   */\n  @Input()\n  displayMode: PaginationDisplayMode = 'default';\n\n  /**\n * totalItems for display on results view;\n */\n  @Input()\n  totalItems?: number = 0;\n\n\n\n  /**\n   * debounce time for current page input\n   */\n  debounceTime: number = 500;\n\n  /**\n   * Stores the previous number\n   */\n  private previousNumber: number;\n\n  /**\n   * timeout id of the debounce time\n   */\n  timeoutNumber: number;\n\n  /**\n   * Drop down options for page size\n   */\n  public options = [\n    { label: '25', value: 25 },\n    { label: '50', value: 50 },\n    { label: '100', value: 100 }\n  ];\n\n  /**\n   * previous page lowers page number by one within range\n   */\n  previousPage() {\n    if (this.page.pageNumber > 1) {\n      this.page.pageNumber--;\n      this.maintainPreviousValue();\n      this.pageChange.emit(this.page);\n    }\n  }\n\n  /**\n   * next page increase page number by one within range\n   */\n  nextPage() {\n    if (this.page.pageNumber < this.page.totalPages) {\n      this.page.pageNumber++;\n      this.maintainPreviousValue();\n      this.pageChange.emit(this.page);\n    }\n  }\n\n  /**\n   * current page changes sets new value if within range\n   * @param newValue\n   */\n  valuechange(newValue?: number) {\n    window.clearTimeout(this.timeoutNumber);\n    this.timeoutNumber = window.setTimeout(() => {\n      if (newValue || newValue === 0) {\n        newValue = this.handleInputOutsideBounds(newValue);\n        if (newValue >= 1 && newValue <= this.page.totalPages) {\n          this.page.pageNumber = newValue;\n          this.maintainPreviousValue();\n          this.pageChange.emit(this.page);\n          this.change.detectChanges();\n        }\n      } else {\n\n        if (this.page.pageNumber) {\n          this.maintainPreviousValue();\n        }\n      }\n    }, this.debounceTime);\n  }\n\n  /**\n   * adjusts the value if not within the page limit above or below\n   * @param newValue handles\n   */\n  private handleInputOutsideBounds(newValue?: number) {\n    if (newValue < 1) {\n      newValue = 1;\n      this.currentPageField.nativeElement.value = newValue;\n    }\n    else if (newValue > this.page.totalPages) {\n      newValue = this.page.totalPages;\n      this.currentPageField.nativeElement.value = newValue;\n    }\n    return newValue;\n  }\n\n  /**\n   * current page focus out will replace with previous valid if empty\n   */\n  currentPageFocusOut() {\n    if (this.currentPageField.nativeElement.value === '') {\n      this.currentPageField.nativeElement.value = this.page.pageNumber = this.previousNumber;\n      this.change.detectChanges();\n    }\n  }\n\n  /**\n   * page size selection change\n   */\n  onSelectChange() {\n    this.page.pageNumber = 1;\n    this.pageChange.emit(this.page);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Hide HTML5 Up and Down arrows. */\ninput[type=number]::-webkit-inner-spin-button,\ninput[type=number]::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\ninput[type=\"number\"] {\n    -moz-appearance: textfield;\n}\n\n",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "change",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "change",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sds-pagination\" *ngIf=\"displayMode === 'default'\">\n  <div class=\"sds-pagination__controls\">\n    <button [attr.id]=\"paginationConfiguration.id +'-previousPage'\" (click)=\"previousPage()\">Previous Page</button>\n    <label class=\"usa-label font-sans-3xs margin-top-1 text-italic text-base usa-sr-only\"\n      [attr.for]=\"paginationConfiguration.id + '-currentPage'\">Current Page</label>\n    <input [attr.id]=\"paginationConfiguration.id +'-currentPage'\"\n      class=\"usa-input usa-input--small font-sans-3xs text-center border-base-light\" #currentPage\n      [attr.aria-label]=\"'Page ' + page.pageNumber + ' of ' + page.totalPages\"\n      (ngModelChange)=\"valuechange($event)\" [(ngModel)]=\"page.pageNumber\" type=\"number\" min=\"1\"\n      [(attr.max)]=\"page.totalPages\" (focusout)=\"currentPageFocusOut()\" [ngStyle]=\"{'width': (20 + page.totalPages.toString().length * 10) +'px'}\" />\n    <span class=\"sds-pagination__total\">\n      of <strong>{{ page.totalPages }}</strong>\n    </span>\n    <button [attr.id]=\"paginationConfiguration.id +'-nextPage'\" (click)=\"nextPage()\">Next Page</button>\n  </div>\n  <div class=\"sds-pagination__results\">\n    <label class=\"usa-label font-sans-3xs text-italic text-base\"\n      [attr.for]=\"paginationConfiguration.id + '-select'\">Results per page</label>\n    <select class=\"usa-select usa-select--small border-base-light\" [attr.id]=\"paginationConfiguration.id + '-select'\"\n      (change)=\"onSelectChange()\" [(ngModel)]=\"page.pageSize\">\n      <option *ngFor=\"let item of options\" [ngValue]=\"item.value\">\n        {{ item.label }}\n      </option>\n    </select>\n  </div>\n</div>\n\n<div aria-live=\"polite\">\n  <div class=\"sds-pagination\" *ngIf=\"totalItems && displayMode === 'results'\">\n    <div class=\"text-semibold font-sans-3xs\">\n      Showing {{(page.pageNumber-1)*page.pageSize+1 | number:'1.0':'en-US'}} - {{((page.pageNumber-1)*page.pageSize+page.pageSize) > totalItems ? (totalItems | number:'1.0':'en-US') : ((page.pageNumber-1)*page.pageSize+page.pageSize | number:'1.0':'en-US') }} of {{totalItems | number:'1.0':'en-US'}} results\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "SdsAccordionItemComponent",
            "id": "component-SdsAccordionItemComponent-1c1205e908b29a8d12afc75412c96986",
            "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "sdsAccordionItem",
            "host": {},
            "inputs": [
                "disabled",
                "expanded"
            ],
            "outputs": [
                "opened",
                "closed",
                "expandedChange"
            ],
            "providers": [],
            "selector": "sds-accordion-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "accordion-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "afterCollapse",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAn event emitted after the body's collapse animation happens.",
                    "description": "<p>An event emitted after the body&#39;s collapse animation happens.</p>\n",
                    "line": 61,
                    "type": "EventEmitter"
                },
                {
                    "name": "afterExpand",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAn event emitted after the body's expansion animation happens.",
                    "description": "<p>An event emitted after the body&#39;s expansion animation happens.</p>\n",
                    "line": 58,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_animationMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ANIMATION_MODULE_TYPE"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "<p>Element containing the accordion item&#39;s user-provided content.</p>\n",
                    "line": 74,
                    "rawdescription": "\nElement containing the accordion item's user-provided content.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'body', {static: false}"
                        }
                    ]
                },
                {
                    "name": "_bodyAnimationDone",
                    "defaultValue": "new Subject<AnimationEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stream of body animation done events.</p>\n",
                    "line": 83,
                    "rawdescription": "\nStream of body animation done events."
                },
                {
                    "name": "_document",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Document",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_headerId",
                    "defaultValue": "`sds-accordion-item-header-${uniqueId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>ID for the associated header element. Used for a11y labelling.</p>\n",
                    "line": 80,
                    "rawdescription": "\nID for the associated header element. Used for a11y labelling."
                },
                {
                    "name": "_inputChanges",
                    "defaultValue": "new Subject<SimpleChanges>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stream that emits for changes in <code>@Input</code> properties.</p>\n",
                    "line": 64,
                    "rawdescription": "\nStream that emits for changes in `@Input` properties.",
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "_lazyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsAccordionItemContentDirective",
                    "optional": false,
                    "description": "<p>Content that will be rendered lazily.</p>\n",
                    "line": 70,
                    "rawdescription": "\nContent that will be rendered lazily.",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "SdsAccordionItemContentDirective"
                        }
                    ]
                },
                {
                    "name": "_portal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplatePortal",
                    "optional": false,
                    "description": "<p>Portal holding the user&#39;s content.</p>\n",
                    "line": 77,
                    "rawdescription": "\nPortal holding the user's content."
                },
                {
                    "name": "accordion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsAccordionBase",
                    "optional": false,
                    "description": "<p>Optionally defined accordion the accordion item belongs to.</p>\n",
                    "line": 67,
                    "rawdescription": "\nOptionally defined accordion the accordion item belongs to."
                }
            ],
            "methodsClass": [
                {
                    "name": "_containsFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nChecks whether the accordion item's content contains the currently-focused element.",
                    "description": "<p>Checks whether the accordion item&#39;s content contains the currently-focused element.</p>\n"
                },
                {
                    "name": "_getExpandedState",
                    "args": [],
                    "optional": false,
                    "returnType": "SdsAccordionItemState",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets the expanded state string.",
                    "description": "<p>Gets the expanded state string.</p>\n"
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionItem } from \"@angular/cdk/accordion\";\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  EventEmitter,\n  ElementRef,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild\n} from \"@angular/core\";\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject } from 'rxjs';\nimport { filter, startWith, take, distinctUntilChanged } from 'rxjs/operators';\nimport { sdsExpansionAnimations } from './accordion-animations';\nimport { SdsAccordionItemContentDirective } from './accordion-item-content.directive';\nimport { SDS_ACCORDION, SdsAccordionBase } from './accordion-base';\n\n/** Accordion Item's states. */\nexport type SdsAccordionItemState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n@Component({\n  selector: \"sds-accordion-item\",\n  exportAs: \"sdsAccordionItem\",\n  templateUrl: \"accordion-item.component.html\",\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [sdsExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'sds-accordion__item',\n    '[class.sds-accordion__item--expanded]': 'expanded',\n    '[class._sds-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n  }\n})\nexport class SdsAccordionItemComponent extends CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy {\n  private _document: Document;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the accordion item belongs to. */\n  accordion: SdsAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(SdsAccordionItemContentDirective) _lazyContent: SdsAccordionItemContentDirective;\n\n  /** Element containing the accordion item's user-provided content. */\n  // @ViewChild('body') _body: ElementRef<HTMLElement>;\n  @ViewChild('body', { static: false }) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `sds-accordion-item-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(SDS_ACCORDION) accordion: SdsAccordionBase,\n    _changeDetectorRef: ChangeDetectorRef,\n    _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): SdsAccordionItemState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the accordion item becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the accordion item's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accordion",
                        "type": "SdsAccordionBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_uniqueSelectionDispatcher",
                        "type": "UniqueSelectionDispatcher",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_animationMode",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "accordion",
                        "type": "SdsAccordionBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_uniqueSelectionDispatcher",
                        "type": "UniqueSelectionDispatcher",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_animationMode",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CdkAccordionItem",
            "implements": [
                "AfterContentInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<ng-content select=\"sds-accordion-item-header\"></ng-content>\n<div\n  class=\"sam-accordion__panel\"\n  role=\"region\"\n  [@bodyExpansion]=\"_getExpandedState()\"\n  (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n  [id]=\"id\"\n  #body\n>\n  <div class=\"sds-accordion__panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "SdsAccordionItemHeaderComponent",
            "id": "component-SdsAccordionItemHeaderComponent-83ae9453f6503be121c0955b6fcbe7bc",
            "file": "libs/packages/components/src/lib/accordion/accordion-item-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-accordion-item-header",
            "styleUrls": [
                "./accordion-item-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion-item-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_parentChangeSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "accordionItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsAccordionItemComponent",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getAccordionItemId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets the accordion item id.",
                    "description": "<p>Gets the accordion item id.</p>\n"
                },
                {
                    "name": "_isExpanded",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets whether the accordion item is expanded.",
                    "description": "<p>Gets whether the accordion item is expanded.</p>\n"
                },
                {
                    "name": "_keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandle keydown event calling to toggle() if appropriate.",
                    "description": "<p>Handle keydown event calling to toggle() if appropriate.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles the expanded state of the accordion item.",
                    "description": "<p>Toggles the expanded state of the accordion item.</p>\n"
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"program\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFocuses the item header. Implemented as a part of `FocusableOption`.\n",
                    "description": "<p>Focuses the item header. Implemented as a part of <code>FocusableOption</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3158,
                                "end": 3164,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "origin"
                            },
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"program\"",
                            "tagName": {
                                "pos": 3152,
                                "end": 3157,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Origin of the action that triggered the focus.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FocusMonitor, FocusableOption, FocusOrigin } from \"@angular/cdk/a11y\";\nimport { ENTER, SPACE, hasModifierKey } from \"@angular/cdk/keycodes\";\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Host,\n  OnDestroy,\n  ViewEncapsulation\n} from \"@angular/core\";\nimport { merge, Subscription } from \"rxjs\";\nimport { filter } from \"rxjs/operators\";\nimport { SdsAccordionItemComponent } from \"./accordion-item.component\";\n\n@Component({\n  selector: \"sds-accordion-item-header\",\n  templateUrl: \"./accordion-item-header.component.html\",\n  styleUrls:['./accordion-item-header.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: \"sds-accordion__trigger\",\n    role: \"button\",\n    \"[attr.id]\": \"accordionItem._headerId\",\n    \"[attr.tabindex]\": \"disabled ? -1 : 0\",\n    \"[attr.aria-controls]\": \"_getAccordionItemId()\",\n    \"[attr.aria-expanded]\": \"_isExpanded()\",\n    \"[attr.aria-disabled]\": \"accordionItem.disabled\",\n    \"(click)\": \"_toggle()\",\n    \"(keydown)\": \"_keydown($event)\"\n  }\n})\nexport class SdsAccordionItemHeaderComponent implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n  constructor(\n    @Host() public accordionItem: SdsAccordionItemComponent,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {\n\n    // Since the toggle state depends on an @Input on the accordion item, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      accordionItem.opened,\n      accordionItem.closed,\n      accordionItem._inputChanges.pipe(\n        filter(changes => !!(changes[\"disabled\"]))\n      )\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && accordionItem.accordion) {\n        accordionItem.accordion._handleHeaderFocus(this);\n      }\n    });\n\n  }\n\n  /**\n   * Whether the associated accordion item is disabled. \n   * Implemented as a part of `FocusableOption`.\n   */\n  get disabled() {\n    return this.accordionItem.disabled;\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  _toggle(): void {\n    this.accordionItem.toggle();\n  }\n\n  /** Gets whether the accordion item is expanded. */\n  _isExpanded(): boolean {\n    return this.accordionItem.expanded;\n  }\n\n  /** Gets the accordion item id. */\n  _getAccordionItemId(): string {\n    return this.accordionItem.id;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.accordionItem.accordion) {\n          this.accordionItem.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the item header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = \"program\") {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion-item-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accordionItem",
                        "type": "SdsAccordionItemComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "accordionItem",
                        "type": "SdsAccordionItemComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "FocusableOption"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 65,
                        "rawdescription": "Whether the associated accordion item is disabled. \nImplemented as a part of `FocusableOption`.",
                        "description": "<p>Whether the associated accordion item is disabled. \nImplemented as a part of <code>FocusableOption</code>.</p>\n"
                    }
                }
            },
            "templateData": "<span class=\"sds-accordion__title\" role=\"heading\" aria-level=\"2\">\n  <span class=\"sds-accordion__title-text\">\n    <ng-content></ng-content>\n  </span>\n  <span class=\"sds-accordion__icon\"></span>\n</span>\n"
        },
        {
            "name": "SDSAutocompleteComponent",
            "id": "component-SDSAutocompleteComponent-3b2ac237c65767f1253b1d3242fde9c0",
            "file": "libs/packages/components/src/lib/autocomplete/autocomplete.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "Autocomplete_VALUE_ACCESSOR"
                }
            ],
            "selector": "sds-autocomplete",
            "styleUrls": [
                "./autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Configuration for the control",
                    "description": "<p>Configuration for the control</p>\n",
                    "line": 62,
                    "type": "SDSAutocompletelConfiguration"
                },
                {
                    "name": "essentialModelFields",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Model contain only the primary key, primary value, and secondary value.",
                    "description": "<p>Model contain only the primary key, primary value, and secondary value.</p>\n",
                    "line": 68,
                    "type": "boolean"
                },
                {
                    "name": "selectedItemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Allow to insert a customized template for selected items",
                    "description": "<p>Allow to insert a customized template for selected items</p>\n",
                    "line": 49,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Instance of the SamHiercarchicalServiceInterface provided",
                    "description": "<p>Instance of the SamHiercarchicalServiceInterface provided</p>\n",
                    "line": 74,
                    "type": "SDSAutocompleteServiceInterface"
                },
                {
                    "name": "suggestionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Allow to insert a customized template for suggestions results",
                    "description": "<p>Allow to insert a customized template for suggestions results</p>\n",
                    "line": 44,
                    "type": "TemplateRef<any>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_subscriptions",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "autocompleteSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SDSAutocompleteSearchComponent",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'autocompleteSearch', {static: true}"
                        }
                    ]
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "model",
                    "defaultValue": "new SDSSelectedItemModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SDSSelectedItemModel",
                    "optional": false,
                    "description": "<p>The data model that has the selected item</p>\n",
                    "line": 54,
                    "rawdescription": "\n\nThe data model that has the selected item\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 101,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusout'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addItems",
                    "args": [
                        {
                            "name": "list",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModel",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSingleMode",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItems",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "focusout",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 101
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ViewChild,\n  TemplateRef,\n  ElementRef,\n  forwardRef,\n  HostListener,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\n\nimport {\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor,\n  FormControl\n} from '@angular/forms';\nimport { SDSSelectedItemModel } from '../selected-result/models/sds-selectedItem.model';\nimport { SDSAutocompleteServiceInterface } from '../autocomplete-search/models/SDSAutocompleteServiceInterface';\nimport { SDSAutocompletelConfiguration } from './models/SDSAutocompletelConfiguration.model';\nimport { SelectionMode } from '../selected-result/models/sds-selected-item-model-helper';\nimport { SDSAutocompleteSearchComponent } from '../autocomplete-search/autocomplete-search.component';\nimport { Subscription } from 'rxjs';\n\nconst Autocomplete_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'sds-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  providers: [Autocomplete_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SDSAutocompleteComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  /**\n   * Allow to insert a customized template for suggestions results\n   */\n  @Input() suggestionTemplate: TemplateRef<any>;\n\n  /**\n   * Allow to insert a customized template for selected items\n   */\n  @Input() selectedItemTemplate: TemplateRef<any>;\n\n  /**\n   * The data model that has the selected item\n   */\n  public model: SDSSelectedItemModel = new SDSSelectedItemModel();\n\n  public disabled: boolean;\n\n  /**\n   * Configuration for the control\n   */\n  @Input()\n  public configuration: SDSAutocompletelConfiguration;\n\n  /**\n   * Model contain only the primary key, primary value, and secondary value.\n   */\n  @Input()\n  public essentialModelFields: boolean = false;\n\n  /**\n   * Instance of the SamHiercarchicalServiceInterface provided\n   */\n  @Input()\n  public service: SDSAutocompleteServiceInterface;\n\n  _subscriptions = new Subscription();\n\n  @ViewChild('autocompleteSearch', { static: true }) autocompleteSearch: SDSAutocompleteSearchComponent;\n  constructor(private cd: ChangeDetectorRef) {  }\n\n  ngOnInit() {\n    if (!this.configuration.registerChanges$) {\n      return;\n    }\n\n    const changesSubscription = this.configuration.registerChanges$.subscribe(() => {\n      this.cd.detectChanges();\n    });\n\n    this._subscriptions.add(changesSubscription);\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.unsubscribe();\n  }\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  @HostListener('focusout')\n  public onTouched = () => { };\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public onChange = (_: any) => { };\n\n  // ControlValueAccessor (and Formly) is trying to update the value of the FormControl (our custom component) programatically\n  // If there is a value we will just overwrite items\n  // If there is no value we reset the items array to be empty\n  writeValue(value: any) {\n    if (value instanceof SDSSelectedItemModel && value.items && value.items.length) {\n      this.model.items = [...value.items];\n      this.cd.markForCheck();\n    }\n    else if (value && value.length) {\n      this.model.items = value;\n      this.cd.markForCheck();\n    } else {\n      if (!this.model || !(this.model instanceof SDSSelectedItemModel)) {\n        this.model = new SDSSelectedItemModel();\n      }\n      this.model.items = value && value.items ? value.items : [];\n      this.cd.markForCheck();\n    }\n\n    this.autocompleteSearch.writeValue(this.model);\n  }\n\n  // Method that is fired when the child component event notifies us that the items array has been modified within the child component\n  updateItems($event) {\n    this.updateModel();\n  }\n\n  // Helper method that gets a new instance of the model and notifies ControlValueAccessor that we have a new model for this FormControl (our custom component)\n  updateModel() {\n    const model = this.getModel();\n    this.onChange(model);\n  }\n\n  // Helper method to return a new instance of an array that contains our items\n  getModel() {\n    return [...this.model.items];\n  }\n\n  // ControlValueAccessor hook that lets us call this._onChange(var) to let the form know our variable has changed (in this case model)\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  // ControlValueAccessor hook (not used)\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.cd.detectChanges();\n  }\n\n  isSingleMode(): boolean {\n    if (this.configuration) {\n      return this.configuration.selectionMode === SelectionMode.SINGLE;\n    } else {\n      return false;\n    }\n  }\n  addItem(item: object) {\n    this.autocompleteSearch.selectItem(item);\n  }\n\n  addItems(list: object[]) {\n    list.forEach(item => {\n      this.addItem(item);\n    })\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<sds-search-autocomplete [disabled]=\"disabled\" [essentialModelFields]=\"essentialModelFields\" (ngModelChange)=\"updateItems($event)\" #autocompleteSearch\n    [service]=\"service\" [(ngModel)]=\"model\" [configuration]=\"configuration\" [itemTemplate]=\"suggestionTemplate\">\n</sds-search-autocomplete>\n<sds-selected-result (ngModelChange)=\"updateItems($event)\" [disabled]=\"disabled\" *ngIf=\"!isSingleMode() && !configuration?.hideChips\"\n    [(ngModel)]=\"model\" [configuration]=\"configuration\" [itemTemplate]=\"selectedItemTemplate\"></sds-selected-result>\n"
        },
        {
            "name": "SDSAutocompleteSearchComponent",
            "id": "component-SDSAutocompleteSearchComponent-3eabb97ef4e792d5590cee74ca379c4c",
            "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "Autocomplete_Autocomplete_VALUE_ACCESSOR"
                }
            ],
            "selector": "sds-search-autocomplete",
            "styleUrls": [
                "./autocomplete-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Configuration for the Autocomplete control",
                    "description": "<p>Configuration for the Autocomplete control</p>\n",
                    "line": 67,
                    "type": "SDSAutocompleteSearchConfiguration"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 145,
                    "type": "boolean"
                },
                {
                    "name": "essentialModelFields",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Model contain only the primary key, primary value, and secondary value.",
                    "description": "<p>Model contain only the primary key, primary value, and secondary value.</p>\n",
                    "line": 61,
                    "type": "boolean"
                },
                {
                    "name": "inputReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "To make input readonly",
                    "description": "<p>To make input readonly</p>\n",
                    "line": 132,
                    "type": "boolean"
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Allow to insert a customized template for suggestions to use",
                    "description": "<p>Allow to insert a customized template for suggestions to use</p>\n",
                    "line": 51,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Instance of the SamHiercarchicalServiceInterface provided",
                    "description": "<p>Instance of the SamHiercarchicalServiceInterface provided</p>\n",
                    "line": 73,
                    "type": "SDSAutocompleteServiceInterface"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "highlightedChildIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>selected child index</p>\n",
                    "line": 98,
                    "rawdescription": "\n\nselected child index\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "highlightedIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>selected index</p>\n",
                    "line": 93,
                    "rawdescription": "\n\nselected index\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "highlightedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "<p>highlighted object in drop down</p>\n",
                    "line": 103,
                    "rawdescription": "\n\nhighlighted object in drop down\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "HighlightedPropertyName",
                    "defaultValue": "'highlighted'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Proprty being set on the object is highlighted</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nProprty being set on the object is highlighted\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 151,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>input control</p>\n",
                    "line": 46,
                    "rawdescription": "\n\ninput control\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "inputValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>value of the input field</p>\n",
                    "line": 108,
                    "rawdescription": "\n\nvalue of the input field\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "maxResults",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>max number of results to be shown</p>\n",
                    "line": 88,
                    "rawdescription": "\n\nmax number of results to be shown\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SDSSelectedItemModel",
                    "optional": false,
                    "description": "<p>The data model that has the selected item</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nThe data model that has the selected item\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onTouchedCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 137,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "propogateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 142,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object[]",
                    "optional": false,
                    "description": "<p> result set to be rendered</p>\n",
                    "line": 83,
                    "rawdescription": "\n\n result set to be rendered\n"
                },
                {
                    "name": "resultsAvailableMessage",
                    "defaultValue": "' results available. Use up and down arrows\\\n  to scroll through results. Hit enter to select.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 147,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "resultsListElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Ul list of elements</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nUl list of elements\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'resultsList'"
                        }
                    ]
                },
                {
                    "name": "searchString",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Search string</p>\n",
                    "line": 120,
                    "rawdescription": "\n\nSearch string\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "showLoad",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "showResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Determines if the dropdown should be shown</p>\n",
                    "line": 184,
                    "rawdescription": "\n\nDetermines if the dropdown should be shown\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "srOnlyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Message announced by screen readers when\nautocomplete results are updated or new item\nis highlighted</p>\n",
                    "line": 127,
                    "rawdescription": "\n\nMessage announced by screen readers when\nautocomplete results are updated or new item\nis highlighted\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "timeoutNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Timer id for the timer awaiting the service call for more typeing</p>\n",
                    "line": 78,
                    "rawdescription": "\n\nTimer id for the timer awaiting the service call for more typeing\n",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 608,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addResult",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 552,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadds a single item to the list\n",
                    "description": "<p>adds a single item to the list</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15152,
                                "end": 15156,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15146,
                                "end": 15151,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addScreenReaderMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 589,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds message to be read by screen reader\n",
                    "description": "<p>Adds message to be read by screen reader</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 16221,
                                "end": 16228,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 16215,
                                "end": 16220,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "checkForFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4807,
                                "end": 4812,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4801,
                                "end": 4806,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "checkItemSelected",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 464,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n return Item is already selected or not\n",
                    "description": "<p> return Item is already selected or not</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12253,
                                "end": 12259,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "result"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12247,
                                "end": 12252,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clearAndHideResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n clears the results and closes result drop down\n",
                    "description": "<p> clears the results and closes result drop down</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "clearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears the input fields and value\n",
                    "description": "<p>Clears the input fields and value</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "createFreeTextItem",
                    "args": [],
                    "optional": false,
                    "returnType": "{ type: string; }",
                    "typeParameters": [],
                    "line": 454,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "focusRemoved",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getAdditionalResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 535,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngets more results based when scrolling and adds the items\n",
                    "description": "<p>gets more results based when scrolling and adds the items</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getClass",
                    "args": [],
                    "optional": false,
                    "returnType": "\"hide-cursor\" | \"\"",
                    "typeParameters": [],
                    "line": 631,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFlatElements",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 360,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getObjectValue",
                    "args": [
                        {
                            "name": "object",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyFields",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the string value from the specifed properties of an object\n",
                    "description": "<p>Gets the string value from the specifed properties of an object</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3573,
                                "end": 3579,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 145,
                                "escapedText": "object"
                            },
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3567,
                                "end": 3572,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3592,
                                "end": 3606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "propertyFields"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3586,
                                "end": 3591,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>comma seperated list with periods depth of object</p>\n"
                        }
                    ]
                },
                {
                    "name": "getResults",
                    "args": [
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 476,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n gets the inital results\n",
                    "description": "<p> gets the inital results</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12579,
                                "end": 12591,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "searchString"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12573,
                                "end": 12578,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "inputFocusHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent method used when focus is gained to the input\n",
                    "description": "<p>Event method used when focus is gained to the input</p>\n"
                },
                {
                    "name": "isAutocompleteWithinModal",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "matchPastSearchString",
                    "args": [
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 514,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the new search string matches the old search string\n",
                    "description": "<p>Checks if the new search string matches the old search string</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 13973,
                                "end": 13985,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "searchString"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 13967,
                                "end": 13972,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onArrowGroupDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 398,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n handles the arrow down key event\n",
                    "description": "<p> handles the arrow down key event</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onArrowGroupUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 412,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n handles the arrow up key event\n",
                    "description": "<p> handles the arrow up key event</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nKey event\n",
                    "description": "<p>Key event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6519,
                                "end": 6524,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6513,
                                "end": 6518,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onkeypress",
                    "args": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 520,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)\n",
                    "description": "<p>Scroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)</p>\n"
                },
                {
                    "name": "openOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 635,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 639,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToSelectedItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 382,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen paging up and down with arrow key it sets the highlighted item into view\n",
                    "description": "<p>When paging up and down with arrow key it sets the highlighted item into view</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "selectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nselects the item adding it to the model and closes the results\n",
                    "description": "<p>selects the item adding it to the model and closes the results</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7899,
                                "end": 7903,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7893,
                                "end": 7898,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 643,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHighlightedItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 561,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the highlighted item by keyboard or mouseover\n",
                    "description": "<p>Sets the highlighted item by keyboard or mouseover</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15356,
                                "end": 15360,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15350,
                                "end": 15355,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showFreeText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 422,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "textChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 593,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ViewChild,\n  TemplateRef,\n  ElementRef,\n  forwardRef,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { SDSAutocompleteServiceInterface } from './models/SDSAutocompleteServiceInterface';\nimport { KeyHelper, KEYS } from '../key-helper/key-helper';\nimport { SDSSelectedItemModel } from '../selected-result/models/sds-selectedItem.model';\nimport {\n  SelectionMode,\n  SDSSelectedItemModelHelper\n} from '../selected-result/models/sds-selected-item-model-helper';\n\n\nimport { SDSAutocompleteSearchConfiguration } from './models/SDSAutocompleteConfiguration';\n\nconst Autocomplete_Autocomplete_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteSearchComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'sds-search-autocomplete',\n  templateUrl: './autocomplete-search.component.html',\n  styleUrls: ['./autocomplete-search.component.scss'],\n  providers: [Autocomplete_Autocomplete_VALUE_ACCESSOR]\n})\nexport class SDSAutocompleteSearchComponent implements ControlValueAccessor {\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n  ) { }\n  /**\n   * Ul list of elements\n   */\n  @ViewChild('resultsList') resultsListElement: ElementRef;\n\n  /**\n   * input control\n   */\n  @ViewChild('input') input: ElementRef;\n\n  /**\n   * Allow to insert a customized template for suggestions to use\n   */\n  @Input() itemTemplate: TemplateRef<any>;\n\n  /**\n   * The data model that has the selected item\n   */\n  public model: SDSSelectedItemModel;\n\n  /**\n   * Model contain only the primary key, primary value, and secondary value.\n   */\n  @Input() public essentialModelFields: boolean = false;\n\n  /**\n   * Configuration for the Autocomplete control\n   */\n  @Input()\n  public configuration: SDSAutocompleteSearchConfiguration;\n\n  /**\n   * Instance of the SamHiercarchicalServiceInterface provided\n   */\n  @Input()\n  public service: SDSAutocompleteServiceInterface;\n\n  /**\n   * Timer id for the timer awaiting the service call for more typeing\n   */\n  private timeoutNumber: number;\n\n  /**\n   *  result set to be rendered\n   */\n  results: object[];\n\n  /**\n   * max number of results to be shown\n   */\n  private maxResults: number;\n\n  /**\n   * selected index\n   */\n  public highlightedIndex: number = 0;\n\n  /**\n   * selected child index\n   */\n  public highlightedChildIndex = 0;\n\n  /**\n   * highlighted object in drop down\n   */\n  private highlightedItem: object;\n\n  /**\n   * value of the input field\n   */\n  public inputValue: string = '';\n\n  /**\n   * Proprty being set on the object is highlighted\n   */\n  private HighlightedPropertyName = 'highlighted';\n\n  public showLoad: boolean = true;\n\n  /**\n   * Search string\n   */\n  private searchString: string = null;\n\n  /**\n   * Message announced by screen readers when\n   * autocomplete results are updated or new item\n   * is highlighted\n   */\n  public srOnlyText: string;\n\n  /**\n   * To make input readonly\n   */\n  @Input() public inputReadOnly = false;\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public onTouchedCallback: () => void = () => null;\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public propogateChange: (_: any) => void = (_: any) => null;\n\n  @Input()\n  public disabled: boolean;\n\n  private resultsAvailableMessage: string =\n    ' results available. Use up and down arrows\\\n  to scroll through results. Hit enter to select.';\n\n  private index = 0;\n\n  /**\n   * Gets the string value from the specifed properties of an object\n   * @param object\n   * @param propertyFields comma seperated list with periods depth of object\n   */\n\n  getObjectValue(object: Object, propertyFields: string): string {\n    let value = '';\n    let current = object;\n    let fieldSplit = propertyFields.split(',');\n    for (let i = 0; i < fieldSplit.length; i++) {\n      let fieldValue = fieldSplit[i];\n      let fieldPartSplit = fieldValue.split('.');\n      for (let j = 0; j < fieldPartSplit.length; j++) {\n        let fieldCheckValue = fieldPartSplit[j];\n        if (current) {\n          current = current[fieldCheckValue];\n        }\n      }\n\n      if (current) {\n        value += current.toString() + ' ';\n      }\n      current = object;\n    }\n    return value.trim();\n  }\n\n  /**\n   * Determines if the dropdown should be shown\n   */\n  public showResults = false;\n\n  /**\n   * Clears the input fields and value\n   */\n  public clearInput(): void {\n    this.inputValue = '';\n    if (this.configuration.selectionMode === SelectionMode.SINGLE) {\n      if (this.model.items.length > 0) {\n        SDSSelectedItemModelHelper.clearItems(this.model.items);\n        this.propogateChange(this.model);\n      }\n    }\n    this.onTouchedCallback();\n    this.clearAndHideResults();\n  }\n\n  /**\n   *\n   * @param event\n   */\n  checkForFocus(event): void {\n    this.focusRemoved();\n    this.showResults = false;\n  }\n\n  /**\n   *\n   */\n  private focusRemoved() {\n    if (this.configuration) {\n      if (this.configuration.selectionMode === SelectionMode.SINGLE) {\n        if (this.model.items.length > 0) {\n          this.inputValue = this.getObjectValue(\n            this.model.items[0],\n            this.configuration.primaryTextField\n          );\n        }\n      } else {\n        this.inputValue = '';\n      }\n    } else {\n      this.inputValue = '';\n    }\n  }\n\n  onkeypress(ev) {\n    return this.configuration.inputReadOnly ? false : true;\n  }\n  textChange(event) {\n    if (!this.configuration.isTagModeEnabled) {\n      // ie 11 placeholders will incorrectly trigger input events (known bug)\n      // if input isn't active element then don't do anything\n      if (event.target != document.activeElement) {\n        event.preventDefault();\n        return;\n      }\n      const searchString = event.target.value || '';\n      this.getResults(searchString);\n    }\n  }\n\n  /**\n   * Event method used when focus is gained to the input\n   */\n  inputFocusHandler(): void {\n    if (!this.configuration.isTagModeEnabled) {\n      if (this.configuration.focusInSearch) {\n        this.highlightedIndex = 0;\n        this.highlightedChildIndex = this.configuration.isSelectableGroup\n          ? 0\n          : null;\n        this.getResults(this.inputValue || '');\n      }\n      this.onTouchedCallback();\n      if (this.isAutocompleteWithinModal()) {\n        this.addListener();\n      }\n\n    }\n  }\n  isAutocompleteWithinModal() {\n    return document.getElementsByClassName('sds-dialog-content').length > 0\n  }\n\n  /**\n   * Key event\n   * @param event\n   */\n  onKeydown(event): void {\n    if (KeyHelper.is(KEYS.ALT, event)) {\n      event.preventDefault();\n      this.inputFocusHandler();\n    }\n    if (KeyHelper.is(KEYS.TAB, event)) {\n      return;\n    } else if (KeyHelper.is(KEYS.BACKSPACE, event)) {\n      if (this.configuration.inputReadOnly) {\n        event.preventDefault();\n      }\n    } else if (KeyHelper.is(KEYS.DOWN, event)) {\n      event.preventDefault();\n      this.onArrowGroupDown();\n    } else if (KeyHelper.is(KEYS.UP, event)) {\n      event.preventDefault();\n      this.onArrowGroupUp();\n    } else if (KeyHelper.is(KEYS.ENTER, event) && this.highlightedIndex >= 0) {\n      event.preventDefault();\n      if (this.configuration.isTagModeEnabled) {\n        const val = this.createFreeTextItem();\n        this.selectItem(val);\n      } else {\n        this.selectItem(this.highlightedItem);\n      }\n    } else if (KeyHelper.is(KEYS.ENTER, event) && this.highlightedIndex < 0) {\n      if (this.configuration.isFreeTextEnabled) {\n        const val = this.createFreeTextItem();\n        this.selectItem(val);\n      }\n    } else if (KeyHelper.is(KEYS.ESC, event)) {\n      if (this.showResults) {\n        this.clearAndHideResults();\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        }\n      }\n    }\n  }\n\n  /**\n   * selects the item adding it to the model and closes the results\n   * @param item\n   */\n  public selectItem(item: object): void {\n    let filterItem = {};\n    if (this.essentialModelFields) {\n      filterItem[this.configuration.primaryKeyField] =\n        item[this.configuration.primaryKeyField];\n      filterItem[this.configuration.primaryTextField] =\n        item[this.configuration.primaryTextField];\n      if (this.configuration.secondaryTextField) {\n        filterItem[this.configuration.secondaryTextField] =\n          item[this.configuration.secondaryTextField];\n      }\n    } else {\n      filterItem = item;\n    }\n    SDSSelectedItemModelHelper.addItem(\n      filterItem,\n      this.configuration.primaryKeyField,\n      this.configuration.selectionMode,\n      this.model\n    );\n    this.propogateChange(this.model);\n    let message = this.getObjectValue(\n      item,\n      this.configuration.primaryTextField\n    );\n    this.inputValue = message;\n    this.focusRemoved();\n    this.showResults = false;\n  }\n\n  /**\n   *  clears the results and closes result drop down\n   */\n  private clearAndHideResults(): void {\n    this.results = [];\n    this.showResults = false;\n    this.focusRemoved();\n  }\n\n  openOptions() {\n    this.input.nativeElement.focus();\n  }\n\n  public getFlatElements() {\n    const results = this.results;\n    const flat = [];\n    const flatten = (array: any) => {\n      for (let i in array) {\n        const item = array[i];\n        flat.push(item);\n        if (\n          item[this.configuration.groupByChild] &&\n          item[this.configuration.groupByChild].length\n        ) {\n          flatten(item[this.configuration.groupByChild]);\n        }\n      }\n    };\n    flatten(results);\n    return flat;\n  }\n\n  /**\n   * When paging up and down with arrow key it sets the highlighted item into view\n   */\n  private scrollToSelectedItem() {\n    if (this.highlightedIndex >= 0) {\n      this._changeDetectorRef.detectChanges();;\n      const dom = this.resultsListElement.nativeElement;\n      const selectedChild = dom.querySelector('.sds-autocomplete__item--highlighted');\n      if (selectedChild) {\n        // Manually set scroll top rather than invoke scroll functions for browser compatibility\n        const containerCenter = this.resultsListElement.nativeElement.getBoundingClientRect().height / 2;\n        this.resultsListElement.nativeElement.scrollTop = selectedChild.offsetTop - containerCenter;\n      }\n    }\n  }\n\n  /**\n   *  handles the arrow down key event\n   */\n  private onArrowGroupDown(): void {\n    if (this.results && this.results.length > 0) {\n      const flat = this.getFlatElements();\n      if (this.highlightedIndex < flat.length - 1) {\n        this.highlightedIndex++;\n      }\n      this.setHighlightedItem(flat[this.highlightedIndex]);\n      this.scrollToSelectedItem();\n    }\n  }\n\n  /**\n   *  handles the arrow up key event\n   */\n  private onArrowGroupUp(): void {\n    if (this.results && this.results.length > 0) {\n      const flat = this.getFlatElements();\n      if (this.highlightedIndex != 0) {\n        this.highlightedIndex--;\n      }\n      this.setHighlightedItem(flat[this.highlightedIndex]);\n      this.scrollToSelectedItem();\n    }\n  }\n  showFreeText() {\n    if (this.configuration.isFreeTextEnabled) {\n      if (this.inputValue) {\n        if (this.inputValue.length !== 0) {\n          let foundItem = false;\n          if (this.results) {\n            for (var i = 0; i < this.results.length && !foundItem; i++) {\n              let item = this.results[i];\n              foundItem =\n                item[this.configuration.primaryTextField] === this.inputValue;\n            }\n          }\n          if (this.model.items.length > 0 && !foundItem) {\n            for (var i = 0; i < this.model.items.length && !foundItem; i++) {\n              let item = this.model.items[i];\n              foundItem =\n                item[this.configuration.primaryTextField] === this.inputValue;\n            }\n          }\n\n          return !foundItem;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else {\n      return this.configuration.isFreeTextEnabled;\n    }\n  }\n\n  private createFreeTextItem() {\n    let item = { type: 'custom' };\n    item[this.configuration.primaryTextField] = this.inputValue;\n    item[this.configuration.primaryKeyField] = this.inputValue;\n    return item;\n  }\n  /**\n   *  return Item is already selected or not\n   * @param result\n   */\n  checkItemSelected(result: any) {\n    const selectedItem = this.model.items.filter(\n      item =>\n        item[this.configuration.primaryKeyField] ===\n        result[this.configuration.primaryKeyField]\n    );\n    return selectedItem.length > 0 ? true : false;\n  }\n  /**\n   *  gets the inital results\n   * @param searchString\n   */\n  private getResults(searchString: string): void {\n    if (searchString.length >= this.configuration.minimumCharacterCountSearch) {\n      if (\n        !this.matchPastSearchString(searchString) ||\n        (this.matchPastSearchString(searchString) && !this.showResults) ||\n        this.matchPastSearchString('')\n      ) {\n        this.searchString = searchString;\n        window.clearTimeout(this.timeoutNumber);\n        this.timeoutNumber = window.setTimeout(() => {\n          this.showLoad = true;\n          this.service.getDataByText(0, searchString).subscribe(result => {\n            this.results = result.items;\n            this.showLoad = false;\n            this.maxResults = result.totalItems;\n\n            this.highlightedIndex =\n              this.configuration.isFreeTextEnabled || this.maxResults == 0\n                ? -1\n                : 0;\n            if (!this.configuration.isFreeTextEnabled) {\n              this.setHighlightedItem(this.results[this.highlightedIndex]);\n            }\n            this.showResults = true;\n            this.addScreenReaderMessage(\n              this.maxResults + ' ' + this.resultsAvailableMessage\n            );\n            this._changeDetectorRef.markForCheck();\n          });\n        }, this.configuration.debounceTime);\n      }\n    }\n  }\n\n  /**\n   * Checks if the new search string matches the old search string\n   * @param searchString\n   */\n  private matchPastSearchString(searchString: string) {\n    return this.searchString === searchString;\n  }\n  /**\n   * Scroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)\n   */\n  onScroll() {\n    if (this.maxResults > this.results.length) {\n      let scrollAreaHeight = this.resultsListElement.nativeElement.offsetHeight;\n      let scrollTopPos = this.resultsListElement.nativeElement.scrollTop;\n      let scrollAreaMaxHeight = this.resultsListElement.nativeElement\n        .scrollHeight;\n      if (scrollTopPos + scrollAreaHeight * 2 >= scrollAreaMaxHeight) {\n        this.getAdditionalResults();\n      }\n    }\n  }\n\n  /**\n   * gets more results based when scrolling and adds the items\n   */\n  private getAdditionalResults() {\n    this.showLoad = true;\n    this.service\n      .getDataByText(this.results.length, this.searchString)\n      .subscribe(result => {\n        for (let i = 0; i < result.items.length; i++) {\n          this.addResult(result.items[i]);\n        }\n        this.showLoad = false;\n        this.maxResults = result.totalItems;\n      });\n  }\n\n  /**\n   * adds a single item to the list\n   * @param item\n   */\n  private addResult(item: object) {\n    //add check to make sure item does not exist\n    this.results.push(item);\n  }\n\n  /**\n   * Sets the highlighted item by keyboard or mouseover\n   * @param item\n   */\n  private setHighlightedItem(item: Object): void {\n    if (this.results && this.results.length > 0) {\n      if (this.highlightedItem) {\n        this.highlightedItem[this.HighlightedPropertyName] = false;\n      }\n      let message = '';\n      if (item) {\n        this.highlightedItem = item;\n        this.highlightedItem[this.HighlightedPropertyName] = true;\n        message = item[this.configuration.primaryTextField];\n        if (\n          this.configuration.secondaryTextField &&\n          item[this.configuration.secondaryTextField]\n        ) {\n          message += ': ' + item[this.configuration.secondaryTextField];\n        }\n      } else {\n        this.highlightedItem = undefined;\n        message = 'No item selected';\n      }\n      this.addScreenReaderMessage(message);\n    }\n  }\n\n  /**\n   * Adds message to be read by screen reader\n   * @param message\n   */\n  private addScreenReaderMessage(message: string) {\n    this.srOnlyText = message;\n  }\n\n  writeValue(obj: any): void {\n    if (obj instanceof SDSSelectedItemModel) {\n      this.model = obj as SDSSelectedItemModel;\n      this._changeDetectorRef.markForCheck();\n      if (this.model.items.length === 0) {\n        this.inputValue = '';\n      } else if (this.configuration && this.configuration.selectionMode === SelectionMode.SINGLE) {\n        this.inputValue = this.getObjectValue(\n          this.model.items[0],\n          this.configuration.primaryTextField\n        );\n      }\n    }\n  }\n\n  addListener() {\n    const autocompleteElement = document.getElementById(this.configuration.id)\n    const dialogContainer = document.getElementsByClassName('sds-dialog-content')\n    const resultsDropdown = document.getElementsByClassName('sds-autocomplete')\n\n    let inputHeight = autocompleteElement.getBoundingClientRect().height;\n    let modalHeight = dialogContainer[0].getBoundingClientRect().height;\n    dialogContainer[0]\n      .addEventListener('scroll', function (event) {\n        if (resultsDropdown.length > 0) {\n          let inputTopValue = autocompleteElement.getBoundingClientRect().top;\n          let inputBottomValue = modalHeight - inputTopValue;\n          let listHeight = resultsDropdown[0].getBoundingClientRect().height;\n          let element = resultsDropdown[0].parentElement;\n          if (element && element.style.bottom) {\n            element.style.bottom = (inputBottomValue + listHeight - inputHeight + 30) + 'px';\n          } else {\n            element.style.top = (inputTopValue + inputHeight) + 'px';\n          }\n        }\n      });\n  }\n\n  getClass() {\n    return this.configuration.inputReadOnly ? 'hide-cursor' : '';\n  }\n\n  registerOnChange(fn: any): void {\n    this.propogateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grayToLightBackgroundGradiate {\n  background: linear-gradient(to right, #c4c4c4, #f7f7f7);\n  background-size: 400% 400%;\n  height: 10px;\n  padding: 2.5px 0 2.5px 0;\n  text-align: center;\n  color: #888888;\n  font-size: 15px;\n  font-weight: bold;\n  margin: 7px 10px 0 10px;\n  -webkit-animation: gradiantShiftGray 5s ease infinite;\n  -moz-animation: gradiantShiftGray 5s ease infinite;\n  animation: gradiantShiftGray 5s ease infinite;\n\n  @-webkit-keyframes gradiantShiftGray {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  @-moz-keyframes gradiantShiftGray {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  @keyframes gradiantShiftGray {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n}\n\n.lightToGrayBackgroundGradiate {\n  background: linear-gradient(to right, #f7f7f7, #c4c4c4);\n  background-size: 400% 400%;\n  height: 15px;\n  padding: 2.5px 0 2.5px 0;\n  text-align: center;\n  color: #888888;\n  font-size: 15px;\n  font-weight: bold;\n  margin: 10px 10px 0 10px;\n  -webkit-animation: gradiantShift 5s ease infinite;\n  -moz-animation: gradiantShift 5s ease infinite;\n  animation: gradiantShift 5s ease infinite;\n\n  @-webkit-keyframes gradiantShift {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  @-moz-keyframes gradiantShift {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  @keyframes gradiantShift {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n}\n\n.autoLoading {\n  height: 60px;\n}\n\n.hide-cursor {\n  caret-color: transparent;\n}\n\ninput::-ms-clear {\n  display: none;\n}\n\n.sds-autocomplete {\n  position: relative;\n  min-width: 30rem;\n}\n",
                    "styleUrl": "./autocomplete-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div sds-click-outside (clickOutside)=\"checkForFocus($event)\" sds-tab-outside (tabOutside)=\"checkForFocus($event)\">\n  <div class=\"maxw-mobile-lg position-relative\">\n    <div [attr.id]=\"configuration.id + '-container'\">\n      <input role=\"combobox\" [attr.aria-expanded]=\"showResults\" cdkOverlayOrigin #trigger=\"cdkOverlayOrigin\"\n        [attr.aria-owns]=\"showResults ? configuration.id + '-listbox' : undefined\" aria-haspopup=\"listbox\"\n        [disabled]=\"disabled\" (keypress)=\"onkeypress($event)\" (input)=\"textChange($event)\"\n        class=\"usa-input padding-right-3\" [ngClass]=\"getClass()\" #input\n        [attr.aria-label]=\"configuration.ariaLabelText ? configuration.ariaLabelText : configuration.labelText\"\n        [attr.id]=\"configuration.id\" type=\"text\" (focus)=\"inputFocusHandler()\" (keydown)=\"onKeydown($event)\"\n        aria-autocomplete=\"list\" [(ngModel)]=\"inputValue\" [attr.placeholder]=\"configuration.autocompletePlaceHolderText\"\n        [attr.aria-activedescendant]=\"\n          showResults\n            ? configuration.id + '-resultItem-' + highlightedIndex\n            : ''\n        \" [attr.aria-controls]=\"\n          showResults ? configuration.id + '-listbox' : undefined\n        \" autocomplete=\"off\" />\n    </div>\n    <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\"trigger\" [cdkConnectedOverlayOpen]=\"showResults\"\n      [cdkConnectedOverlayDisableClose]=\"true\">\n      <ul #resultsList [attr.id]=\"configuration.id + '-listbox'\" role=\"listbox\" class=\"usa-list \n        usa-list--unstyled sds-autocomplete\" (scroll)=\"onScroll()\">\n        <ng-container *ngIf=\"results && results.length\">\n          <li [attr.id]=\"configuration.id + '-resultItem-' + i\" role=\"option\" [ngClass]=\"{\n              'sds-autocomplete__group': configuration.isGroupingEnabled,\n              'sds-autocomplete__item': !configuration.isGroupingEnabled,\n              'sds-autocomplete__item--highlighted':\n                result['highlighted'] && !configuration.isGroupingEnabled,\n              'sds-autocomplete__item--selected':\n                checkItemSelected(result) && !configuration.isGroupingEnabled\n            }\" *ngFor=\"let result of results; let i = index\"\n            (click)=\"!configuration.isSelectableGroup ? '' : selectItem(result)\">\n            <ng-container *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: result }\">\n            </ng-container>\n            <ng-container *ngIf=\"!itemTemplate\">\n              <div [ngClass]=\"{\n                  'sds-autocomplete__item': configuration.isGroupingEnabled,\n                  'sds-autocomplete__item--highlighted':\n                    configuration.isGroupingEnabled && result['highlighted'],\n                  'sds-autocomplete__item--disabled':\n                    !configuration.isSelectableGroup &&\n                    configuration.isGroupingEnabled,\n                  'sds-autocomplete__item--selected':\n                    checkItemSelected(result) && configuration.isGroupingEnabled\n                }\">\n                <div [ngClass]=\"{\n                    'text-semibold': configuration.secondaryTextField\n                  }\">\n                  {{ getObjectValue(result, configuration.primaryTextField) }}\n                </div>\n                <ng-container *ngIf=\"\n                    configuration.secondaryTextField &&\n                    result[configuration.secondaryTextField]\n                  \">\n                  <div>{{ result[configuration.secondaryTextField] }}</div>\n                </ng-container>\n              </div>\n\n              <ul class=\"usa-list usa-list--unstyled\" #childrenList\n                [attr.id]=\"configuration.id + '-childrenlistbox-' + i\" role=\"listbox\">\n                <li [attr.id]=\"configuration.id + '-childItem-' + j\" role=\"option\" [ngClass]=\"{\n                    'sds-autocomplete__group':\n                      child[configuration.groupByChild]?.length,\n                    'sds-autocomplete__item': !child[configuration.groupByChild]\n                      ?.length,\n                    'sds-autocomplete__item--highlighted':\n                      child['highlighted'] &&\n                      !child[configuration.groupByChild]?.length,\n                    'sds-autocomplete__item--selected':\n                      checkItemSelected(child) &&\n                      !child[configuration.groupByChild]?.length\n                  }\" *ngFor=\"\n                    let child of result[configuration.groupByChild];\n                    let j = index\n                  \" (click)=\"selectItem(child)\">\n                  <div [ngClass]=\"{\n                      'sds-autocomplete__item':\n                        child[configuration.groupByChild]?.length,\n                      'sds-autocomplete__item--highlighted':\n                        child[configuration.groupByChild]?.length &&\n                        child['highlighted'],\n                      'sds-autocomplete__item--disabled':\n                        !configuration.isSelectableGroup &&\n                        child[configuration.groupByChild]?.length,\n                      'sds-autocomplete__item--selected':\n                        checkItemSelected(child) &&\n                        child[configuration.groupByChild]?.length\n                    }\">\n                    <div [ngClass]=\"{\n                        'text-semibold': configuration.secondaryTextField\n                      }\">\n                      {{ getObjectValue(child, configuration.primaryTextField) }}\n                    </div>\n\n                    <div *ngIf=\"\n                        configuration.secondaryTextField &&\n                        child[configuration.secondaryTextField]\n                      \">\n                      {{ child[configuration.secondaryTextField] }}\n                    </div>\n                  </div>\n                  <ul class=\"usa-list usa-list--unstyled\" #childrenItems\n                    [attr.id]=\"configuration.id + '-grandchildren-'\" role=\"listbox\">\n                    <li [attr.id]=\"configuration.id + '-grandchildren-' + k\" role=\"option\"\n                      class=\"sds-autocomplete__item\" [ngClass]=\"{\n                        'sds-autocomplete__item--selected': checkItemSelected(\n                          subchild\n                        ),\n                        'sds-autocomplete__item--highlighted':\n                          subchild['highlighted']\n                      }\" *ngFor=\"\n                        let subchild of child[configuration.groupByChild];\n                        let k = index\n                      \" (click)=\"selectItem(subchild)\">\n                      <div>\n                        <div [ngClass]=\"{\n                            'text-semibold': configuration.secondaryTextField\n                          }\">\n                          {{ getObjectValue( subchild, configuration.primaryTextField ) }}\n\n                          <div *ngIf=\"\n                              configuration.secondaryTextField &&\n                              subchild[configuration.secondaryTextField]\n                            \">\n                            {{ subchild[configuration.secondaryTextField] }}\n                          </div>\n                        </div>\n                      </div>\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n            </ng-container>\n          </li>\n        </ng-container>\n        <ng-container *ngIf=\"!results || results.length == 0\">\n          <li class=\"emptyResults margin-1\">No results found</li>\n        </ng-container>\n        <ng-container *ngIf=\"showLoad\">\n          <li class=\"autoLoading\">\n            <div class=\"lightToGrayBackgroundGradiate\"></div>\n            <div class=\"grayToLightBackgroundGradiate\"></div>\n          </li>\n          <li class=\"autoLoading\">\n            <div class=\"lightToGrayBackgroundGradiate\"></div>\n            <div class=\"grayToLightBackgroundGradiate\"></div>\n          </li>\n        </ng-container>\n      </ul>\n    </ng-template>\n\n\n    <ng-container *ngIf=\"!input.disabled\">\n      <span class=\"position-absolute right-105 top-1 cursor-pointer bg-white\">\n        <span *ngIf=\"inputValue && !disabled\" role=\"button\" aria-label=\"Clear input\" (click)=\"clearInput()\"\n          (keyup.enter)=\"clearInput()\" tabindex=\"0\">\n          <usa-icon [icon]=\"'x'\" size=\"lg\"></usa-icon>\n        </span>\n        <span *ngIf=\"!configuration.isTagModeEnabled\" class=\"margin-left-1\">\n          <usa-icon role=\"button\" aria-label=\"Display Options\" tabindex=\"0\" *ngIf=\"!showResults && !disabled\"\n            (click)=\"openOptions()\" (keyup.enter)=\"openOptions()\" [icon]=\"'caret-down-fill'\" size=\"1x\">\n          </usa-icon>\n          <usa-icon role=\"button\" aria-label=\"Hide Options\" tabindex=\"0\" *ngIf=\"showResults && !disabled\"\n            (click)=\"checkForFocus($event)\" (keyup.enter)=\"checkForFocus($event)\" [icon]=\"'caret-up-fill'\" size=\"1x\">\n          </usa-icon>\n        </span>\n      </span>\n    </ng-container>\n    <ul class=\"usa-sr-only\" aria-live=\"assertive\">\n      <li>{{ srOnlyText }}</li>\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "SdsDialogContainerComponent",
            "id": "component-SdsDialogContainerComponent-f3e20c12456f947115648a6f810fb8db",
            "file": "libs/packages/components/src/lib/dialog/dialog-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-dialog-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "dialog-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_animationStateChanged",
                    "defaultValue": "new EventEmitter<AnimationEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Emits when an animation state changes.</p>\n",
                    "line": 84,
                    "rawdescription": "\nEmits when an animation state changes."
                },
                {
                    "name": "_ariaLabelledBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "<p>ID of the element that should be considered as the dialog&#39;s label.</p>\n",
                    "line": 87,
                    "rawdescription": "\nID of the element that should be considered as the dialog's label."
                },
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsDialogConfig",
                    "optional": false,
                    "description": "<p>The dialog configuration.</p>\n",
                    "line": 98,
                    "rawdescription": "\nThe dialog configuration.",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_elementFocusedBeforeDialogWasOpened",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "<p>Element that was focused before the dialog was opened. Save this to restore upon close.</p>\n",
                    "line": 78,
                    "rawdescription": "\nElement that was focused before the dialog was opened. Save this to restore upon close.",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_focusTrap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusTrap",
                    "optional": false,
                    "description": "<p>The class that traps and manages focus within the dialog.</p>\n",
                    "line": 75,
                    "rawdescription": "\nThe class that traps and manages focus within the dialog.",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>ID for the container DOM element.</p>\n",
                    "line": 90,
                    "rawdescription": "\nID for the container DOM element."
                },
                {
                    "name": "_portalOutlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkPortalOutlet",
                    "optional": false,
                    "description": "<p>The portal outlet inside of this container into which the dialog content will be loaded.</p>\n",
                    "line": 72,
                    "rawdescription": "\nThe portal outlet inside of this container into which the dialog content will be loaded.",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkPortalOutlet, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_state",
                    "defaultValue": "this._config.slideOut ? 'slideEnter' : 'enter'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"void\" | \"enter\" | \"exit\" | \"slideEnter\" | \"slideExit\"",
                    "optional": false,
                    "description": "<p>State of the dialog animation.</p>\n",
                    "line": 81,
                    "rawdescription": "\nState of the dialog animation."
                }
            ],
            "methodsClass": [
                {
                    "name": "_onAnimationDone",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCallback, invoked whenever an animation on the host completes.",
                    "description": "<p>Callback, invoked whenever an animation on the host completes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onAnimationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCallback, invoked when an animation on the host starts.",
                    "description": "<p>Callback, invoked when an animation on the host starts.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_restoreFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRestores focus to the element that was focused before the dialog opened.",
                    "description": "<p>Restores focus to the element that was focused before the dialog opened.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_savePreviouslyFocusedElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSaves a reference to the element that was focused before the dialog was opened.",
                    "description": "<p>Saves a reference to the element that was focused before the dialog was opened.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_startExitAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStarts the dialog exit animation.",
                    "description": "<p>Starts the dialog exit animation.</p>\n"
                },
                {
                    "name": "_trapFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMoves the focus inside the focus trap.",
                    "description": "<p>Moves the focus inside the focus trap.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "attachComponentPortal",
                    "args": [
                        {
                            "name": "portal",
                            "type": "ComponentPortal<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttach a ComponentPortal as content to this dialog container.\n",
                    "description": "<p>Attach a ComponentPortal as content to this dialog container.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3679,
                                "end": 3685,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "portal"
                            },
                            "type": "ComponentPortal<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3673,
                                "end": 3678,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Portal to be attached as the dialog content.</p>\n"
                        }
                    ]
                },
                {
                    "name": "attachTemplatePortal",
                    "args": [
                        {
                            "name": "portal",
                            "type": "TemplatePortal<C>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EmbeddedViewRef<C>",
                    "typeParameters": [
                        "C"
                    ],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttach a TemplatePortal as content to this dialog container.\n",
                    "description": "<p>Attach a TemplatePortal as content to this dialog container.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4105,
                                "end": 4111,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "portal"
                            },
                            "type": "TemplatePortal<C>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4099,
                                "end": 4104,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Portal to be attached as the dialog content.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Internal component that wraps user-provided dialog content.</p>\n",
            "rawdescription": "\n\nInternal component that wraps user-provided dialog content.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { AnimationEvent } from '@angular/animations';\nimport { sdsDialogAnimations } from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { SdsDialogConfig } from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwSdsDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\n@Component({\n  selector: 'sds-dialog-container',\n  templateUrl: 'dialog-container.component.html',\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [sdsDialogAnimations.dialogContainer],\n  // tslint:disable-next-line: use-host-property-decorator\n  host: {\n    'class': 'sds-dialog__container',\n    '[class.sds-dialog--alert]': '_config.alert',\n    '[class.sds-dialog--alert-error]': '_config.alert === \"error\"',\n    '[class.sds-dialog--alert-warning]': '_config.alert === \"warning\"',\n    '[class.sds-dialog--alert-info]': '_config.alert === \"info\"',\n    '[class.sds-dialog--alert-success]': '_config.alert === \"success\"',\n    '[class.dialog-slide-out]': '_config.slideOut',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class SdsDialogContainerComponent extends BasePortalOutlet {\n\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, { static: true }) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' | 'slideEnter' | 'slideExit' = this._config.slideOut ? 'slideEnter' : 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: SdsDialogConfig) {\n    super();\n\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwSdsDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwSdsDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter' || event.toState === 'slideEnter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit' || event.toState === 'slideExit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = this._config.slideOut ? 'slideExit' : 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_focusTrapFactory",
                        "type": "FocusTrapFactory",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_config",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusTrapFactory",
                        "type": "FocusTrapFactory",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "SdsDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BasePortalOutlet",
            "templateData": "<button *ngIf=\"_config.displayCloseBtn\" sds-dialog-close class=\"close-btn\" aria-label=\"Close Modal\">\n  <usa-icon [icon]=\"'x'\"></usa-icon>\n</button>\n\n<!-- Alert Icons -->\n<div *ngIf=\"_config.alert\" [ngSwitch]=\"_config.alert\" class=\"sds-dialog-icon\">\n  <usa-icon *ngSwitchCase=\"'error'\" [icon]=\"'alert-error'\" size=\"3x\"></usa-icon>\n  <usa-icon *ngSwitchCase=\"'warning'\" [icon]=\"'exclamation-triangle'\" size=\"3x\"></usa-icon>\n  <usa-icon *ngSwitchCase=\"'info'\" [icon]=\"'info-circle'\" size=\"3x\"></usa-icon>\n  <usa-icon *ngSwitchCase=\"'success'\" [icon]=\"'check-circle'\" size=\"3x\"></usa-icon>\n  <div *ngSwitchDefault>\n    Alert <em>{{ _config.alert }}</em> is not valid\n  </div>\n</div>\n\n<ng-template cdkPortalOutlet></ng-template>\n"
        },
        {
            "name": "SdsEditorComponent",
            "id": "component-SdsEditorComponent-ace74dd046790bde1c82b058721bc2cc",
            "file": "libs/packages/components/src/lib/editor/editor.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SdsEditorComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "sds-editor",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n  #searchInput\n  [attr.id]=\"id\"\n  style=\"min-height:100px; border:black solid 2px\"\n  contenteditable=\"true\"\n  (input)=\"valueChange($event.target.innerHTML)\"\n>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "'searchEditor'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "regex",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "contentText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "highlightIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "model",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {read: ElementRef, static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getModel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItems",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateRegex",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "valueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Input,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    selector: 'sds-editor',\n    template: `\n    <div\n      #searchInput\n      [attr.id]=\"id\"\n      style=\"min-height:100px; border:black solid 2px\"\n      contenteditable=\"true\"\n      (input)=\"valueChange($event.target.innerHTML)\"\n    >\n    </div>\n  `,\n\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SdsEditorComponent),\n            multi: true,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsEditorComponent implements ControlValueAccessor {\n    @ViewChild('searchInput', { read: ElementRef, static: false })\n    searchInput: ElementRef;\n    contentText = '';\n    @Input() id = 'searchEditor';\n    @Input() regex = '';\n    model = '';\n    highlightIndex = 0;\n\n    private _onChange = (_: any) => { };\n    private _onTouched = () => { };\n\n    constructor(private cd: ChangeDetectorRef) {\n    }\n\n    // Helper method to programatically add a value to the existing items array\n    valueChange(value) {\n        this.model = value;\n        this.validateRegex(this.model);\n        this.updateModel();\n\n    }\n\n    // Method that is fired when the child component event notifies us that the items array has been modified within the child component\n    updateItems($event) {\n        this.updateModel();\n    }\n\n    // Helper method that gets a new instance of the model and notifies ControlValueAccessor that we have a new model for this FormControl (our custom component)\n    updateModel() {\n        const model = this.getModel();\n        this._onChange(model);\n    }\n\n    // Helper method to return a new instance of an array that contains our items\n    getModel() {\n        return this.model;\n    }\n    validateRegex(value) {\n        const rawValue = value.replaceAll('<mark>', '').replaceAll('</mark>', '');\n        const regex = new RegExp(this.regex, 'g');\n        let res = \"\";\n        let result = regex.exec(rawValue);\n        if (result) {\n            let index = result.index;\n            res = rawValue.substring(0, index) +\n                '<mark>' + rawValue.substring(index, index + 1) +\n                '</mark>' + rawValue.substring(index + 1, index + rawValue.length);\n        } else {\n            res = value;\n        }\n\n        this.searchInput.nativeElement.innerHTML = res;\n        document.execCommand('selectAll', false, null);\n        document.getSelection().collapseToEnd();\n    }\n\n    // ControlValueAccessor (and Formly) is trying to update the value of the FormControl (our custom component) programatically\n    // If there is a value we will just overwrite items\n    // If there is no value we reset the items array to be empty\n    writeValue(value: any) {\n        console.log(value, 'reset')\n        if (value) {\n            this.model = value;\n            this.searchInput.nativeElement.innerHTML = value;\n            this.cd.markForCheck();\n        } else {\n            this.model = '';\n            if (this.searchInput) this.searchInput.nativeElement.innerHTML = '';\n            this.cd.markForCheck();\n        }\n    }\n\n    // ControlValueAccessor hook that lets us call this._onChange(var) to let the form know our variable has changed (in this case model)\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    // ControlValueAccessor hook (not used)\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "SdsIconComponent",
            "id": "component-SdsIconComponent-05cdeab3e244d1aad7f7b0b4f1ce2e62",
            "file": "libs/packages/components/src/lib/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Classes to be applied to i-bs element",
                    "description": "<p>Classes to be applied to i-bs element</p>\n",
                    "line": 17,
                    "type": ""
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "rotate",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number"
                },
                {
                    "name": "size",
                    "defaultValue": "'lg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "skew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Array of up to two numbers to indicate the degree value to skew icon. The first element determines the horizontal skewing. The second element determines the vertical skewing. The second element is optional. if it is not provided, 0 will be used.",
                    "description": "<p>Array of up to two numbers to indicate the degree value to skew icon. The first element determines the horizontal skewing. The second element determines the vertical skewing. The second element is optional. if it is not provided, 0 will be used.</p>\n",
                    "line": 26,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "iconClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "skewX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "skewY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sds-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss']\n})\nexport class SdsIconComponent {\n\n  @Input() icon: string;\n  @Input() rotate: number = 0;\n  @Input() size: string = 'lg';\n  /**\n   * Classes to be applied to i-bs element\n   */\n  @Input()\n  set classes(classesToApply: Array<string>){\n    if(classesToApply){\n      this.iconClasses = classesToApply.join(', ')\n    }\n  };\n  /**\n   * Array of up to two numbers to indicate the degree value to skew icon. The first element determines the horizontal skewing. The second element determines the vertical skewing. The second element is optional. if it is not provided, 0 will be used.\n   */\n  @Input()\n  set skew(value: Array<number>){\n    this.skewX = value[0];\n    this.skewY = value[1] ? value[1] : 0;\n  }\n\n  get skewClass():string{\n    if(this.skewX || this.skewY){\n      return `skew-${this.skewX}-${this.skewY}`;\n    }\n    return '';\n  }\n\n  skewX: number;\n  skewY: number;\n  iconClasses: string = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$rotation-values: 30 45 60 90 120 135 150 180 210 225 240 270 300 315 330;\n$skew-values: -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45;\n\n@each $item in $rotation-values {\n  i-bs.rotate-#{$item} ::ng-deep{\n    svg{\n      transform: rotate($item * 1deg);\n    }\n  }\n}\n\n@each $skewX in $skew-values {\n  @each $skewY in $skew-values {\n    i-bs.skew-#{$skewX}-#{$skewY} ::ng-deep{\n      svg{\n        transform: skew($skewX * 1deg, $skewY * 1deg);\n      }\n    }\n  }\n}\n\ni-bs ::ng-deep{\n  svg {\n    width: 1em;\n    height: 1em;\n    overflow: visible;\n  }\n}\n\ni-bs.size-xs{\n  font-size: .75em;\n}\ni-bs.size-sm{\n  font-size: .875em;\n}\ni-bs.size-lg{\n  font-size: 1.33em;\n}\ni-bs.size-2x{\n  font-size: 2em;\n}\ni-bs.size-3x{\n  font-size: 3em;\n}\ni-bs.size-4x{\n  font-size: 4em;\n}\ni-bs.size-5x{\n  font-size: 5em;\n}\ni-bs.size-6x{\n  font-size: 6em;\n}\ni-bs.size-7x{\n  font-size: 7em;\n}\ni-bs.size-8x{\n  font-size: 8em;\n}\ni-bs.size-9x{\n  font-size: 9em;\n}\ni-bs.size-10x{\n  font-size: 10em;\n}\n\ni-bs{\n  vertical-align: -0.15rem;\n}\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "setSignature": {
                        "name": "classes",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "classesToApply",
                                "type": "Array<string>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "rawdescription": "Classes to be applied to i-bs element",
                        "description": "<p>Classes to be applied to i-bs element</p>\n",
                        "jsdoctags": [
                            {
                                "name": "classesToApply",
                                "type": "Array<string>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "skew": {
                    "name": "skew",
                    "setSignature": {
                        "name": "skew",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Array<number>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "rawdescription": "Array of up to two numbers to indicate the degree value to skew icon. The first element determines the horizontal skewing. The second element determines the vertical skewing. The second element is optional. if it is not provided, 0 will be used.",
                        "description": "<p>Array of up to two numbers to indicate the degree value to skew icon. The first element determines the horizontal skewing. The second element determines the vertical skewing. The second element is optional. if it is not provided, 0 will be used.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Array<number>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "skewClass": {
                    "name": "skewClass",
                    "getSignature": {
                        "name": "skewClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 31
                    }
                }
            },
            "templateData": "<ng-container>\n  <i-bs name={{icon}} class=\"rotate-{{rotate}} size-{{size}}\" aria-hidden=true role=\"img\" [ngClass]=\"[iconClasses, skewClass]\"></i-bs>\n</ng-container>\n"
        },
        {
            "name": "SdsMenuComponent",
            "id": "component-SdsMenuComponent-99189209fb0bfc13ba0d62e8ec0e324e",
            "file": "libs/packages/components/src/lib/menu/menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "sdsMenu",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: SDS_MENU_TOKEN, useExisting: SdsMenuComponent }",
                    "type": "component"
                }
            ],
            "selector": "sds-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Transfer classes from the sds-menu to the overlay container",
                    "description": "<p>Transfer classes from the sds-menu to the overlay container</p>\n",
                    "line": 143,
                    "type": "string"
                },
                {
                    "name": "overlapTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether menu panel overlaps trigger element",
                    "description": "<p>Whether menu panel overlaps trigger element</p>\n",
                    "line": 133,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Size of menu component.\nAffects the font-size of the menu items and\nthe size of the close button in the menu header",
                    "description": "<p>Size of menu component.\nAffects the font-size of the menu items and\nthe size of the close button in the menu header</p>\n",
                    "line": 109,
                    "type": "MenuSizes"
                },
                {
                    "name": "xPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Position of the menu in the X axis.",
                    "description": "<p>Position of the menu in the X axis.</p>\n",
                    "line": 113,
                    "type": "MenuPositionX"
                },
                {
                    "name": "yPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Position of the menu in the Y axis.",
                    "description": "<p>Position of the menu in the Y axis.</p>\n",
                    "line": 123,
                    "type": "MenuPositionY"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void | 'click' | 'keydown' | 'tab'>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted when the menu is closed.",
                    "description": "<p>Event emitted when the menu is closed.</p>\n",
                    "line": 166,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_classList",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>Config object to be passed into the menu&#39;s ngClass</p>\n",
                    "line": 96,
                    "rawdescription": "\nConfig object to be passed into the menu's ngClass"
                },
                {
                    "name": "_items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsMenuItemComponent[]",
                    "optional": false,
                    "description": "<p>Menu items inside the current menu.</p>\n",
                    "line": 87,
                    "rawdescription": "\nMenu items inside the current menu.",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_keyManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusKeyManager<SdsMenuItemComponent>",
                    "optional": false,
                    "description": "<p>Manage browser focus</p>\n",
                    "line": 84,
                    "rawdescription": "\nManage browser focus",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_overlapTrigger",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 139,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_panelAnimationState",
                    "defaultValue": "'void'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"void\" | \"enter\"",
                    "optional": false,
                    "description": "<p>Current state of the panel animation.</p>\n",
                    "line": 99,
                    "rawdescription": "\nCurrent state of the panel animation."
                },
                {
                    "name": "_previousPanelClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Stores <sds-menu> classes</p>\n",
                    "line": 93,
                    "rawdescription": "\nStores <sds-menu> classes",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_tabSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subscription to tab events on the menu panel</p>\n",
                    "line": 90,
                    "rawdescription": "\nSubscription to tab events on the menu panel",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_xPosition",
                    "defaultValue": "'after'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuPositionX",
                    "optional": false,
                    "description": "<p>After | Before the menu triger element</p>\n",
                    "line": 78,
                    "rawdescription": "\nAfter | Before the menu triger element",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_yPosition",
                    "defaultValue": "'below'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuPositionY",
                    "optional": false,
                    "description": "<p>Above | Below the menu triger element</p>\n",
                    "line": 81,
                    "rawdescription": "\nAbove | Below the menu triger element",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Grab the component template</p>\n",
                    "line": 102,
                    "rawdescription": "\nGrab the component template",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandle a keyboard event from the menu",
                    "description": "<p>Handle a keyboard event from the menu</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onAnimationDone",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCallback that is invoked when the panel animation completes.",
                    "description": "<p>Callback that is invoked when the panel animation completes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onAnimationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_resetAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nResets the panel animation to its initial state.",
                    "description": "<p>Resets the panel animation to its initial state.</p>\n"
                },
                {
                    "name": "_startAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStarts the enter animation.",
                    "description": "<p>Starts the enter animation.</p>\n"
                },
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds a menu item with the menu.",
                    "description": "<p>Adds a menu item with the menu.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusFirstItem",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFocus the first item in the menu",
                    "description": "<p>Focus the first item in the menu</p>\n",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInserts a menu item at an index",
                    "description": "<p>Inserts a menu item at an index</p>\n",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRemoves an item from the menu.",
                    "description": "<p>Removes an item from the menu.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SdsMenuItemComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "MenuPositionX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.xPosition"
                        },
                        {
                            "name": "posY",
                            "type": "MenuPositionY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.yPosition"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdds classes to the menu panel based on its position",
                    "description": "<p>Adds classes to the menu panel based on its position</p>\n",
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "MenuPositionX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.xPosition",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "MenuPositionY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.yPosition",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit\n} from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport {\n  ESCAPE,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey\n} from '@angular/cdk/keycodes';\nimport { FocusKeyManager, FocusOrigin } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subscription } from 'rxjs';\nimport { sdsMenuAnimations } from './menu-animations';\nimport { SdsMenuItemComponent } from './menu-item.component';\n\n/** Menu Positions */\nexport type MenuPositionX = 'before' | 'after';\nexport type MenuPositionY = 'above' | 'below';\n\n/** Menu available sizes */\n// sm = 'small'\nexport type MenuSizes = 'sm';\n\n/** Injection token used to provide the parent menu to menu items. */\nexport const SDS_MENU_TOKEN = new InjectionToken<SdsMenuInterface>(\n  'SDS_MENU_TOKEN'\n);\n\n/** Menu Interface */\nexport interface SdsMenuInterface<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: SdsMenuInterface;\n  size?: MenuSizes;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  addItem?: (item: T) => void;\n  insertItem?: (item: T, index: number) => void;\n  removeItem?: (item: T) => void;\n}\n\n@Component({\n  selector: 'sds-menu',\n  exportAs: 'sdsMenu',\n  templateUrl: 'menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [sdsMenuAnimations.transformMenu],\n  providers: [\n    { provide: SDS_MENU_TOKEN, useExisting: SdsMenuComponent }\n  ]\n})\nexport class SdsMenuComponent\n  implements\n  OnInit,\n  AfterContentInit,\n  OnDestroy,\n  SdsMenuInterface<SdsMenuItemComponent> {\n  /** After | Before the menu triger element */\n  private _xPosition: MenuPositionX = 'after';\n\n  /** Above | Below the menu triger element */\n  private _yPosition: MenuPositionY = 'below';\n\n  /** Manage browser focus */\n  private _keyManager: FocusKeyManager<SdsMenuItemComponent>;\n\n  /** Menu items inside the current menu. */\n  private _items: SdsMenuItemComponent[] = [];\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Stores <sds-menu> classes */\n  private _previousPanelClass: string;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: { [key: string]: boolean } = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Grab the component template */\n  @ViewChild(TemplateRef, { static: false }) templateRef: TemplateRef<any>;\n\n  /**\n   * Size of menu component.\n   * Affects the font-size of the menu items and\n   * the size of the close button in the menu header\n   */\n  @Input() size: MenuSizes;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX {\n    return this._xPosition;\n  }\n  set xPosition(value: MenuPositionX) {\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY {\n    return this._yPosition;\n  }\n  set yPosition(value: MenuPositionY) {\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Whether menu panel overlaps trigger element */\n  @Input()\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger = false;\n\n  /** Transfer classes from the sds-menu to the overlay container */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n    // Remove previous classes from current set of classes\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    // Adds new classes to current set of classes\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      // Remove all classes from <sds-menu>\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<SdsMenuItemComponent>(\n      this._items\n    ).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() =>\n      this.closed.emit('tab')\n    );\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Focus the first item in the menu */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /** Adds classes to the menu panel based on its position */\n  setPositionClasses(\n    posX: MenuPositionX = this.xPosition,\n    posY: MenuPositionY = this.yPosition\n  ) {\n    const classes = this._classList;\n    classes['sds-menu-before'] = posX === 'before';\n    classes['sds-menu-after'] = posX === 'after';\n    classes['sds-menu-above'] = posY === 'above';\n    classes['sds-menu-below'] = posY === 'below';\n  }\n\n  /** Adds a menu item with the menu. */\n  addItem(item: SdsMenuItemComponent) {\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n    }\n  }\n\n  /** Inserts a menu item at an index */\n  insertItem(item: SdsMenuItemComponent, index: number) {\n    if (this._items.indexOf(item) === -1 && index < this._items.length) {\n      this._items.splice(index, 0, item);\n    }\n  }\n\n  /** Removes an item from the menu. */\n  removeItem(item: SdsMenuItemComponent) {\n    const index = this._items.indexOf(item);\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n    }\n  }\n\n  /** Handle a keyboard event from the menu */\n  _handleKeydown(event: KeyboardEvent) {\n    // tslint:disable-next-line: deprecation\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME\n            ? manager.setFirstItemActive()\n            : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) { }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    // Scroll the content element to the top as soon as the animation starts.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 166,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "OnDestroy",
                "SdsMenuInterface"
            ],
            "accessors": {
                "xPosition": {
                    "name": "xPosition",
                    "setSignature": {
                        "name": "xPosition",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "MenuPositionX",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 116,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "MenuPositionX",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "xPosition",
                        "type": "",
                        "returnType": "MenuPositionX",
                        "line": 113,
                        "rawdescription": "Position of the menu in the X axis.",
                        "description": "<p>Position of the menu in the X axis.</p>\n"
                    }
                },
                "yPosition": {
                    "name": "yPosition",
                    "setSignature": {
                        "name": "yPosition",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "MenuPositionY",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 126,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "MenuPositionY",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "yPosition",
                        "type": "",
                        "returnType": "MenuPositionY",
                        "line": 123,
                        "rawdescription": "Position of the menu in the Y axis.",
                        "description": "<p>Position of the menu in the Y axis.</p>\n"
                    }
                },
                "overlapTrigger": {
                    "name": "overlapTrigger",
                    "setSignature": {
                        "name": "overlapTrigger",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 136,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "overlapTrigger",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 133,
                        "rawdescription": "Whether menu panel overlaps trigger element",
                        "description": "<p>Whether menu panel overlaps trigger element</p>\n"
                    }
                },
                "panelClass": {
                    "name": "panelClass",
                    "setSignature": {
                        "name": "panelClass",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "classes",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 143,
                        "rawdescription": "Transfer classes from the sds-menu to the overlay container",
                        "description": "<p>Transfer classes from the sds-menu to the overlay container</p>\n",
                        "jsdoctags": [
                            {
                                "name": "classes",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-template>\n  <div\n    class=\"sds-overlay minw-menu maxw-mobile radius-overlay\"\n    [ngClass]=\"_classList\"\n    (keydown)=\"_handleKeydown($event)\"\n    (click)=\"closed.emit('click')\"\n    [@transformMenu]=\"_panelAnimationState\"\n    (@transformMenu.start)=\"_onAnimationStart($event)\"\n    (@transformMenu.done)=\"_onAnimationDone($event)\"\n    tabindex=\"-1\"\n    role=\"menu\"\n  >\n    <div class=\"sds-menu\" [class.sds-menu--small]=\"size === 'sm'\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "SdsMenuHeaderComponent",
            "id": "component-SdsMenuHeaderComponent-385fbcf820475668c8709317adbec5d0",
            "file": "libs/packages/components/src/lib/menu/menu-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-menu-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "menu-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hideClose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sds-menu-header',\n  templateUrl: 'menu-header.component.html'\n})\nexport class SdsMenuHeaderComponent {\n  @Input() hideClose = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"sds-menu__header\">\n  <span class=\"sds-menu__header-title\"> <ng-content></ng-content> </span>\n  <button\n    *ngIf=\"!hideClose\"\n    aria-label=\"Close Menu\"\n    sds-menu-item\n    role=\"button\"\n  >\n  <usa-icon [icon]=\"'x'\"></usa-icon>\n  </button>\n</div>\n"
        },
        {
            "name": "SdsMenuItemComponent",
            "id": "component-SdsMenuItemComponent-e341254367af51f341c713fc6150632e",
            "file": "libs/packages/components/src/lib/menu/menu-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[sds-menu-item]",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether the menu item should be disabled",
                    "description": "<p>Whether the menu item should be disabled</p>\n",
                    "line": 39,
                    "type": "any"
                },
                {
                    "name": "role",
                    "defaultValue": "'menuitem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "ARIA role for the menu item.",
                    "description": "<p>ARIA role for the menu item.</p>\n",
                    "line": 29,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Holds the disable status value</p>\n",
                    "line": 35,
                    "rawdescription": "\nHolds the disable status value",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "class",
                    "defaultValue": "this._getClass()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Menu item class</p>\n",
                    "line": 26,
                    "rawdescription": "\nMenu item class",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "this.disabled ? '-1' : '0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Menu item tab index</p>\n",
                    "line": 32,
                    "rawdescription": "\nMenu item tab index",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.tabIndex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet item class",
                    "description": "<p>Get item class</p>\n"
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFocuses the menu item.",
                    "description": "<p>Focuses the menu item.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'program'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStop listening to focus changes and remove item from parent",
                    "description": "<p>Stop listening to focus changes and remove item from parent</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.tabIndex",
                    "defaultValue": "this.disabled ? '-1' : '0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Menu item tab index",
                    "description": "<p>Menu item tab index</p>\n",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "class",
                    "defaultValue": "this._getClass()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Menu item class",
                    "description": "<p>Menu item class</p>\n",
                    "line": 26,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  OnDestroy,\n  Inject,\n  Input,\n  HostBinding,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Optional\n} from '@angular/core';\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SDS_MENU_TOKEN, SdsMenuInterface } from './menu.component';\nimport { SdsMenuHeaderComponent } from './menu-header.component';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: '[sds-menu-item]',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class SdsMenuItemComponent implements FocusableOption, OnDestroy {\n  /** Menu item class */\n  @HostBinding('class') class = this._getClass();\n\n  /** ARIA role for the menu item. */\n  @HostBinding('attr.role') @Input() role: 'menuitem' = 'menuitem';\n\n  /** Menu item tab index */\n  @HostBinding('attr.tabIndex') tabIndex = this.disabled ? '-1' : '0';\n\n  /** Holds the disable status value */\n  private _disabled = false;\n\n  /** Whether the menu item should be disabled */\n  @Input()\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusMonitor: FocusMonitor,\n    @Inject(SDS_MENU_TOKEN)\n    private _parentMenu: SdsMenuInterface<SdsMenuItemComponent>,\n    @Optional() private _parentMenuHeader: SdsMenuHeaderComponent\n  ) {\n    // Start listening to focus changes\n    _focusMonitor.monitor(this._elementRef, false);\n    // Add this menu item to its parent menu\n    // If item its inside a header\n    // add it as the first item in the list\n    if (_parentMenuHeader) {\n      _parentMenu.insertItem(this, 0);\n    } else {\n      _parentMenu.addItem(this);\n    }\n  }\n\n  /** Get item class */\n  _getClass(): string {\n    const headerButtonSmall =\n      this._parentMenu.size === 'sm' ? 'sds-button--small' : '';\n    return this._parentMenuHeader\n      ? `sds-button sds-button--circular ${headerButtonSmall}`\n      : 'sds-menu__item';\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    this._focusMonitor.focusVia(this._elementRef.nativeElement, origin);\n  }\n\n  /** Stop listening to focus changes and remove item from parent */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._parentMenu.removeItem(this);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_parentMenu",
                        "type": "SdsMenuInterface<SdsMenuItemComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_parentMenuHeader",
                        "type": "SdsMenuHeaderComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentMenu",
                        "type": "SdsMenuInterface<SdsMenuItemComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentMenuHeader",
                        "type": "SdsMenuHeaderComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "FocusableOption",
                "OnDestroy"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 39,
                        "rawdescription": "Whether the menu item should be disabled",
                        "description": "<p>Whether the menu item should be disabled</p>\n"
                    }
                }
            }
        },
        {
            "name": "SdsPageComponent",
            "id": "component-SdsPageComponent-717c4135d1fc09822ae19def187bf093",
            "file": "libs/packages/components/src/lib/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-page",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"grid-container\"><ng-content></ng-content></div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sds-page',\n  template: `\n    <div class=\"grid-container\"><ng-content></ng-content></div>\n  `\n})\nexport class SdsPageComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n\n@Component({\n  selector: 'sds-page-options',\n  template: `\n    <div class=\"grid-row position-relative\"><ng-content></ng-content></div>\n  `\n})\nexport class SdsPageOptionsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SdsPageOptionsComponent",
            "id": "component-SdsPageOptionsComponent-717c4135d1fc09822ae19def187bf093",
            "file": "libs/packages/components/src/lib/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-page-options",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"grid-row position-relative\"><ng-content></ng-content></div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sds-page',\n  template: `\n    <div class=\"grid-container\"><ng-content></ng-content></div>\n  `\n})\nexport class SdsPageComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n\n@Component({\n  selector: 'sds-page-options',\n  template: `\n    <div class=\"grid-row position-relative\"><ng-content></ng-content></div>\n  `\n})\nexport class SdsPageOptionsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SdsSearchComponent",
            "id": "component-SdsSearchComponent-72bcc44c273e4e7b7e8665fb6faff583",
            "file": "libs/packages/components/src/lib/search/search.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SdsSearchComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "sds-search",
            "styleUrls": [
                "search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "searchSettings",
                    "defaultValue": "new SearchSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "SearchSettings"
                }
            ],
            "outputsClass": [
                {
                    "name": "submit",
                    "defaultValue": "new EventEmitter(\n    null\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "buttonEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'buttonEl', {read: ElementRef, static: false}"
                        }
                    ]
                },
                {
                    "name": "inputEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputEl', {read: ElementRef, static: false}"
                        }
                    ]
                },
                {
                    "name": "inputState",
                    "defaultValue": "{\n    initial: { visible: undefined },\n    visible: undefined,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "model",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "selectEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selectEl', {read: ElementRef, static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateInputWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearInput",
                    "args": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isInputVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeInputVisibleStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setInputVisibleStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValueToModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nexport class SearchSettings {\n  public placeholder = 'Search';\n  public ariaLabel? = 'Search';\n  public size?: string;\n  public inputClass?: string;\n  public parentSelector?: string;\n  public id?: string;\n  public dropdown?: any = {\n    id: 'searchOptions',\n    placeholder: '-Select-',\n    options: [],\n    inverse: false,\n  };\n  public isSuffixSearchIcon?: boolean = false;\n}\n@Component({\n  selector: 'sds-search',\n  templateUrl: 'search.component.html',\n  styleUrls: ['search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SdsSearchComponent),\n      multi: true,\n    },\n  ],\n\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SdsSearchComponent implements AfterViewInit, ControlValueAccessor {\n  @ViewChild('inputEl', { read: ElementRef, static: false })\n  inputEl: ElementRef;\n  @ViewChild('selectEl', { read: ElementRef, static: false })\n  selectEl: ElementRef;\n  @ViewChild('buttonEl', { read: ElementRef, static: false })\n  buttonEl: ElementRef;\n\n  @Input() searchSettings: SearchSettings = new SearchSettings();\n  @Output() submit: EventEmitter<{ searchText: string }> = new EventEmitter(\n    null\n  );\n\n  model: any = {};\n  inputState = {\n    initial: { visible: undefined },\n    visible: undefined,\n  };\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  constructor(\n    private cd: ChangeDetectorRef,\n    private focusMonitor: FocusMonitor,\n    private viewportRuler: ViewportRuler\n  ) {}\n\n  ngAfterViewInit() {\n    this.inputState.initial.visible = this.isInputVisible();\n    this.inputState.visible = this.inputState.initial.visible;\n    this.viewportRuler.change(0).subscribe(() => {\n      this.inputState.initial.visible = this.isInputVisible();\n      this.inputState.visible = this.inputState.initial.visible;\n    });\n  }\n\n  hasDropdown() {\n    if (\n      this.searchSettings &&\n      this.searchSettings.dropdown &&\n      this.searchSettings.dropdown.options &&\n      this.searchSettings.dropdown.options.length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  handleClick(event) {\n    event.preventDefault();\n    if (!this.inputState.visible) {\n      this.setInputVisibleStyles();\n      this.focusMonitor.focusVia(this.inputEl, 'program');\n    } else if (this.inputEl || this.selectEl) {\n      this.submit.emit(this.model);\n    }\n  }\n\n  writeValueToModel() {\n    this.model.searchText = this.inputEl\n      ? this.inputEl.nativeElement.value\n      : '';\n    if (this.selectEl && this.selectEl.nativeElement.value) {\n      this.model.searchCategory = this.selectEl.nativeElement.value;\n    }\n    this._onChange(Object.assign({}, this.model));\n  }\n\n  writeValue(value: any) {\n    if (value && this.model !== value) {\n      this.model = value;\n      this.cd.markForCheck();\n    } else {\n      this.model = {};\n      this.cd.markForCheck();\n    }\n  }\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  isInputVisible(): boolean {\n    return this.inputEl.nativeElement.getBoundingClientRect().width\n      ? true\n      : false;\n  }\n\n  setInputVisibleStyles() {\n    const inputWidth = this.calculateInputWidth();\n    this.inputEl.nativeElement.style.setProperty(\n      'display',\n      'block',\n      'important'\n    );\n    this.inputEl.nativeElement.style.position = 'absolute';\n    this.inputEl.nativeElement.style.left = `-${inputWidth}px`;\n    this.inputEl.nativeElement.style.setProperty(\n      'width',\n      `${inputWidth}px`,\n      'important'\n    );\n    this.inputState.visible = true;\n  }\n\n  removeInputVisibleStyles() {\n    this.inputEl.nativeElement.style.display = '';\n    this.inputEl.nativeElement.style.position = '';\n    this.inputEl.nativeElement.style.left = '';\n    this.inputEl.nativeElement.style.width = '';\n    this.inputState.visible = false;\n  }\n\n  focusChange() {\n    if (!this.inputState.initial.visible) {\n      this.removeInputVisibleStyles();\n    }\n  }\n\n  calculateInputWidth(): number {\n    const leftPadding = 20;\n    const buttonElement = this.buttonEl.nativeElement;\n    const inputElement = this.inputEl.nativeElement;\n    const rightPosition = buttonElement.getBoundingClientRect().left;\n    const leftPosition = this.searchSettings.parentSelector\n      ? inputElement\n          .closest(this.searchSettings.parentSelector)\n          .getBoundingClientRect().left\n      : 0;\n    return Math.floor(rightPosition - leftPosition - leftPadding);\n  }\n  getClass() {\n    const cls =\n      this.searchSettings && this.searchSettings.size === 'large'\n        ? 'usa-search--big'\n        : 'usa-search--small';\n    return this.searchSettings.dropdown && this.searchSettings.dropdown.inverse\n      ? `${cls} sds-inverse`\n      : cls;\n  }\n  clearInput(ev) {\n    this.inputEl.nativeElement.value = '';\n    this.writeValueToModel();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input::-ms-clear {\n  display: none;\n}\n\n.suffix-icon {\n  input::-webkit-search-cancel-button {\n    display: none;\n  }\n\n  .postfix~input {\n    width: 80%;\n    width: calc(100% - 8rem);\n    margin-left: 0px;\n    margin-right: 6rem !important;\n  }\n\n  .postfix {\n    color: #3f57a6;\n    position: absolute;\n    right: 15px;\n    font-size: 2rem;\n    -webkit-transition: color .2s;\n    transition: color .2s;\n  }\n\n  .search-icon {\n    top: 0px;\n  }\n\n  .close-icon {\n    width: 4rem;\n    top: 4px;\n  }\n}\n.no-drop{\n  width: 100%;\n}\n\n@media only screen and (min-width: 480px){\n  .usa-form.usa-search select {\n      max-width: unset;\n  }\n}\n",
                    "styleUrl": "search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "focusMonitor",
                        "type": "FocusMonitor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewportRuler",
                        "type": "ViewportRuler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "ControlValueAccessor"
            ],
            "templateData": "<form class=\"usa-form usa-search grid-row\" [ngClass]=\"getClass()\" role=\"search\">\n  <label *ngIf=\"hasDropdown()\" class=\"usa-sr-only\" [attr.for]=\"searchSettings.dropdown.id\">Dropdown label</label>\n  <select *ngIf=\"hasDropdown()\" [value]=\"model.searchCategory? model.searchCategory :''\" #selectEl name=\"search options\"\n    aria-label=\"Search Options\" class=\"usa-select grid-col-12 tablet:grid-col-auto\" [attr.id]=\"searchSettings.dropdown.id\"\n    (change)=\"writeValueToModel()\">\n    <ng-container *ngFor=\"let item of searchSettings.dropdown.options\">\n      <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n        <option *ngFor=\"let child of item.group\" [value]=\"child.value\" [selected]=\"model.searchCategory == child.value\"\n          [disabled]=\"child.disabled\">\n          {{ child.label }}\n        </option>\n      </optgroup>\n      <option *ngIf=\"!item.group\" [value]=\"item.value\" [selected]=\"model.searchCategory == item.value\"\n        [disabled]=\"item.disabled\">{{\n        item.label }}</option>\n    </ng-container>\n  </select>\n  <ng-container [ngTemplateOutlet]=\"inputTemplate\"></ng-container>\n</form>\n\n<ng-template #inputTemplate>\n\n  <div class=\"position-relative grid-col-12\" [ngClass]=\"{\n  'suffix-icon': searchSettings.isSuffixSearchIcon, 'tablet:grid-col': hasDropdown()}\">\n    <label class=\"usa-sr-only\" [attr.for]=\"searchSettings.id\">Search</label>\n    <input #inputEl [value]=\"model.searchText? model.searchText :''\" [ngClass]=\"[searchSettings?.inputClass ? searchSettings?.inputClass : '', !hasDropdown() ? 'no-drop' : '']\"\n      [attr.id]=\"searchSettings.id\" type=\"search\" class=\"usa-input sds-min-width-160\" name=\"search\"\n      [placeholder]=\"searchSettings.placeholder? searchSettings.placeholder : 'type here'\"\n      [attr.aria-label]=\"searchSettings.ariaLabel\" (blur)=\"focusChange()\" (input)=\"writeValueToModel()\"/>\n\n    <span *ngIf=\"searchSettings.isSuffixSearchIcon\" class=\"cursor-pointer display-flex flex-align-center\">\n      <span *ngIf=\"model.searchText\" class=\"postfix close-icon\" role=\"button\" aria-label=\"Clear input\"\n        (click)=\"clearInput($event)\" (keyup.enter)=\"clearInput($event)\" tabindex=\"0\">\n        <usa-icon [icon]=\"'x'\" [size]=\"searchSettings.size === 'large'?'2x':'1x'\"></usa-icon>\n      </span>\n      <span class=\"postfix search-icon\" role=\"button\" aria-label=\"search input\" (click)=\"handleClick($event)\"\n        (keyup.enter)=\"handleClick($event)\" tabindex=\"0\">\n        <usa-icon [icon]=\"'search'\" [size]=\"searchSettings.size === 'large'?'1x':'xs'\">\n        </usa-icon>\n      </span>\n    </span>\n    <button *ngIf=\"!searchSettings.isSuffixSearchIcon\" #buttonEl class=\"usa-button\" type=\"submit\"\n      [attr.aria-label]=\"searchSettings.ariaLabel ? searchSettings.ariaLabel : 'Search'\" (click)=\"handleClick($event)\">\n    </button>\n  </div>\n\n</ng-template>\n"
        },
        {
            "name": "SdsSearchResultListComponent",
            "id": "component-SdsSearchResultListComponent-2f400b38cccaa84011a099fc2bf63c22",
            "file": "libs/packages/components/src/lib/search-result-list/search-result-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-search-result-list",
            "styleUrls": [
                "./search-result-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-result-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customResultsTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Allow to insert a customized template for no results to use",
                    "description": "<p>Allow to insert a customized template for no results to use</p>\n",
                    "line": 20,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "divider",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Show divider between results",
                    "description": "<p>Show divider between results</p>\n",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "isDefaultModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Model for search results",
                    "description": "<p>Model for search results</p>\n",
                    "line": 28,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "resultContentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Child Template to be used to display the data for each item in the list of items</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nChild Template to be used to display the data for each item in the list of items\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'resultContent'"
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "defaultValue": "new SearchModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ContentChild,\n  TemplateRef,\n  OnInit,\n} from '@angular/core';\nimport { SearchModel } from './model/search-results.model';\nimport { Location } from '@angular/common';\n@Component({\n  selector: 'sds-search-result-list',\n  templateUrl: './search-result-list.component.html',\n  styleUrls: ['./search-result-list.component.scss'],\n})\nexport class SdsSearchResultListComponent {\n  public updateModel = new SearchModel();\n  /**\n   * Allow to insert a customized template for no results to use\n   */\n  @Input() customResultsTemplate: TemplateRef<any>;\n\n  @Input() isDefaultModel: boolean;\n\n  /**\n   * Model for search results\n   */\n  @Input('model')\n  set model(value) {\n    if (Array.isArray(value)) {\n      const items = value;\n      this.updateModel = new SearchModel();\n      this.updateModel.results = items;\n    } else {\n      this.updateModel = value;\n    }\n  }\n\n  /**\n   * Show divider between results\n   */\n  @Input() divider = true;\n\n  constructor(private _location: Location) {}\n\n  /**\n   * Child Template to be used to display the data for each item in the list of items\n   */\n  @ContentChild('resultContent') resultContentTemplate: TemplateRef<any>;\n\n  goBack() {\n    this._location.back();\n  }\n  isTemplate() {\n    if (this.updateModel && this.updateModel.metadata) {\n      return Array.isArray(this.updateModel.metadata.messages);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./search-result-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "rawdescription": "Model for search results",
                        "description": "<p>Model for search results</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"updateModel?.results?.length\">\n  <div *ngFor=\"let item of updateModel.results\">\n    <hr *ngIf=\"divider\" class=\"fine\" />\n    <ng-container *ngTemplateOutlet=\"resultContentTemplate,\n                   context: { $implicit: item }\"></ng-container>\n  </div>\n  <hr *ngIf=\"divider && updateModel?.results?.length\" class=\"fine\" />\n</ng-container>\n\n<ng-container *ngIf=\"(customResultsTemplate && !(updateModel?.results?.length))\"\n  [ngTemplateOutlet]=\"customResultsTemplate\" [ngTemplateOutletContext]=\"{$implicit:updateModel}\">\n</ng-container>\n\n<!-- <ng-container *ngIf=\"(!updateModel?.metadata?.messages && updateModel?.results?.length === 0)\">\n  <div class=\"sds-card sds-card--vertical sds-card--shadowed sds-card--bordered\">\n    This is initial template\n  </div>\n</ng-container> -->\n<div aria-live=\"polite\" aria-atomic=\"true\">\n  <ng-container *ngIf=\"!customResultsTemplate\">\n    <ng-container\n      *ngIf=\"(updateModel == null || (!updateModel?.metadata?.messages && updateModel?.results?.length === 0))\">\n      <ng-container *ngIf=\"!isDefaultModel\">\n        <div class=\"sds-card sds-card--vertical sds-card--shadowed sds-card--bordered bg-base-lightest\">\n          <div class=\"sds-card__header padding-3\">\n            <div class=\"sds-stack sds-2x\">\n              <usa-icon class=\"sds-stack-icon\" [size]=\"'3x'\" [icon]=\"'circle'\"></usa-icon>\n              <usa-icon class=\"sds-stack-icon\" [size]=\"'2x'\" [icon]=\"'search'\"></usa-icon>\n            </div>\n          </div>\n          <div class=\"sds-card__body margin-2\">\n            <h1 class=\"sds-card__title\">No matches found</h1>\n            <p>We couldn't find a match for your search criteria.</p>\n            <p>Please try another search or go back to previous results.</p>\n            <div class=\"margin-top-3\">\n              <button class=\"usa-button usa-button--outline\" (click)=\"goBack()\">Go Back</button>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"isDefaultModel\">\n        <div class=\"sds-card sds-card--vertical sds-card--shadowed sds-card--bordered bg-base-lightest\">\n          <div class=\"sds-card__header\">\n            <usa-icon [icon]=\"'arrow-left-circle-fill'\" [size]=\"'5x'\"></usa-icon>\n          </div>\n          <div class=\"sds-card__body margin-2\">\n            <h1 class=\"sds-card__title\">Select Criteria</h1>\n            <p>Choose your filters and run your report to begin.</p>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n\n\n    <ng-container *ngIf=\"updateModel?.metadata?.messages\">\n      <ng-container *ngIf=\"!isTemplate()\">\n        <ng-container *ngTemplateOutlet=\"updateModel?.metadata?.messages\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"isTemplate()\">\n        <div *ngFor=\"let msg of updateModel.metadata.messages\" class=\"sds-card sds-card--shadowed sds-card--bordered\"\n          [ngClass]=\"[(msg.type !== 'loading') ? 'sds-card--vertical': '', msg.classes ? msg.classes : '']\">\n          <ng-container *ngIf=\"msg.type !== 'loading' else loading\">\n            <div class=\"sds-card__header\">\n              <usa-icon\n                [icon]=\"(msg.type ==='error') ?  ['sds', 'alert-error'] :( (msg.type ==='info') ? 'info-circle' :( (msg.type ==='initial') ? 'arrow-left-circle-fill': 'search'))\"\n                [size]=\"'5x'\">\n              </usa-icon>\n            </div>\n            <div class=\"sds-card__body margin-2\">\n              <h1 class=\"sds-card__title\">{{msg.title}}</h1>\n              <p [innerHTML]=\"msg.message\"></p>\n              <div class=\"sds-card__buttons\">\n                <button *ngFor=\"let button of msg.buttons\" class=\"usa-button\" [attr.aria-label]=\"button.ariaLabel\"\n                  [ngClass]=\"button.classes ? button.classes : 'usa-button--outline'\" (click)=\"button.action()\">\n                  {{button.text}}\n                </button>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #loading>\n  <div class=\"grid-container padding-left-0\">\n    <div class=\"sds-load grid-row\">\n      <div class=\"grid-col-5 sds-load__title\"></div>\n    </div>\n    <div class=\"sds-load margin-top-1\">\n      <div class=\"tablet:grid-col-fill sds-load__element\"></div>\n    </div>\n    <div class=\"sds-load margin-top-1\">\n      <div class=\"grid-col-8 height-4 sds-load__content\"></div>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "SDSSelectedResultComponent",
            "id": "component-SDSSelectedResultComponent-151a3933bf52d0c226b98f5b8e2fda2e",
            "file": "libs/packages/components/src/lib/selected-result/selected-result.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SDS_SelectedResult_VALUE_ACCESSOR"
                }
            ],
            "selector": "sds-selected-result",
            "styleUrls": [
                "./selected-result.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selected-result.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Configuration for the Selected Results control",
                    "description": "<p>Configuration for the Selected Results control</p>\n",
                    "line": 37,
                    "type": "SDSSelectedResultConfiguration"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean"
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Allow to insert a customized template for suggestions to use",
                    "description": "<p>Allow to insert a customized template for suggestions to use</p>\n",
                    "line": 25,
                    "type": "TemplateRef<any>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SDSSelectedItemModel",
                    "optional": false,
                    "description": "<p>The data model that has the selected item</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nThe data model that has the selected item\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onTouchedCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "propogateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Stored Event for ControlValueAccessor</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nStored Event for ControlValueAccessor\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getObjectValue",
                    "args": [
                        {
                            "name": "object",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyFields",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the string value from the specifed properties of an object\n",
                    "description": "<p>Gets the string value from the specifed properties of an object</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2211,
                                "end": 2217,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 145,
                                "escapedText": "object"
                            },
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2205,
                                "end": 2210,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2231,
                                "end": 2245,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "propertyFields"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2225,
                                "end": 2230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>comma seperated list with periods depth of object</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2308,
                                "end": 2313,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2302,
                                "end": 2307,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>the index location of the value in model&#39;s item list</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves item from the model\n",
                    "description": "<p>Removes item from the model</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1505,
                                "end": 1509,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1499,
                                "end": 1504,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef, forwardRef } from '@angular/core';\nimport { SDSSelectedItemModel } from './models/sds-selectedItem.model';\nimport { SDSSelectedResultConfiguration } from './models/SDSSelectedResultConfiguration';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { SDSSelectedItemModelHelper } from './models/sds-selected-item-model-helper';\n\nconst SDS_SelectedResult_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSSelectedResultComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'sds-selected-result',\n  templateUrl: './selected-result.component.html',\n  styleUrls: ['./selected-result.component.scss'],\n  providers: [SDS_SelectedResult_VALUE_ACCESSOR]\n})\nexport class SDSSelectedResultComponent implements ControlValueAccessor {\n  \n\n  /**\n  * Allow to insert a customized template for suggestions to use\n  */\n  @Input() itemTemplate: TemplateRef<any>;\n\n  /**\n   * The data model that has the selected item\n   */\n  public model: SDSSelectedItemModel;\n\n\n  /**\n  * Configuration for the Selected Results control \n  */\n  @Input()\n  public configuration: SDSSelectedResultConfiguration;\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public onTouchedCallback: () => void = () => null;\n\n  /**\n   * Stored Event for ControlValueAccessor\n   */\n  public propogateChange: (_: any) => void = (_: any) => null;\n\n  @Input()\n  public disabled: boolean;\n\n  /**\n   * Removes item from the model\n   * @param item \n   */\n  removeItem(item: object) {\n    if (!this.disabled) {\n      SDSSelectedItemModelHelper.removeItem(item, this.configuration.primaryKeyField, this.model);\n      this.propogateChange(this.model);\n      this.onTouchedCallback();\n    }\n  }\n\n  writeValue(obj: any): void {\n    if (obj instanceof SDSSelectedItemModel) {\n      this.model = obj as SDSSelectedItemModel;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propogateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n\n  /**\n   * Gets the string value from the specifed properties of an object\n   * @param object \n   * @param propertyFields comma seperated list with periods depth of object\n   * @param index - the index location of the value in model's item list\n   */\n  getObjectValue(object: Object, propertyFields: string, index?: number): string {\n    let value = '';\n    let current = object;\n    let fieldSplit = propertyFields.split(',');\n    for (let i = 0; i < fieldSplit.length; i++) {\n      let fieldValue = fieldSplit[i];\n      let fieldPartSplit = fieldValue.split('.');\n      for (let j = 0; j < fieldPartSplit.length; j++) {\n        let fieldCheckValue = fieldPartSplit[j];\n        if (current) {\n          current = current[fieldCheckValue];\n        }\n      }\n\n      if (current) {\n        value += current.toString() + ' ';\n      }\n      current = object;\n    }\n\n    return this.configuration.displayModifierFn ? this.configuration.displayModifierFn(value.trim(), index) : value.trim();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./selected-result.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<ul *ngIf=\"model\" [attr.aria-label]=\"configuration.labelText + ' results'\"\n  class=\"usa-list usa-list--unstyled sds-autocomplete-selected\" aria-relevant=\"additions\" role=\"listbox\"\n  aria-live=\"polite\">\n  <li role=\"option\" *ngFor=\"let result of model.items; let i = index\">\n    <div class=\"sds-tag sds-tag--chip sds-tag--input\" [ngClass]=\"disabled ? 'sds-tag--disabled' : ''\">\n      <ng-container *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: result }\">\n      </ng-container>\n      <ng-container *ngIf=\"!itemTemplate\">\n        <div class=\"sds--tag__item\">\n          <div>\n            {{ getObjectValue(result, configuration.primaryTextField, i) }}\n          </div>\n          <div *ngIf=\"\n              configuration.secondaryTextField &&\n              result[configuration.secondaryTextField]\n            \">\n            {{ result[configuration.secondaryTextField] }}\n          </div>\n        </div>\n      </ng-container>\n      <button *ngIf=\"!disabled\" [attr.aria-label]=\"\n          'Remove Item ' +\n          getObjectValue(result, configuration.primaryTextField, i)\n        \" [class.text-base]=\"disabled\" aria-hidden=\"false\" class=\"sds-tag__close\" (click)=\"removeItem(result)\"\n        (keyup.enter)=\"removeItem(result)\">\n        <usa-icon [icon]=\"'x'\" size=\"lg\"></usa-icon>\n      </button>\n    </div>\n  </li>\n</ul>\n"
        },
        {
            "name": "SdsSelectionPanelComponent",
            "id": "component-SdsSelectionPanelComponent-cc5f4b90a3ee0e68bc91a141fc526344",
            "file": "libs/packages/components/src/lib/selection-panel/selection-panel-wrapper/selection-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-selection-panel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./selection-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Allows users to programatically select panel item. Can also be used\nto select initial panel",
                    "description": "<p>Allows users to programatically select panel item. Can also be used\nto select initial panel</p>\n",
                    "line": 28,
                    "type": "NavigationLink"
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Model containing navigation links as well as a selection mode property.\nNavigation mode is implied if no selection mode is passed in",
                    "description": "<p>Model containing navigation links as well as a selection mode property.\nNavigation mode is implied if no selection mode is passed in</p>\n",
                    "line": 15,
                    "type": "SelectionPanelModel"
                },
                {
                    "name": "navigateOnClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "True if users would prefer to navigate on panel selection, false otherwise.\nNavigation feature is not supported on SELECTION mode. On NAVIGATION mode,\nthis is enabled by default",
                    "description": "<p>True if users would prefer to navigate on panel selection, false otherwise.\nNavigation feature is not supported on SELECTION mode. On NAVIGATION mode,\nthis is enabled by default</p>\n",
                    "line": 22,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "panelSelected",
                    "defaultValue": "new EventEmitter<NavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs a NavigationLink item when it is selected from the panel\n",
                    "description": "<p>Outputs a NavigationLink item when it is selected from the panel</p>\n",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NavigationLink } from '../../side-navigation/model/side-navigation-model';\nimport { SelectionPanelModel } from '../model/selection-panel.model';\n\n@Component({\n  selector: 'sds-selection-panel',\n  templateUrl: './selection-panel.component.html',\n})\nexport class SdsSelectionPanelComponent {\n\n  /**\n   * Model containing navigation links as well as a selection mode property.\n   * Navigation mode is implied if no selection mode is passed in\n   */\n  @Input() model: SelectionPanelModel;\n  \n  /**\n   * True if users would prefer to navigate on panel selection, false otherwise.\n   * Navigation feature is not supported on SELECTION mode. On NAVIGATION mode,\n   * this is enabled by default\n   */\n  @Input() navigateOnClick: boolean;\n\n  /**\n   * Allows users to programatically select panel item. Can also be used\n   * to select initial panel\n   */\n  @Input() currentSelection: NavigationLink;\n\n  /**\n   * Outputs a NavigationLink item when it is selected from the panel\n   */\n  @Output() panelSelected = new EventEmitter<NavigationLink>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"model.selectionMode && model.selectionMode === 'SELECTION'; else selectionMode\">\n  <sds-selection-panel-selection-mode \n  [model]=\"model\" \n  [currentSelection]=\"currentSelection\"\n  (panelSelected)=\"panelSelected.emit($event)\">\n  </sds-selection-panel-selection-mode>\n</ng-container>\n\n<!-- Default mode if no selectionMode is passed in -->\n<ng-template #selectionMode>\n  <sds-selection-panel-navigation-mode \n  [model]=\"model\" \n  [navigateOnClick]=\"navigateOnClick\" \n  [currentSelection]=\"currentSelection\"\n  (panelSelected)=\"panelSelected.emit($event)\">\n  </sds-selection-panel-navigation-mode>\n</ng-template>"
        },
        {
            "name": "SdsSelectionPanelNavigationModeComponent",
            "id": "component-SdsSelectionPanelNavigationModeComponent-bf01391abf5bfe68e6912345039a8998",
            "file": "libs/packages/components/src/lib/selection-panel/navigation-mode/navigation-mode.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-selection-panel-navigation-mode",
            "styleUrls": [
                "./navigation-mode.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-mode.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "NavigationLink"
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "SelectionPanelModel"
                },
                {
                    "name": "navigateOnClick",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "panelSelected",
                    "defaultValue": "new EventEmitter<NavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateToSelectedItem",
                    "args": [
                        {
                            "name": "selectedPanel",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedPanel",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPanelItemClick",
                    "args": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\nimport { NavigationLink, SideNavigationModel } from '../../side-navigation/model/side-navigation-model';\nimport { SelectionPanelModel } from '../model/selection-panel.model';\n\n@Component({\n  selector: 'sds-selection-panel-navigation-mode',\n  templateUrl: './navigation-mode.component.html',\n  styleUrls: ['./navigation-mode.component.scss'],\n})\nexport class SdsSelectionPanelNavigationModeComponent implements OnChanges {\n\n  @Input() model: SelectionPanelModel;\n  \n  @Input() navigateOnClick = true;\n\n  @Input() currentSelection: NavigationLink;\n\n  @Output() panelSelected = new EventEmitter<NavigationLink>();\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) { }\n\n  onPanelItemClick(panelItem: NavigationLink) {\n    this.currentSelection = panelItem;\n\n    if (this.navigateOnClick) {\n      this.navigateToSelectedItem(this.currentSelection);\n    }\n\n    this.panelSelected.emit(panelItem);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.model && this.currentSelection && changes.currentSelection && this.navigateOnClick) {\n      this.navigateToSelectedItem(this.currentSelection);\n    }\n  }\n\n  navigateToSelectedItem(selectedPanel: NavigationLink) {\n    const navigationExtras: NavigationExtras = {\n      queryParams: selectedPanel.queryParams,\n      relativeTo: this.activatedRoute\n    }\n\n    this.router.navigate(['.'], navigationExtras);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navigation-mode.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "\n<ul class=\"usa-sidenav usa-sidenav--styled\">\n  <li *ngFor=\"let panelItem of model.navigationLinks\">\n    <ng-container [ngTemplateOutlet]=\"subPanelTemplate\" [ngTemplateOutletContext]=\"{$implicit:panelItem}\">\n    </ng-container>\n  </li>\n</ul>\n\n<ng-template #subPanelTemplate let-panelItem>\n  <a href=\"javascript:void(0);\" class=\"usa-sidenav__item\" (click)=\"onPanelItemClick(panelItem)\" [ngClass]=\"{'usa-current': currentSelection && panelItem.id === currentSelection.id}\">{{panelItem.text}}</a>\n  <ul *ngIf=\"panelItem.children\" class=\"usa-sidenav__sublist\">\n    <li *ngFor=\"let panelItem of panelItem.children\">\n      <ng-container [ngTemplateOutlet]=\"subPanelTemplate\" [ngTemplateOutletContext]=\"{$implicit:panelItem}\">\n      </ng-container>\n    </li>\n  </ul>\n</ng-template>\n"
        },
        {
            "name": "SdsSelectionPanelSelectionModeComponent",
            "id": "component-SdsSelectionPanelSelectionModeComponent-66aceb6dec71b4bbec7201122a25ce74",
            "file": "libs/packages/components/src/lib/selection-panel/selection-mode/selection-mode.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-selection-panel-selection-mode",
            "styleUrls": [
                "./selection-mode.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selection-mode.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "NavigationLink"
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "SideNavigationModel"
                }
            ],
            "outputsClass": [
                {
                    "name": "panelSelected",
                    "defaultValue": "new EventEmitter<NavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onPanelItemClick",
                    "args": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "panelItem",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NavigationLink, SideNavigationModel } from '../..//side-navigation/model/side-navigation-model';\n\n@Component({\n  selector: 'sds-selection-panel-selection-mode',\n  templateUrl: './selection-mode.component.html',\n  styleUrls: ['./selection-mode.component.scss'],\n})\nexport class SdsSelectionPanelSelectionModeComponent {\n\n  @Input()\n  model: SideNavigationModel;\n  \n  @Input() currentSelection: NavigationLink;\n\n  @Output() panelSelected = new EventEmitter<NavigationLink>();\n\n  onPanelItemClick(panelItem: NavigationLink) {\n    this.currentSelection = panelItem;\n    this.panelSelected.emit(panelItem);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./selection-mode.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ul class=\"usa-sidenav usa-sidenav--styled\">\n  <li *ngFor=\"let panelItem of model.navigationLinks\" class=\"usa-sidenav__item\"\n    [ngClass]=\"{'usa-current': currentSelection && panelItem.id === currentSelection.id}\">\n    <a href=\"javascript:void(0);\" (click)=\"onPanelItemClick(panelItem)\">{{panelItem.text}}</a>\n  </li>\n</ul>\n"
        },
        {
            "name": "SdsSideNavigationComponent",
            "id": "component-SdsSideNavigationComponent-1a1255c3e871feb460727f48cf951077",
            "file": "libs/packages/components/src/lib/side-navigation/side-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-side-navigation",
            "styleUrls": [
                "./side-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "A brief description of the purpose of the navigation, omitting the term \"navigation\", \nas the screen reader will read both the role and the contents of the label",
                    "description": "<p>A brief description of the purpose of the navigation, omitting the term &quot;navigation&quot;, \nas the screen reader will read both the role and the contents of the label</p>\n",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Model used for the different display portions of the side navigation",
                    "description": "<p>Model used for the different display portions of the side navigation</p>\n",
                    "line": 77,
                    "type": "SideNavigationModel"
                }
            ],
            "outputsClass": [
                {
                    "name": "linkEvent",
                    "defaultValue": "new EventEmitter<INavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent for event based\n",
                    "description": "<p>event for event based</p>\n",
                    "line": 150,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "navigationHelper",
                    "defaultValue": "new NavigationHelper()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Navigation helper</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nNavigation helper\n"
                },
                {
                    "name": "sideNavEVENTLinkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the the Template used for event response</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nReference to the the Template used for event response\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNavEVENTLinkTemplate', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sideNavHREFLinkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the the Template used for external href</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nReference to the the Template used for external href\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNavHREFLinkTemplate', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sideNavLabelLinkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the the Template used for side menu items that are a label</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nReference to the the Template used for side menu items that are a label\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNavLabelLinkTemplate', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sideNavRouteLinkTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>Reference to the the Template used for internal links</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nReference to the the Template used for internal links\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNavRouteLinkTemplate', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deselect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselects all the items in the side navigation model\n",
                    "description": "<p>Deselects all the items in the side navigation model</p>\n"
                },
                {
                    "name": "deselectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if item is selected and if selcted will check children and will unselect\n",
                    "description": "<p>checks if item is selected and if selcted will check children and will unselect</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemTemplate",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TemplateRef<any>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes the navigation item and returns the template to be used\n",
                    "description": "<p>Takes the navigation item and returns the template to be used</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1608,
                                "end": 1612,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1602,
                                "end": 1607,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>navigation item</p>\n"
                        }
                    ]
                },
                {
                    "name": "linkClickEvent",
                    "args": [
                        {
                            "name": "link",
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLink clicked and emits the link data into an event\n",
                    "description": "<p>Link clicked and emits the link data into an event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4227,
                                "end": 4231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "link"
                            },
                            "type": "INavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4221,
                                "end": 4226,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "queryStringBuilder",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreates query string\n",
                    "description": "<p>creates query string</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4841,
                                "end": 4845,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4835,
                                "end": 4840,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelects new item and parents and deselects previous\n",
                    "description": "<p>Selects new item and parents and deselects previous</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2512,
                                "end": 2514,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2506,
                                "end": 2511,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selectItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelects item if matches passed in id and will select parent\n",
                    "description": "<p>Selects item if matches passed in id and will select parent</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2813,
                                "end": 2815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2807,
                                "end": 2812,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2829,
                                "end": 2833,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2823,
                                "end": 2828,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2847,
                                "end": 2853,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "parent"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2841,
                                "end": 2846,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "urlBuilder",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreates url from provided route and query params\n",
                    "description": "<p>creates url from provided route and query params</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4407,
                                "end": 4411,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4401,
                                "end": 4406,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ViewChild, TemplateRef } from '@angular/core';\nimport { SideNavigationModel, NavigationLink } from './model/side-navigation-model';\nimport { INavigationLink, NavigationMode } from '../common-navigation/common-navigation-model';\nimport { NavigationHelper } from '../common-navigation/navigation-helper';\n\n@Component({\n  selector: 'sds-side-navigation',\n  templateUrl: './side-navigation.component.html',\n  styleUrls: ['./side-navigation.component.scss']\n})\nexport class SdsSideNavigationComponent {\n\n  /**\n   * Reference to the the Template used for internal links\n   */\n  @ViewChild('sideNavRouteLinkTemplate', { static: false })\n  private sideNavRouteLinkTemplate: TemplateRef<any>;\n\n  /**\n   * Reference to the the Template used for side menu items that are a label\n   */\n  @ViewChild('sideNavLabelLinkTemplate', { static: false })\n  private sideNavLabelLinkTemplate: TemplateRef<any>;\n\n  /**\n   * Reference to the the Template used for external href \n   */\n  @ViewChild('sideNavHREFLinkTemplate', { static: false })\n  private sideNavHREFLinkTemplate: TemplateRef<any>;\n\n  /**\n   * Reference to the the Template used for event response\n   */\n  @ViewChild('sideNavEVENTLinkTemplate', { static: false })\n  private sideNavEVENTLinkTemplate: TemplateRef<any>;\n\n  /**\n   * A brief description of the purpose of the navigation, omitting the term \"navigation\", \n   * as the screen reader will read both the role and the contents of the label\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Takes the navigation item and returns the template to be used\n   * @param item navigation item\n   */\n  getItemTemplate(item: NavigationLink): TemplateRef<any> {\n    let template = null;\n    switch (item.mode) {\n      case NavigationMode.EVENT:\n        template = this.sideNavEVENTLinkTemplate;\n        break;\n      case NavigationMode.EXTERNAL:\n        template = this.sideNavHREFLinkTemplate;\n        break;\n      case NavigationMode.INTERNAL:\n        template = this.sideNavRouteLinkTemplate;\n        break;\n      case NavigationMode.LABEL:\n        template = this.sideNavLabelLinkTemplate;\n        break;\n      default:\n        template = null;\n        break;\n    }\n    return template;\n  }\n\n  /**\n   * Navigation helper\n   */\n  navigationHelper = new NavigationHelper();\n\n  /**\n   * Model used for the different display portions of the side navigation \n   */\n  @Input() model: SideNavigationModel;\n\n  /**\n   * Selects new item and parents and deselects previous\n   * @param id \n   */\n  select(id: string) {\n    this.deselect();\n    for (let i = 0; i < this.model.navigationLinks.length; i++) {\n      let item = this.model.navigationLinks[i];\n      this.selectItem(id, item, null);\n    }\n  }\n\n  /**\n   * Selects item if matches passed in id and will select parent\n   * @param id \n   * @param item \n   * @param parent \n   */\n  private selectItem(id: string, item: NavigationLink, parent: NavigationLink) {\n    if (item.id === id) {\n      item.selected = true;\n      if (parent) {\n        parent.selected = true;\n      }\n    } else {\n      if (item.children) {\n        for (let i = 0; i < item.children.length; i++) {\n          let childItem = item.children[i];\n          this.selectItem(id, childItem, item);\n        }\n        if (item.selected) {\n          if (parent) {\n            parent.selected = true;\n          }\n        }\n      }\n    }\n  }\n\n\n  /**\n   * Deselects all the items in the side navigation model\n   */\n  deselect() {\n    if (this.model) {\n      if (this.model.navigationLinks) {\n        for (let i = 0; i < this.model.navigationLinks.length; i++) {\n          this.deselectItem(this.model.navigationLinks[i]);\n        }\n      }\n    }\n  }\n\n  /**\n   * checks if item is selected and if selcted will check children and will unselect\n   */\n  private deselectItem(item: NavigationLink) {\n    if (item.selected) {\n      item.selected = false;\n      if (item.children) {\n        for (let i = 0; i < item.children.length; i++) {\n          this.deselectItem(item.children[i]);\n        }\n      }\n    }\n  }\n\n  /**\n   * event for event based\n   */\n  @Output()\n  linkEvent = new EventEmitter<INavigationLink>();\n\n  /**\n   * Link clicked and emits the link data into an event\n   * @param link \n   */\n  linkClickEvent(link: INavigationLink) {\n    this.linkEvent.emit(link);\n    return false;\n  }\n\n  /**\n   * creates url from provided route and query params\n   * @param item \n   */\n  urlBuilder(item: NavigationLink) {\n    let url = item.route;\n    let queryParams = this.queryStringBuilder(item);\n    if (queryParams) {\n      if (url.indexOf('?') === -1) {\n        url += '?' + queryParams;\n      } else if (url.indexOf('?') === url.length - 1) {\n        url += queryParams;\n      } else {\n        url += '&' + queryParams;\n      }\n    }\n    return url;\n  }\n\n  /**\n   * creates query string\n   * @param item \n   */\n  private queryStringBuilder(item: NavigationLink) {\n    const ret = [];\n    for (let d in item.queryParams) {\n      ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(item.queryParams[d]));\n    }\n    return ret.join('&');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./side-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<nav [attr.aria-label]=\"ariaLabel\">\n  <ul class=\"usa-sidenav\">\n    <li *ngFor=\"let link of model.navigationLinks\" class=\"sidenav__item\">\n      <ng-container [ngTemplateOutlet]=\"sideNavLinkTemplate\" [ngTemplateOutletContext]=\"{$implicit:link}\">\n      </ng-container>\n    </li>\n  </ul>\n</nav>\n\n<ng-template #sideNavLinkTemplate let-link>\n  <ng-container [ngTemplateOutlet]=\"getItemTemplate(link)\" [ngTemplateOutletContext]=\"{$implicit:link}\">\n  </ng-container>\n  <ul *ngIf=\"link.children\" class=\"usa-sidenav__sublist\">\n    <li *ngFor=\"let link of link.children\" class=\"sidenav__item\">\n      <ng-container [ngTemplateOutlet]=\"sideNavLinkTemplate\" [ngTemplateOutletContext]=\"{$implicit:link}\">\n      </ng-container>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #sideNavRouteLinkTemplate let-link>\n  <a [attr.class]=\"link.selected ? ' usa-current' : ''\" [routerLink]=\"[link.route]\" (click)=\"linkClickEvent(link)\"\n    [queryParams]=\"link.queryParams\" \n    [queryParamsHandling]=\"link.queryParamsHandling\">\n      <span>{{link.text}}</span>\n  </a>\n</ng-template>\n\n<ng-template #sideNavHREFLinkTemplate let-link>\n  <a [attr.class]=\"link.selected ? ' usa-current' : ''\" [attr.href]=\"urlBuilder(link)\"\n    (click)=\"linkClickEvent(link)\"><span>{{link.text}}</span></a>\n</ng-template>\n\n<ng-template #sideNavLabelLinkTemplate let-link>\n  <span [attr.class]=\"link.selected ? ' usa-current' : ''\"><span>{{link.text}}</span></span>\n</ng-template>\n\n<ng-template #sideNavEVENTLinkTemplate let-link>\n  <a [attr.class]=\"link.selected ? ' usa-current' : ''\" href=\"javascript:void(0)\"\n    (click)=\"linkClickEvent(link)\"><span>{{link.text}}</span></a>\n</ng-template>\n"
        },
        {
            "name": "SdsSubPanelComponent",
            "id": "component-SdsSubPanelComponent-a1e8fb4448d6596f6f3e57389e2c5d33",
            "file": "libs/packages/components/src/lib/selection-panel/sub-panel/sub-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-sub-panel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sub-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "NavigationLink"
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "NavigationLink[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "subPanelClicked",
                    "defaultValue": "new EventEmitter<NavigationLink>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onSubPanelItemClicked",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "NavigationLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { NavigationLink, SideNavigationModel } from \"../../side-navigation/model/side-navigation-model\";\n\n@Component({\n  selector: `sds-sub-panel`,\n  templateUrl: './sub-panel.component.html'\n})\nexport class SdsSubPanelComponent {\n  @Input() model: NavigationLink[];\n\n  @Input() currentSelection: NavigationLink;\n\n  @Output() subPanelClicked = new EventEmitter<NavigationLink>();\n\n  onSubPanelItemClicked(item: NavigationLink) {\n    this.currentSelection = item;\n    this.subPanelClicked.emit(item);\n  }\n\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "\n<ul class=\"usa-sidenav sds-subpanel sds-list\">\n  <li *ngFor=\"let panelItem of model\" class=\"usa-sidenav__item\">\n    <ng-container [ngTemplateOutlet]=\"subPanelTemplate\" [ngTemplateOutletContext]=\"{$implicit:panelItem}\">\n    </ng-container>\n  </li>\n</ul>\n\n<ng-template #subPanelTemplate let-panelItem>\n  <a href=\"javascript:void(0);\"\n  class=\"usa-link margin-right-neg-2\" \n  [ngClass]=\"{\n    'usa-link--active': currentSelection && panelItem.id === currentSelection.id\n  }\"\n  (click)=\"onSubPanelItemClicked(panelItem)\">\n  {{panelItem.text}}</a>\n  <ul *ngIf=\"panelItem.children\" class=\"usa-sidenav__sublist\">\n    <li *ngFor=\"let panelItem of panelItem.children\" class=\"sidenav__item\">\n      <ng-container [ngTemplateOutlet]=\"subPanelTemplate\" [ngTemplateOutletContext]=\"{$implicit:panelItem}\">\n      </ng-container>\n    </li>\n  </ul>\n</ng-template>\n"
        },
        {
            "name": "SdsTextChildComponent",
            "id": "component-SdsTextChildComponent-c11eaf163618dec5897ac362ed360fc2",
            "file": "libs/packages/components/src/lib/text/child.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-text-child",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"items\">\n  <span class=\"sds-tag sds-tag--chip margin-x-05\" style=\"cursor:pointer;\" *ngFor=\"let item of items; let i=index\" (click)=\"removeItem(i)\">{{item}} <small class=\"margin-left-05\">(x)</small></span>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemsChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'sds-text-child',\n  template: `\n    <ng-container *ngIf=\"items\">\n      <span class=\"sds-tag sds-tag--chip margin-x-05\" style=\"cursor:pointer;\" *ngFor=\"let item of items; let i=index\" (click)=\"removeItem(i)\">{{item}} <small class=\"margin-left-05\">(x)</small></span>\n    </ng-container>\n  `\n})\nexport class SdsTextChildComponent  {\n    @Input() items;\n    @Output() itemsChange = new EventEmitter();\n\n    // Method to remove an item from the items array, emits an event that the parent component is listening for\n    removeItem(index){\n      this.items.splice(index, 1);\n      this.itemsChange.emit(this.items);\n    }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SdsTextComponent",
            "id": "component-SdsTextComponent-f499ffdb4a5ab621dcee17fd41e7839b",
            "file": "libs/packages/components/src/lib/text/text.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SdsTextComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "sds-text",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <input #searchInput class=\"usa-input display-inline-block\" [attr.aria-label]=\"label\"/>\n  <button class=\"usa-button margin-left-05 display-inline-block\" (click)=\"addItem(searchInput.value); searchInput.value=''\">Add Item</button>\n</div>\n\n<h4>Component Items</h4>\n<pre>{{ items | json }}</pre>\n\n<hr />\n\n<h4>Child Component Items <small>(click to remove)</small></h4>\n<sds-text-child [(items)]=\"items\" (itemsChange)=\"updateItems($event)\"></sds-text-child>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModel",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItems",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, ChangeDetectionStrategy, ChangeDetectorRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'sds-text',\n  template: `\n    <div>\n      <input #searchInput class=\"usa-input display-inline-block\" [attr.aria-label]=\"label\"/>\n      <button class=\"usa-button margin-left-05 display-inline-block\" (click)=\"addItem(searchInput.value); searchInput.value=''\">Add Item</button>\n    </div>\n\n    <h4>Component Items</h4>\n    <pre>{{ items | json }}</pre>\n\n    <hr />\n\n    <h4>Child Component Items <small>(click to remove)</small></h4>\n    <sds-text-child [(items)]=\"items\" (itemsChange)=\"updateItems($event)\"></sds-text-child>\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SdsTextComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SdsTextComponent implements ControlValueAccessor {\n\n  items = [];\n  multiple = true;\n\n  @Input() label: string;\n\n  private _onChange = (_: any) => { };\n  private _onTouched = () => { };\n\n  constructor(private cd: ChangeDetectorRef) { }\n\n  // Helper method to programatically add a value to the existing items array\n  addItem(val) {\n    if (this.multiple) {\n      this.items = [...this.items, val];\n      this.updateModel();\n    }\n  }\n\n  // Method that is fired when the child component event notifies us that the items array has been modified within the child component\n  updateItems($event) {\n    this.updateModel();\n  }\n\n  // Helper method that gets a new instance of the model and notifies ControlValueAccessor that we have a new model for this FormControl (our custom component)\n  updateModel() {\n    const model = this.getModel();\n    this._onChange(model);\n  }\n\n  // Helper method to return a new instance of an array that contains our items\n  getModel() {\n    return [...this.items];\n  }\n\n  // ControlValueAccessor (and Formly) is trying to update the value of the FormControl (our custom component) programatically\n  // If there is a value we will just overwrite items\n  // If there is no value we reset the items array to be empty\n  writeValue(value: any) {\n    if (value && value.length && this.items !== value) {\n      this.items = value;\n      this.cd.markForCheck();\n    } else {\n      this.items = [];\n      this.cd.markForCheck();\n    }\n  }\n\n  // ControlValueAccessor hook that lets us call this._onChange(var) to let the form know our variable has changed (in this case model)\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  // ControlValueAccessor hook (not used)\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "SdsToastComponent",
            "id": "component-SdsToastComponent-4db48e83ca4a24099417ef153b05e8e9",
            "file": "libs/packages/components/src/lib/toast/toast-single.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-toast",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      position: relative;\n    }\n    \n  "
            ],
            "templateUrl": [
                "./toast-single.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "toastPackage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastPackage",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "action",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIcon",
                    "args": [
                        {
                            "name": "toastType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"check2-circle\" | \"info-circle\" | \"exclamation-triangle\" | \"slash-circle\"",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toastType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToastSr",
                    "args": [
                        {
                            "name": "toastType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"Success\" | \"Info\" | \"Warning\" | \"Error\"",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toastType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    animate,\n    keyframes,\n    state,\n    style,\n    transition,\n    trigger\n  } from '@angular/animations';\n  import { Component } from '@angular/core';\n  \n  import { Toast, ToastrService, ToastPackage } from 'ngx-toastr';\n\n  \n  @Component({\n    selector: 'sds-toast',\n    styles: [`\n    :host {\n      position: relative;\n    }\n    \n  `],\n  templateUrl: './toast-single.component.html',\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({ opacity: 0 })),\n      state('active', style({ opacity: 1 })),\n      state('removed', style({ opacity: 0 })),\n      transition(\n        'inactive => active',\n        animate('{{ easeTime }}ms {{ easing }}')\n      ),\n      transition(\n        'active => removed',\n        animate('{{ easeTime }}ms {{ easing }}')\n      )\n    ])\n  ],\n \n    preserveWhitespaces: false,\n  })\n  export class SdsToastComponent extends Toast {\n\n    constructor(\n      protected toastrService: ToastrService,\n      public toastPackage: ToastPackage\n    ) {\n      super(toastrService, toastPackage);\n  \n    }\n  \n    action(event: Event) {\n      event.stopPropagation();\n      this.toastPackage.triggerAction();\n      return false;\n    }\n\n    getIcon(toastType) {\n      switch (toastType) {\n        case \"sds-toast--success\": return 'check2-circle';\n        case \"sds-toast--info\": return 'info-circle';\n        case \"sds-toast--warning\": return 'exclamation-triangle';\n        case \"sds-toast--error\": return 'slash-circle';\n        default: return 'info-circle';\n      }\n    }\n    getToastSr(toastType) {\n      switch (toastType) {\n        case \"sds-toast--success\": return 'Success';\n        case \"sds-toast--info\": return 'Info';\n        case \"sds-toast--warning\": return 'Warning';\n        case \"sds-toast--error\": return 'Error';\n        default: return 'Info';\n      }\n    }\n\n  }\n  ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      position: relative;\n    }\n    \n  \n",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastrService",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastPackage",
                        "type": "ToastPackage",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "toastrService",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastPackage",
                        "type": "ToastPackage",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Toast",
            "templateData": "\n<div class=\"sds-toast__content\" role=\"alert\" aria-live=\"assertive\">\n    <div class=\"usa-sr-only\">{{getToastSr(toastPackage.toastType)}}</div>\n    <div class=\"sds-toast__content__icon\">\n        <usa-icon [icon]=\"getIcon(toastPackage.toastType)\" size=\"2x\"></usa-icon>\n    </div>\n    <span class=\"sds-toast__content__text\">{{message}}</span>\n    <div *ngIf=\"options.closeButton\" class=\"sds-toast__content__close\" (click)=\"remove()\">\n        <usa-icon [icon]=\"'x'\"></usa-icon>\n    </div>\n</div>\n"
        },
        {
            "name": "SdsToolbarComponent",
            "id": "component-SdsToolbarComponent-67efc4d28a051482f71d87c2eeaa0d7a",
            "file": "libs/packages/components/src/lib/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "sdsToolbar",
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-toolbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether the toolbar is disabled.",
                    "description": "<p>Whether the toolbar is disabled.</p>\n",
                    "line": 54,
                    "type": "any"
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether the toolbar is expanded.",
                    "description": "<p>Whether the toolbar is expanded.</p>\n",
                    "line": 38,
                    "type": "any"
                },
                {
                    "name": "expandedSpace",
                    "defaultValue": "\"20px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string"
                },
                {
                    "name": "expandedWidth",
                    "defaultValue": "\"300px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Width of the toolbar when is expanded.",
                    "description": "<p>Width of the toolbar when is expanded.</p>\n",
                    "line": 63,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "expandedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits whenever the expanded state of the toolbar changes.",
                    "description": "<p>Emits whenever the expanded state of the toolbar changes.</p>\n",
                    "line": 34,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_contentId",
                    "defaultValue": "`sds-toolbar-content-${this.id}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>ID for the content element. Used for a11y labelling.</p>\n",
                    "line": 29,
                    "rawdescription": "\nID for the content element. Used for a11y labelling.",
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_headerId",
                    "defaultValue": "`sds-toolbar-header-${this.id}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>ID for the header element. Used for a11y labelling.</p>\n",
                    "line": 26,
                    "rawdescription": "\nID for the header element. Used for a11y labelling.",
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "uniqueId++",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The unique Toolbar id.</p>\n",
                    "line": 23,
                    "rawdescription": "\nThe unique Toolbar id.",
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getExpandedState",
                    "args": [],
                    "optional": false,
                    "returnType": "SdsToolbarState",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets the expanded state string.",
                    "description": "<p>Gets the expanded state string.</p>\n"
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles the expanded state of the toolbar.",
                    "description": "<p>Toggles the expanded state of the toolbar.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { sdsToolbarAnimations } from \"./toolbar-animations\";\n\n/** Toolbar's states. */\nexport type SdsToolbarState = \"expanded\" | \"collapsed\";\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n@Component({\n  selector: \"sds-toolbar\",\n  exportAs: \"sdsToolbar\",\n  templateUrl: \"toolbar.component.html\",\n  animations: [sdsToolbarAnimations.bodyExpansion],\n  host: {\n    class: \"sds-toolbar\",\n    \"[class.sds-toolbar--expanded]\": \"expanded\"\n  }\n})\nexport class SdsToolbarComponent {\n  /** The unique Toolbar id. */\n  readonly id = uniqueId++;\n\n  /** ID for the header element. Used for a11y labelling. */\n  readonly _headerId: string = `sds-toolbar-header-${this.id}`;\n\n  /** ID for the content element. Used for a11y labelling. */\n  readonly _contentId: string = `sds-toolbar-content-${this.id}`;\n\n  constructor() {}\n\n  /** Emits whenever the expanded state of the toolbar changes. */\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Whether the toolbar is expanded. */\n  @Input()\n  get expanded(): any {\n    return this._expanded;\n  }\n  set expanded(expanded: any) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the toolbar is disabled. */\n  @Input()\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(disabled: any) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled: boolean = false;\n\n  /** Width of the toolbar when is expanded. */\n  @Input() expandedWidth: string = \"300px\";\n\n  // Elements that surround the toolbar need to make space for the expanded toolbar.\n  // Adding 20 more pixes to provide padding\n  @Input() expandedSpace: string = \"20px\";\n\n  /** Toggles the expanded state of the toolbar. */\n  toggle() {\n    this.expanded = !this.expanded;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): SdsToolbarState {\n    return this.expanded ? \"expanded\" : \"collapsed\";\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "accessors": {
                "expanded": {
                    "name": "expanded",
                    "setSignature": {
                        "name": "expanded",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "expanded",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "expanded",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "expanded",
                        "type": "any",
                        "returnType": "any",
                        "line": 38,
                        "rawdescription": "Whether the toolbar is expanded.",
                        "description": "<p>Whether the toolbar is expanded.</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "disabled",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "disabled",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 54,
                        "rawdescription": "Whether the toolbar is disabled.",
                        "description": "<p>Whether the toolbar is disabled.</p>\n"
                    }
                }
            },
            "templateData": "<sds-toolbar-header></sds-toolbar-header>\n<div\n  class=\"sds-toolbar__content\"\n  role=\"region\"\n  [@bodyExpansion]=\"{\n    value: _getExpandedState(),\n    params: { expandedWidth: expandedWidth }\n  }\"\n  [attr.aria-labelledby]=\"_headerId\"\n  [id]=\"_contentId\"\n>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "SdsToolbarHeaderComponent",
            "id": "component-SdsToolbarHeaderComponent-e9fb11c75f9df204a16398668c7dfaaa",
            "file": "libs/packages/components/src/lib/toolbar/toolbar-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-toolbar-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "toolbar-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "toolbar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsToolbarComponent",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles the expanded state of the toolbar.",
                    "description": "<p>Toggles the expanded state of the toolbar.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Host } from \"@angular/core\";\nimport { SdsToolbarComponent } from \"./toolbar.component\";\n\n@Component({\n  selector: \"sds-toolbar-header\",\n  templateUrl: \"toolbar-header.component.html\",\n  host: {\n    class: \"sds-toolbar__header\"\n  }\n})\nexport class SdsToolbarHeaderComponent {\n  constructor(@Host() public toolbar: SdsToolbarComponent) {}\n\n  /** Toggles the expanded state of the toolbar. */\n  _toggle() {\n    this.toolbar.toggle();\n  }\n\n  /** Gets whether the toolbar is expanded. */\n  get _isExpanded(): boolean {\n    return this.toolbar.expanded;\n  }\n\n  /** Whether the toolbar is disabled. */\n  get _disabled(): boolean {\n    return this.toolbar.disabled;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toolbar",
                        "type": "SdsToolbarComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "toolbar",
                        "type": "SdsToolbarComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "_isExpanded": {
                    "name": "_isExpanded",
                    "getSignature": {
                        "name": "_isExpanded",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 20,
                        "rawdescription": "Gets whether the toolbar is expanded.",
                        "description": "<p>Gets whether the toolbar is expanded.</p>\n"
                    }
                },
                "_disabled": {
                    "name": "_disabled",
                    "getSignature": {
                        "name": "_disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25,
                        "rawdescription": "Whether the toolbar is disabled.",
                        "description": "<p>Whether the toolbar is disabled.</p>\n"
                    }
                }
            },
            "templateData": "<button\n  class=\"sds-toolbar__toogle-btn\"\n  [attr.id]=\"toolbar._headerId\"\n  [attr.tabindex]=\"_disabled ? -1 : 0\"\n  [attr.aria-controls]=\"toolbar._contentId\"\n  [attr.aria-expanded]=\"_isExpanded\"\n  [attr.aria-disabled]=\"_disabled\"\n  (click)=\"_toggle()\"\n>\n  <div class=\"sds-toolbar__toggle\">\n    <span class=\"usa-sr-only\">Open/Close Toolbar</span>\n  </div>\n</button>\n"
        },
        {
            "name": "SdsTopBannerComponent",
            "id": "component-SdsTopBannerComponent-3b4c71d05c318dbff0fb621f4f617475",
            "file": "libs/packages/components/src/lib/top-banner/top-banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-top-banner",
            "styleUrls": [
                "./top-banner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-banner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showDetail",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sds-top-banner',\n  templateUrl: './top-banner.component.html',\n  styleUrls: ['./top-banner.component.scss']\n})\nexport class SdsTopBannerComponent {\n  showDetail = false;\n  @Input() description = '';\n\n  toggleDetails() {\n    this.showDetail = !this.showDetail;\n  }\n\n  closeDetail() {\n    if (this.showDetail) {\n      this.showDetail = false;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./top-banner.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"usa-banner\">\n  <div class=\"usa-accordion\">\n    <header\n      class=\"usa-banner__header\"\n      [class.sam-banner__header--expanded]=\"showDetail\"\n    >\n      <div class=\"usa-banner__inner\">\n        <div class=\"grid-col-auto\">\n          <span class=\"usa-banner__header-flag\"></span>\n        </div>\n        <div class=\"grid-col-fill tablet:grid-col-auto\">\n          <p class=\"usa-banner__header-text\">\n            An official website of the United States government\n          </p>\n          <p class=\"usa-banner__header-action\" aria-hidden=\"true\">\n            Here’s how you know\n          </p>\n        </div>\n        <button\n          class=\"usa-accordion__button usa-banner__button\"\n          (click)=\"toggleDetails()\"\n          (blur)=\"closeDetail()\"\n          [attr.aria-expanded]=\"showDetail\"\n          aria-controls=\"gov-banner\"\n        >\n          <span class=\"usa-banner__button-text\">Here’s how you know</span>\n        </button>\n        <div class=\"usa-banner__header-description\">\n          <em>{{ description }}</em>\n        </div>\n      </div>\n    </header>\n    <div\n      class=\"usa-banner__content usa-accordion__content\"\n      id=\"gov-banner\"\n      [hidden]=\"!showDetail\"\n    >\n      <div class=\"grid-row grid-gap-lg\">\n        <div class=\"usa-banner__guidance tablet:grid-col-6\">\n          <span class=\"usa-banner__icon usa-media-block__img\"></span>\n          <div class=\"usa-media-block__body\">\n            <p>\n              <strong>The .gov means it’s official.</strong> <br />\n              Federal government websites often end in .gov or .mil. Before\n              sharing sensitive information, make sure you’re on a federal\n              government site.\n            </p>\n          </div>\n        </div>\n        <div class=\"usa-banner__guidance tablet:grid-col-6\">\n          <span class=\"usa-banner__icon usa-media-block__img\"></span>\n          <div class=\"usa-media-block__body\">\n            <p>\n              <strong>The site is secure.</strong> <br />\n              The <strong>https://</strong> ensures that you are connecting to\n              the official website and that any information you provide is\n              encrypted and transmitted securely.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SdsTruncatedTextContainerComponent",
            "id": "component-SdsTruncatedTextContainerComponent-8a0fa5c4ffa157b927aac5b53d6e5e46",
            "file": "libs/packages/components/src/lib/truncate-text/truncate-text-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-truncated-text-container",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"sds-overlay maxw-mobile radius-overlay padding-2\">{{ data.text }}</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_animationState",
                    "defaultValue": "'void'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'@container'"
                        }
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdsTruncateTextData",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "SDS_TRUNCATED_TEXT_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_onAnimationDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIntentionally left empty to trigger change detection",
                    "description": "<p>Intentionally left empty to trigger change detection</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'@container.done'"
                        }
                    ]
                },
                {
                    "name": "resetAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nResets the animation to its initial state.",
                    "description": "<p>Resets the animation to its initial state.</p>\n"
                },
                {
                    "name": "startAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStarts the animation.",
                    "description": "<p>Starts the animation.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@container",
                    "defaultValue": "'void'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                }
            ],
            "hostListeners": [
                {
                    "name": "@container.done",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIntentionally left empty to trigger change detection",
                    "description": "<p>Intentionally left empty to trigger change detection</p>\n",
                    "line": 33
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, HostBinding, HostListener } from '@angular/core';\nimport { SDS_TRUNCATED_TEXT_DATA } from './truncates-text-base';\nimport { sdsTruncateTextAnimations } from './truncate-text-animations';\n\nexport interface SdsTruncateTextData {\n  text: string;\n}\n\n@Component({\n  selector: 'sds-truncated-text-container',\n  template: `\n    <div class=\"sds-overlay maxw-mobile radius-overlay padding-2\">{{ data.text }}</div>\n  `,\n  animations: [sdsTruncateTextAnimations.container]\n})\nexport class SdsTruncatedTextContainerComponent {\n  @HostBinding('@container') _animationState = 'void';\n\n  constructor(@Inject(SDS_TRUNCATED_TEXT_DATA) public data: SdsTruncateTextData) {}\n\n  /** Starts the animation. */\n  startAnimation() {\n    this._animationState = 'enter';\n  }\n\n  /** Resets the animation to its initial state. */\n  resetAnimation() {\n    this._animationState = 'void';\n  }\n\n  /** Intentionally left empty to trigger change detection */\n  @HostListener('@container.done')\n  _onAnimationDone() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "SdsTruncateTextData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "SdsTruncateTextData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SdsVideoPlayerComponent",
            "id": "component-SdsVideoPlayerComponent-8a5633d645af5ee69ebab40d5246abcc",
            "file": "libs/packages/components/src/lib/video-player/video-player.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-video-player",
            "styleUrls": [
                "./css/px-video.css"
            ],
            "styles": [],
            "templateUrl": [
                "./video-player.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "crossorigin",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "VPConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "VPInterface"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InitPxVideoConfig",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "loadVideoSource",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'video'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_loadVideoSourceOnDemand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIE and Edge ignore preload attribute and load video data eagerly. In order to\nworkaround those such browsers, we add video source only after user clicks\non play or restart button of the video.\n",
                    "description": "<p>IE and Edge ignore preload attribute and load video data eagerly. In order to\nworkaround those such browsers, we add video source only after user clicks\non play or restart button of the video.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  Input,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  Renderer2,\n  OnChanges,\n  AfterContentInit,\n  OnInit,\n  ChangeDetectorRef,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport { GLOBAL_STRINGS } from 'accessible-html5-video-player/js/strings.js';\nimport * as InitPxVideo from 'accessible-html5-video-player/js/px-video.js';\nimport { VPInterface } from './video-player';\nimport { DOCUMENT } from '@angular/common';\n\ninterface InitPxVideoConfig {\n  videoId: string;\n  captionsOnDefault: boolean;\n  seekInterval: number;\n  videoTitle: string;\n  debug: boolean;\n}\n\ndeclare const GLOBAL_STRINGS: any;\n\ndeclare class InitPxVideo {\n  constructor(config: InitPxVideoConfig);\n}\n\n@Component({\n  selector: 'sds-video-player',\n  templateUrl: './video-player.component.html',\n  styleUrls: ['./css/px-video.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SdsVideoPlayerComponent\n  implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n  @Input() VPConfiguration: VPInterface;\n  @ViewChild('video') video: ElementRef;\n  private config: InitPxVideoConfig;\n  @Input() crossorigin = '';\n\n  loadVideoSource = false;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer2: Renderer2,\n    private cdr: ChangeDetectorRef,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnDestroy() {\n    let element = this.document.getElementById('px-video-aria-announce');\n    if (element) {\n      this.renderer2.removeChild(this.elementRef, element);\n    }\n  }\n  ngOnInit() {\n    if (this.VPConfiguration.preload != 'none') {\n      this.loadVideoSource = true;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.crossorigin) {\n      const id = this.elementRef.nativeElement.querySelector('#videoPlayer');\n      id.setAttribute('crossorigin', this.crossorigin);\n    }\n    this.config = {\n      videoId: this.VPConfiguration.id,\n      captionsOnDefault: false,\n      seekInterval: this.VPConfiguration.seekInterval,\n      videoTitle: 'Video Player',\n      debug: this.VPConfiguration.debug,\n    };\n\n    const video = new InitPxVideo(this.config);\n    this.video.nativeElement.setAttribute(\n      'style',\n      'width:' + this.VPConfiguration.width + ';'\n    );\n\n    const progressElement: HTMLProgressElement = this.elementRef.nativeElement.querySelector(\n      'progress'\n    );\n    \n    if (progressElement) {\n      this.renderer2.setAttribute(\n        progressElement,\n        'aria-label',\n        this.VPConfiguration.description + ' progress bar'\n      );\n    }\n\n    if (this.VPConfiguration.preload === 'none') {\n      this._loadVideoSourceOnDemand();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes && changes.crossorigin) {\n      const id = this.elementRef.nativeElement.querySelector('#videoPlayer');\n      if (id) {\n        id.setAttribute('crossorigin', this.crossorigin);\n      }\n    }\n  }\n\n  /**\n   * IE and Edge ignore preload attribute and load video data eagerly. In order to\n   * workaround those such browsers, we add video source only after user clicks\n   * on play or restart button of the video.\n   */\n  private _loadVideoSourceOnDemand() {\n    const playButton: HTMLButtonElement = this.elementRef.nativeElement.querySelector(\n      '.px-video-play'\n    );\n    const restartButton: HTMLButtonElement = this.elementRef.nativeElement.querySelector(\n      '.px-video-restart'\n    );\n    const video: HTMLVideoElement = this.elementRef.nativeElement.querySelector(\n      '#videoPlayer'\n    );\n\n    const loadVideo = ($event) => {\n      if (this.loadVideoSource) {\n        return;\n      }\n\n      this.loadVideoSource = true;\n\n      // Due to event handler timing issues in safari, the browser does not load the source\n      // when play and source are set at the same time. So we first set the source, wait for\n      // an event loop, pause, then play the video to trigger source loading\n      setTimeout(() => {\n        video.pause();\n        video.play();\n      });\n    };\n\n    if (!playButton || !restartButton) {\n      // Edge case - if the button to toggle video source does not exist in dom, then add in the\n      // video source and let the browser decide when to fetch video data\n      this.loadVideoSource = true;\n    } else {\n      playButton.onclick = loadVideo;\n      restartButton.onclick = loadVideo;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* utilities */\n.pull-left {\n  float: left;\n}\n\n.sr-only {\n  position: absolute !important;\n  clip: rect(1px, 1px, 1px, 1px);\n  padding: 0 !important;\n  border: 0 !important;\n  height: 1px !important;\n  width: 1px !important;\n  overflow: hidden;\n}\n\n.hide {\n  display: none;\n}\n\n.show-inline {\n  display: inline-block;\n}\n\n/* containers */\n.px-video-img-captions-container * {\n  box-sizing: border-box;\n}\n\n.px-video-img-captions-container {\n  position: relative;\n}\n\n/* progress indicator */\n.px-video-progress {\n  width: 100%;\n  height: 10px;\n  cursor: pointer;\n}\n\n.px-video-progress[value] {\n  /* Reset the default appearance */\n  -webkit-appearance: none;\n  border: none;\n}\n\n.px-video-progress[value]::-webkit-progress-bar {\n  background-color: #e6e6e6;\n}\n\n.px-video-progress[value]::-webkit-progress-value {\n  background-color: #009cdf;\n}\n\n/* time */\n.px-video-time {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  float: right;\n  margin-top: 2px;\n  font-size: 14px;\n}\n\n/* caption area */\n.px-video-captions {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  padding: 0.5em;\n  min-height: 2.5em;\n  background-color: #000;\n  color: #fff;\n  font-size: 1.1em;\n  text-align: center;\n  opacity: 0.75;\n}\n\n/* buttons */\n.px-video-controls button {\n  border: 1px #fff solid;\n  background: transparent;\n  padding: 0;\n  margin: 0 5px;\n  width: 25px;\n  height: 20px;\n  overflow: hidden;\n  background: no-repeat url(\"./px-video-sprite.svg\");\n}\n\n.px-video-controls button {\n  cursor: pointer;\n}\n\n/* restart button */\n.px-video-controls button.px-video-restart {\n  background-position: -6px -333px;\n  margin-left: 0;\n}\n\n.px-video-controls button.px-video-restart:hover,\n.px-video-controls button.px-video-restart:focus {\n  background-position: -6px -297px;\n}\n\n/* rewind button */\n.px-video-controls button.px-video-rewind {\n  background-position: -6px -189px;\n}\n\n.px-video-controls button.px-video-rewind:hover,\n.px-video-controls button.px-video-rewind:focus {\n  background-position: -6px -153px;\n}\n\n/* play button */\n.px-video-controls button.px-video-play {\n  background-position: -6px -45px;\n}\n\n.px-video-controls button.px-video-play:hover,\n.px-video-controls button.px-video-play:focus {\n  background-position: -6px -9px;\n}\n\n/* pause button */\n.px-video-controls button.px-video-pause {\n  background-position: -6px -117px;\n}\n\n.px-video-controls button.px-video-pause:hover,\n.px-video-controls button.px-video-pause:focus {\n  background-position: -6px -81px;\n}\n\n/* forward button */\n.px-video-controls button.px-video-forward {\n  background-position: -6px -261px;\n}\n\n.px-video-controls button.px-video-forward:hover,\n.px-video-controls button.px-video-forward:focus {\n  background-position: -6px -225px;\n}\n\n.px-video-fullscreen-btn-container label {\n  display: inline-block;\n  width: 25px;\n  height: 20px;\n  margin-left: 10px;\n  background: no-repeat url(\"./px-video-sprite.svg\");\n  background-position: -6px -907px;\n}\n\n.px-video-fullscreen-btn-container input[type=\"checkbox\"]:focus+label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -943px;\n}\n\n.px-video-fullscreen-btn-container input[type=\"checkbox\"]:hover+label {\n  background-position: -6px -943px;\n  cursor: pointer;\n}\n\n.px-video-fullscreen-btn-container input[type=\"checkbox\"]:focus+label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -943px;\n}\n\n.px-video-fullscreen-btn-container input[type=\"checkbox\"]:checked+label {\n  background-position: -6px -979px;\n}\n\n.px-video-fullscreen-btn-container input[type=\"checkbox\"]:checked:hover+label {\n  background-position: -6px -1015px;\n}\n\n/* captions button */\n.px-video-captions-btn-container label {\n  display: inline-block;\n  width: 25px;\n  height: 20px;\n  margin-left: 10px;\n  background: no-repeat url(\"./px-video-sprite.svg\");\n  background-position: -6px -835px;\n}\n\n.px-video-captions-btn-container input[type=\"checkbox\"]:focus+label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -799px;\n}\n\n.px-video-captions-btn-container input[type=\"checkbox\"]:hover+label {\n  background-position: -6px -799px;\n  cursor: pointer;\n}\n\n.px-video-captions-btn-container input[type=\"checkbox\"]:focus+label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -799px;\n}\n\n.px-video-captions-btn-container input[type=\"checkbox\"]:checked+label {\n  background-position: -6px -871px;\n}\n\n/* mute button */\n.px-video-mute-btn-container label {\n  display: inline-block;\n  width: 25px;\n  height: 20px;\n  margin-left: 240px;\n  margin-top: 2px;\n  background: no-repeat url(\"./px-video-sprite.svg\");\n  background-position: -6px -476px;\n}\n\n.px-video-mute-btn-container input[type=\"checkbox\"]:focus+label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -440px;\n}\n\n.px-video-mute-btn-container input[type=\"checkbox\"]:hover+label {\n  background-position: -6px -440px;\n  cursor: pointer;\n}\n\n.px-video-mute-btn-container input[type=\"checkbox\"]:focus+label {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n  background-position: -6px -440px;\n}\n\n/* checked state of mute button */\n.px-video-mute-btn-container input[type=\"checkbox\"]:checked+label {\n  background-position: -6px -692px;\n}\n\n.px-video-mute-btn-container input[type=\"checkbox\"]:checked:hover+label,\n.px-video-mute-btn-container input[type=\"checkbox\"]:checked:focus+label {\n  background-position: -6px -656px;\n}\n\n/* volume range input */\n.px-video-controls input[type=\"range\"] {\n  -webkit-appearance: none;\n  height: 6px;\n  width: 100px;\n  margin-top: 8px;\n  background-color: #e6e6e6;\n  outline: none;\n}\n\n.px-video-controls input[type=\"range\"]:focus::-webkit-slider-thumb {\n  outline: 0.25rem solid #2491ff;\n  outline-offset: 0;\n}\n\n.px-video-controls input[type=\"range\"]::-moz-range-track {\n  -moz-appearance: none;\n  height: 6px;\n  background-color: #e6e6e6;\n  border: none;\n}\n\n.px-video-controls input[type=\"range\"]::-webkit-slider-thumb {\n  -webkit-appearance: none !important;\n  height: 10px;\n  width: 6px;\n  background-color: #666;\n}\n\n.px-video-controls input[type=\"range\"]::-moz-range-thumb {\n  height: 12px;\n  width: 8px;\n  background-color: #666;\n}\n\n/* fixing display for IE10+ */\n@media screen and (-ms-high-contrast: active),\n(-ms-high-contrast: none) {\n  .px-video-controls input[type=\"range\"] {\n    position: relative;\n    padding: 0;\n    height: 8px;\n    top: -3px;\n  }\n\n  .px-video-time {\n    margin-top: 4px;\n  }\n\n  .px-video-captions {\n    padding: 8px;\n    min-height: 36px;\n  }\n}\n\n.px-video-container {\n  position: relative;\n  min-width: 200px;\n}\n\n#videoPlayer {\n  min-width: 200px;\n}\n\n.px-video-container.fullscreen {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  -webkit-cursor-visibility: auto-hide;\n}\n\n/* Fullscreen styles */\n\n/* style applied through js */\n.px-video-controls.js-fullscreen-controls {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  z-index: 940;\n  background: white;\n}\n\n.px-video-captions.js-fullscreen-captions {\n  min-height: 3.5em;\n  font-size: 2.5em;\n  padding: 1em;\n}\n\n.px-timetip {\n  padding: 5px 10px;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  background: rgba(0, 0, 0, 0.83);\n  border-radius: 3px;\n  color: #fff;\n  width: auto;\n  bottom: 20px;\n}\n\n.px-timetip:after {\n  top: 100%;\n  left: 50%;\n  border: solid transparent;\n  content: \" \";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n  border-color: rgba(43, 43, 43, 0);\n  border-top-color: #2b2b2b;\n  border-width: 10px;\n  margin-left: -10px;\n}\n",
                    "styleUrl": "./css/px-video.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnChanges",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div #video class=\"px-video-container\" id=\"{{VPConfiguration.id}}\" [style.width]=\"VPConfiguration.width\" >\n  <div class=\"px-video-img-captions-container\" >\n      <div class=\"px-video-captions hide\" aria-hidden=\"true\"></div>\n      <video id=\"videoPlayer\" [style.width]=\"VPConfiguration.width\" [style.height]=\"VPConfiguration.height\"\n        poster=\"{{VPConfiguration.poster}}\" controls preload={{VPConfiguration.preload}}\n        [attr.aria-label]=\"VPConfiguration.description\"\n      >\n        <!-- if Safari/Chrome-->\n          <source *ngIf=\"loadVideoSource\" src=\"{{VPConfiguration.sourceMp4}}\" type=\"video/mp4\" />\n          <!-- If Firefox/Opera/Chrome/IE -->\n          <source *ngIf=\"loadVideoSource\"  src=\"{{VPConfiguration.sourceWebm}}\" type=\"video/webm\" />\n          <track kind=\"subtitles\" kind=\"captions\" label=\"English captions\" src=\"{{VPConfiguration.caption}}\" srclang=\"en\" default />\n      </video>\n  </div>\n  <div class=\"px-video-controls\"></div>\n</div>\n"
        },
        {
            "name": "TabPanelComponent",
            "id": "component-TabPanelComponent-222d6e2de38ee54620b56c22d2a641b5",
            "file": "libs/packages/components/src/lib/tabs/tab-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-tab-panel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Aria label for tab header",
                    "description": "<p>Aria label for tab header</p>\n",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Whether this tab panel is disabled for selection",
                    "description": "<p>Whether this tab panel is disabled for selection</p>\n",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The associated id of this tab panel",
                    "description": "<p>The associated id of this tab panel</p>\n",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "True if panel is currently selected.\nOnly one tabpanel should be selected at a time",
                    "description": "<p>True if panel is currently selected.\nOnly one tabpanel should be selected at a time</p>\n",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "tabHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Header content for the tab panel. May be a string or a template",
                    "description": "<p>Header content for the tab panel. May be a string or a template</p>\n",
                    "line": 23,
                    "type": "string | TemplateRef<any>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef } from \"@angular/core\";\n\n@Component({\n  selector: `sds-tab-panel`,\n  templateUrl: `./tab-panel.component.html`\n})\nexport class TabPanelComponent {\n\n  /**\n   * The associated id of this tab panel\n   */\n  @Input() id: string;\n\n  /**\n   * True if panel is currently selected.\n   * Only one tabpanel should be selected at a time\n   */\n  @Input() selected: boolean;\n\n  /**\n   * Header content for the tab panel. May be a string or a template\n   */\n  @Input() tabHeader: string | TemplateRef<any>;\n\n  /**\n   * Aria label for tab header\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Whether this tab panel is disabled for selection\n   */\n  @Input() disabled: boolean;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div \n  [attr.aria-hidden]=\"!selected\"\n  [attr.id]=\"id\" \n  role=\"tabpanel\"\n  [ngClass]=\"{'display-none': !selected, 'display-block': selected}\"\n  >\n  <ng-content></ng-content>\n</div>"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-4b8576e3b8d96c89e0ecb8947fba77ec",
            "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sds-tabs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "automaticActivation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Enable automatic activation for tabs when cycling through tabs using\nLeft or Right arrow keys. Automatic activated tabs will automatically\nbe selected on focus as user presses left or right arrow to move\nthrough each tab. By default, tabs will need to be manually selected\nwhen using keyboard only by pressing either Enter or Space to select\nthe focused tab",
                    "description": "<p>Enable automatic activation for tabs when cycling through tabs using\nLeft or Right arrow keys. Automatic activated tabs will automatically\nbe selected on focus as user presses left or right arrow to move\nthrough each tab. By default, tabs will need to be manually selected\nwhen using keyboard only by pressing either Enter or Space to select\nthe focused tab</p>\n",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "selectedTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Currently selected tab for display.",
                    "description": "<p>Currently selected tab for display.</p>\n",
                    "line": 21,
                    "type": "TabPanelComponent"
                },
                {
                    "name": "tabClass",
                    "defaultValue": "'sds-tabs--default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "CSS styling class for tabs",
                    "description": "<p>CSS styling class for tabs</p>\n",
                    "line": 36,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedTabChange",
                    "defaultValue": "new EventEmitter<TabPanelComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits an event whenever a tab is selected by the user containing the selected\nTabPanelComponent. Please note that because this output contains `Change` suffix\nto the `tabSelected` input, users can 2-way bind to the `selectedTab` input\n",
                    "description": "<p>Emits an event whenever a tab is selected by the user containing the selected\nTabPanelComponent. Please note that because this output contains <code>Change</code> suffix\nto the <code>tabSelected</code> input, users can 2-way bind to the <code>selectedTab</code> input</p>\n",
                    "line": 44,
                    "type": "EventEmitter<TabPanelComponent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "focusedTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabPanelComponent",
                    "optional": false,
                    "description": "<p>Currently focused tab - can differ from selected tab when tab panels are manually activated</p>\n",
                    "line": 51,
                    "rawdescription": "\n\nCurrently focused tab - can differ from selected tab when tab panels are manually activated\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "tabPanels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabPanelComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSelectedTabPanel",
                    "args": [
                        {
                            "name": "newTabPanel",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInternal method to change currently selected tab panel and display another panel\nto the user. External components should not use this method, but rather\ntwo-way bind the selectedTab input and modify that value.\n",
                    "description": "<p>Internal method to change currently selected tab panel and display another panel\nto the user. External components should not use this method, but rather\ntwo-way bind the selectedTab input and modify that value.</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4418,
                                "end": 4429,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "newTabPanel"
                            },
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4412,
                                "end": 4417,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getNextTabLeft",
                    "args": [
                        {
                            "name": "tabPanels",
                            "type": "TabPanelComponent[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets next tab panel to the left of currently selected panel when Left Arrow is pressed.\nSkips disabled panels until it finds next left panel that is not disabled\n",
                    "description": "<p>Gets next tab panel to the left of currently selected panel when Left Arrow is pressed.\nSkips disabled panels until it finds next left panel that is not disabled</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4893,
                                "end": 4902,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "tabPanels"
                            },
                            "type": "TabPanelComponent[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4887,
                                "end": 4892,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>List of TabPanelComponents in the tab group</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 4961,
                                "end": 4971,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "startIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4955,
                                "end": 4960,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Current index of focused tab panel</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "getNextTabRight",
                    "args": [
                        {
                            "name": "tabPanels",
                            "type": "TabPanelComponent[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets next tab panel to the right of currently selected panel when Right Arrow is pressed\nSkips disabled panels until it finds next right panel that is not disabled\n",
                    "description": "<p>Gets next tab panel to the right of currently selected panel when Right Arrow is pressed\nSkips disabled panels until it finds next right panel that is not disabled</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5524,
                                "end": 5533,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "tabPanels"
                            },
                            "type": "TabPanelComponent[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5518,
                                "end": 5523,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>List of TabPanelComponents in the tab group</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 5592,
                                "end": 5602,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "startIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5586,
                                "end": 5591,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Current index of focused tab panel</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "isObj",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf user has not given any tabs to select initially,\nselect the first tab panel.\n",
                    "description": "<p>If user has not given any tabs to select initially,\nselect the first tab panel.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListens for programmatic change to selected tab. When a tab is changed\nprogrammatically, we must disable previously selected tab, set selected\nproperty of the new tab to true, and adjust bookkeeping values.\n",
                    "description": "<p>Listens for programmatic change to selected tab. When a tab is changed\nprogrammatically, we must disable previously selected tab, set selected\nproperty of the new tab to true, and adjust bookkeeping values.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAssigns selected tab value was given. Otherwise, the first\ntab panel in the list will be selected after content has initialized.\n",
                    "description": "<p>Assigns selected tab value was given. Otherwise, the first\ntab panel in the list will be selected after content has initialized.</p>\n"
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLooks for Left and Right arrow presses and moves selected tab accordingly.\n",
                    "description": "<p>Looks for Left and Right arrow presses and moves selected tab accordingly.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3120,
                                "end": 3126,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "$event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3114,
                                "end": 3119,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Keyboard Event</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "onTabClicked",
                    "args": [
                        {
                            "name": "clickEvent",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tabPanel",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clickEvent",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tabPanel",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, AfterViewInit, ChangeDetectorRef, Component, ContentChildren, EventEmitter, Input, OnChanges, OnInit, Output, QueryList, SimpleChanges, TemplateRef } from \"@angular/core\";\nimport { TabPanelComponent } from \"./tab-panel.component\";\n\n/** CONSTANTS\n * Adding in the constant values for keycodes\n * to handle onKeyDown events\n */\nconst LEFT_ARROW = 37;\nconst RIGHT_ARROW = 39;\n\n@Component({\n  selector: `sds-tabs`,\n  templateUrl: `./tabs.component.html`,\n})\nexport class TabsComponent implements OnInit, OnChanges, AfterContentInit {\n\n  /**\n   * Currently selected tab for display.\n   */\n  @Input() \n  selectedTab: TabPanelComponent;\n\n  /**\n   * Enable automatic activation for tabs when cycling through tabs using\n   * Left or Right arrow keys. Automatic activated tabs will automatically\n   * be selected on focus as user presses left or right arrow to move\n   * through each tab. By default, tabs will need to be manually selected\n   * when using keyboard only by pressing either Enter or Space to select\n   * the focused tab\n   */\n  @Input() automaticActivation: boolean = false;\n\n  /**\n   * CSS styling class for tabs\n   */\n  @Input() tabClass: string = 'sds-tabs--default';\n\n  /**\n   * Emits an event whenever a tab is selected by the user containing the selected\n   * TabPanelComponent. Please note that because this output contains `Change` suffix\n   * to the `tabSelected` input, users can 2-way bind to the `selectedTab` input\n   */\n  @Output()\n  selectedTabChange: EventEmitter<TabPanelComponent> = new EventEmitter<TabPanelComponent>();\n\n  @ContentChildren(TabPanelComponent) tabPanels: QueryList<TabPanelComponent>;\n\n  /**\n   * Currently focused tab - can differ from selected tab when tab panels are manually activated\n   */\n  private focusedTab: TabPanelComponent;\n\n\n  /**\n   * Assigns selected tab value was given. Otherwise, the first\n   * tab panel in the list will be selected after content has initialized.\n   */\n  ngOnInit () {\n    if (this.selectedTab) {\n      this.selectedTab.selected = true;\n      this.focusedTab = this.selectedTab;\n    }\n  }\n\n  /**\n   * Listens for programmatic change to selected tab. When a tab is changed\n   * programmatically, we must disable previously selected tab, set selected\n   * property of the new tab to true, and adjust bookkeeping values.\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.selectedTab && changes.selectedTab.currentValue) {\n      this.tabPanels.forEach(tab => tab.selected = false);\n      changes.selectedTab.currentValue.selected = true;\n      this.focusedTab = this.selectedTab;\n    }\n  }\n\n  /**\n   * If user has not given any tabs to select initially,\n   * select the first tab panel.\n   */\n  ngAfterContentInit() {\n    if (!this.selectedTab) {\n      this.tabPanels.first.selected = true;\n      this.selectedTab = this.tabPanels.first;\n      this.focusedTab = this.selectedTab;\n    }\n  }\n  \n  onTabClicked(clickEvent: MouseEvent, tabPanel: TabPanelComponent) {\n    this.changeSelectedTabPanel(tabPanel);\n  }\n\n  /**\n   * Looks for Left and Right arrow presses and moves selected tab accordingly.\n   * @param $event - Keyboard Event\n   */\n  onKeyDown($event) {\n    console.log($event);\n    const tabPanelArray = this.tabPanels.toArray();\n    let selectedTabIndex = tabPanelArray.findIndex((tabPanel) => tabPanel === this.focusedTab);\n\n    switch($event.keyCode) {\n      case LEFT_ARROW:\n        selectedTabIndex = this.getNextTabLeft(tabPanelArray, selectedTabIndex);\n        break;\n      case RIGHT_ARROW:\n        selectedTabIndex = this.getNextTabRight(tabPanelArray, selectedTabIndex);\n        break;\n    }\n\n    // Move focus to newly selected panel\n    $event.target.parentElement.children[selectedTabIndex].focus();\n    this.focusedTab = tabPanelArray[selectedTabIndex];\n\n    if (this.automaticActivation) {\n      this.changeSelectedTabPanel(this.focusedTab);\n    }\n  }\n\n  isObj(obj: any) {\n    if (typeof(obj) === 'object' && (obj as TemplateRef<any>).elementRef) {\n      return true;\n    } else if (typeof(obj) === 'string') {\n      return false;\n    } else {\n      throw new Error('Tab header must be either a string or a template reference');\n    }\n  }\n\n  /**\n   * Internal method to change currently selected tab panel and display another panel\n   * to the user. External components should not use this method, but rather\n   * two-way bind the selectedTab input and modify that value.\n   * @param newTabPanel \n   */\n  private changeSelectedTabPanel(newTabPanel: TabPanelComponent) {\n    this.selectedTab.selected = false;\n    newTabPanel.selected = true;\n    this.selectedTab = newTabPanel;\n    this.focusedTab = newTabPanel;\n    this.selectedTabChange.emit(this.selectedTab);\n  }\n\n  /**\n   * Gets next tab panel to the left of currently selected panel when Left Arrow is pressed.\n   * Skips disabled panels until it finds next left panel that is not disabled\n   * @param tabPanels - List of TabPanelComponents in the tab group\n   * @param startIndex - Current index of focused tab panel\n   */\n  private getNextTabLeft(tabPanels: TabPanelComponent[], startIndex: number) {\n\n    for (let i = 0; i < tabPanels.length; i++) {\n      startIndex = startIndex == 0 ? tabPanels.length - 1 : (startIndex - 1) % tabPanels.length;\n      if (!tabPanels[startIndex].disabled) {\n        return startIndex;\n      }\n    }\n  }\n\n  /**\n   * Gets next tab panel to the right of currently selected panel when Right Arrow is pressed\n   * Skips disabled panels until it finds next right panel that is not disabled\n   * @param tabPanels - List of TabPanelComponents in the tab group\n   * @param startIndex - Current index of focused tab panel\n   */\n  private getNextTabRight(tabPanels: TabPanelComponent[], startIndex: number) {\n    for (let i = 0; i < tabPanels.length; i++) {\n      startIndex = (startIndex + 1) % this.tabPanels.length;\n      if (!tabPanels[startIndex].disabled) {\n        return startIndex;\n      }\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnChanges",
                "AfterContentInit"
            ],
            "templateData": "<div role=\"tablist\" [attr.class]=\"tabClass\">\n  <button\n    *ngFor=\"let tabPanel of tabPanels\"\n    role=\"tab\"\n    class=\"sds-tabs__item\"\n    [attr.aria-selected]=\"tabPanel.selected\"\n    [attr.tabindex]=\"tabPanel.selected ? 0 : -1\"\n    [attr.aria-controls]=\"tabPanel.id\"\n    [attr.aria-label]=\"tabPanel.ariaLabel\"\n    [disabled]=\"tabPanel.disabled\"\n    (click)=\"onTabClicked($event, tabPanel)\"\n    (keydown)=\"onKeyDown($event)\">\n    <ng-container *ngIf=\"isObj(tabPanel.tabHeader); else textHeader\">\n      <ng-template *ngTemplateOutlet=\"tabPanel.tabHeader\"></ng-template>\n    </ng-container>\n    <ng-template #textHeader>\n      {{tabPanel.tabHeader}}\n    </ng-template>\n  </button>\n</div>\n<div class=\"sds-tabs__content\" tabindex=\"0\">\n  <ng-content></ng-content>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "PaginationModule",
            "id": "module-PaginationModule-b922cf3d7cca2aa50dd025afa045f0bc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/pagination/pagination.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  declarations: [PaginationComponent],\n  imports: [\n    CommonModule, FormsModule\n  ],\n  exports: [PaginationComponent]\n})\nexport class PaginationModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsAccordionModule",
            "id": "module-SdsAccordionModule-df07d1d617294049e624c57960e3b586",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/accordion/accordion.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { PortalModule } from \"@angular/cdk/portal\";\n\nimport { SdsAccordionDirective } from \"./accordion.directive\";\nimport { SdsAccordionItemComponent } from \"./accordion-item.component\";\nimport { SdsAccordionItemHeaderComponent } from \"./accordion-item-header.component\";\nimport { SdsAccordionItemContentDirective } from \"./accordion-item-content.directive\";\n\n@NgModule({\n  imports: [CommonModule, PortalModule],\n  exports: [\n    SdsAccordionDirective,\n    SdsAccordionItemComponent,\n    SdsAccordionItemHeaderComponent,\n    SdsAccordionItemContentDirective\n  ],\n  declarations: [\n    SdsAccordionDirective,\n    SdsAccordionItemComponent,\n    SdsAccordionItemHeaderComponent,\n    SdsAccordionItemContentDirective\n  ],\n  providers: []\n})\nexport class SdsAccordionModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsAccordionDirective"
                        },
                        {
                            "name": "SdsAccordionItemComponent"
                        },
                        {
                            "name": "SdsAccordionItemContentDirective"
                        },
                        {
                            "name": "SdsAccordionItemHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsAccordionDirective"
                        },
                        {
                            "name": "SdsAccordionItemComponent"
                        },
                        {
                            "name": "SdsAccordionItemContentDirective"
                        },
                        {
                            "name": "SdsAccordionItemHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsAutocompleteModule",
            "id": "module-SdsAutocompleteModule-bb64d2b1f11c0192ae5c051743ae8940",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/autocomplete/autocomplete.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSAutocompleteComponent } from './autocomplete.component';\nimport { RouterModule } from '@angular/router';\nimport { SdsSelectedResultsModule } from '../selected-result/selected-result.module';\nimport { SdsAutocompleteSearchModule } from '../autocomplete-search/autocomplete-search.module';\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, RouterModule, SdsSelectedResultsModule, SdsAutocompleteSearchModule\n  ],\n  declarations: [SDSAutocompleteComponent],\n  exports: [SDSAutocompleteComponent]\n})\nexport class SdsAutocompleteModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSAutocompleteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SdsAutocompleteSearchModule"
                        },
                        {
                            "name": "SdsSelectedResultsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSAutocompleteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsAutocompleteSearchModule",
            "id": "module-SdsAutocompleteSearchModule-e02fe7cc4d43c2fdfc454f3ca06ea6d3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSAutocompleteSearchComponent } from './autocomplete-search.component';\nimport { SDSClickOutsideModule } from '../click-outside/click-outside.module';\nimport { SdsTabOutsideModule } from '../tab-outside/taboutside.module';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { NgxBootstrapIconsModule, x, caretDownFill, caretUpFill } from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    SDSClickOutsideModule,\n    SdsTabOutsideModule,\n    OverlayModule,\n    IconModule,\n    NgxBootstrapIconsModule.pick({ x, caretDownFill, caretUpFill })\n  ],\n  declarations: [SDSAutocompleteSearchComponent],\n  exports: [SDSAutocompleteSearchComponent],\n})\nexport class SdsAutocompleteSearchModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSAutocompleteSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SDSClickOutsideModule"
                        },
                        {
                            "name": "SdsTabOutsideModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSAutocompleteSearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SDSClickOutsideModule",
            "id": "module-SDSClickOutsideModule-f67c19edc18870901247dd337aa079d3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/click-outside/click-outside.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSClickOutsideDirective } from './click-outside.directive';\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule\n  ],\n  declarations: [SDSClickOutsideDirective],\n  exports: [SDSClickOutsideDirective]\n})\nexport class SDSClickOutsideModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSClickOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSClickOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsCollapseModule",
            "id": "module-SdsCollapseModule-f02ae153e14c29fb138f09973a06f2b4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/collapse/collapse.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CollapseDirective } from './collapse.directive';\n\n@NgModule({\n  declarations: [ CollapseDirective],\n  imports: [\n    CommonModule\n  ],\n  exports: [CollapseDirective]\n})\nexport class SdsCollapseModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CollapseDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CollapseDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsDateModule",
            "id": "module-SdsDateModule-cce6a6200658d742ffc148f0810bb251",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/date/sds-date.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { SdsDatePipe } from './sds-date.pipe';\n\n\n@NgModule({\n  declarations: [SdsDatePipe],\n  imports: [\n    CommonModule\n  ],\n  exports: [SdsDatePipe],\n  providers: [DatePipe]\n})\nexport class SdsDateModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsDatePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsDatePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsDialogModule",
            "id": "module-SdsDialogModule-7e943558411dd7089b8783271cb16596",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxBootstrapIconsModule, x, infoCircle, exclamationTriangle } from 'ngx-bootstrap-icons';\nimport {\n  SDS_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER,\n  SdsDialogService,\n} from './dialog';\nimport { SdsDialogContainerComponent } from './dialog-container.component';\nimport { IconModule, alertError } from '@gsa-sam/ngx-uswds-icons';\n\nimport {\n  SdsDialogActionsDirective,\n  SdsDialogCloseDirective,\n  SdsDialogContentDirective,\n  SdsDialogTitleDirective,\n  SdsDialogSubtitleDirective,\n} from './dialog-content.directives';\n\n@NgModule({\n  imports: [CommonModule, OverlayModule, PortalModule, IconModule, NgxBootstrapIconsModule.pick({x, alertError, infoCircle, exclamationTriangle})],\n  exports: [\n    SdsDialogContainerComponent,\n    SdsDialogCloseDirective,\n    SdsDialogTitleDirective,\n    SdsDialogSubtitleDirective,\n    SdsDialogContentDirective,\n    SdsDialogActionsDirective,\n  ],\n  declarations: [\n    SdsDialogContainerComponent,\n    SdsDialogCloseDirective,\n    SdsDialogTitleDirective,\n    SdsDialogSubtitleDirective,\n    SdsDialogActionsDirective,\n    SdsDialogContentDirective,\n  ],\n  providers: [\n    SdsDialogService,\n    SDS_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [SdsDialogContainerComponent],\n})\nexport class SdsDialogModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SdsDialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsDialogActionsDirective"
                        },
                        {
                            "name": "SdsDialogCloseDirective"
                        },
                        {
                            "name": "SdsDialogContainerComponent"
                        },
                        {
                            "name": "SdsDialogContentDirective"
                        },
                        {
                            "name": "SdsDialogSubtitleDirective"
                        },
                        {
                            "name": "SdsDialogTitleDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsDialogActionsDirective"
                        },
                        {
                            "name": "SdsDialogCloseDirective"
                        },
                        {
                            "name": "SdsDialogContainerComponent"
                        },
                        {
                            "name": "SdsDialogContentDirective"
                        },
                        {
                            "name": "SdsDialogSubtitleDirective"
                        },
                        {
                            "name": "SdsDialogTitleDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsEditorModule",
            "id": "module-SdsEditorModule-75d0e39a092a9a4d37add01d32e60fb2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/editor/editor.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsEditorComponent } from './editor.component';\n\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [CommonModule, A11yModule, FormsModule],\n    exports: [SdsEditorComponent],\n    declarations: [SdsEditorComponent],\n    providers: []\n})\nexport class SdsEditorModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsEditorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsEditorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsExternalLinkDirectivesModule",
            "id": "module-SdsExternalLinkDirectivesModule-cd357a49997a900e610a09db9bf7b6a6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/external-link/external-link.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExternalLinkDirective } from './external-link.directive';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  declarations: [ExternalLinkDirective],\n  imports: [CommonModule, IconModule],\n  entryComponents: [],\n  exports: [ExternalLinkDirective],\n})\nexport class SdsExternalLinkDirectivesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExternalLinkDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExternalLinkDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsIconModule",
            "id": "module-SdsIconModule-81be6e96533e68e42b37c04aaee7b83e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxBootstrapIconsModule } from 'ngx-bootstrap-icons';\nimport { SdsIconComponent } from '../icon/icon.component';\n\n\n@NgModule({\n  declarations: [SdsIconComponent],\n  imports: [\n    CommonModule,\n    NgxBootstrapIconsModule\n  ],\n  exports: [SdsIconComponent]\n})\nexport class SdsIconModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsMenuModule",
            "id": "module-SdsMenuModule-97ff7818393801dd64202e122a09b63c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { SdsMenuComponent } from './menu.component';\nimport { SdsMenuItemComponent } from './menu-item.component';\nimport { SdsMenuTriggerForDirective } from './menu-trigger.directive';\nimport { SdsMenuHeaderComponent } from './menu-header.component';\nimport { NgxBootstrapIconsModule, x } from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  imports: [CommonModule, OverlayModule, IconModule, NgxBootstrapIconsModule.pick({x})],\n  exports: [\n    SdsMenuComponent,\n    SdsMenuItemComponent,\n    SdsMenuTriggerForDirective,\n    SdsMenuHeaderComponent\n  ],\n  declarations: [\n    SdsMenuComponent,\n    SdsMenuItemComponent,\n    SdsMenuTriggerForDirective,\n    SdsMenuHeaderComponent\n  ],\n  providers: []\n})\nexport class SdsMenuModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsMenuComponent"
                        },
                        {
                            "name": "SdsMenuHeaderComponent"
                        },
                        {
                            "name": "SdsMenuItemComponent"
                        },
                        {
                            "name": "SdsMenuTriggerForDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsMenuComponent"
                        },
                        {
                            "name": "SdsMenuHeaderComponent"
                        },
                        {
                            "name": "SdsMenuItemComponent"
                        },
                        {
                            "name": "SdsMenuTriggerForDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsObserversModule",
            "id": "module-SdsObserversModule-192e2cce0123af4e8189db7246bdc2af",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/observers/observer.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsObserveWidthDirective } from './observe-width.directive';\n\n@NgModule({\n  imports: [],\n  exports: [SdsObserveWidthDirective],\n  declarations: [SdsObserveWidthDirective],\n  providers: [],\n})\nexport class SdsObserversModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsObserveWidthDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsObserveWidthDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsPageModule",
            "id": "module-SdsPageModule-943689a5c91bd329b1df2277ea540a43",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/page/page.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsPageComponent, SdsPageOptionsComponent } from './page.component';\n\n@NgModule({\n  imports: [],\n  exports: [SdsPageComponent, SdsPageOptionsComponent],\n  declarations: [SdsPageComponent, SdsPageOptionsComponent],\n  providers: [],\n})\nexport class SdsPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsPageComponent"
                        },
                        {
                            "name": "SdsPageOptionsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsPageComponent"
                        },
                        {
                            "name": "SdsPageOptionsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsPopoverModule",
            "id": "module-SdsPopoverModule-33edba16b4d77659111a0f8b32ba1f33",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/popover/popover.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsPopoverDirective } from './popover.directive';\n\n\n@NgModule({\n  declarations: [SdsPopoverDirective],\n  imports: [\n    CommonModule\n  ],\n  exports: [SdsPopoverDirective]\n})\nexport class SdsPopoverModule {\n\n }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsPopoverDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsPopoverDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsPopupModule",
            "id": "module-SdsPopupModule-292fdb647fef587a416b0d029e9f265d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/popup/popup.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsPopupDirective } from './popup.directive';\n\n\n@NgModule({\n  declarations: [SdsPopupDirective],\n  imports: [\n    CommonModule\n  ],\n  exports: [SdsPopupDirective]\n})\nexport class SdsPopupModule {\n\n }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsPopupDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsPopupDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSearchModule",
            "id": "module-SdsSearchModule-dd81409de17187addba382cbc29d618e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/search/search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsSearchComponent } from './search.component';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgxBootstrapIconsModule, x, search } from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  imports: [CommonModule, A11yModule, FormsModule, IconModule, NgxBootstrapIconsModule.pick({x, search})],\n  exports: [SdsSearchComponent],\n  declarations: [SdsSearchComponent],\n  providers: [],\n})\nexport class SdsSearchModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsSearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSearchResultListModule",
            "id": "module-SdsSearchResultListModule-aba48288af4d407c8a255bea6e0627fe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/search-result-list/search-result-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SdsSearchResultListComponent } from './search-result-list.component';\nimport { IconModule, alertError } from '@gsa-sam/ngx-uswds-icons';\nimport { NgxBootstrapIconsModule, search, arrowLeftCircleFill, infoCircle, circle } from 'ngx-bootstrap-icons';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IconModule,\n    NgxBootstrapIconsModule.pick({search, arrowLeftCircleFill, infoCircle, alertError, circle})],\n  declarations: [SdsSearchResultListComponent],\n  exports: [SdsSearchResultListComponent]\n})\nexport class SdsSearchResultListModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsSearchResultListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsSearchResultListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSelectedResultsModule",
            "id": "module-SdsSelectedResultsModule-a284b252c0b57d7d489ba15f3e9b6e91",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/selected-result/selected-result.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSSelectedResultComponent } from './selected-result.component';\nimport { RouterModule } from '@angular/router';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, RouterModule, IconModule],\n  declarations: [SDSSelectedResultComponent],\n  exports: [SDSSelectedResultComponent],\n})\nexport class SdsSelectedResultsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSSelectedResultComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSSelectedResultComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSelectionPanelModule",
            "id": "module-SdsSelectionPanelModule-80c4e7c3f6474ae745c099375c1735c8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/selection-panel/selection-panel.module.ts",
            "methods": [],
            "sourceCode": "\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { SdsSelectionPanelComponent } from './selection-panel-wrapper/selection-panel.component';\nimport { SdsSubPanelComponent } from './sub-panel/sub-panel.component';\nimport { SdsSelectionPanelSelectionModeComponent } from './selection-mode/selection-mode.component';\nimport { SdsSelectionPanelNavigationModeComponent } from './navigation-mode/navigation-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule, RouterModule\n  ],\n  declarations: [ \n    SdsSelectionPanelComponent , \n    SdsSubPanelComponent, \n    SdsSelectionPanelSelectionModeComponent, \n    SdsSelectionPanelNavigationModeComponent\n  ],\n  exports: [\n    SdsSelectionPanelComponent,\n    SdsSubPanelComponent,\n  ]\n})\nexport class SdsSelectionPanelModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsSelectionPanelComponent"
                        },
                        {
                            "name": "SdsSelectionPanelNavigationModeComponent"
                        },
                        {
                            "name": "SdsSelectionPanelSelectionModeComponent"
                        },
                        {
                            "name": "SdsSubPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsSelectionPanelComponent"
                        },
                        {
                            "name": "SdsSubPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsSideNavigationModule",
            "id": "module-SdsSideNavigationModule-8fb068e65ada138cac43f6c771e74011",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/side-navigation/side-navigation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SdsSideNavigationComponent } from './side-navigation.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, RouterModule\n  ],\n  declarations: [SdsSideNavigationComponent],\n  exports: [SdsSideNavigationComponent]\n})\nexport class SdsSideNavigationModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsSideNavigationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsSideNavigationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTabOutsideModule",
            "id": "module-SdsTabOutsideModule-706ed403e2724bfbecb56874eff1243f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/tab-outside/taboutside.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SDSTabOutsideDirective } from './taboutside.directive';\n@NgModule({\n  imports: [\n    CommonModule, FormsModule\n  ],\n  declarations: [SDSTabOutsideDirective],\n  exports: [SDSTabOutsideDirective]\n})\nexport class SdsTabOutsideModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SDSTabOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SDSTabOutsideDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTabsModule",
            "id": "module-SdsTabsModule-41fc458ac2f81644db77a3e647ba83d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { TabPanelComponent } from \"./tab-panel.component\";\nimport { TabsComponent } from \"./tabs.component\";\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TabsComponent,\n    TabPanelComponent\n  ],\n  exports: [\n    TabsComponent,\n    TabPanelComponent\n  ]\n})\nexport class SdsTabsModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabPanelComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabPanelComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTextModule",
            "id": "module-SdsTextModule-5ecefddec7a7514e7f024eb39755e06a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/text/text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsTextComponent } from './text.component';\nimport { SdsTextChildComponent} from './child.component';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, A11yModule, FormsModule],\n  exports: [SdsTextComponent, SdsTextChildComponent],\n  declarations: [SdsTextComponent,  SdsTextChildComponent],\n  providers: []\n})\nexport class SdsTextModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsTextChildComponent"
                        },
                        {
                            "name": "SdsTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsTextChildComponent"
                        },
                        {
                            "name": "SdsTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsToastModule",
            "id": "module-SdsToastModule-f290e868e9de1dfa0d2e6de6c30fea32",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/toast/toast.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { SdsToastComponent } from './toast-single.component';\nimport { CommonModule } from '@angular/common';\nimport { NgxBootstrapIconsModule, check2Circle, infoCircle, exclamationTriangle, slashCircle, x } from 'ngx-bootstrap-icons';\nimport { IconModule } from '@gsa-sam/ngx-uswds-icons';\n\nexport let SdsToastSettings = {\n  toastComponent: SdsToastComponent,\n  timeOut: 6000,\n  toastClass: 'sds-toast',\n  positionClass: 'toast-bottom-left',\n};\n\n@NgModule({\n  imports: [CommonModule, IconModule, NgxBootstrapIconsModule.pick({check2Circle, infoCircle, exclamationTriangle, slashCircle, x})],\n  exports: [SdsToastComponent],\n  declarations: [SdsToastComponent],\n  entryComponents: [],\n  providers: [],\n})\nexport class SdsToastModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsToastComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsToastComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsToolbarModule",
            "id": "module-SdsToolbarModule-1650cddaa16a8153975a767c6cb0d538",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/toolbar/toolbar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SdsToolbarComponent } from './toolbar.component';\nimport { SdsToolbarHeaderComponent } from './toolbar-header.component';\nimport { SdsToolbarExpandDirective } from './toolbar-expand.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [SdsToolbarComponent, SdsToolbarExpandDirective],\n  declarations: [\n    SdsToolbarComponent,\n    SdsToolbarHeaderComponent,\n    SdsToolbarExpandDirective\n  ],\n  providers: []\n})\nexport class SdsToolbarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsToolbarComponent"
                        },
                        {
                            "name": "SdsToolbarExpandDirective"
                        },
                        {
                            "name": "SdsToolbarHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsToolbarComponent"
                        },
                        {
                            "name": "SdsToolbarExpandDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTooltipModule",
            "id": "module-SdsTooltipModule-f69b3965e05647a7bb02a974b928700f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsTooltipDirective } from './tooltip.directive';\n\n\n@NgModule({\n  declarations: [SdsTooltipDirective],\n  imports: [\n    CommonModule\n  ],\n  exports: [SdsTooltipDirective]\n})\nexport class SdsTooltipModule {\n\n }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsTooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsTooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTopBannerModule",
            "id": "module-SdsTopBannerModule-bf50cf8eeaa3e1522d74d439b2461d5f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/top-banner/top-banner.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsTopBannerComponent } from './top-banner.component';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [SdsTopBannerComponent],\n  declarations: [\n    SdsTopBannerComponent\n  ],\n  providers: []\n})\nexport class SdsTopBannerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsTopBannerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsTopBannerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsTruncateModule",
            "id": "module-SdsTruncateModule-cfdc200ecb06e0ddcbefeeee51ab97ba",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/truncate-text/truncate.text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SdsTruncateTextByLineDirective } from './truncate-text.directive';\nimport { SdsTruncatedTextContainerComponent } from './truncate-text-container.component';\n\n@NgModule({\n  imports: [],\n  exports: [SdsTruncateTextByLineDirective],\n  declarations: [\n    SdsTruncateTextByLineDirective,\n    SdsTruncatedTextContainerComponent\n  ],\n  providers: [],\n  entryComponents: [SdsTruncatedTextContainerComponent]\n})\nexport class SdsTruncateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsTruncateTextByLineDirective"
                        },
                        {
                            "name": "SdsTruncatedTextContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsTruncateTextByLineDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SdsVideoPlayerModule",
            "id": "module-SdsVideoPlayerModule-b670aed11e64f25ada8618bd7d6da14a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/packages/components/src/lib/video-player/video-player.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SdsVideoPlayerComponent } from './video-player.component';\n\n\n\n@NgModule({\n  declarations: [SdsVideoPlayerComponent],\n  exports: [SdsVideoPlayerComponent],\n  imports: [\n    CommonModule\n  ],\n  providers: []\n})\nexport class SdsVideoPlayerModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SdsVideoPlayerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SdsVideoPlayerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACCORDION_ITEM_ANIMATION_TIMING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/accordion/accordion-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                "rawdescription": "Time and timing curve for accordion item animations.",
                "description": "<p>Time and timing curve for accordion item animations.</p>\n"
            },
            {
                "name": "add",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAdd.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-add\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M368,240H272V144a16,16,0,0,0-32,0v96H144a16,16,0,0,0,0,32h96v96a16,16,0,0,0,32,0V272h96a16,16,0,0,0,0-32Z\\\"/>\\n</svg>\""
            },
            {
                "name": "addReq",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAddReq.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-add-req\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,464H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H272a16,16,0,0,1,0,32H80V432H432V240a16,16,0,0,1,32,0V440A24,24,0,0,1,440,464Zm24-352H400V48a16,16,0,0,0-32,0v64H304a16,16,0,0,0,0,32h64v64a16,16,0,0,0,32,0V144h64a16,16,0,0,0,0-32Z\\\"/>\\n</svg>\""
            },
            {
                "name": "alertError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAlertError.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-alert-error\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,32C132.48,32,32,132.48,32,256S132.48,480,256,480,480,379.52,480,256,379.52,32,256,32ZM64,256a191,191,0,0,1,45.53-123.85L379.85,402.47A191,191,0,0,1,256,448C150.13,448,64,361.87,64,256ZM402.47,379.85,132.15,109.53A191,191,0,0,1,256,64c105.87,0,192,86.13,192,192A191,191,0,0,1,402.47,379.85Z\\\"/>\\n</svg>\""
            },
            {
                "name": "alertInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAlertInfo.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-alert-info\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,512C114.84,512,0,397.16,0,256S114.84,0,256,0,512,114.84,512,256,397.16,512,256,512Zm0-486C129.19,26,26,129.19,26,256S129.19,486,256,486,486,382.81,486,256,382.81,26,256,26Zm0,91.12a17.36,17.36,0,1,0,17.36,17.36A17.36,17.36,0,0,0,256,117.15Zm-17.36,86.78V377.49a17.36,17.36,0,1,0,34.71,0V203.93a17.36,17.36,0,1,0-34.71,0Z\\\"/>\\n</svg>\""
            },
            {
                "name": "alertWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAlertWarning.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-alert-warning\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M429.29,432H82.7C45.59,433.28,18.42,390.2,39,358.51L212.61,72.09c17.88-31.75,69.5-31.75,87.39,0L473,358.55C493.56,390.26,466.37,433.28,429.29,432Zm-173-352A18.82,18.82,0,0,0,240,88.71L66.36,375.13C59.16,389.21,70,399.54,82.7,400H429.29c12.71-.44,23.59-10.85,16.33-24.88l-173-286.47C269.36,83.26,263.23,80,256.31,80ZM272,288V160c.31-20.75-32.3-20.76-32,0V288a16,16,0,0,0,32,0Zm-16,48a16,16,0,1,0,16,16A16,16,0,0,0,256,336Z\\\"/>\\n</svg>\""
            },
            {
                "name": "allIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/all.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  add,\n  addReq,\n  alertError,\n  alertInfo,\n  alertWarning,\n  angleCircle,\n  angleLeft,\n  angleRight,\n  arrow,\n  arrowDown,\n  arrowUp,\n  article,\n  attachment,\n  bars,\n  bell,\n  book,\n  bookmark,\n  building,\n  buildingAlt,\n  calendar,\n  calendarAdd,\n  calendarCheck,\n  check,\n  checkCircle,\n  comment,\n  document,\n  documentAdd,\n  documentPdf,\n  documentSearch,\n  download,\n  ellipsis,\n  envelope,\n  exclamation,\n  exclamationCircle,\n  exclamationTriangle,\n  exit,\n  federalBuilding,\n  file,\n  fileChartLine,\n  filter,\n  flag,\n  folder,\n  folderAlt1,\n  folderAlt2,\n  home,\n  informationCircle,\n  invoice,\n  leaf,\n  link,\n  logIn,\n  logOut,\n  messages,\n  mobile,\n  newNote,\n  newVersion,\n  notCompleted,\n  note,\n  openDoors,\n  paperPlane,\n  penPaper,\n  pentagon,\n  photo,\n  photoAlt,\n  print,\n  question,\n  questionCircle,\n  receipt,\n  request,\n  reset,\n  resetFilter,\n  rulerPencil,\n  search,\n  searchCircle,\n  share,\n  ship,\n  stackblitz,\n  star,\n  tablet,\n  tag,\n  thumbDown,\n  thumbUp,\n  trash,\n  triangle,\n  unlink,\n  upload,\n  user,\n  userCircle,\n  users,\n  videoCircle,\n  videoPlay,\n  videoSquare,\n  workspace,\n}"
            },
            {
                "name": "angleCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAngleCircle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-angle-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M296,368a16,16,0,0,1-12.3-5.76l-80-96a16,16,0,0,1,0-20.48l80-96a16,16,0,1,1,24.58,20.48L236.83,256l71.46,85.76A16,16,0,0,1,296,368ZM480,256C480,132.48,379.52,32,256,32S32,132.48,32,256,132.48,480,256,480,480,379.52,480,256Zm-32,0c0,105.87-86.13,192-192,192S64,361.87,64,256,150.13,64,256,64,448,150.13,448,256Z\\\"/>\\n</svg>\""
            },
            {
                "name": "angleLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAngleLeft.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-angle-left\\\" viewBox=\\\"0 0 232.7 512\\\">\\n  <path d=\\\"M194.2,512c-12.1,0-24-5.6-31.6-16.3L7.2,278.5c-9.7-13.5-9.7-31.6,0-45.1L162.6,16.2 c12.5-17.4,36.7-21.5,54.2-9c17.4,12.4,21.5,36.7,9,54.1L86.5,256l139.2,194.7c12.5,17.4,8.4,41.7-9,54.1 C209.9,509.7,202,512,194.2,512z\\\"/>\\n</svg>\""
            },
            {
                "name": "angleRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAngleRight.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-angle-right\\\" viewBox=\\\"0 0 234.3 512\\\">\\n  <path d=\\\"M39.5,0c12.6,0.1,24.3,6.2,31.6,16.4l156,218.4c9.6,13.5,9.6,31.7,0,45.2l-156,218.4c-14,16.4-38.6,18.3-55,4.3 C1.8,490.3-1.7,469.4,8,453.1l139.6-195L8,63.2C-5.1,46-1.8,21.6,15.4,8.5c0.5-0.4,1-0.8,1.5-1.1C23.5,2.6,31.4,0.1,39.5,0z\\\"/>\\n</svg>\""
            },
            {
                "name": "animationBody",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  transition('* => enter',\n    [\n      style({opacity: 0, transform: 'scale(0.7)'}),\n      animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n        style({transform: 'none', opacity: 1}))\n    ]\n  ),\n  transition('* => void, * => exit',\n    [\n      style({transform: 'none'}),\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n        style({opacity: 0})\n      )\n    ]\n  ),\n  // state('slideExit', style({right: '-15rem'})),\n  // state('slideEnter', style({right: '0rem'})),\n  transition('* => slideEnter', [\n    style({right: '-15rem'}),\n    animate('1s', style({right: '0rem'}))\n  ]),\n  transition('* => slideExit', [\n    style({right: '0rem'}),\n    animate('1s', style({right: '-15rem'}))\n  ]),\n]"
            },
            {
                "name": "arrow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsArrow.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-arrow\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M389,246.7,293,112.3a16,16,0,0,0-26,18.6L344.91,240H124.3a16,16,0,0,0,0,32H344.91L267,381.1a16,16,0,0,0,26,18.6l96-134.4A16,16,0,0,0,389,246.7Z\\\"/>\\n</svg>\""
            },
            {
                "name": "arrowDown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsArrowDown.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-arrow-down\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M328.1,255.34V0H182.57V255.34l-82-100.55L0,255.34,256.66,512,512,256.67s-83.77-94.36-88.64-99.23Z\\\"/>\\n</svg>\""
            },
            {
                "name": "arrowUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsArrowUp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-arrow-up\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M183.9,256.7V512h145.5V256.7l82,100.5L512,256.7L255.3,0L0,255.3c0,0,83.8,94.4,88.6,99.2L183.9,256.7z\\\"/>\\n</svg>\""
            },
            {
                "name": "article",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsArticle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-article\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M438.4,176H384V104a24,24,0,0,0-24-24H72a24,24,0,0,0-24,24V408a24,24,0,0,0,24,24H440a23.89,23.89,0,0,0,24-23.73v-207A25.47,25.47,0,0,0,438.4,176ZM80,112H352V400H80ZM432,400H384V208h48ZM128,256h80a16,16,0,0,0,16-16V160a16,16,0,0,0-16-16H128a16,16,0,0,0-16,16v80A16,16,0,0,0,128,256Zm16-80h48v48H144ZM320,304a16,16,0,0,1-16,16H128a16,16,0,0,1,0-32H304A16,16,0,0,1,320,304Zm0,48a16,16,0,0,1-16,16H128a16,16,0,0,1,0-32H304A16,16,0,0,1,320,352Z\\\"/>\\n</svg>\""
            },
            {
                "name": "attachment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAttachment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-attachment\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,464.88a96.1,96.1,0,0,1-96-96v-120a56,56,0,0,1,112,0v88a16,16,0,0,1-32,0v-88a24,24,0,0,0-48,0v120a64,64,0,0,0,128,0v-224a64,64,0,0,0-128,0,16,16,0,0,1-32,0,96,96,0,0,1,192,0v224A96.1,96.1,0,0,1,256,464.88Z\\\"/>\\n</svg>\""
            },
            {
                "name": "Autocomplete_Autocomplete_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteSearchComponent),\n  multi: true\n}"
            },
            {
                "name": "Autocomplete_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/autocomplete/autocomplete.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteComponent),\n  multi: true\n}"
            },
            {
                "name": "bars",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBars.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-bars\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M1.25,264.5c0-10.251,8.311-18.562,18.562-18.562h259.875c10.261,0,18.561,8.311,18.561,18.562c0,10.258-8.3,18.563-18.561,18.563H19.812C9.561,283.063,1.25,274.758,1.25,264.5z M428.188,394.438H19.812c-10.251,0-18.562,8.301-18.562,18.562c0,10.262,8.311,18.563,18.562,18.563h408.375c10.26,0,18.562-8.302,18.562-18.563C446.75,402.738,438.447,394.438,428.188,394.438z M353.937,97.438H182.082h-13.86H19.812c-10.251,0-18.562,8.302-18.562,18.562c0,10.262,8.311,18.563,18.562,18.563h148.41h13.86h171.855c10.263,0,18.565-8.302,18.565-18.563C372.502,105.739,364.199,97.438,353.937,97.438z\\\"/>\\n</svg>\""
            },
            {
                "name": "bell",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBell.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-bell\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440.06,428.6l-34.35-68.76V185.38C405.71,83,322.79,0,220.5,0S35.29,83,35.29,185.38V359.85L.94,428.6a8.83,8.83,0,0,0,7.89,12.78H141.62a79.36,79.36,0,0,0,157.75,0H432.17A8.83,8.83,0,0,0,440.06,428.6ZM52.93,185.38c0-92.63,75-167.72,167.57-167.72S388.07,92.75,388.07,185.38V353.1H52.93Zm167.57,309a61.77,61.77,0,0,1-61.11-53H281.61A61.77,61.77,0,0,1,220.5,494.34Zm70.56-70.62H23.1l26.46-53H391.44l26.46,53Z\\\"/>\\n</svg>\""
            },
            {
                "name": "book",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBook.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-book\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M464.24,0H43.82A43.78,43.78,0,0,0,0,43.75V441.13c0,.29,0,.57,0,.86s0,.28,0,.42c0,1.19,0,2.4,0,3.62v.27H0c0,.05,0,.11,0,.16a10.11,10.11,0,0,0,.31,2.31A70.05,70.05,0,0,0,70.07,512H464.24a8.76,8.76,0,0,0,8.76-8.75V8.75A8.76,8.76,0,0,0,464.24,0ZM105.11,17.5H192.7V144.61l-36.88-38.15a8.76,8.76,0,0,0-12.53-.07L105.11,145ZM455.48,431.75H359.13a8.75,8.75,0,1,0,0,17.5h96.35V494.5H70.07a52.52,52.52,0,0,1-52.53-51.65v-.64q0-2.54.2-4.94A52.53,52.53,0,0,1,48.86,394a75.58,75.58,0,0,1,16.26-3.17l195.26,0h195.1Zm0-59.77H70.07a69.86,69.86,0,0,0-28.18,5.91,61.71,61.71,0,0,0-24.35,14.91V43.75A26.27,26.27,0,0,1,43.82,17.5H87.59V166.27a8.76,8.76,0,0,0,15,6.15l46.87-47.36,45.71,47.29a8.76,8.76,0,0,0,15.06-6.08V17.5H455.48Z\\\"/>\\n</svg>\""
            },
            {
                "name": "bookmark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBookmark.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-bookmark\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M400,464a16.05,16.05,0,0,1-9.83-3.37L256,356.26,121.82,460.62A16,16,0,0,1,96,448V72a24,24,0,0,1,24-24H392a24,24,0,0,1,24,24V448a16,16,0,0,1-16,16ZM256,320a15.93,15.93,0,0,1,9.82,3.38L384,415.27V80H128V415.27l118.18-91.9A15.93,15.93,0,0,1,256,320Z\\\"/>\\n</svg>\""
            },
            {
                "name": "building",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBuilding.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-building\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M461.43,435l-58.53-161A28.22,28.22,0,0,0,377.14,256h-56V72a24,24,0,0,0-24-24h-224a24,24,0,0,0-24,24V440a24,24,0,0,0,24,24h368a21.19,21.19,0,0,0,20.29-29ZM81.14,80h208V432h-208Zm240,352V288h52.79l52.36,144Zm-144-304a16,16,0,0,1-16,16h-32a16,16,0,1,1,0-32h32A16,16,0,0,1,177.14,128Zm0,64a16,16,0,0,1-16,16h-32a16,16,0,1,1,0-32h32A16,16,0,0,1,177.14,192Zm0,64a16,16,0,0,1-16,16h-32a16,16,0,1,1,0-32h32A16,16,0,0,1,177.14,256Zm80-128a16,16,0,0,1-16,16h-32a16,16,0,0,1,0-32h32A16,16,0,0,1,257.14,128Zm0,64a16,16,0,0,1-16,16h-32a16,16,0,0,1,0-32h32A16,16,0,0,1,257.14,192Zm0,64a16,16,0,0,1-16,16h-32a16,16,0,0,1,0-32h32A16,16,0,0,1,257.14,256Z\\\"/>\\n</svg>\""
            },
            {
                "name": "buildingAlt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBuildingAlt.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-building-alt\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M424,464H312a24,24,0,0,1-24-24V336H224V440a24,24,0,0,1-24,24H88a24,24,0,0,1-24-24V72A24,24,0,0,1,88,48H424a24,24,0,0,1,24,24V440A24,24,0,0,1,424,464ZM320,432h96V80H96V432h96V328a24,24,0,0,1,24-24h80a24,24,0,0,1,24,24ZM240,128a16,16,0,0,0-16-16H144a16,16,0,0,0,0,32h80A16,16,0,0,0,240,128Zm144,0a16,16,0,0,0-16-16H288a16,16,0,0,0,0,32h80A16,16,0,0,0,384,128ZM240,192a16,16,0,0,0-16-16H144a16,16,0,0,0,0,32h80A16,16,0,0,0,240,192Zm144,0a16,16,0,0,0-16-16H288a16,16,0,0,0,0,32h80A16,16,0,0,0,384,192ZM240,256a16,16,0,0,0-16-16H144a16,16,0,0,0,0,32h80A16,16,0,0,0,240,256Zm144,0a16,16,0,0,0-16-16H288a16,16,0,0,0,0,32h80A16,16,0,0,0,384,256Z\\\"/>\\n</svg>\""
            },
            {
                "name": "calendar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCalendar.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-calendar\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,64H384V48a16,16,0,0,0-32,0V64H160V48a16,16,0,0,0-32,0V64H64A16,16,0,0,0,48,80V448a16,16,0,0,0,16,16H448a16,16,0,0,0,16-16V80A16,16,0,0,0,448,64ZM432,96v48H80V96ZM80,432V176H432V432ZM384,288H304a16,16,0,0,0-16,16v80a16,16,0,0,0,16,16h80a16,16,0,0,0,16-16V304A16,16,0,0,0,384,288Zm-16,80H320V320h48Z\\\"/>\\n</svg>\""
            },
            {
                "name": "calendarAdd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCalendarAdd.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-calendar-add\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,64H384V48a16,16,0,0,0-32,0V64H160V48a16,16,0,0,0-32,0V64H64A16,16,0,0,0,48,80V448a16,16,0,0,0,16,16H448a16,16,0,0,0,16-16V80A16,16,0,0,0,448,64ZM432,96v48H80V96ZM80,432V176H432V432ZM336,304a16,16,0,0,1-16,16H272v48a16,16,0,0,1-32,0V320H192a16,16,0,0,1,0-32h48V240a16,16,0,0,1,32,0v48h48A16,16,0,0,1,336,304Z\\\"/>\\n</svg>\""
            },
            {
                "name": "calendarCheck",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCalendarCheck.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-calendar-check\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,64H384V48a16,16,0,0,0-32,0V64H160V48a16,16,0,0,0-32,0V64H64A16,16,0,0,0,48,80V448a16,16,0,0,0,16,16H448a16,16,0,0,0,16-16V80A16,16,0,0,0,448,64ZM432,96v48H80V96ZM80,432V176H432V432ZM353.47,228.72a16,16,0,0,1-.06,22.63L229.68,374.45a16,16,0,0,1-11.28,4.65h-.07A16,16,0,0,1,207,374.35L158.4,325.1a16,16,0,0,1,22.77-22.48l37.33,37.81L330.85,228.66A16,16,0,0,1,353.47,228.72Z\\\"/>\\n</svg>\""
            },
            {
                "name": "check",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCheck.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-check\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M207.2,352h-.06a16.05,16.05,0,0,1-11.33-4.75l-63.2-64a16,16,0,1,1,22.78-22.5l51.91,52.58L356.72,164.66a16,16,0,1,1,22.56,22.68l-160.8,160A16,16,0,0,1,207.2,352Z\\\"/>\\n</svg>\""
            },
            {
                "name": "checkCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCheckCircle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-check-circle\\\" viewBox=\\\"0 0 543.5 512\\\">\\n  <path d=\\\"M313.3,319.9l186.4-185.7l22.4,22.6L313.3,364.9L206.5,258.5l22.4 22.6L313.3,319.9z M508.8,289.1 c0,104.3-85.2,189.1-189.8,189.1c-104.7,0-189.8-84.8-189.8-189.1S214.4,100,319,100V68.1C196.8,68.1,97.4,167.2,97.4,289 S196.8,509.9,319,509.9s221.6-99.1,221.7-220.8H508.8z\\\"/>\\n</svg>\""
            },
            {
                "name": "ChromeFirefoxMocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  enter: {\n    charCode: 13,\n    code: 'Enter',\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38\n  },\n  down: {\n    charCode: 0,\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40\n  },\n  left: {\n    charCode: 0,\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37\n  },\n  right: {\n    charCode: 0,\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39\n  },\n  tab: {\n    charCode: 0,\n    code: 'Tab',\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9\n  },\n  esc: {\n    charCode: 0,\n    code: 'Escape',\n    key: 'Escape',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27\n  },\n  space: {\n    charCode: 0,\n    code: 'Space',\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32\n  },\n  shift: {\n    charCode: 0,\n    code: 'ShiftLeft',\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16\n  },\n  backspace: {\n    charCode: 0,\n    code: 'Backspace',\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8\n  },\n  delete: {\n    charCode: 0,\n    code: 'Delete',\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57\n  }\n}"
            },
            {
                "name": "comment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsComment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-comment\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M382.4,478.4c-4.8,0-11.2-3.2-14.4-6.4l-84.8-84.8-3.2-1.6H72c-12.8,0-24-11.2-24-24h0V89.6c0-12.8,11.2-24,24-24H440c12.8,0,24,11.2,24,24v272c0,12.8-11.2,24-24,24H400v72c0,8-4.8,16-11.2,19.2C385.6,476.8,384,476.8,382.4,478.4ZM80,353.6H280c9.6,0,17.6,4.8,25.6,9.6L368,425.6V376c0-12.8,11.2-24,24-24h40V96H80Zm288-176H144c-9.6,0-16-6.4-16-16s6.4-16,16-16H368c9.6,0,16,6.4,16,16S377.6,177.6,368,177.6Zm0,64H144c-9.6,0-16-6.4-16-16s6.4-16,16-16H368c9.6,0,16,6.4,16,16S377.6,241.6,368,241.6Zm-112,64H144c-9.6,0-16-6.4-16-16s6.4-16,16-16H256c9.6,0,16,6.4,16,16S265.6,305.6,256,305.6\\\"/>\\n</svg>\""
            },
            {
                "name": "dialogElementUid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "Counter used to generate unique IDs for dialog elements.",
                "description": "<p>Counter used to generate unique IDs for dialog elements.</p>\n"
            },
            {
                "name": "document",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDocument.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-document\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M430.76,137.89a16.12,16.12,0,0,0-3.45-5.21l-96-96A16.33,16.33,0,0,0,320,32H96A16,16,0,0,0,80,48V464a16,16,0,0,0,16,16H416a16,16,0,0,0,16-16V144A16,16,0,0,0,430.76,137.89ZM336,86.63,377.37,128H336ZM400,448H112V64H304v80a16,16,0,0,0,16,16h80Z\\\"/>\\n</svg>\""
            },
            {
                "name": "documentAdd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDocumentAdd.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-document-add\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M430.77,137.89a15.91,15.91,0,0,0-3.47-5.21l-96-96A16.21,16.21,0,0,0,320,32H96A16,16,0,0,0,80,48V464a16,16,0,0,0,16,16H416a16,16,0,0,0,16-16V144A16,16,0,0,0,430.77,137.89ZM336,86.62,377.38,128H336ZM400,448H112V64H304v80a16,16,0,0,0,16,16h80ZM320,256a16,16,0,0,1,0,32H272v48a16,16,0,0,1-32,0V288H192a16,16,0,0,1,0-32h48V208a16,16,0,0,1,32,0v48Z\\\"/>\\n</svg>\""
            },
            {
                "name": "documentPdf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDocumentPdf.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-document-pdf\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M416,400a16,16,0,0,0-16,16v32H112V64H304v80a16,16,0,0,0,16,16h80v48a16,16,0,0,0,32,0V144a16.33,16.33,0,0,0-4.69-11.32l-96-96A16.33,16.33,0,0,0,320,32H96A16,16,0,0,0,80,48V464a16,16,0,0,0,16,16H416a16,16,0,0,0,16-16V416A16,16,0,0,0,416,400ZM336,86.62,377.38,128H336ZM219.25,269.3a42.09,42.09,0,0,0-15.17-6.47,85.85,85.85,0,0,0-18.67-1.94H144V379.11h27.17V340.57h15a66.44,66.44,0,0,0,18.12-2.41,43.45,43.45,0,0,0,15-7.39A35.8,35.8,0,0,0,229.5,318a41.47,41.47,0,0,0,3.79-18.3c0-7.29-1.27-13.41-3.79-18.4A32.18,32.18,0,0,0,219.25,269.3Zm-34.77,49.63H171.17V282.51h12.57c7.39,0,13.07,1.31,17,3.88s5.92,7,5.92,13.33Q206.67,318.93,184.48,318.93Zm128.67-54.6a83.89,83.89,0,0,0-24.95-3.44h-34V379.11h35.48a75.35,75.35,0,0,0,24.14-3.63,47.61,47.61,0,0,0,30.6-29.54q4.25-11.25,4.23-26.47t-4.23-26.3A46.86,46.86,0,0,0,332.2,275,50.67,50.67,0,0,0,313.15,264.33Zm5.09,73.08a30.27,30.27,0,0,1-6.93,11.69,25.79,25.79,0,0,1-10.74,6.43,46,46,0,0,1-14,2h-5.18V282.47h5.18a51,51,0,0,1,14,1.8,25.77,25.77,0,0,1,10.74,6.08,28.62,28.62,0,0,1,6.93,11.42,54.44,54.44,0,0,1,2.49,17.7Q320.73,330.15,318.24,337.41Zm80.95-53.59v27.9H441v22.93H399.19v44.46H372V260.89h76v22.93Z\\\"/>\\n</svg>\""
            },
            {
                "name": "documentSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDocumentSearch.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-document-search\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M305.34,248.67a72.67,72.67,0,1,0-72.68,72.66A72,72,0,0,0,271.34,310l53.35,53.35a16,16,0,0,0,22.62-22.62L294,287.33A72,72,0,0,0,305.34,248.67Zm-113.34,0a40.67,40.67,0,1,1,40.66,40.66A40.71,40.71,0,0,1,192,248.67ZM430.76,137.88a16.18,16.18,0,0,0-3.45-5.2l-96-96a16.14,16.14,0,0,0-5.21-3.46A16,16,0,0,0,320,32H96A16,16,0,0,0,80,48V464a16,16,0,0,0,16,16H416a16,16,0,0,0,16-16V144A16,16,0,0,0,430.76,137.88ZM336,86.62,377.38,128H336ZM400,448H112V64H304v80a16,16,0,0,0,16,16h80Z\\\"/>\\n</svg>\""
            },
            {
                "name": "download",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDownload.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-download\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,416a16,16,0,0,1-16,16H80a16,16,0,0,1,0-32H432A16,16,0,0,1,448,416ZM358.7,243,272,304.92V96a16,16,0,0,0-32,0V304.92L153.29,243a16,16,0,0,0-18.59,26l112,80a16,16,0,0,0,18.59,0l112-80a16,16,0,1,0-18.59-26Z\\\"/>\\n</svg>\""
            },
            {
                "name": "EdgeMocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: undefined,\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13\n  },\n  up: {\n    charCode: 0,\n    code: undefined,\n    key: 'Up',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38\n  },\n  down: {\n    charCode: 0,\n    code: undefined,\n    key: 'Down',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40\n  },\n  left: {\n    charCode: 0,\n    code: undefined,\n    key: 'Left',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37\n  },\n  right: {\n    charCode: 0,\n    code: undefined,\n    key: 'Right',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39\n  },\n  tab: {\n    charCode: 0,\n    code: undefined,\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9\n  },\n  esc: {\n    charCode: 0,\n    code: undefined,\n    key: 'Esc',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27\n  },\n  space: {\n    charCode: 0,\n    code: undefined,\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32\n  },\n  shift: {\n    charCode: 0,\n    code: undefined,\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16\n  },\n  backspace: {\n    charCode: 0,\n    code: undefined,\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8\n  },\n  delete: {\n    charCode: 0,\n    code: undefined,\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57\n  }\n}"
            },
            {
                "name": "ellipsis",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsEllipsis.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-ellipsis\\\" viewBox=\\\"0 0 120 512\\\">\\n  <path d=\\\"M60,390.763209 C93.137085,390.763209 120,417.902989 120,451.381605 C120,484.86022 93.137085,512 60,512 C26.862915,512 0,484.86022 0,451.381605 C0,417.902989 26.862915,390.763209 60,390.763209 Z M60,195.381605 C93.137085,195.381605 120,222.521385 120,256 C120,289.478615 93.137085,316.618395 60,316.618395 C26.862915,316.618395 0,289.478615 0,256 C0,222.521385 26.862915,195.381605 60,195.381605 Z M60,0 C93.137085,0 120,27.13978 120,60.6183953 C120,94.0970106 93.137085,121.236791 60,121.236791 C26.862915,121.236791 0,94.0970106 0,60.6183953 C0,27.13978 26.862915,0 60,0 Z\\\"/>\\n</svg>\""
            },
            {
                "name": "envelope",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsEnvelope.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-envelope\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,112H72a24,24,0,0,0-24,24V376a24,24,0,0,0,24,24H440a24,24,0,0,0,24-24V136A24,24,0,0,0,440,112Zm-42.68,32L256,252.92,112.16,144ZM80,368V159.79l162.8,123.3A21.75,21.75,0,0,0,256,287.55,22.27,22.27,0,0,0,269.34,283L432,157.68V368Z\\\"/>\\n</svg>\""
            },
            {
                "name": "exclamation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsExclamation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-exclamation\\\" viewBox=\\\"0 0 225 512\\\">\\n  <path d=\\\"M150,0H75A75.15,75.15,0,0,0,0,75.29V436.71A75.15,75.15,0,0,0,75,512h75a75.15,75.15,0,0,0,75-75.29V75.29A75.15,75.15,0,0,0,150,0ZM110,90.44q1.24-.08,2.48-.08a37.42,37.42,0,0,1,37.35,37.5q0,1.25-.08,2.49l-13.32,201H88.55l-13.32-201A37.45,37.45,0,0,1,110,90.44Zm2.48,346.27A37.65,37.65,0,1,1,150,399.06,37.57,37.57,0,0,1,112.5,436.71Z\\\"/>\\n</svg>\""
            },
            {
                "name": "exclamationCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsExclamationCircle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-exclamation-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,0C114.61,0,0,114.61,0,256S114.61,512,256,512,512,397.39,512,256,397.39,0,256,0Zm0,450.19a36.52,36.52,0,1,1,36.52-36.52A36.52,36.52,0,0,1,256,450.19Zm47.26-315.89L269.45,337.19H244L210.21,134.31V66.68h93.05Z\\\"/>\\n</svg>\""
            },
            {
                "name": "exclamationTriangle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsExclamationTriangle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-exclamation-triangle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M507.2,427.3L285.8,50.4c-3.1-4.6-7.7-9.2-12.3-12.3c-16.9-10-37.5-3.8-47.5,12.3L4.6,427.3 C1.6,432.7,0,438.8,0,445c0,19.2,15.3,34.5,34.5,34.5h442.8c6.1,0,12.3-1.5,17.6-4.6C511,464.9,517.1,443.4,507.2,427.3z M483.4,454.9c-2.3,0.8-3.8,1.5-6.1,1.5H34.5c-6.1,0-11.5-5.4-11.5-11.5c0-2.3,0.8-4.6,1.5-6.1L245.9,62.7 c3.8-5.4,10.7-6.9,16.1 3.8c1.5,0.8,3.1,2.3,3.8,3.8l221.4,376.1C491.1,445,488.8,451.8,483.4,454.9z M259.7,376 c8.4,0,15.3,6.9,15.3,15.3s-6.9,15.3-15.3,15.3s-15.3-6.9-15.3 15.3S251.3,376,259.7,376z M244.4,169.2H275v183.9h-30.6V169.2z\\\"/>\\n</svg>\""
            },
            {
                "name": "exit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsExit.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-exit\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M278.62,256l68.69-68.69a16,16,0,0,0-22.62-22.62L256,233.38l-68.69-68.69a16,16,0,0,0-22.62,22.62L233.38,256l-68.69,68.69a16,16,0,1,0,22.62,22.62L256,278.62l68.69,68.69a16,16,0,0,0,22.62-22.62Z\\\"/>\\n</svg>\""
            },
            {
                "name": "federalBuilding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFederalBuilding.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-federal-building\\\" viewBox=\\\"0 0 543.5 512\\\">\\n  <path d=\\\"M695.6,250.7c0-6.1,0.8-5.4-5.5-5.4c-45.2,0-90.4,0-135.6,0.1c-3.2,0-4.5-0.9-5.4-4 c-4.6-16.5-13.5-30.3-26.5-41.5c-13.5-11.7-29-18.7-46.8-20.6c-2.4-0.3-3.7-1-3.4-3.6c0.1-1.2,0-2.4,0-3.5c0-5.3,0-5.3,5.4-5.3 c32.7,0,65.4-0.1,98.2,0.1c3.4,0,4.5-0.8,4.5-4.4c-0.1-28.3-0.2-56.5,0-84.8c0-4-1.1-5-5.1-5c-47.2,0.1-94.4,0.1-141.5,0.1 c-1.6,0.7-1.3,2.2-1.2,3.4c0.5,26.1-1.4,52.2-0.9,78.3c0.1,5,0,10,0,15c0,9.3,0.2,7.8-7.8,9.3c-19.9,3.7-36.6,13.2-50.2,28.2 c-8.5,9.4-14.1,20.2-17.9,32.1c-1.5,4.8-2,5-7,5.1c-1.4,0-2.9,0-4.3,0c-42.8,0-85.7,0-128.5,0c-6.6,0-7.4,0.7-7.4,6.7 c0,67.1,0,134.3,0,201.4c0,1.8-0.1,3.7,1.2,5.3c0,16.4,0.2,32.9,0,49.3c0,3.7,1.1,4.5,4.6,4.5c158.9-0.1,317.8-0.1,476.6,0 c4,0,4.7-1.2,4.7-4.8C695.6,421.3,695.6,336,695.6,250.7z M284.6,468.7c0,2.7-0.9,3.7-3.6,3.7c-9.5-0.1-18.9-0.1-28.4,0 c-3,0-3.4-1.3-3.4-3.8c0.1-19.6,0-39.1,0-58.7c0-19,0.1-38.1-0.1-57.1c0-3.3,0.9-4.2,4.2-4.2c9.2,0.2,18.4,0.1,27.6,0 c2.6,0,3.7,0.5,3.7,3.4C284.5,390.9,284.5,429.8,284.6,468.7z M284.7,305.9c0.1,2.7-1.1,3.4-3.5,3.3c-4.7-0.1-9.5,0-14.2,0 c-4.9,0-9.7-0.1-14.6,0c-2.1,0-3.1-0.4-3.1-2.8c0-6.3,0-12.6-0.1-18.9c0-2.3,0.9-2.9,3.1-2.9c9.7,0.1,19.4,0.1,29.2,0 c2.4,0,3.2,0.8,3.2,3.2C284.6,293.8,284.6,299.9,284.7,305.9z M358.9,469.2c0,2.4-0.9,3.2-3.2,3.2c-9.6-0.1-19.2-0.1-28.8,0 c-3.1,0-2.9-1.7-2.9-3.8c0-19.3,0-38.6,0-57.9s0.1-38.6-0.1-57.9c0-3.3,1-4.2,4.2-4.1c9.2,0.2,18.4,0.1,27.6,0 c2.3,0,3.2,0.6,3.2,3.1C358.8,390.9,358.8,430,358.9,469.2z M358.9,306.3c0,2.2-0.7,3-2.9,3c-4.9-0.1-9.7,0-14.6,0 c-4.7,0-9.5-0.1-14.2,0c-2.3,0.1-3.3-0.6-3.2-3.1c0.1-6.2,0-12.4-0.1-18.5c0-2.2,0.6-3,2.9-3c9.7,0.1,19.4,0.1,29.2,0.1 c2.3,0,2.9,0.9,2.9,3C358.8,294,358.8,300.2,358.9,306.3z M473.2,113c2.2-2.5,7.2-0.8,10.9-0.8c7.6-0.1,15.2,0,22.8,0 c10.2,0,20.5,0.1,30.7-0.1c2.6,0,3.5,0.7,3.4,3.3c-0.2,3-0.1,6,0,9c0.1,2.3-0.7,3.3-3.2,3.3c-20.7-0.1-41.4-0.1-62.2,0 c-2.4,0-3.3-1-3.1-3.3C472.8,120.6,470.9,115.6,473.2,113z M504.2,472.4c-34.2-0.1-68.3-0.1-102.5,0c-3.1,0-3.6-1.4-3.6-4.1 c0.1-19.3,0-38.6,0-58c0-19.2,0.1-38.4-0.1-57.6c0-3.2,0.7-4.3,4.1-4.2c8.8,0.2,17.6,0.2,26.4,0c3.4-0.1,4.5,0.8,4.4,4.3 c-0.2,18,0,36-0.2,54c0,3.5,0.9,4.5,4.4,4.4c10.4-0.2,20.8-0.2,31.1,0c3.1,0.1,4.1-0.8,4-4c-0.1-18.1,0-36.3-0.2-54.4 c0-3.5,0.9-4.5,4.4-4.4c9.2,0.2,18.4,0.2,27.6,0c2.6,0,3.4,0.7,3.4,3.3c0.3,39.2,0.3,78.3,0.3,117.3 C507.7,471.6,506.8,472.4,504.2,472.4z M398.1,287.8c0-2.1,0.5-3.1,2.8-3.1c9.7,0.1,19.4,0.1,29.1,0c2.2,0,3,0.8,2.9,3 c-0.1,6.2-0.1,12.3,0,18.5c0.1,2.5-0.9,3.1-3.2,3.1c-4.7-0.1-9.4,0-14.2,0c-4.9,0-9.7-0.1-14.6,0c-2.2,0.1-3-0.7-2.9-3 C398.2,300.1,398.2,294,398.1,287.8z M507.7,306.1c0,2.4-0.9,3.2-3.3,3.1c-9.7-0.1-19.4-0.1-29.1,0c-2.2,0-3-0.7-3-2.9 c0.1-6.2,0.1-12.3,0-18.5c-0.1-2.5,0.9-3.1,3.2-3.1c4.9,0.1,9.7,0,14.6,0c4.9,0,9.7,0.1,14.6,0c2.2-0.1,3.1,0.6,3,2.9 C507.6,293.8,507.6,300,507.7,306.1z M505.2,245.4c-17.5-0.1-34.9-0.1-52.4-0.1c-17.3,0-34.7,0-52,0c-4,0-4.2-0.4-2.2-3.9 c8.3-13.9,20.7-22.1,36.7-23.3c12.8-0.9,25.7-1.4,38.5,0.5c14.8,2.2,25.7,10.6,33.4,23.3C508.9,244.6,508.4,245.4,505.2,245.4z M582,468.7c0,3.1-1.2,3.7-4,3.7c-9.1-0.1-18.1-0.2-27.2,0c-3.2,0.1-4.3-0.9-4.3-4.2c0.1-19.3,0.1-38.6,0.1-57.9 c0-19.2,0.1-38.4-0.1-57.5c0-3.3,0.9-4.3,4.2-4.2c9.2,0.2,18.4,0.2,27.6,0c2.6,0,3.7,0.5,3.7,3.4C581.9,390.9,581.9,429.8,582,468.7 z M582.1,306.2c0,2.2-0.8,3-3,3c-9.8-0.1-19.7-0.1-29.5,0c-2,0-2.8-0.6-2.8-2.7c0.1-6.3,0.1-12.6,0-18.9c-0.3-2.2,0.5-2.9,2.8-2.9 c4.9,0.1,9.7,0,14.6,0v-0.1c4.9,0,9.7,0.1,14.6,0c2.3-0.1,3.3,0.6,3.3,3.1C582,293.9,582,300,582.1,306.2z M652.3,472.4 c-9.1-0.2-18.1-0.2-27.2,0c-2.9,0-3.9-0.8-3.9-3.8c0.1-38.8,0.1-77.5,0-116.3c0-3,0.9-3.8,3.8-3.7c9.2,0.2,18.4,0.2,27.6,0 c2.8,0,3.5,0.8,3.5,3.5c-0.1,19.4-0.1,38.9-0.1,58.3c0,19.3-0.1,38.6,0.1,57.9C656.2,471.4,655.6,472.5,652.3,472.4z M656.2,306.1 c0.1,2.5-0.9,3.1-3.2,3.1c-4.9-0.1-9.7,0-14.6,0c-4.6,0-9.2-0.1-13.8,0c-2.2,0.1-3.4-0.4-3.3-3c0.2-6.1,0.1-12.3,0-18.5 c-0.1-2.5,1-3.1,3.3-3.1c9.5,0.1,18.9,0.1,28.4,0c2.3,0,3.3,0.5,3.2,3C656,293.8,656,300,656.2,306.1z\\\"/>\\n</svg>\""
            },
            {
                "name": "file",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFile.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-file\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M22.92,489.08H356.1V367.57a11.47,11.47,0,0,1,11.46-11.46H489.08V22.93H22.92ZM169,187.13H343a11.46,11.46,0,0,1,0,22.93H169a11.46,11.46,0,0,1,0-22.93Zm0,53.55H343a11.46,11.46,0,0,1,0,22.92H169a11.46,11.46,0,0,1,0-22.92Zm0,53.55h116.7a11.46,11.46,0,0,1,0,22.93H169a11.46,11.46,0,0,1,0-22.93Z\\\"/>\\n</svg>\""
            },
            {
                "name": "fileChartLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFileChartLine.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-file-chart-line\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M358.68,29.26H248.88V7.31A7.32,7.32,0,0,0,241.56,0H124.44a7.32,7.32,0,0,0-7.32,7.31V29.26H7.32A7.32,7.32,0,0,0,0,36.57V504.69A7.32,7.32,0,0,0,7.32,512H358.68a7.32,7.32,0,0,0,7.32-7.31V36.57A7.32,7.32,0,0,0,358.68,29.26ZM131.76,14.63H234.24V29.26H131.76Zm219.6,482.74H14.64V43.89H351.36ZM241.56,95.09a7.31,7.31,0,1,1,0,14.63H65.88a7.31,7.31,0,1,1,0-14.63Zm-183,65.83a7.32,7.32,0,0,1,7.32-7.31H183a7.31,7.31,0,1,1,0,14.63H65.88A7.32,7.32,0,0,1,58.56,160.91Zm148.3,231.15L280,309.66a7.32,7.32,0,0,1,11,9.71l-77.9,87.77a7.32,7.32,0,0,1-10.22.71l-66.1-56.29-66.1,56.29a7.32,7.32,0,1,1-9.5-11.13L132,336.38a7.32,7.32,0,0,1,9.5,0Z\\\"/>\\n</svg>\""
            },
            {
                "name": "filter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFilter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-filter\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M216,456a24,24,0,0,1-24-24V251.48L56.31,98.15A24,24,0,0,1,72,56H440a24,24,0,0,1,15.71,42.15L320,251.49V378.65a23.94,23.94,0,0,1-10.69,20l-80,53.34A24,24,0,0,1,216,456Zm-.77-226.53A23.89,23.89,0,0,1,224,248V417l64-42.67V248a23.87,23.87,0,0,1,8.77-18.55L421.94,88H90.06ZM440,88h0Z\\\"/>\\n</svg>\""
            },
            {
                "name": "flag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFlag.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-flag\\\" viewBox=\\\"0 0 670.9 512\\\">\\n  <path d=\\\"M36.7-0.1l272.9,512h-38.3L2.3-0.1H36.7z M360.4-0.1l46.7,102h121.5l139.4,256.4H378.3 l-28-57.4l71.3-42.8H212.7L74-0.1H360.4z\\\"/>\\n</svg>\""
            },
            {
                "name": "folder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFolder.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-folder\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,97.48H209.5l-1-2.75a23.89,23.89,0,0,0-21.46-13.25H72a24,24,0,0,0-24,24V409.93a23.81,23.81,0,0,0,24,23.55H440a23.8,23.8,0,0,0,24-23.55V121A23.81,23.81,0,0,0,440,97.48Zm-8,32v40.45H235.31L220.9,129.48Zm0,272H80v-288H181.35l31.35,88.45H432Z\\\"/>\\n</svg>\""
            },
            {
                "name": "folderAlt1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFolderAlt1.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-folder-alt-1\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,129.49H208v-24a24,24,0,0,0-24-24H72a24,24,0,0,0-24,24v320a24,24,0,0,0,24,24H440a24,24,0,0,0,24-24v-272A24,24,0,0,0,440,129.49Zm-264-16v16H80v-16Zm256,304H80v-256H432Z\\\"/>\\n</svg>\""
            },
            {
                "name": "folderAlt2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFolderAlt2.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-folder-alt-2\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,114.19H220.21L208.53,94.76a23.86,23.86,0,0,0-21.48-13.28H72a24,24,0,0,0-24,24V409.93a23.8,23.8,0,0,0,24,23.55H440a23.81,23.81,0,0,0,24-23.55V137.75A23.81,23.81,0,0,0,440,114.19Zm-8,32v39.35L249.69,163.26l-10.25-17.07Zm0,255.29H80v-288H182.5l47.8,79.65L432,217.78v183.7Z\\\"/>\\n</svg>\""
            },
            {
                "name": "GLOBAL_STRINGS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/video-player/video-player.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "GropupSampleAutocompleteData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-sample.data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    code: 'A',\n    elements: [\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001001',\n        value: 'Formula Grants'\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001002',\n        value: 'Formula Grants (Apportionments)'\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001003',\n        value: 'Formula Grants (Cooperative Agreements)'\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001004',\n        value: 'Formula Grants (Health Incentive Grants)'\n      }\n    ],\n    description:\n      'Formula Grants - Allocations of money to States or their subdivisions in accordance with a distribution formula prescribed by law or administrative regulation, for activities of a continuing nature not confined to a specific project.',\n    element_id: '0001',\n    value: 'FORMULA GRANTS'\n  },\n  {\n    code: 'B',\n    elements: [\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003001',\n        value: 'Cooperative Agreements'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003002',\n        value: 'Cooperative Agreements (Discretionary Grants)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003003',\n        value: 'Project Grants'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003004',\n        value:\n          'Project Grants (Capacity Building and Complaint Processing, Training)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003005',\n        value: 'Project Grants (Contracts)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003006',\n        value: 'Project Grants (Cooperative Agreements or Contracts)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003007',\n        value: 'Project Grants (Cooperative Agreements)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003008',\n        value: 'Project Grants (Discretionary)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003009',\n        value: 'Project Grants (Fellowships)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003010',\n        value:\n          'Project Grants (for administration projects authorized under Section'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003011',\n        value:\n          'Project Grants (for collaborative design of curriculum, production of'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003012',\n        value: 'Project Grants (for specified projects)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003013',\n        value: 'Project Grants (including individual awards)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003014',\n        value: 'Project Grants (including travel grants)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003015',\n        value:\n          'Project Grants (Rehabilitation of existing indoor and outdoor recreat'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003016',\n        value: 'Project Grants (Special)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003017',\n        value: 'Project Grants (to capitalize loan funds)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003018',\n        value: 'Project Grants (with Formula Distribution)'\n      }\n    ],\n    description:\n      'Project Grants - The funding, for fixed or known periods, of specific projects or the delivery of specific services or products without liability for damages for failure to perform. Project grants include fellowships, scholarships, research grants, training grants, traineeships, experimental and demonstration grants, evaluation grants, planning grants, technical assistance grants, survey grants, construction grants, and unsolicited contractual agreements.',\n    element_id: '0003',\n    value: 'PROJECT GRANTS'\n  },\n  {\n    code: 'C',\n    elements: [\n      {\n        code: 'C',\n        elements: null,\n        description: null,\n        element_id: '0005001',\n        value: 'Direct Payments for Specified Use'\n      },\n      {\n        code: 'C',\n        elements: null,\n        description: null,\n        element_id: '0005002',\n        value: 'Direct Payments for Specified Use (Cooperative Agreements)'\n      }\n    ],\n    description:\n      'Direct Payments for a Specified Use - Financial assistance provided directly to individuals, private firms, and other private institutions to encourage or subsidize a particular activity by conditioning the receipt of the on a particular performance by the recipient. This does not include solicited contracts for the procurement of goods and services for the Federal government.',\n    element_id: '0005',\n    value: 'DIRECT PAYMENTS FOR A SPECIFIED USE'\n  },\n  {\n    code: 'D',\n    elements: [\n      {\n        code: 'D',\n        elements: null,\n        description: null,\n        element_id: '0007001',\n        value: 'Direct Payments with Unrestricted Use'\n      }\n    ],\n    description:\n      'Direct Payments with Unrestricted Use - Financial assistance provided directly to beneficiaries who satisfy eligibility requirements with no restrictions imposed on the recipient as to how the money is spent. Included are payments under retirement, pension, and compensation programs.',\n    element_id: '0007',\n    value: 'DIRECT PAYMENTS WITH UNRESTRICTED USE'\n  },\n  {\n    code: 'E',\n    elements: [\n      {\n        code: 'E',\n        elements: null,\n        description: null,\n        element_id: '0009001',\n        value: 'Direct Loans'\n      }\n    ],\n    description:\n      'Direct Loans - Financial assistance provided through the lending of Federal monies for a specific period of time, with a reasonable expectation of repayment. Such loans may or may not require the payment of interest.',\n    element_id: '0009',\n    value: 'DIRECT LOANS'\n  },\n  {\n    code: 'F',\n    elements: [\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011001',\n        value: 'Guaranteed/Insured Loans'\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011002',\n        value:\n          'Guaranteed/Insured Loans (including Guaranty Participation Loans)'\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011003',\n        value:\n          'Guaranteed/Insured Loans (including Immediate Participation Loans)'\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011004',\n        value: 'Loan Guarantees/Grants'\n      }\n    ],\n    description:\n      'Guaranteed/Insured Loans - Programs in which the Federal Government makes an arrangement to indemnify a lender against all or part of all of any defaults by those responsible for the repayment of loans.',\n    element_id: '0011',\n    value: 'GUARANTEED/INSURED LOANS'\n  },\n  {\n    code: 'G',\n    elements: [\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013001',\n        value: 'Insurance'\n      },\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013002',\n        value: 'Insurance (Guaranteed Surety Bonds)'\n      },\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013003',\n        value: 'Insurance (Reimbursement)'\n      }\n    ],\n    description:\n      'Insurance - Financial assistance provided to assure reimbursement for losses sustained under specified conditions. Coverage may be provided directly by the Federal Government or through private carriers and may or may not involve the payment of premiums.',\n    element_id: '0013',\n    value: 'INSURANCE'\n  },\n  {\n    code: 'H',\n    elements: [\n      {\n        code: 'H',\n        elements: null,\n        description: null,\n        element_id: '0015001',\n        value: 'Sale, Exchange, or Donation of Property and Goods'\n      }\n    ],\n    description:\n      'Sale, Exchange, or Donation of Property or Goods - Programs that provide for the sale, exchange, or donation of Federal real property, personal property, commodities, and other goods including land, buildings, equipment, food, and drugs. This does not include the loan of, use of, or access to Federal facilities or property.',\n    element_id: '0015',\n    value: 'SALE, EXCHANGE, OR DONATION OF PROPERTY OR GOODS'\n  },\n  {\n    code: 'I',\n    elements: [\n      {\n        code: 'I',\n        elements: null,\n        description: null,\n        element_id: '0017001',\n        value: 'Use of Property, Facilities, and Equipment'\n      }\n    ],\n    description:\n      'Use of Property, Facilities, or Equipment - Programs that provide for the loan of, use of, or access to Federal facilities or property wherein the federally owned facilities or property do not remain in the possession of the recipient of the assistance.',\n    element_id: '0017',\n    value: 'USE OF PROPERTY, FACILITIES, OR EQUIPMENT'\n  },\n  {\n    code: 'J',\n    elements: [\n      {\n        code: 'J',\n        elements: null,\n        description: null,\n        element_id: '0019001',\n        value: 'Provision of Specialized Services'\n      }\n    ],\n    description:\n      'Provision of Specialized Services - Programs that provide Federal personnel to directly perform certain tasks for the benefit of communities or individuals. These services may be performed in conjunction with non-Federal personnel, but they involve more than consultation, advice, or counseling.',\n    element_id: '0019',\n    value: 'PROVISION OF SPECIALIZED SERVICES'\n  },\n  {\n    code: 'K',\n    elements: [\n      {\n        code: 'K',\n        elements: null,\n        description: null,\n        element_id: '0021001',\n        value: 'Advisory Services and Counseling'\n      },\n      {\n        code: 'K',\n        elements: null,\n        description: null,\n        element_id: '0021002',\n        value: 'Advisory Services on Compliance'\n      }\n    ],\n    description:\n      'Advisory Services and Counseling - Programs that provide Federal specialists to consult, advise, or counsel communities or individuals including conferences, workshops, or personal contacts. This may involve the use of published information, but only in a secondary capacity.',\n    element_id: '0021',\n    value: 'ADVISORY SERVICES AND COUNSELING'\n  },\n  {\n    code: 'L',\n    elements: [\n      {\n        code: 'L',\n        elements: null,\n        description: null,\n        element_id: '0023001',\n        value: 'Dissemination of Technical Information'\n      },\n      {\n        code: 'L',\n        elements: null,\n        description: null,\n        element_id: '0023002',\n        value: 'Information'\n      }\n    ],\n    description:\n      'Dissemination of Technical Information - Programs that provide for the publication and distribution of information or data of a specialized technical nature, frequently through clearinghouses or libraries. This does not include conventional public information services designed for general public consumption.',\n    element_id: '0023',\n    value: 'DISSEMINATION OF TECHNICAL INFORMATION'\n  },\n  {\n    code: 'M',\n    elements: [\n      {\n        code: 'M',\n        elements: null,\n        description: null,\n        element_id: '0025001',\n        value: 'Training'\n      }\n    ],\n    description:\n      'Training - Programs that provide instructional activities conducted directly by a Federal agency for individuals not employed by the Federal Government.',\n    element_id: '0025',\n    value: 'TRAINING'\n  },\n  {\n    code: 'N',\n    elements: [\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027020',\n        value: 'Resolution of Disputes'\n      },\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027001',\n        value: 'Investigation of Complaints'\n      },\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027002',\n        value: 'Investigation of Complaints (Compliance Reviews)'\n      }\n    ],\n    description:\n      'Investigation of Complaints - Federal administrative agency activities that are initiated in response to requests, either formal or informal, to examine or investigate claims of violations of Federal statutes, policy, or procedure. Such claims must come from outside the Federal Government.',\n    element_id: '0027',\n    value: 'INVESTIGATION OF COMPLAINTS'\n  },\n  {\n    code: 'O',\n    elements: [\n      {\n        code: 'O',\n        elements: null,\n        description: null,\n        element_id: '0029001',\n        value: 'Federal Employment'\n      }\n    ],\n    description:\n      'Federal Employment - Programs that reflect the government-wide resposibilities of the Office of Personnel Management in the recruitment and hiring of Federal civilian agency personnel.',\n    element_id: '0029',\n    value: 'FEDERAL EMPLOYMENT'\n  },\n  {\n    code: 'Z',\n    elements: [\n      {\n        code: 'Z',\n        elements: null,\n        description: null,\n        element_id: '0090001',\n        value: 'Salaries and Expenses'\n      }\n    ],\n    description: null,\n    element_id: '0090',\n    value: 'SALARIES AND EXPENSES'\n  }\n]"
            },
            {
                "name": "home",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsHome.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-home\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,208a15.89,15.89,0,0,1-8-2.18L256,98.52,72.06,205.82a16,16,0,1,1-16.12-27.64l192-112a16,16,0,0,1,16.12,0l192,112A16,16,0,0,1,448,208Zm0-80V80a16,16,0,0,0-16-16H352a16,16,0,0,0,0,32h64v32a16,16,0,0,0,32,0Zm0,296V256a16,16,0,0,0-32,0V416H320V328a24,24,0,0,0-24-24H216a24,24,0,0,0-24,24v88H96V256a16,16,0,0,0-32,0V424a24,24,0,0,0,24,24H200a24,24,0,0,0,24-24V336h64v88a24,24,0,0,0,24,24H424A24,24,0,0,0,448,424Z\\\"/>\\n</svg>\""
            },
            {
                "name": "IEMocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: undefined,\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13\n  },\n  up: {\n    charCode: 0,\n    code: undefined,\n    key: 'Up',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38\n  },\n  down: {\n    charCode: 0,\n    code: undefined,\n    key: 'Down',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40\n  },\n  left: {\n    charCode: 0,\n    code: undefined,\n    key: 'Left',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37\n  },\n  right: {\n    charCode: 0,\n    code: undefined,\n    key: 'Right',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39\n  },\n  tab: {\n    charCode: 0,\n    code: undefined,\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9\n  },\n  esc: {\n    charCode: 0,\n    code: undefined,\n    key: 'Esc',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27\n  },\n  space: {\n    charCode: 0,\n    code: undefined,\n    key: 'Spacebar',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32\n  },\n  shift: {\n    charCode: 0,\n    code: undefined,\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16\n  },\n  backspace: {\n    charCode: 0,\n    code: undefined,\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8\n  },\n  delete: {\n    charCode: 0,\n    code: undefined,\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57\n  }\n}"
            },
            {
                "name": "informationCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsInformationCircle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-information-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,512C114.8,512,0,397.2,0,256S114.8,0,256,0s256,114.8,256,256S397.2,512,256,512z M256,19.8c-130.2,0-236.2,106-236.2,236.2s106,236.2,236.2,236.2s236.2-106,236.2-236.2S386.2,19.8,256,19.8z M256,185.2c-6.6,0-12-1.9-16.2-5.7s-6.4-8.8-6.4-14.9c0-6.1,2.1-11.2,6.4-15.1c4.2-3.9,9.6-5.9,16.2-5.9c6.6,0,12,2,16.2,5.9s6.4,8.9,6.4,15.1c0,6.1-2.1,11.1-6.4,14.9C268,183.3,262.6,185.2,256,185.2z M237.6,368.4V212.5h36.5v155.9H237.6z\\\"/>\\n</svg>\""
            },
            {
                "name": "invoice",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsInvoice.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-invoice\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M521.22,423.72H464.14V61.89A61.7,61.7,0,0,0,402.62,0h-337q-2.09,0-4.38,0h-.06L60.16,0A60.33,60.33,0,0,0,0,60.5V97.1a8.8,8.8,0,0,0,8.78,8.83h94.43c0,16.22,0,37.64,0,83.91V451.59C103.2,485.3,128.14,512,161,512H451c43.63,0,79-35.57,79-79.45A8.8,8.8,0,0,0,521.22,423.72ZM102.77,88.28H17.56V60.5A42.56,42.56,0,0,1,95.24,36.18c3.74,6,6.24,13.44,7.49,22.4,0,.64,0,1.28,0,1.92Zm18,363.31V62.22c-.14-1.56-.31-3.08-.5-4.58a60.39,60.39,0,0,0-10.54-31.43,55.7,55.7,0,0,0-6.66-8.53H402.62a44.09,44.09,0,0,1,44,44.21V423.72H219.31a8.8,8.8,0,0,0-8.78,8.83v17.8a43.87,43.87,0,0,1-43.75,44H161C138.09,494.34,120.76,475.79,120.76,451.59ZM451,494.34H209.73a61.64,61.64,0,0,0,18.36-44v-9H511.82A61.57,61.57,0,0,1,451,494.34Zm-224.85-291A41,41,0,0,1,267,162.3h7.77v-7.8a8.44,8.44,0,1,1,16.88,0v7.8h32.07a8.49,8.49,0,0,1,0,17H267a24.11,24.11,0,0,0,0,48.21h32.41a41.08,41.08,0,0,1,0,82.16h-7.77v7.79a8.44,8.44,0,1,1-16.88,0v-7.79H242.69a8.49,8.49,0,0,1,0-17h56.72a24.11,24.11,0,0,0,0-48.21H267A41,41,0,0,1,226.15,203.38Z\\\"/>\\n</svg>\""
            },
            {
                "name": "leaf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsLeaf.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-leaf\\\" viewBox=\\\"0 0 648.1 512\\\">\\n  <path d=\\\"M324.1,101.6v232.8H324H104.6C48.6,334.4,3.3,289,3.3,233V2.3h221.5C279.6,2.3,324.1,46.7,324.1,101.6z\\\"/>\\n</svg>\""
            },
            {
                "name": "LEFT_ARROW",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "37",
                "rawdescription": "CONSTANTS\nAdding in the constant values for keycodes\nto handle onKeyDown events",
                "description": "<p>CONSTANTS\nAdding in the constant values for keycodes\nto handle onKeyDown events</p>\n"
            },
            {
                "name": "link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsLink.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-link\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M182.47,441.71a80,80,0,0,1-65.42-125.87l55.06-78.63a16,16,0,0,1,26.22,18.36L143.27,334.2a48,48,0,1,0,78.63,55.07L277,310.62A16,16,0,0,1,303.18,329l-55.06,78.64A80,80,0,0,1,182.47,441.71ZM339.89,276.56,395,197.92a80,80,0,0,0-131.07-91.78l-55.06,78.64A16,16,0,1,0,235,203.14L290.1,124.5a48,48,0,1,1,78.63,55.06L313.67,258.2a16,16,0,0,0,26.22,18.36Zm-116.66,55L315,200.53a16,16,0,0,0-26.22-18.36L197,313.23a16,16,0,0,0,26.22,18.36Z\\\"/>\\n</svg>\""
            },
            {
                "name": "logIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsLogIn.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-log-in\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M432,160V80H80V432H432V352a16,16,0,0,1,32,0v88a24,24,0,0,1-24,24H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H440a24,24,0,0,1,24,24v88a16,16,0,0,1-32,0Zm-48,96a16,16,0,0,0-16-16H175.09L237,153.3A16,16,0,0,0,211,134.71l-80,112a16,16,0,0,0,0,18.59l80,112A16,16,0,1,0,237,358.71L175.09,272H368A16,16,0,0,0,384,256Z\\\"/>\\n</svg>\""
            },
            {
                "name": "logOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsLogOut.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-log-out\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,464H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H440a24,24,0,0,1,24,24v88a16,16,0,0,1-32,0V80H80V432H432V352a16,16,0,0,1,32,0v88A24,24,0,0,1,440,464ZM381,246.7l-80-112a16,16,0,0,0-26,18.6L336.92,240H144a16,16,0,0,0,0,32H336.92L275,358.7a16,16,0,0,0,26,18.6l80-112A16,16,0,0,0,381,246.7Z\\\"/>\\n</svg>\""
            },
            {
                "name": "messages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsMessages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-messages\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,176H336V72a24,24,0,0,0-24-24H72A24,24,0,0,0,48,72V236.21a24,24,0,0,0,24,24H96V312a19,19,0,0,0,32.8,14.12L192,266.24v98a24,24,0,0,0,24,24h95.76a9.72,9.72,0,0,1,3,1.13l68.39,64.78A19,19,0,0,0,416,440V388.21h24a24,24,0,0,0,24-24V200A24,24,0,0,0,440,176ZM128,282.8V252.21a24,24,0,0,0-24-24H80V80H304V228.21H200a39.1,39.1,0,0,0-24.8,9.88Zm304,73.41H408a24,24,0,0,0-24,24V410.8l-47.19-44.7A39.1,39.1,0,0,0,312,356.21H224v-96h88a24,24,0,0,0,24-24V208h96Z\\\"/>\\n</svg>\""
            },
            {
                "name": "mobile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsMobile.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-mobile\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M376,48H136a24,24,0,0,0-24,24V440a24,24,0,0,0,24,24H376a24,24,0,0,0,24-24V72A24,24,0,0,0,376,48Zm-8,384H144V368H368Zm0-96H144V80H368ZM240,400a16,16,0,1,1,16,16A16,16,0,0,1,240,400Z\\\"/>\\n</svg>\""
            },
            {
                "name": "mocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ie: IEMocks,\n  edge: EdgeMocks,\n  default: ChromeFirefoxMocks,\n  safari: SafariMocks\n}"
            },
            {
                "name": "newNote",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsNewNote.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-new-note\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,48H72A24,24,0,0,0,48,72V440a24,24,0,0,0,24,24H344a38.18,38.18,0,0,0,25-10.34L453.66,369A38.18,38.18,0,0,0,464,344V72A24,24,0,0,0,440,48ZM80,80H432l0,256H360a24,24,0,0,0-24,24v72H80ZM368,409.37V368h41.37ZM320,272H272v48a16,16,0,0,1-32,0V272H192a16,16,0,0,1,0-32h48V192a16,16,0,0,1,32,0v48h48a16,16,0,0,1,0,32Z\\\"/>\\n</svg>\""
            },
            {
                "name": "newVersion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsNewVersion.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-new-version\\\" viewBox=\\\"0 0 512 643.3\\\">\\n  <path d=\\\"M273.6,269.1L273.6,269.1h-63v-68.8c0-5-4.1-9.1-9.1-9.1s-9.1,4.1-9.1,9.1v77.9c0,5,4.1,9.1,9.1,9.1h72.1c5,0,9.1-4.1,9.1-9.1S278.6,269.1,273.6,269.1z M205.2,138.2c-73.1,0-132.6,59.5-132.6,132.6s59.5,132.6,132.6,132.6S337.8,344,337.8,270.8S278.3,138.2,205.2,138.2z M319.6,270.8c-0.1,63.2-51.3,114.4-114.5,114.5l0,0C142,385.2,90.7,334,90.7,270.8S142,156.3,205.2,156.3C268.4,156.4,319.6,207.6,319.6,270.8L319.6,270.8z M462.6,103c-5.4-25.6-26.5-45.3-52.7-48.9C405.8,23.6,379.7,0,348,0H62.4C28,0,0,28,0,62.4v416.8c0,31.7,23.6,57.8,54.1,61.9c3.5,26.2,23.3,47.3,48.8,52.7c6,28.2,31,49.4,61.1,49.4h285.5c34.5,0,62.4-28,62.4-62.4V164C512,134,490.8,109,462.6,103z M16.4,479.3V62.4c0-25.4,20.6-46,46-46H348c25.4,0,46,20.6,46,46v416.8c0,25.4-20.6,46-46,46H62.4C37,525.2,16.5,504.7,16.4,479.3z M70.9,541.7H348c34.5,0,62.4-28,62.4-62.4V70.9c21.1,4.2,37,22.8,37.1,45.1v416.8c0,25.4-20.6,46-46,46H116C93.6,578.8,75,562.8,70.9,541.7z M495.6,580.9c0,25.4-20.6,46-46,46H164c-20.4,0-37.6-13.3-43.7-31.7h281.2c34.5,0,62.4-28,62.4-62.4V120.4c18.4,6,31.6,23.3,31.6,43.7v416.8H495.6z\\\"/>\\n</svg>\""
            },
            {
                "name": "notCompleted",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsNotCompleted.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><svg width=\\\"50px\\\" height=\\\"50px\\\" viewBox=\\\"0 0 50 50\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><title>not completed</title><g id=\\\"Status-Examples\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke-dasharray=\\\"4\\\"><g id=\\\"Status-Tracker---Submitted-Example\\\" transform=\\\"translate(-801.000000, -1163.000000)\\\" stroke=\\\"#5D5D52\\\" stroke-width=\\\"2\\\"><g id=\\\"Oval-Copy-2\\\" transform=\\\"translate(802.000000, 1164.000000)\\\"><path d=\\\"M24,48 C37.254834,48 48,37.254834 48,24 C48,10.745166 37.254834,0 24,0 C10.745166,0 0,10.745166 0,24 C0,37.254834 10.745166,48 24,48 Z\\\"></path></g></g></g></svg>\""
            },
            {
                "name": "note",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsNote.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-note\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,48H72A24,24,0,0,0,48,72V440a24,24,0,0,0,24,24H344a38.18,38.18,0,0,0,25-10.34L453.66,369A38.18,38.18,0,0,0,464,344V72A24,24,0,0,0,440,48ZM80,80H432l0,256H360a24,24,0,0,0-24,24v72H80ZM368,409.38V368h41.38ZM320,208H192a16,16,0,0,1,0-32H320a16,16,0,0,1,0,32Zm0,64H192a16,16,0,0,1,0-32H320a16,16,0,0,1,0,32Zm-64,64H192a16,16,0,0,1,0-32h64a16,16,0,0,1,0,32Z\\\"/>\\n</svg>\""
            },
            {
                "name": "openDoors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsOpenDoors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-open-doors\\\" viewBox=\\\"0 0 517.2 512\\\">\\n  <path d=\\\"M145.2,196.3h17.1V307.2H145.2ZM511.5,5.5c-.1-.2-.1-.4-.2-.6a6.34,6.34,0,0,0-1.6-2.3c-.1-.1-.3-.2-.4-.4a6.47,6.47,0,0,0-.9-.8,3.38,3.38,0,0,0-1.2-.6.76.76,0,0,0-.4-.2,7.17,7.17,0,0,0-2.9-.6c-.1,0-.2-.1-.3-.1H8.7c-.1.1-.2.2-.3.2A7.17,7.17,0,0,0,5.5.7a.52.52,0,0,0-.4.2,5.17,5.17,0,0,0-1.3.6,6.47,6.47,0,0,0-.9.8l-.4.4A7,7,0,0,0,1,5l-.3.6a9.41,9.41,0,0,0-.6,3V503.5a8,8,0,0,0,.6,3c.1.2.1.4.2.6a6.34,6.34,0,0,0,1.6,2.3c.1.1.3.2.4.4a6.47,6.47,0,0,0,.9.8c.3.2.7.3,1,.5a3.55,3.55,0,0,0,.9.4,10.66,10.66,0,0,0,3,.6H503.6a8,8,0,0,0,3-.6c.3-.1.6-.3.9-.4s.7-.3,1-.5a6.47,6.47,0,0,0,.9-.8c.1-.1.3-.2.4-.4a8.68,8.68,0,0,0,1.6-2.3c.1-.2.1-.4.2-.6a10.47,10.47,0,0,0,.5-3V8.5A8,8,0,0,0,511.5,5.5ZM17.2,20.9,179.3,82.7V429.3L17.2,491.1ZM55,495l135.9-51.8a8.56,8.56,0,0,0,5.5-8V76.8a8.67,8.67,0,0,0-5.5-8L55,17.1H457.2L321.4,68.8a8.56,8.56,0,0,0-5.5,8V435.2a8.67,8.67,0,0,0,5.5,8L457.3,495Zm440-3.9L332.9,429.3V82.7L495,20.9ZM350,204.8h17.1V315.7H350ZM247.6,179.2h17.1v17.1H247.6Zm41.62,25.57,12.09-12.09,12.1,12.09-12.1,12.09Zm-87.85.11,12.09-12.09,12.09,12.09L213.46,217Zm53.13-.28a38.83,38.83,0,0,0-23.4,69.8V321a7.81,7.81,0,0,0,7.8,7.8h7.8v7.8h15.5v-7.8H270a7.81,7.81,0,0,0,7.8-7.8V274.3a38.72,38.72,0,0,0-23.3-69.7Zm7.7,108.7H246.7V297.8h15.5Zm3.8-49.8a7.73,7.73,0,0,0-3.9,6.7v12.1H246.6V270.2a7.73,7.73,0,0,0-3.9-6.7,23.07,23.07,0,0,1-11.7-20,23.35,23.35,0,0,1,46.7,0A23,23,0,0,1,266,263.5Z\\\"/>\\n</svg>\""
            },
            {
                "name": "paperPlane",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPaperPlane.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-paper-plane\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M499.79,1,4.35,267.8a8.26,8.26,0,0,0,2.3,15.37l185.24,36.95,36.95,185.24a8.26,8.26,0,0,0,15.37,2.3L511,12.21A8.26,8.26,0,0,0,499.79,1ZM32.38,271.46,458.1,42.23,196.18,304.14ZM240.53,479.62l-32.67-163.8L469.75,53.94Z\\\"/>\\n</svg>\""
            },
            {
                "name": "penPaper",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPenPaper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-pen-paper\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M288,400H128a16,16,0,0,1,0-32H288a16,16,0,0,1,0,32Zm-80-64a16,16,0,0,0-16-16H128a16,16,0,0,0,0,32h64A16,16,0,0,0,208,336ZM440,80,234.71,306l72.35-15a22.75,22.75,0,0,0,11.54-6.24L473.45,130c9.25-8.88,8.71-24.77-.48-33.61L415.64,39c-8.89-9.19-24.68-9.75-33.59-.49L227.23,193.35A22.84,22.84,0,0,0,221,205l-15,72.32C202.29,293.91,218.1,309.72,234.71,306ZM398.6,67.24l46.16,46.17L297.9,260.27l-58.24,12.07,12.07-58.24ZM450.34,119h0ZM464,440V240a16,16,0,0,0-32,0V432H80V80H272a16,16,0,0,0,0-32H72A24,24,0,0,0,48,72V440a24,24,0,0,0,24,24H440A24,24,0,0,0,464,440Z\\\"/>\\n</svg>\""
            },
            {
                "name": "pentagon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPentagon.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-pentagon\\\" viewBox=\\\"0 0 543.5 512\\\">\\n  <path d=\\\"M0,157.2l83.2,254.5h269.3l83.2-254.5L217.8,0L0,157.2z\\\"/>\\n</svg>\""
            },
            {
                "name": "photo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPhoto.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-photo\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,48H144a24,24,0,0,0-24,24v40H72a24,24,0,0,0-24,24V440a24,24,0,0,0,24,24H376a24,24,0,0,0,24-24V392h40a24,24,0,0,0,24-24V72A24,24,0,0,0,440,48Zm-72,96V346.55l-63.58-60.82a26.85,26.85,0,0,0-40-2.43l-50.67,48.87-22.49-21.51a23.82,23.82,0,0,0-33.39.2L80,387.22V144ZM271.84,432H80l94.73-92.86Zm46.3,0-81.22-77.69,46.25-44.62L368,390.84V432ZM432,360H400V136a24,24,0,0,0-24-24H152V80H432Z\\\"/>\\n</svg>\""
            },
            {
                "name": "photoAlt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPhotoAlt.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-photo-alt\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,48H144a24,24,0,0,0-24,24v40H72a24,24,0,0,0-24,24V440a24,24,0,0,0,24,24H376a24,24,0,0,0,24-24V392h40a24,24,0,0,0,24-24V72A24,24,0,0,0,440,48Zm-72,96V346.55l-63.58-60.82a26.85,26.85,0,0,0-40-2.43l-50.67,48.87-22.49-21.51a23.82,23.82,0,0,0-33.39.2L80,387.22V144ZM271.84,432H80l94.73-92.86Zm46.3,0-81.22-77.69,46.25-44.62L368,390.84V432ZM432,360H400V136a24,24,0,0,0-24-24H152V80H432Z\\\"/>\\n</svg>\""
            },
            {
                "name": "print",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPrint.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-print\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M439.65,160H399.17a17.81,17.81,0,0,0,.83-3.86V67.87C400,56.73,390.53,48,378.44,48H133.57C121.48,48,112,56.73,112,67.87v88.27a18.41,18.41,0,0,0,.82,3.86H72.35A24.27,24.27,0,0,0,48,184.15V375.84A24.28,24.28,0,0,0,72.35,400H112v44c0,11.22,9.48,20,21.57,20H378.44c12.09,0,21.56-8.78,21.56-20V400h39.65A24.28,24.28,0,0,0,464,375.84V184.15A24.27,24.27,0,0,0,439.65,160ZM144,80H368v80H144ZM368,432H144V352H368Zm64-64H400V340c0-11.22-9.47-20-21.56-20H133.57c-12.09,0-21.57,8.78-21.57,20v28H80V192H432Z\\\"/>\\n</svg>\""
            },
            {
                "name": "question",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsQuestion.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-question\\\" viewBox=\\\"0 0 324 512\\\">\\n  <path d=\\\"M152.31,416.62a36,36,0,0,1-36-36V284.89c0-19.88,15.46-36,45.69-36h0c49.62,0,90-39.68,90-88.44S211.62,72,162,72s-90,39.67-90,88.45a36,36,0,0,1-72,0C0,72,72.67,0,162,0S324,72,324,160.45c0,79.6-58.83,145.83-135.69,158.33v61.84A36,36,0,0,1,152.31,416.62Zm2.6,39.38a28,28,0,1,0,28.35,28A28.18,28.18,0,0,0,154.91,456Z\\\"/>\\n</svg>\""
            },
            {
                "name": "questionCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsQuestionCircle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-question-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M245.25,360.61a12,12,0,0,1-12-12V316.49a29.56,29.56,0,0,1,25.23-29.17A83.76,83.76,0,0,0,314,252.16c13.09-19,17.61-42.29,12.72-65.52C320.4,156.45,296,131.27,266,124c-32.48-7.91-64.39,2.88-85.33,28.79a12,12,0,0,1-18.77-15l.1-.12c26.52-32.81,68.59-46.94,109.64-37a106.38,106.38,0,0,1,78.64,81c6.25,29.73.41,59.58-16.45,84.07A107.83,107.83,0,0,1,262.26,311a5.71,5.71,0,0,0-5,5.48v32.13a12,12,0,0,1-12,12Zm2.4,17.94a12,12,0,1,0,11.28,12.68A12,12,0,0,0,247.65,378.55ZM256,512A256,256,0,0,1,75,75,256,256,0,0,1,437,437,254.33,254.33,0,0,1,256,512Zm0-489.07A233.07,233.07,0,0,0,91.19,420.81,233.07,233.07,0,1,0,420.81,91.19,231.55,231.55,0,0,0,256,22.93Z\\\"/>\\n</svg>\""
            },
            {
                "name": "receipt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsReceipt.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-receipt\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M320,447a24,24,0,0,1-10.73-2.52L256,417.89l-53.27,26.63a24.1,24.1,0,0,1-21.46,0L128,417.89,82.73,440.52A24,24,0,0,1,48,419.05V72A24,24,0,0,1,72,48H440a24,24,0,0,1,24,24V419.05a24,24,0,0,1-34.73,21.47L384,417.89l-53.27,26.63A24,24,0,0,1,320,447Zm3.58-31.14h0ZM256,385a24,24,0,0,1,10.73,2.52L320,414.11l53.27-26.63a24.1,24.1,0,0,1,21.46,0L432,406.11V80H80V406.11l37.27-18.63a24.1,24.1,0,0,1,21.46,0L192,414.11l53.27-26.63A24,24,0,0,1,256,385Zm80-225a16,16,0,0,0-16-16H128a16,16,0,0,0,0,32H320A16,16,0,0,0,336,160Zm-48,64a16,16,0,0,0-16-16H128a16,16,0,0,0,0,32H272A16,16,0,0,0,288,224Zm-80,64a16,16,0,0,0-16-16H128a16,16,0,0,0,0,32h64A16,16,0,0,0,208,288Zm192,0a16,16,0,0,0-16-16H352a16,16,0,0,0,0,32h32A16,16,0,0,0,400,288Zm0,0a16,16,0,0,0-16-16H352a16,16,0,0,0,0,32h32A16,16,0,0,0,400,288Z\\\"/>\\n</svg>\""
            },
            {
                "name": "request",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsRequest.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-request\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,464H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H272a16,16,0,0,1,0,32H80V432H432V240a16,16,0,0,1,32,0V440A24,24,0,0,1,440,464ZM186.71,354.05l72.32-15a22.93,22.93,0,0,0,11.57-6.24L473.46,130c9.12-9.11,8.9-24.17-.49-33.59L415.64,39c-9.38-9.41-24.45-9.62-33.6-.5L179.14,241.44A22.87,22.87,0,0,0,173,253L158,325.3a24.56,24.56,0,0,0,23.94,29.23A24.67,24.67,0,0,0,186.71,354.05ZM398.6,67.23l46.16,46.18L249.92,308.25l-58.25,12.08,12.07-58.25ZM450.33,119h0Z\\\"/>\\n</svg>\""
            },
            {
                "name": "reset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsReset.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-reset\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M511.92,177.87c-.32-4.68-9-115.19-130.7-158.71C300.42-10.66,122.15-25.7,25.84,130.8l-.47.76c-1.83,3.16-44.64,78-14.88,156C31,341.34,79,381.4,153.29,406.67a358.63,358.63,0,0,0,47.76,15.26q19.88,3.19,19.87,4.81V512L379.83,399.05,220.92,254.87V344.6c-16.63-4.72-37.69-9.09-37.88-9.17l-3.16-1.21c-51.61-17.37-83.95-42-96.11-73.28C67.38,218.8,91.13,173.55,93,170.21c86.65-139.93,254-81.41,261.29-78.75,69.47,24.85,78.75,83.1,79.67,90.68V476.75H512V180.39Z\\\"/>\\n</svg>\""
            },
            {
                "name": "resetFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsResetFilter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-reset-filter\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M511.92,177.87c-.32-4.68-9-115.19-130.7-158.71C300.42-10.66,122.15-25.7,25.84,130.8l-.47.76c-1.83,3.16-44.64,78-14.88,156C31,341.34,79,381.4,153.29,406.67a358.63,358.63,0,0,0,47.76,15.26q19.88,3.19,19.87,4.81V512L379.83,399.05,220.92,254.87V344.6c-16.63-4.72-37.69-9.09-37.88-9.17l-3.16-1.21c-51.61-17.37-83.95-42-96.11-73.28C67.38,218.8,91.13,173.55,93,170.21c86.65-139.93,254-81.41,261.29-78.75,69.47,24.85,78.75,83.1,79.67,90.68V476.75H512V180.39Z\\\"/>\\n</svg>\""
            },
            {
                "name": "RIGHT_ARROW",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "39"
            },
            {
                "name": "rulerPencil",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsRulerPencil.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-ruler-pencil\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M115.64,99.1a33,33,0,1,0-33-33A33,33,0,0,0,115.64,99.1Zm0-49.55A16.52,16.52,0,1,1,99.12,66.06,16.52,16.52,0,0,1,115.64,49.55ZM173.46,0H8.26A8.26,8.26,0,0,0,0,8.26V503.74A8.26,8.26,0,0,0,8.26,512h165.2a8.26,8.26,0,0,0,8.26-8.26V8.26A8.26,8.26,0,0,0,173.46,0ZM165.2,495.48H16.52V462.72H42.45a8.26,8.26,0,1,0,0-16.52H16.52V400.1H42.45a8.26,8.26,0,1,0,0-16.52H16.52V337.47H42.45a8.26,8.26,0,1,0,0-16.52H16.52V274.85H42.45a8.26,8.26,0,1,0,0-16.52H16.52V212.22H42.45a8.26,8.26,0,1,0,0-16.52H16.52V16.52H165.2ZM412.83,89.18s0-.08,0-.11A8.25,8.25,0,0,0,410.58,85L328,2.42a8.26,8.26,0,0,0-11.68,0L233.7,85a8.25,8.25,0,0,0-2.21,4.07s0,.08,0,.11a8.25,8.25,0,0,0-.17,1.66v412.9a8.26,8.26,0,0,0,8.26,8.26h165.2a8.26,8.26,0,0,0,8.26-8.26V90.84A8.25,8.25,0,0,0,412.83,89.18ZM396.48,99.1V429.42H247.8V99.1ZM247.8,445.94H396.48v16.52H247.8Zm74.34-426L384.8,82.58H259.48ZM247.8,495.48V479H396.48v16.52Z\\\"/>\\n</svg>\""
            },
            {
                "name": "SafariMocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: 'Enter',\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: 'Enter',\n    which: 13\n  },\n  up: {\n    charCode: 0,\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    keyCode: 38,\n    keyIdentifier: 'Up',\n    which: 38\n  },\n  down: {\n    charCode: 0,\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    keyCode: 40,\n    keyIdentifier: 'Down',\n    which: 40\n  },\n  left: {\n    charCode: 0,\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    keyCode: 37,\n    keyIdentifier: 'Left',\n    which: 37\n  },\n  right: {\n    charCode: 0,\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    keyCode: 39,\n    keyIdentifier: 'Right',\n    which: 39\n  },\n  tab: {\n    charCode: 0,\n    code: 'Tab',\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: 'U+0009',\n    which: 9\n  },\n  esc: {\n    charCode: 0,\n    code: 'Escape',\n    key: 'Escape',\n    keyCode: 27,\n    keyIdentifier: 'U+001B',\n    which: 27\n  },\n  space: {\n    charCode: 0,\n    code: 'Space',\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: 'U+0020',\n    which: 32\n  },\n  shift: {\n    charCode: 0,\n    code: 'ShiftLeft',\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: 'Shift',\n    which: 16\n  },\n  backspace: {\n    charCode: 0,\n    code: 'Backspace',\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: 'U+0008',\n    which: 8\n  },\n  delete: {\n    charCode: 0,\n    code: 'Delete',\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: 'U+007F',\n    which: 46\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57\n  }\n}"
            },
            {
                "name": "SDS_ACCORDION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<SdsAccordionBase>('SDS_ACCORDION')",
                "rawdescription": "Token used to provide a `SdsAccordion` to `SdsAccordionItem`.\nUsed primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.",
                "description": "<p>Token used to provide a <code>SdsAccordion</code> to <code>SdsAccordionItem</code>.\nUsed primarily to avoid circular imports between <code>SdsAccordion</code> and <code>SdsAccordionItem</code>.</p>\n"
            },
            {
                "name": "SDS_DIALOG_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<any>('SdsDialogData')",
                "rawdescription": "Injection token that can be used to access the data that was passed in to a dialog.",
                "description": "<p>Injection token that can be used to access the data that was passed in to a dialog.</p>\n"
            },
            {
                "name": "SDS_DIALOG_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<SdsDialogConfig>('sds-dialog-default-options')",
                "rawdescription": "Injection token that can be used to specify default dialog options.",
                "description": "<p>Injection token that can be used to specify default dialog options.</p>\n"
            },
            {
                "name": "SDS_DIALOG_SCROLL_STRATEGY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<() => ScrollStrategy>('sds-dialog-scroll-strategy')",
                "rawdescription": "Injection token that determines the scroll handling while the dialog is open.",
                "description": "<p>Injection token that determines the scroll handling while the dialog is open.</p>\n"
            },
            {
                "name": "SDS_DIALOG_SCROLL_STRATEGY_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  provide: SDS_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
            },
            {
                "name": "SDS_MENU_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<SdsMenuInterface>(\n  'SDS_MENU_TOKEN'\n)",
                "rawdescription": "Injection token used to provide the parent menu to menu items.",
                "description": "<p>Injection token used to provide the parent menu to menu items.</p>\n"
            },
            {
                "name": "SDS_SelectedResult_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/selected-result/selected-result.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSSelectedResultComponent),\n  multi: true\n}"
            },
            {
                "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<() => ScrollStrategy>('sds-slide-out-scroll-strategy')"
            },
            {
                "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  provide: SDS_SLIDE_OUT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
            },
            {
                "name": "SDS_TRUNCATED_TEXT_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/truncate-text/truncates-text-base.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<any>(\n  'SdsTruncatedTextData'\n)",
                "rawdescription": "Used primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.",
                "description": "<p>Used primarily to avoid circular imports between <code>SdsAccordion</code> and <code>SdsAccordionItem</code>.</p>\n"
            },
            {
                "name": "sdsDialogAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody)\n}",
                "rawdescription": "Animations used by SdsDialog.",
                "description": "<p>Animations used by SdsDialog.</p>\n"
            },
            {
                "name": "sdsExpansionAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/accordion/accordion-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  /** Animation that expands and collapses the accordion item content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(ACCORDION_ITEM_ANIMATION_TIMING)),\n  ])\n}"
            },
            {
                "name": "sdsMenuAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/menu/menu-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  transformMenu: trigger('transformMenu', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(0.8)'\n      })\n    ),\n    transition(\n      'void => enter',\n      group([\n        query(\n          '.sds-menu',\n          animate(\n            '100ms linear',\n            style({\n              opacity: 1\n            })\n          )\n        ),\n        animate(\n          '120ms cubic-bezier(0, 0, 0.2, 1)',\n          style({ transform: 'scale(1)' })\n        )\n      ])\n    ),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n  ])\n}"
            },
            {
                "name": "SdsToastSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/toast/toast.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  toastComponent: SdsToastComponent,\n  timeOut: 6000,\n  toastClass: 'sds-toast',\n  positionClass: 'toast-bottom-left',\n}"
            },
            {
                "name": "sdsToolbarAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/toolbar/toolbar-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  /** Animation that expands and collapses the accordion item content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({ width: '0px', height: '0px', opacity: '0', visibility: 'hidden', marginLeft: '-1px', marginBottom: '-1px' })),\n    state('expanded', style({ width: '{{expandedWidth}}', height: '*', opacity: '1', visibility: 'visible', marginLeft: '-1px', marginBottom: '-1px' }), {\n      params: { expandedWidth: '300px' }\n    }),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(TOOLBAR_ANIMATION_TIMING)),\n  ])\n}"
            },
            {
                "name": "sdsTruncateTextAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/truncate-text/truncate-text-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  container: trigger('container', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(0.8)'\n      })\n    ),\n    transition(\n      'void => enter',\n      group([\n        query(\n          '.sds-overlay',\n          animate(\n            '100ms linear',\n            style({\n              opacity: 1\n            })\n          )\n        ),\n        animate(\n          '120ms cubic-bezier(0, 0, 0.2, 1)',\n          style({ transform: 'scale(1)' })\n        )\n      ])\n    ),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n  ])\n}"
            },
            {
                "name": "search",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsSearch.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-search\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M459.32,436.69,345.51,322.89A167.24,167.24,0,0,0,384,216c0-92.63-75.36-168-168-168S48,123.37,48,216s75.37,168,168,168a167.24,167.24,0,0,0,106.89-38.49l113.8,113.81a16,16,0,0,0,22.63-22.63ZM80,216c0-75,61-136,136-136s136,61,136,136S291,352,216,352,80,291,80,216Z\\\"/>\\n</svg>\""
            },
            {
                "name": "searchCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsSearchCircle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-search-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,0C114.62,0,0,114.62,0,256S114.62,512,256,512,512,397.38,512,256,397.38,0,256,0Zm0,497.48C122.64,497.48,14.52,389.36,14.52,256S122.64,14.52,256,14.52,497.48,122.64,497.48,256,389.36,497.48,256,497.48ZM409.1,359.81l-144-118a92.41,92.41,0,1,0-10.78,13.84L398,373.38a8.79,8.79,0,0,0,12.34-1.22h0A8.8,8.8,0,0,0,409.1,359.81ZM197.88,270.15a78.7,78.7,0,1,1,67.17-88.75A78.71,78.71,0,0,1,197.88,270.15Z\\\"/>\\n</svg>\""
            },
            {
                "name": "share",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsShare.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-share\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,464H72a24,24,0,0,1-24-24V264a24,24,0,0,1,24-24h72c20.93.1,20.92,31.91,0,32H80V432H432V272H352c-20.93-.1-20.92-31.91,0-32h88a24,24,0,0,1,24,24V440A24,24,0,0,1,440,464Zm0-192h0ZM377.3,131l-112-80a16,16,0,0,0-18.6,0l-112,80c-17,12.26,1.51,38.09,18.6,26L240,95.09V368c.1,20.93,31.91,20.92,32,0V95.09L358.7,157C375.72,169.1,394.31,143.24,377.3,131Z\\\"/>\\n</svg>\""
            },
            {
                "name": "ship",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsShip.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-ship\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M447.7,254.6c-1.1-7.6-5.8-14.2-12.5-17.8L352,216.2v-64.5c0-13.3-10.7-24-24-24h-56V95.6h16 c20.9-0.1,20.9-31.9,0-32h-64c-20.9,0.1-20.9,31.9,0,32h16v32.2h-56c-13.3,0-24,10.7-24,24l0,0V216l-79.5,19.3 c-15.8,4.7-21.6,24.9-11.2,37.5l57.3,103.2c10.2,18.3,38.1,2.8,28-15.5l-54-97.2l139.4-34v74.1c0.1,20.9,31.9,20.9,32,0v-74.1 l139.4,34l-54,97.2c-10.1,18.4,17.8,33.8,28,15.5l57.3-103.2C446.9,267.7,448.7,261.1,447.7,254.6z M192,159.7h128v48.6l-54.8-13.5 c-5.9-2.4-12.5-2.4-18.4,0L192,208.2V159.7z M397.8,440.4c-4.4,7.7-14.1,10.4-21.8,6l-23.7-13.5l-21.1,11.6 c-7.1,3.9-15.6,3.9-22.7-0.1l-20.6-11.6l-20.6,11.5c-7.1,4-15.8,4-22.9-0.1l-20.1-11.4l-20.8,11.5c-7.1,4-15.8,4-22.8-0.1 l-20.3-11.5l-24.9,13.6c-18.4,10-33.7-17.9-15.4-28.1l29.1-16c7.1-3.9,15.7-3.8,22.8,0.2l20.2,11.5l20.8-11.6c7.1-4,15.8-4,22.9,0.1 l20,11.4l20.5-11.5c7.1-4,15.7-4,22.8,0l20.7,11.6l21.1-11.6c7.1-3.9,15.7-3.9,22.8,0.1l28,15.9 C399.5,422.9,402.2,432.7,397.8,440.4z\\\"/>\\n</svg>\""
            },
            {
                "name": "stackblitz",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsStackblitz.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-stackblitz\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M 337.3568 83.3448 L 137.984 296.7976 h 104.192 l -59.9808 150.3744 l 199.3728 -213.4528 H 276.8128 z M 346.368 93.764 l -24.7808 59.136 l 112.64 112.64 l -96.8704 97.7152 v 83.9168 L 518.7072 265.54 z M 182.1952 83.3448 v 83.9168 L 85.0432 265.54 l 112.64 112.0768 l -24.4992 59.9808 L 0.5632 265.54 z\\\"/>\\n</svg>\""
            },
            {
                "name": "star",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsStar.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-star\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M349.8,337.4L399.7,506L242.4,385.2L83.1,511.9l55.7-174.5L-0.1,204.3H177L242.4-0.1L317,204.3h194.9 L349.8,337.4z\\\"/>\\n</svg>\""
            },
            {
                "name": "tablet",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsTablet.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-tablet\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M424,16H88A24,24,0,0,0,64,40V472a24,24,0,0,0,24,24H424a24,24,0,0,0,24-24V40A24,24,0,0,0,424,16Zm-8,32V368H96V48ZM96,464V400H416v64Zm176-32a16,16,0,1,1-16-16A16,16,0,0,1,272,432Z\\\"/>\\n</svg>\""
            },
            {
                "name": "tag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsTag.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-tag\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M288,464h0a16,16,0,0,1-11.33-4.73L69.91,250.94a16.11,16.11,0,0,1-4.64-11.28V81.27a16,16,0,0,1,16-16H239.66a16.11,16.11,0,0,1,11.28,4.64L459.27,276.64a16,16,0,0,1,0,22.63l0,0-160,160A16,16,0,0,1,288,464ZM97.27,233.07,288.05,425.33,425.33,288.05,233.07,97.27H97.27ZM152,128a24,24,0,1,0,24,24A24,24,0,0,0,152,128Z\\\"/>\\n</svg>\""
            },
            {
                "name": "thumbDown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsThumbDown.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-thumb-down\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M410,112H208.47a22.52,22.52,0,0,0-11.11,3l-10.79,6.19A25.11,25.11,0,0,0,167.11,112H104.89C91.17,112,80,122.86,80,136.2V292.14c0,13.36,11.17,24.22,24.89,24.22h62.22a24.9,24.9,0,0,0,23.28-15.68h10.7l22.22,23.54v69.9c0,12.06,9.94,21.88,22.94,21.88C279,416,314,394.72,314,363V332h95.84A22.11,22.11,0,0,0,432,310V133.87A22,22,0,0,0,410,112ZM112,144h48V284.36H112ZM400,300H304a22,22,0,0,0-22,21.89V363c0,8.33-12.28,17.06-26.69,20V320.11c0-6-2.55-11.8-6.16-15.07L222,276.23a24.1,24.1,0,0,0-17.51-7.55H192V154.9L211.05,144H400Z\\\"/>\\n</svg>\""
            },
            {
                "name": "thumbUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsThumbUp.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-thumb-up\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M409.84,180H314V149c0-31.69-35-53-68.53-53a22,22,0,0,0-22.16,21.88v69.84l-22.22,23.6H190.32a24.84,24.84,0,0,0-23.21-15.67H104.89c-13.73,0-24.89,10.86-24.89,24.2V375.79C80,389.14,91.16,400,104.89,400h62.22a25,25,0,0,0,19.36-9.18l10.92,6.25A22.51,22.51,0,0,0,208.46,400H410a22,22,0,0,0,22-21.88V202A22.12,22.12,0,0,0,409.84,180ZM160,368H112V227.65h48V368Zm240,0H211l-19-10.9V243.32h12.49A24.21,24.21,0,0,0,222,235.77l26.36-28.05a21.6,21.6,0,0,0,6.93-15.83v-63C269.47,131.74,282,140.55,282,149V190.1A22,22,0,0,0,304,212h96Z\\\"/>\\n</svg>\""
            },
            {
                "name": "TOOLBAR_ANIMATION_TIMING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/toolbar/toolbar-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                "rawdescription": "Time and timing curve for accordion item animations.",
                "description": "<p>Time and timing curve for accordion item animations.</p>\n"
            },
            {
                "name": "trash",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsTrash.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-trash\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M432,96H320V72a24,24,0,0,0-24-24H216a24,24,0,0,0-24,24V96H80a16,16,0,0,0,0,32H96V440a24,24,0,0,0,24,24H392a24,24,0,0,0,24-24V128h16a16,16,0,0,0,0-32ZM224,80h64V96H224ZM384,432H128V128H384ZM272,352V208a16,16,0,0,1,32,0V352a16,16,0,0,1-32,0Zm-64,0V208a16,16,0,0,1,32,0V352a16,16,0,0,1-32,0Z\\\"/>\\n</svg>\""
            },
            {
                "name": "triangle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsTriangle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-triangle\\\" viewBox=\\\"0 0 589.6 512\\\">\\n  <path d=\\\"M566.4,0L457.6,512L0,147.1L566.4,0z\\\"/>\\n</svg>\""
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "Counter for generating unique element ids.",
                "description": "<p>Counter for generating unique element ids.</p>\n"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/dialog/dialog-ref.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/toolbar/toolbar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "Counter for generating unique element ids.",
                "description": "<p>Counter for generating unique element ids.</p>\n"
            },
            {
                "name": "unlink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUnlink.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-unlink\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M182.26,440.76A80,80,0,0,1,116.84,314.9l45.88-65.53a16,16,0,0,1,26.22,18.36l-45.89,65.53a48,48,0,0,0,78.64,55.06l45.88-65.53a16,16,0,0,1,26.22,18.36l-45.88,65.53A80,80,0,0,1,182.26,440.76Zm154-171.07a16,16,0,0,1-13.09-25.18L369,179a48,48,0,1,0-78.18-55.71l-.45.64-45.88,65.54a16,16,0,1,1-26.22-18.36l45.88-65.54a80,80,0,0,1,131.07,91.78h0l-45.88,65.54A16,16,0,0,1,336.24,269.69Zm11.37,66.74a16,16,0,0,1-9.18-2.91L155.12,204.79a16,16,0,0,1,18.39-26.19L356.82,307.34a16,16,0,0,1-9.21,29.09Z\\\"/>\\n</svg>\""
            },
            {
                "name": "upload",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUpload.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-upload\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,408a16,16,0,0,1-16,16H80a16,16,0,0,1,0-32H432A16,16,0,0,1,448,408ZM153.3,197,240,135.08V328a16,16,0,0,0,32,0V135.08L358.7,197a16,16,0,1,0,18.6-26l-112-80a16,16,0,0,0-18.6,0l-112,80a16,16,0,1,0,18.6,26Z\\\"/>\\n</svg>\""
            },
            {
                "name": "user",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUser.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-user\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,240a96,96,0,1,1,96-96A96.1,96.1,0,0,1,256,240Zm0-160a64,64,0,1,0,64,64A64.07,64.07,0,0,0,256,80ZM416,456V350a78.07,78.07,0,0,0-78-78H174a78.07,78.07,0,0,0-78,78V456a16,16,0,0,0,32,0V350a46,46,0,0,1,46-46H338a46,46,0,0,1,46,46V456a16,16,0,0,0,32,0Z\\\"/>\\n</svg>\""
            },
            {
                "name": "userCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUserCircle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-user-circle\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M257,279.27A100.85,100.85,0,1,0,156.15,178.42,100.85,100.85,0,0,0,257,279.27Zm0-186.18a85.33,85.33,0,1,1-85.33,85.33A85.33,85.33,0,0,1,257,93.09ZM257,0C115.62,0,1,114.62,1,256S115.62,512,257,512,513,397.38,513,256,398.38,0,257,0Zm0,15.52c132.82,0,240.48,107.67,240.48,240.48a239.41,239.41,0,0,1-49.15,145.67c-28.3-62.14-98.49-91.37-191-91.37-92.83,0-163.15,29.44-191.25,92A239.42,239.42,0,0,1,16.52,256C16.52,123.18,124.18,15.52,257,15.52Zm0,481A239.88,239.88,0,0,1,77.15,415.62,7.74,7.74,0,0,0,78,414c23.36-59.43,89.25-88.17,179.34-88.17,89.14,0,154.68,28.18,178.63,86.39a7.73,7.73,0,0,0,1.65,2.5A239.9,239.9,0,0,1,257,496.48Z\\\"/>\\n</svg>\""
            },
            {
                "name": "users",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUsers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-users\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M136,352a56,56,0,1,1,56-56A56.07,56.07,0,0,1,136,352Zm0-80a24,24,0,1,0,24,24A24,24,0,0,0,136,272Zm88,176V430.48A62.55,62.55,0,0,0,161.52,368h-51A62.55,62.55,0,0,0,48,430.48V448a16,16,0,0,0,32,0V430.48A30.51,30.51,0,0,1,110.48,400h51A30.51,30.51,0,0,1,192,430.48V448a16,16,0,0,0,32,0Zm152-96a56,56,0,1,1,56-56A56.07,56.07,0,0,1,376,352Zm0-80a24,24,0,1,0,24,24A24,24,0,0,0,376,272Zm88,176V430.48A62.55,62.55,0,0,0,401.52,368h-51A62.55,62.55,0,0,0,288,430.48V448a16,16,0,0,0,32,0V430.48A30.51,30.51,0,0,1,350.48,400h51A30.51,30.51,0,0,1,432,430.48V448a16,16,0,0,0,32,0ZM256,144a56,56,0,1,1,56-56A56.07,56.07,0,0,1,256,144Zm0-80a24,24,0,1,0,24,24A24,24,0,0,0,256,64Zm88,158.48A62.55,62.55,0,0,0,281.52,160h-51A62.55,62.55,0,0,0,168,222.48c.09,20.92,31.91,20.93,32,0A30.51,30.51,0,0,1,230.48,192h51A30.51,30.51,0,0,1,312,222.48a16,16,0,1,0,32,0Z\\\"/>\\n</svg>\""
            },
            {
                "name": "videoCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsVideoCircle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-video-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M225.2,352a16,16,0,0,1-16-16V176a16,16,0,0,1,16-16,15.64,15.64,0,0,1,9.3,3l112,80a16,16,0,0,1,3.7,22.3,16.24,16.24,0,0,1-3.7,3.7l-112,80A16.59,16.59,0,0,1,225.2,352Zm16-144.9v97.8L309.7,256Zm16,272.9c-123.5,0-224-100.5-224-224S133.7,32,257.2,32s224,100.5,224,224S380.7,480,257.2,480Zm0-416c-105.9,0-192,86.1-192,192s86.1,192,192,192,192-86.1,192-192S363,64,257.2,64Z\\\"/>\\n</svg>\""
            },
            {
                "name": "videoPlay",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsVideoPlay.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-video-play\\\" viewBox=\\\"0 0 512 476\\\">\\n  <path d=\\\"M238,115.86a13,13,0,0,1-13-12.94v-90a12.95,12.95,0,0,1,25.9,0v90A13,13,0,0,1,238,115.86ZM178.57,370.72a13,13,0,0,1-12.95-13h0V190.32A12.95,12.95,0,0,1,185,179.11l145,83.73a13,13,0,0,1,0,22.43L185,369A12.94,12.94,0,0,1,178.57,370.72Zm12.95-158v122.6L297.7,274ZM278,39.47v26.3c115,22,190.35,133.12,168.32,248.11A212,212,0,0,1,387.9,424C305,506.75,170.75,506.64,88,423.76s-82.64-217.15.24-299.9a211.21,211.21,0,0,1,109.68-58.1V39.47C85.57,58.5,0,156.27,0,274,0,405.47,106.53,512,238,512S476,405.47,476,274C475.9,156.27,390.34,58.5,278,39.47Z\\\"/>\\n</svg>\""
            },
            {
                "name": "videoSquare",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsVideoSquare.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-video-square\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M217.1,285a16,16,0,0,0,17-2l80-64.57a16,16,0,0,0,0-24.91l-80-64.57A16,16,0,0,0,208,141.38V270.52A16,16,0,0,0,217.1,285ZM240,174.85,278.52,206,240,237ZM448,46.52H64a16,16,0,0,0-16,16v288a16,16,0,0,0,16,16H448a16,16,0,0,0,16-16v-288A16,16,0,0,0,448,46.52Zm-16,288H80v-256H432Zm16,80H219.55a31.72,31.72,0,0,0-55.1,0H64a16,16,0,0,0,0,32H164.45a31.72,31.72,0,0,0,55.1,0H448a16,16,0,0,0,0-32Zm-256,0a16,16,0,1,1-16,16,16,16,0,0,1,16-16Z\\\"/>\\n</svg>\""
            },
            {
                "name": "workspace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/packages/components/src/lib/icon/custom-icons/sdsWorkspace.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-workspace\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M216,240H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H216a24,24,0,0,1,24,24V216A24,24,0,0,1,216,240ZM80,208H208V80H80Zm360,32H296a24,24,0,0,1-24-24V72a24,24,0,0,1,24-24H440a24,24,0,0,1,24,24V216A24,24,0,0,1,440,240ZM304,208H432V80H304ZM216,461.34H72a24,24,0,0,1-24-24v-144a24,24,0,0,1,24-24H216a24,24,0,0,1,24,24v144A24,24,0,0,1,216,461.34Zm-136-32H208v-128H80Zm360,32H296a24,24,0,0,1-24-24v-144a24,24,0,0,1,24-24H440a24,24,0,0,1,24,24v144A24,24,0,0,1,440,461.34Zm-136-32H432v-128H304Z\\\"/>\\n</svg>\""
            }
        ],
        "functions": [
            {
                "name": "_applyConfigDefaults",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Applies default options to the dialog config.</p>\n",
                "args": [
                    {
                        "name": "config",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "defaultOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "SdsDialogConfig",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 14833,
                            "end": 14839,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "config"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 14827,
                            "end": 14832,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": "<p>Config to be modified.</p>\n"
                    },
                    {
                        "name": {
                            "pos": 14873,
                            "end": 14887,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "defaultOptions"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 14867,
                            "end": 14872,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": "<p>Default options provided.</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 14918,
                            "end": 14925,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The new configuration object.</p>\n"
                    }
                ]
            },
            {
                "name": "createFakeEvent",
                "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a fake event object with any desired event type.</p>\n",
                "args": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "canBubble",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cancelable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "canBubble",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cancelable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createKeyboardEvent",
                "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Dispatches a keydown event from an element.</p>\n",
                "args": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "keyCode",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "target",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "key",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "keyCode",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createMouseEvent",
                "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "button",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "button",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createTouchEvent",
                "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a browser TouchEvent with the specified pointer coordinates.</p>\n",
                "args": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageX",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageY",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageX",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageY",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "debounce",
                "file": "libs/packages/components/src/lib/popover/debounce.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Delays calling of a function for <code>delay</code> number of milliseconds.</p>\n",
                "args": [
                    {
                        "name": "delay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MethodDecorator",
                "jsdoctags": [
                    {
                        "name": "delay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility to dispatch any event on a Node.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "event",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Event",
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "event",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchFakeEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Shorthand to dispatch a fake event on a specified node.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "canBubble",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Event",
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "canBubble",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchKeyboardEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Shorthand to dispatch a keyboard event with a specified key code.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "keyCode",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "target",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "KeyboardEvent",
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "keyCode",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchMouseEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Shorthand to dispatch a mouse event on the specified coordinates.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "event",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MouseEvent",
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "event",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dispatchTouchEvent",
                "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Shorthand to dispatch a touch event on the specified coordinates.</p>\n",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getClosestDialog",
                "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Finds the closest SdsDialogRef to an element by looking at the DOM.</p>\n",
                "args": [
                    {
                        "name": "element",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "openDialogs",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3907,
                            "end": 3914,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "element"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3901,
                            "end": 3906,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": "<p>Element relative to which to look for a dialog.</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3973,
                            "end": 3984,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "openDialogs"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3967,
                            "end": 3972,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": "<p>References to the currently-open dialogs.</p>\n"
                    }
                ]
            },
            {
                "name": "patchElementFocus",
                "file": "libs/packages/components/src/lib/testing/element-focus.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Patches an elements focus and blur methods to emit events consistently and predictably.\nThis is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\nwhile others won&#39;t fire them at all if the browser window is not focused.</p>\n",
                "args": [
                    {
                        "name": "element",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SDS_DIALOG_SCROLL_STRATEGY_FACTORY",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ScrollStrategy",
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ScrollStrategy",
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY",
                "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ScrollStrategy",
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "throwSdsDialogContentAlreadyAttachedError",
                "file": "libs/packages/components/src/lib/dialog/dialog-container.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Throws an exception for the case when a ComponentPortal is\nattached to a DomPortalOutlet without an origin.</p>\n",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "DialogRole",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dialog\" | \"alertdialog\"",
                "file": "libs/packages/components/src/lib/dialog/dialog-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Valid ARIA roles for a dialog element.</p>\n",
                "kind": 183
            },
            {
                "name": "MenuPositionX",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"before\" | \"after\"",
                "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Menu Positions</p>\n",
                "kind": 183
            },
            {
                "name": "MenuPositionY",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"above\" | \"below\"",
                "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "MenuSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Menu available sizes</p>\n",
                "kind": 192
            },
            {
                "name": "PaginationDisplayMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"results\"",
                "file": "libs/packages/components/src/lib/pagination/pagination.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>pagination display modes.</p>\n",
                "kind": 183
            },
            {
                "name": "SdsAccordionDisplayMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"basic\"",
                "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Accordion&#39;s display modes.</p>\n",
                "kind": 183
            },
            {
                "name": "SdsAccordionItemState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"expanded\" | \"collapsed\"",
                "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Accordion Item&#39;s states.</p>\n",
                "kind": 183
            },
            {
                "name": "SdsToolbarState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"expanded\" | \"collapsed\"",
                "file": "libs/packages/components/src/lib/toolbar/toolbar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Toolbar&#39;s states.</p>\n",
                "kind": 183
            }
        ],
        "enumerations": [
            {
                "name": "KEYS",
                "childs": [
                    {
                        "name": "ENTER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "enter"
                    },
                    {
                        "name": "ALT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "alt"
                    },
                    {
                        "name": "UP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "up"
                    },
                    {
                        "name": "DOWN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "down"
                    },
                    {
                        "name": "LEFT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left"
                    },
                    {
                        "name": "RIGHT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right"
                    },
                    {
                        "name": "TAB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tab"
                    },
                    {
                        "name": "ESC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "esc"
                    },
                    {
                        "name": "SPACE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "space"
                    },
                    {
                        "name": "SHIFT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "shift"
                    },
                    {
                        "name": "BACKSPACE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "backspace"
                    },
                    {
                        "name": "ONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "TWO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "THREE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    },
                    {
                        "name": "FOUR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "4"
                    },
                    {
                        "name": "FIVE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "5"
                    },
                    {
                        "name": "SIX",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "6"
                    },
                    {
                        "name": "SEVEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "7"
                    },
                    {
                        "name": "EIGHT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "8"
                    },
                    {
                        "name": "NINE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "9"
                    },
                    {
                        "name": "ZERO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "DELETE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "delete"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/packages/components/src/lib/key-helper/key-helper.ts"
            },
            {
                "name": "NavigationMode",
                "childs": [
                    {
                        "name": "INTERNAL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EXTERNAL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EVENT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LABEL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts"
            },
            {
                "name": "SelectionMode",
                "childs": [
                    {
                        "name": "SINGLE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "MULTIPLE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/packages/components/src/lib/selected-result/models/sds-selected-item-model-helper.ts"
            }
        ],
        "groupedVariables": {
            "libs/packages/components/src/lib/accordion/accordion-animations.ts": [
                {
                    "name": "ACCORDION_ITEM_ANIMATION_TIMING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/accordion/accordion-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                    "rawdescription": "Time and timing curve for accordion item animations.",
                    "description": "<p>Time and timing curve for accordion item animations.</p>\n"
                },
                {
                    "name": "sdsExpansionAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/accordion/accordion-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  /** Animation that expands and collapses the accordion item content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(ACCORDION_ITEM_ANIMATION_TIMING)),\n  ])\n}"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsAdd.ts": [
                {
                    "name": "add",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAdd.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-add\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M368,240H272V144a16,16,0,0,0-32,0v96H144a16,16,0,0,0,0,32h96v96a16,16,0,0,0,32,0V272h96a16,16,0,0,0,0-32Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsAddReq.ts": [
                {
                    "name": "addReq",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAddReq.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-add-req\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,464H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H272a16,16,0,0,1,0,32H80V432H432V240a16,16,0,0,1,32,0V440A24,24,0,0,1,440,464Zm24-352H400V48a16,16,0,0,0-32,0v64H304a16,16,0,0,0,0,32h64v64a16,16,0,0,0,32,0V144h64a16,16,0,0,0,0-32Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsAlertError.ts": [
                {
                    "name": "alertError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAlertError.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-alert-error\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,32C132.48,32,32,132.48,32,256S132.48,480,256,480,480,379.52,480,256,379.52,32,256,32ZM64,256a191,191,0,0,1,45.53-123.85L379.85,402.47A191,191,0,0,1,256,448C150.13,448,64,361.87,64,256ZM402.47,379.85,132.15,109.53A191,191,0,0,1,256,64c105.87,0,192,86.13,192,192A191,191,0,0,1,402.47,379.85Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsAlertInfo.ts": [
                {
                    "name": "alertInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAlertInfo.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-alert-info\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,512C114.84,512,0,397.16,0,256S114.84,0,256,0,512,114.84,512,256,397.16,512,256,512Zm0-486C129.19,26,26,129.19,26,256S129.19,486,256,486,486,382.81,486,256,382.81,26,256,26Zm0,91.12a17.36,17.36,0,1,0,17.36,17.36A17.36,17.36,0,0,0,256,117.15Zm-17.36,86.78V377.49a17.36,17.36,0,1,0,34.71,0V203.93a17.36,17.36,0,1,0-34.71,0Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsAlertWarning.ts": [
                {
                    "name": "alertWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAlertWarning.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-alert-warning\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M429.29,432H82.7C45.59,433.28,18.42,390.2,39,358.51L212.61,72.09c17.88-31.75,69.5-31.75,87.39,0L473,358.55C493.56,390.26,466.37,433.28,429.29,432Zm-173-352A18.82,18.82,0,0,0,240,88.71L66.36,375.13C59.16,389.21,70,399.54,82.7,400H429.29c12.71-.44,23.59-10.85,16.33-24.88l-173-286.47C269.36,83.26,263.23,80,256.31,80ZM272,288V160c.31-20.75-32.3-20.76-32,0V288a16,16,0,0,0,32,0Zm-16,48a16,16,0,1,0,16,16A16,16,0,0,0,256,336Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/all.ts": [
                {
                    "name": "allIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/all.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  add,\n  addReq,\n  alertError,\n  alertInfo,\n  alertWarning,\n  angleCircle,\n  angleLeft,\n  angleRight,\n  arrow,\n  arrowDown,\n  arrowUp,\n  article,\n  attachment,\n  bars,\n  bell,\n  book,\n  bookmark,\n  building,\n  buildingAlt,\n  calendar,\n  calendarAdd,\n  calendarCheck,\n  check,\n  checkCircle,\n  comment,\n  document,\n  documentAdd,\n  documentPdf,\n  documentSearch,\n  download,\n  ellipsis,\n  envelope,\n  exclamation,\n  exclamationCircle,\n  exclamationTriangle,\n  exit,\n  federalBuilding,\n  file,\n  fileChartLine,\n  filter,\n  flag,\n  folder,\n  folderAlt1,\n  folderAlt2,\n  home,\n  informationCircle,\n  invoice,\n  leaf,\n  link,\n  logIn,\n  logOut,\n  messages,\n  mobile,\n  newNote,\n  newVersion,\n  notCompleted,\n  note,\n  openDoors,\n  paperPlane,\n  penPaper,\n  pentagon,\n  photo,\n  photoAlt,\n  print,\n  question,\n  questionCircle,\n  receipt,\n  request,\n  reset,\n  resetFilter,\n  rulerPencil,\n  search,\n  searchCircle,\n  share,\n  ship,\n  stackblitz,\n  star,\n  tablet,\n  tag,\n  thumbDown,\n  thumbUp,\n  trash,\n  triangle,\n  unlink,\n  upload,\n  user,\n  userCircle,\n  users,\n  videoCircle,\n  videoPlay,\n  videoSquare,\n  workspace,\n}"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsAngleCircle.ts": [
                {
                    "name": "angleCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAngleCircle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-angle-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M296,368a16,16,0,0,1-12.3-5.76l-80-96a16,16,0,0,1,0-20.48l80-96a16,16,0,1,1,24.58,20.48L236.83,256l71.46,85.76A16,16,0,0,1,296,368ZM480,256C480,132.48,379.52,32,256,32S32,132.48,32,256,132.48,480,256,480,480,379.52,480,256Zm-32,0c0,105.87-86.13,192-192,192S64,361.87,64,256,150.13,64,256,64,448,150.13,448,256Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsAngleLeft.ts": [
                {
                    "name": "angleLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAngleLeft.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-angle-left\\\" viewBox=\\\"0 0 232.7 512\\\">\\n  <path d=\\\"M194.2,512c-12.1,0-24-5.6-31.6-16.3L7.2,278.5c-9.7-13.5-9.7-31.6,0-45.1L162.6,16.2 c12.5-17.4,36.7-21.5,54.2-9c17.4,12.4,21.5,36.7,9,54.1L86.5,256l139.2,194.7c12.5,17.4,8.4,41.7-9,54.1 C209.9,509.7,202,512,194.2,512z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsAngleRight.ts": [
                {
                    "name": "angleRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAngleRight.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-angle-right\\\" viewBox=\\\"0 0 234.3 512\\\">\\n  <path d=\\\"M39.5,0c12.6,0.1,24.3,6.2,31.6,16.4l156,218.4c9.6,13.5,9.6,31.7,0,45.2l-156,218.4c-14,16.4-38.6,18.3-55,4.3 C1.8,490.3-1.7,469.4,8,453.1l139.6-195L8,63.2C-5.1,46-1.8,21.6,15.4,8.5c0.5-0.4,1-0.8,1.5-1.1C23.5,2.6,31.4,0.1,39.5,0z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-animations.ts": [
                {
                    "name": "animationBody",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  transition('* => enter',\n    [\n      style({opacity: 0, transform: 'scale(0.7)'}),\n      animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n        style({transform: 'none', opacity: 1}))\n    ]\n  ),\n  transition('* => void, * => exit',\n    [\n      style({transform: 'none'}),\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n        style({opacity: 0})\n      )\n    ]\n  ),\n  // state('slideExit', style({right: '-15rem'})),\n  // state('slideEnter', style({right: '0rem'})),\n  transition('* => slideEnter', [\n    style({right: '-15rem'}),\n    animate('1s', style({right: '0rem'}))\n  ]),\n  transition('* => slideExit', [\n    style({right: '0rem'}),\n    animate('1s', style({right: '-15rem'}))\n  ]),\n]"
                },
                {
                    "name": "sdsDialogAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody)\n}",
                    "rawdescription": "Animations used by SdsDialog.",
                    "description": "<p>Animations used by SdsDialog.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsArrow.ts": [
                {
                    "name": "arrow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsArrow.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-arrow\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M389,246.7,293,112.3a16,16,0,0,0-26,18.6L344.91,240H124.3a16,16,0,0,0,0,32H344.91L267,381.1a16,16,0,0,0,26,18.6l96-134.4A16,16,0,0,0,389,246.7Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsArrowDown.ts": [
                {
                    "name": "arrowDown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsArrowDown.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-arrow-down\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M328.1,255.34V0H182.57V255.34l-82-100.55L0,255.34,256.66,512,512,256.67s-83.77-94.36-88.64-99.23Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsArrowUp.ts": [
                {
                    "name": "arrowUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsArrowUp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-arrow-up\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M183.9,256.7V512h145.5V256.7l82,100.5L512,256.7L255.3,0L0,255.3c0,0,83.8,94.4,88.6,99.2L183.9,256.7z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsArticle.ts": [
                {
                    "name": "article",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsArticle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-article\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M438.4,176H384V104a24,24,0,0,0-24-24H72a24,24,0,0,0-24,24V408a24,24,0,0,0,24,24H440a23.89,23.89,0,0,0,24-23.73v-207A25.47,25.47,0,0,0,438.4,176ZM80,112H352V400H80ZM432,400H384V208h48ZM128,256h80a16,16,0,0,0,16-16V160a16,16,0,0,0-16-16H128a16,16,0,0,0-16,16v80A16,16,0,0,0,128,256Zm16-80h48v48H144ZM320,304a16,16,0,0,1-16,16H128a16,16,0,0,1,0-32H304A16,16,0,0,1,320,304Zm0,48a16,16,0,0,1-16,16H128a16,16,0,0,1,0-32H304A16,16,0,0,1,320,352Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsAttachment.ts": [
                {
                    "name": "attachment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsAttachment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-attachment\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,464.88a96.1,96.1,0,0,1-96-96v-120a56,56,0,0,1,112,0v88a16,16,0,0,1-32,0v-88a24,24,0,0,0-48,0v120a64,64,0,0,0,128,0v-224a64,64,0,0,0-128,0,16,16,0,0,1-32,0,96,96,0,0,1,192,0v224A96.1,96.1,0,0,1,256,464.88Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.component.ts": [
                {
                    "name": "Autocomplete_Autocomplete_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-search.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteSearchComponent),\n  multi: true\n}"
                }
            ],
            "libs/packages/components/src/lib/autocomplete/autocomplete.component.ts": [
                {
                    "name": "Autocomplete_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/autocomplete/autocomplete.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSAutocompleteComponent),\n  multi: true\n}"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsBars.ts": [
                {
                    "name": "bars",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBars.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-bars\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M1.25,264.5c0-10.251,8.311-18.562,18.562-18.562h259.875c10.261,0,18.561,8.311,18.561,18.562c0,10.258-8.3,18.563-18.561,18.563H19.812C9.561,283.063,1.25,274.758,1.25,264.5z M428.188,394.438H19.812c-10.251,0-18.562,8.301-18.562,18.562c0,10.262,8.311,18.563,18.562,18.563h408.375c10.26,0,18.562-8.302,18.562-18.563C446.75,402.738,438.447,394.438,428.188,394.438z M353.937,97.438H182.082h-13.86H19.812c-10.251,0-18.562,8.302-18.562,18.562c0,10.262,8.311,18.563,18.562,18.563h148.41h13.86h171.855c10.263,0,18.565-8.302,18.565-18.563C372.502,105.739,364.199,97.438,353.937,97.438z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsBell.ts": [
                {
                    "name": "bell",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBell.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-bell\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440.06,428.6l-34.35-68.76V185.38C405.71,83,322.79,0,220.5,0S35.29,83,35.29,185.38V359.85L.94,428.6a8.83,8.83,0,0,0,7.89,12.78H141.62a79.36,79.36,0,0,0,157.75,0H432.17A8.83,8.83,0,0,0,440.06,428.6ZM52.93,185.38c0-92.63,75-167.72,167.57-167.72S388.07,92.75,388.07,185.38V353.1H52.93Zm167.57,309a61.77,61.77,0,0,1-61.11-53H281.61A61.77,61.77,0,0,1,220.5,494.34Zm70.56-70.62H23.1l26.46-53H391.44l26.46,53Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsBook.ts": [
                {
                    "name": "book",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBook.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-book\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M464.24,0H43.82A43.78,43.78,0,0,0,0,43.75V441.13c0,.29,0,.57,0,.86s0,.28,0,.42c0,1.19,0,2.4,0,3.62v.27H0c0,.05,0,.11,0,.16a10.11,10.11,0,0,0,.31,2.31A70.05,70.05,0,0,0,70.07,512H464.24a8.76,8.76,0,0,0,8.76-8.75V8.75A8.76,8.76,0,0,0,464.24,0ZM105.11,17.5H192.7V144.61l-36.88-38.15a8.76,8.76,0,0,0-12.53-.07L105.11,145ZM455.48,431.75H359.13a8.75,8.75,0,1,0,0,17.5h96.35V494.5H70.07a52.52,52.52,0,0,1-52.53-51.65v-.64q0-2.54.2-4.94A52.53,52.53,0,0,1,48.86,394a75.58,75.58,0,0,1,16.26-3.17l195.26,0h195.1Zm0-59.77H70.07a69.86,69.86,0,0,0-28.18,5.91,61.71,61.71,0,0,0-24.35,14.91V43.75A26.27,26.27,0,0,1,43.82,17.5H87.59V166.27a8.76,8.76,0,0,0,15,6.15l46.87-47.36,45.71,47.29a8.76,8.76,0,0,0,15.06-6.08V17.5H455.48Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsBookmark.ts": [
                {
                    "name": "bookmark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBookmark.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-bookmark\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M400,464a16.05,16.05,0,0,1-9.83-3.37L256,356.26,121.82,460.62A16,16,0,0,1,96,448V72a24,24,0,0,1,24-24H392a24,24,0,0,1,24,24V448a16,16,0,0,1-16,16ZM256,320a15.93,15.93,0,0,1,9.82,3.38L384,415.27V80H128V415.27l118.18-91.9A15.93,15.93,0,0,1,256,320Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsBuilding.ts": [
                {
                    "name": "building",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBuilding.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-building\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M461.43,435l-58.53-161A28.22,28.22,0,0,0,377.14,256h-56V72a24,24,0,0,0-24-24h-224a24,24,0,0,0-24,24V440a24,24,0,0,0,24,24h368a21.19,21.19,0,0,0,20.29-29ZM81.14,80h208V432h-208Zm240,352V288h52.79l52.36,144Zm-144-304a16,16,0,0,1-16,16h-32a16,16,0,1,1,0-32h32A16,16,0,0,1,177.14,128Zm0,64a16,16,0,0,1-16,16h-32a16,16,0,1,1,0-32h32A16,16,0,0,1,177.14,192Zm0,64a16,16,0,0,1-16,16h-32a16,16,0,1,1,0-32h32A16,16,0,0,1,177.14,256Zm80-128a16,16,0,0,1-16,16h-32a16,16,0,0,1,0-32h32A16,16,0,0,1,257.14,128Zm0,64a16,16,0,0,1-16,16h-32a16,16,0,0,1,0-32h32A16,16,0,0,1,257.14,192Zm0,64a16,16,0,0,1-16,16h-32a16,16,0,0,1,0-32h32A16,16,0,0,1,257.14,256Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsBuildingAlt.ts": [
                {
                    "name": "buildingAlt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsBuildingAlt.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-building-alt\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M424,464H312a24,24,0,0,1-24-24V336H224V440a24,24,0,0,1-24,24H88a24,24,0,0,1-24-24V72A24,24,0,0,1,88,48H424a24,24,0,0,1,24,24V440A24,24,0,0,1,424,464ZM320,432h96V80H96V432h96V328a24,24,0,0,1,24-24h80a24,24,0,0,1,24,24ZM240,128a16,16,0,0,0-16-16H144a16,16,0,0,0,0,32h80A16,16,0,0,0,240,128Zm144,0a16,16,0,0,0-16-16H288a16,16,0,0,0,0,32h80A16,16,0,0,0,384,128ZM240,192a16,16,0,0,0-16-16H144a16,16,0,0,0,0,32h80A16,16,0,0,0,240,192Zm144,0a16,16,0,0,0-16-16H288a16,16,0,0,0,0,32h80A16,16,0,0,0,384,192ZM240,256a16,16,0,0,0-16-16H144a16,16,0,0,0,0,32h80A16,16,0,0,0,240,256Zm144,0a16,16,0,0,0-16-16H288a16,16,0,0,0,0,32h80A16,16,0,0,0,384,256Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsCalendar.ts": [
                {
                    "name": "calendar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCalendar.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-calendar\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,64H384V48a16,16,0,0,0-32,0V64H160V48a16,16,0,0,0-32,0V64H64A16,16,0,0,0,48,80V448a16,16,0,0,0,16,16H448a16,16,0,0,0,16-16V80A16,16,0,0,0,448,64ZM432,96v48H80V96ZM80,432V176H432V432ZM384,288H304a16,16,0,0,0-16,16v80a16,16,0,0,0,16,16h80a16,16,0,0,0,16-16V304A16,16,0,0,0,384,288Zm-16,80H320V320h48Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsCalendarAdd.ts": [
                {
                    "name": "calendarAdd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCalendarAdd.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-calendar-add\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,64H384V48a16,16,0,0,0-32,0V64H160V48a16,16,0,0,0-32,0V64H64A16,16,0,0,0,48,80V448a16,16,0,0,0,16,16H448a16,16,0,0,0,16-16V80A16,16,0,0,0,448,64ZM432,96v48H80V96ZM80,432V176H432V432ZM336,304a16,16,0,0,1-16,16H272v48a16,16,0,0,1-32,0V320H192a16,16,0,0,1,0-32h48V240a16,16,0,0,1,32,0v48h48A16,16,0,0,1,336,304Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsCalendarCheck.ts": [
                {
                    "name": "calendarCheck",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCalendarCheck.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-calendar-check\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,64H384V48a16,16,0,0,0-32,0V64H160V48a16,16,0,0,0-32,0V64H64A16,16,0,0,0,48,80V448a16,16,0,0,0,16,16H448a16,16,0,0,0,16-16V80A16,16,0,0,0,448,64ZM432,96v48H80V96ZM80,432V176H432V432ZM353.47,228.72a16,16,0,0,1-.06,22.63L229.68,374.45a16,16,0,0,1-11.28,4.65h-.07A16,16,0,0,1,207,374.35L158.4,325.1a16,16,0,0,1,22.77-22.48l37.33,37.81L330.85,228.66A16,16,0,0,1,353.47,228.72Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsCheck.ts": [
                {
                    "name": "check",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCheck.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-check\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M207.2,352h-.06a16.05,16.05,0,0,1-11.33-4.75l-63.2-64a16,16,0,1,1,22.78-22.5l51.91,52.58L356.72,164.66a16,16,0,1,1,22.56,22.68l-160.8,160A16,16,0,0,1,207.2,352Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsCheckCircle.ts": [
                {
                    "name": "checkCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsCheckCircle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-check-circle\\\" viewBox=\\\"0 0 543.5 512\\\">\\n  <path d=\\\"M313.3,319.9l186.4-185.7l22.4,22.6L313.3,364.9L206.5,258.5l22.4 22.6L313.3,319.9z M508.8,289.1 c0,104.3-85.2,189.1-189.8,189.1c-104.7,0-189.8-84.8-189.8-189.1S214.4,100,319,100V68.1C196.8,68.1,97.4,167.2,97.4,289 S196.8,509.9,319,509.9s221.6-99.1,221.7-220.8H508.8z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/key-helper/key-mocks.ts": [
                {
                    "name": "ChromeFirefoxMocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  enter: {\n    charCode: 13,\n    code: 'Enter',\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13,\n  },\n  up: {\n    charCode: 0,\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38\n  },\n  down: {\n    charCode: 0,\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40\n  },\n  left: {\n    charCode: 0,\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37\n  },\n  right: {\n    charCode: 0,\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39\n  },\n  tab: {\n    charCode: 0,\n    code: 'Tab',\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9\n  },\n  esc: {\n    charCode: 0,\n    code: 'Escape',\n    key: 'Escape',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27\n  },\n  space: {\n    charCode: 0,\n    code: 'Space',\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32\n  },\n  shift: {\n    charCode: 0,\n    code: 'ShiftLeft',\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16\n  },\n  backspace: {\n    charCode: 0,\n    code: 'Backspace',\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8\n  },\n  delete: {\n    charCode: 0,\n    code: 'Delete',\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57\n  }\n}"
                },
                {
                    "name": "EdgeMocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: undefined,\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13\n  },\n  up: {\n    charCode: 0,\n    code: undefined,\n    key: 'Up',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38\n  },\n  down: {\n    charCode: 0,\n    code: undefined,\n    key: 'Down',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40\n  },\n  left: {\n    charCode: 0,\n    code: undefined,\n    key: 'Left',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37\n  },\n  right: {\n    charCode: 0,\n    code: undefined,\n    key: 'Right',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39\n  },\n  tab: {\n    charCode: 0,\n    code: undefined,\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9\n  },\n  esc: {\n    charCode: 0,\n    code: undefined,\n    key: 'Esc',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27\n  },\n  space: {\n    charCode: 0,\n    code: undefined,\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32\n  },\n  shift: {\n    charCode: 0,\n    code: undefined,\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16\n  },\n  backspace: {\n    charCode: 0,\n    code: undefined,\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8\n  },\n  delete: {\n    charCode: 0,\n    code: undefined,\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57\n  }\n}"
                },
                {
                    "name": "IEMocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: undefined,\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: undefined,\n    which: 13\n  },\n  up: {\n    charCode: 0,\n    code: undefined,\n    key: 'Up',\n    keyCode: 38,\n    keyIdentifier: undefined,\n    which: 38\n  },\n  down: {\n    charCode: 0,\n    code: undefined,\n    key: 'Down',\n    keyCode: 40,\n    keyIdentifier: undefined,\n    which: 40\n  },\n  left: {\n    charCode: 0,\n    code: undefined,\n    key: 'Left',\n    keyCode: 37,\n    keyIdentifier: undefined,\n    which: 37\n  },\n  right: {\n    charCode: 0,\n    code: undefined,\n    key: 'Right',\n    keyCode: 39,\n    keyIdentifier: undefined,\n    which: 39\n  },\n  tab: {\n    charCode: 0,\n    code: undefined,\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: undefined,\n    which: 9\n  },\n  esc: {\n    charCode: 0,\n    code: undefined,\n    key: 'Esc',\n    keyCode: 27,\n    keyIdentifier: undefined,\n    which: 27\n  },\n  space: {\n    charCode: 0,\n    code: undefined,\n    key: 'Spacebar',\n    keyCode: 32,\n    keyIdentifier: undefined,\n    which: 32\n  },\n  shift: {\n    charCode: 0,\n    code: undefined,\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: undefined,\n    which: 16\n  },\n  backspace: {\n    charCode: 0,\n    code: undefined,\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: undefined,\n    which: 8\n  },\n  delete: {\n    charCode: 0,\n    code: undefined,\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: undefined,\n    which: 46\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57\n  }\n}"
                },
                {
                    "name": "mocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ie: IEMocks,\n  edge: EdgeMocks,\n  default: ChromeFirefoxMocks,\n  safari: SafariMocks\n}"
                },
                {
                    "name": "SafariMocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/key-helper/key-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  enter: {\n    charCode: 0,\n    code: 'Enter',\n    key: 'Enter',\n    keyCode: 13,\n    keyIdentifier: 'Enter',\n    which: 13\n  },\n  up: {\n    charCode: 0,\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    keyCode: 38,\n    keyIdentifier: 'Up',\n    which: 38\n  },\n  down: {\n    charCode: 0,\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    keyCode: 40,\n    keyIdentifier: 'Down',\n    which: 40\n  },\n  left: {\n    charCode: 0,\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    keyCode: 37,\n    keyIdentifier: 'Left',\n    which: 37\n  },\n  right: {\n    charCode: 0,\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    keyCode: 39,\n    keyIdentifier: 'Right',\n    which: 39\n  },\n  tab: {\n    charCode: 0,\n    code: 'Tab',\n    key: 'Tab',\n    keyCode: 9,\n    keyIdentifier: 'U+0009',\n    which: 9\n  },\n  esc: {\n    charCode: 0,\n    code: 'Escape',\n    key: 'Escape',\n    keyCode: 27,\n    keyIdentifier: 'U+001B',\n    which: 27\n  },\n  space: {\n    charCode: 0,\n    code: 'Space',\n    key: ' ',\n    keyCode: 32,\n    keyIdentifier: 'U+0020',\n    which: 32\n  },\n  shift: {\n    charCode: 0,\n    code: 'ShiftLeft',\n    key: 'Shift',\n    keyCode: 16,\n    keyIdentifier: 'Shift',\n    which: 16\n  },\n  backspace: {\n    charCode: 0,\n    code: 'Backspace',\n    key: 'Backspace',\n    keyCode: 8,\n    keyIdentifier: 'U+0008',\n    which: 8\n  },\n  delete: {\n    charCode: 0,\n    code: 'Delete',\n    key: 'Delete',\n    keyCode: 46,\n    keyIdentifier: 'U+007F',\n    which: 46\n  },\n  0: {\n    charCode: 0,\n    code: 'Digit0',\n    key: 0,\n    keyCode: 48,\n    keyIdentifier: 'U+0030',\n    which: 48\n  },\n  1: {\n    charCode: 0,\n    code: 'Digit1',\n    key: 1,\n    keyCode: 49,\n    keyIdentifier: 'U+0031',\n    which: 49\n  },\n  2: {\n    charCode: 0,\n    code: 'Digit2',\n    key: 2,\n    keyCode: 50,\n    keyIdentifier: 'U+0032',\n    which: 50\n  },\n  3: {\n    charCode: 0,\n    code: 'Digit3',\n    key: 3,\n    keyCode: 51,\n    keyIdentifier: 'U+0033',\n    which: 51\n  },\n  4: {\n    charCode: 0,\n    code: 'Digit4',\n    key: 4,\n    keyCode: 52,\n    keyIdentifier: 'U+0034',\n    which: 52\n  },\n  5: {\n    charCode: 0,\n    code: 'Digit5',\n    key: 5,\n    keyCode: 53,\n    keyIdentifier: 'U+0035',\n    which: 53\n  },\n  6: {\n    charCode: 0,\n    code: 'Digit6',\n    key: 6,\n    keyCode: 54,\n    keyIdentifier: 'U+0036',\n    which: 54\n  },\n  7: {\n    charCode: 0,\n    code: 'Digit7',\n    key: 7,\n    keyCode: 55,\n    keyIdentifier: 'U+0037',\n    which: 55\n  },\n  8: {\n    charCode: 0,\n    code: 'Digit8',\n    key: 8,\n    keyCode: 56,\n    keyIdentifier: 'U+0038',\n    which: 56\n  },\n  9: {\n    charCode: 0,\n    code: 'Digit9',\n    key: 9,\n    keyCode: 57,\n    keyIdentifier: 'U+0039',\n    which: 57\n  }\n}"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsComment.ts": [
                {
                    "name": "comment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsComment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-comment\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M382.4,478.4c-4.8,0-11.2-3.2-14.4-6.4l-84.8-84.8-3.2-1.6H72c-12.8,0-24-11.2-24-24h0V89.6c0-12.8,11.2-24,24-24H440c12.8,0,24,11.2,24,24v272c0,12.8-11.2,24-24,24H400v72c0,8-4.8,16-11.2,19.2C385.6,476.8,384,476.8,382.4,478.4ZM80,353.6H280c9.6,0,17.6,4.8,25.6,9.6L368,425.6V376c0-12.8,11.2-24,24-24h40V96H80Zm288-176H144c-9.6,0-16-6.4-16-16s6.4-16,16-16H368c9.6,0,16,6.4,16,16S377.6,177.6,368,177.6Zm0,64H144c-9.6,0-16-6.4-16-16s6.4-16,16-16H368c9.6,0,16,6.4,16,16S377.6,241.6,368,241.6Zm-112,64H144c-9.6,0-16-6.4-16-16s6.4-16,16-16H256c9.6,0,16,6.4,16,16S265.6,305.6,256,305.6\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-content.directives.ts": [
                {
                    "name": "dialogElementUid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "Counter used to generate unique IDs for dialog elements.",
                    "description": "<p>Counter used to generate unique IDs for dialog elements.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsDocument.ts": [
                {
                    "name": "document",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDocument.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-document\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M430.76,137.89a16.12,16.12,0,0,0-3.45-5.21l-96-96A16.33,16.33,0,0,0,320,32H96A16,16,0,0,0,80,48V464a16,16,0,0,0,16,16H416a16,16,0,0,0,16-16V144A16,16,0,0,0,430.76,137.89ZM336,86.63,377.37,128H336ZM400,448H112V64H304v80a16,16,0,0,0,16,16h80Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsDocumentAdd.ts": [
                {
                    "name": "documentAdd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDocumentAdd.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-document-add\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M430.77,137.89a15.91,15.91,0,0,0-3.47-5.21l-96-96A16.21,16.21,0,0,0,320,32H96A16,16,0,0,0,80,48V464a16,16,0,0,0,16,16H416a16,16,0,0,0,16-16V144A16,16,0,0,0,430.77,137.89ZM336,86.62,377.38,128H336ZM400,448H112V64H304v80a16,16,0,0,0,16,16h80ZM320,256a16,16,0,0,1,0,32H272v48a16,16,0,0,1-32,0V288H192a16,16,0,0,1,0-32h48V208a16,16,0,0,1,32,0v48Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsDocumentPdf.ts": [
                {
                    "name": "documentPdf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDocumentPdf.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-document-pdf\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M416,400a16,16,0,0,0-16,16v32H112V64H304v80a16,16,0,0,0,16,16h80v48a16,16,0,0,0,32,0V144a16.33,16.33,0,0,0-4.69-11.32l-96-96A16.33,16.33,0,0,0,320,32H96A16,16,0,0,0,80,48V464a16,16,0,0,0,16,16H416a16,16,0,0,0,16-16V416A16,16,0,0,0,416,400ZM336,86.62,377.38,128H336ZM219.25,269.3a42.09,42.09,0,0,0-15.17-6.47,85.85,85.85,0,0,0-18.67-1.94H144V379.11h27.17V340.57h15a66.44,66.44,0,0,0,18.12-2.41,43.45,43.45,0,0,0,15-7.39A35.8,35.8,0,0,0,229.5,318a41.47,41.47,0,0,0,3.79-18.3c0-7.29-1.27-13.41-3.79-18.4A32.18,32.18,0,0,0,219.25,269.3Zm-34.77,49.63H171.17V282.51h12.57c7.39,0,13.07,1.31,17,3.88s5.92,7,5.92,13.33Q206.67,318.93,184.48,318.93Zm128.67-54.6a83.89,83.89,0,0,0-24.95-3.44h-34V379.11h35.48a75.35,75.35,0,0,0,24.14-3.63,47.61,47.61,0,0,0,30.6-29.54q4.25-11.25,4.23-26.47t-4.23-26.3A46.86,46.86,0,0,0,332.2,275,50.67,50.67,0,0,0,313.15,264.33Zm5.09,73.08a30.27,30.27,0,0,1-6.93,11.69,25.79,25.79,0,0,1-10.74,6.43,46,46,0,0,1-14,2h-5.18V282.47h5.18a51,51,0,0,1,14,1.8,25.77,25.77,0,0,1,10.74,6.08,28.62,28.62,0,0,1,6.93,11.42,54.44,54.44,0,0,1,2.49,17.7Q320.73,330.15,318.24,337.41Zm80.95-53.59v27.9H441v22.93H399.19v44.46H372V260.89h76v22.93Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsDocumentSearch.ts": [
                {
                    "name": "documentSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDocumentSearch.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-document-search\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M305.34,248.67a72.67,72.67,0,1,0-72.68,72.66A72,72,0,0,0,271.34,310l53.35,53.35a16,16,0,0,0,22.62-22.62L294,287.33A72,72,0,0,0,305.34,248.67Zm-113.34,0a40.67,40.67,0,1,1,40.66,40.66A40.71,40.71,0,0,1,192,248.67ZM430.76,137.88a16.18,16.18,0,0,0-3.45-5.2l-96-96a16.14,16.14,0,0,0-5.21-3.46A16,16,0,0,0,320,32H96A16,16,0,0,0,80,48V464a16,16,0,0,0,16,16H416a16,16,0,0,0,16-16V144A16,16,0,0,0,430.76,137.88ZM336,86.62,377.38,128H336ZM400,448H112V64H304v80a16,16,0,0,0,16,16h80Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsDownload.ts": [
                {
                    "name": "download",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsDownload.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-download\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,416a16,16,0,0,1-16,16H80a16,16,0,0,1,0-32H432A16,16,0,0,1,448,416ZM358.7,243,272,304.92V96a16,16,0,0,0-32,0V304.92L153.29,243a16,16,0,0,0-18.59,26l112,80a16,16,0,0,0,18.59,0l112-80a16,16,0,1,0-18.59-26Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsEllipsis.ts": [
                {
                    "name": "ellipsis",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsEllipsis.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-ellipsis\\\" viewBox=\\\"0 0 120 512\\\">\\n  <path d=\\\"M60,390.763209 C93.137085,390.763209 120,417.902989 120,451.381605 C120,484.86022 93.137085,512 60,512 C26.862915,512 0,484.86022 0,451.381605 C0,417.902989 26.862915,390.763209 60,390.763209 Z M60,195.381605 C93.137085,195.381605 120,222.521385 120,256 C120,289.478615 93.137085,316.618395 60,316.618395 C26.862915,316.618395 0,289.478615 0,256 C0,222.521385 26.862915,195.381605 60,195.381605 Z M60,0 C93.137085,0 120,27.13978 120,60.6183953 C120,94.0970106 93.137085,121.236791 60,121.236791 C26.862915,121.236791 0,94.0970106 0,60.6183953 C0,27.13978 26.862915,0 60,0 Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsEnvelope.ts": [
                {
                    "name": "envelope",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsEnvelope.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-envelope\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,112H72a24,24,0,0,0-24,24V376a24,24,0,0,0,24,24H440a24,24,0,0,0,24-24V136A24,24,0,0,0,440,112Zm-42.68,32L256,252.92,112.16,144ZM80,368V159.79l162.8,123.3A21.75,21.75,0,0,0,256,287.55,22.27,22.27,0,0,0,269.34,283L432,157.68V368Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsExclamation.ts": [
                {
                    "name": "exclamation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsExclamation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-exclamation\\\" viewBox=\\\"0 0 225 512\\\">\\n  <path d=\\\"M150,0H75A75.15,75.15,0,0,0,0,75.29V436.71A75.15,75.15,0,0,0,75,512h75a75.15,75.15,0,0,0,75-75.29V75.29A75.15,75.15,0,0,0,150,0ZM110,90.44q1.24-.08,2.48-.08a37.42,37.42,0,0,1,37.35,37.5q0,1.25-.08,2.49l-13.32,201H88.55l-13.32-201A37.45,37.45,0,0,1,110,90.44Zm2.48,346.27A37.65,37.65,0,1,1,150,399.06,37.57,37.57,0,0,1,112.5,436.71Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsExclamationCircle.ts": [
                {
                    "name": "exclamationCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsExclamationCircle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-exclamation-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,0C114.61,0,0,114.61,0,256S114.61,512,256,512,512,397.39,512,256,397.39,0,256,0Zm0,450.19a36.52,36.52,0,1,1,36.52-36.52A36.52,36.52,0,0,1,256,450.19Zm47.26-315.89L269.45,337.19H244L210.21,134.31V66.68h93.05Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsExclamationTriangle.ts": [
                {
                    "name": "exclamationTriangle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsExclamationTriangle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-exclamation-triangle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M507.2,427.3L285.8,50.4c-3.1-4.6-7.7-9.2-12.3-12.3c-16.9-10-37.5-3.8-47.5,12.3L4.6,427.3 C1.6,432.7,0,438.8,0,445c0,19.2,15.3,34.5,34.5,34.5h442.8c6.1,0,12.3-1.5,17.6-4.6C511,464.9,517.1,443.4,507.2,427.3z M483.4,454.9c-2.3,0.8-3.8,1.5-6.1,1.5H34.5c-6.1,0-11.5-5.4-11.5-11.5c0-2.3,0.8-4.6,1.5-6.1L245.9,62.7 c3.8-5.4,10.7-6.9,16.1 3.8c1.5,0.8,3.1,2.3,3.8,3.8l221.4,376.1C491.1,445,488.8,451.8,483.4,454.9z M259.7,376 c8.4,0,15.3,6.9,15.3,15.3s-6.9,15.3-15.3,15.3s-15.3-6.9-15.3 15.3S251.3,376,259.7,376z M244.4,169.2H275v183.9h-30.6V169.2z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsExit.ts": [
                {
                    "name": "exit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsExit.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-exit\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M278.62,256l68.69-68.69a16,16,0,0,0-22.62-22.62L256,233.38l-68.69-68.69a16,16,0,0,0-22.62,22.62L233.38,256l-68.69,68.69a16,16,0,1,0,22.62,22.62L256,278.62l68.69,68.69a16,16,0,0,0,22.62-22.62Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsFederalBuilding.ts": [
                {
                    "name": "federalBuilding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFederalBuilding.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-federal-building\\\" viewBox=\\\"0 0 543.5 512\\\">\\n  <path d=\\\"M695.6,250.7c0-6.1,0.8-5.4-5.5-5.4c-45.2,0-90.4,0-135.6,0.1c-3.2,0-4.5-0.9-5.4-4 c-4.6-16.5-13.5-30.3-26.5-41.5c-13.5-11.7-29-18.7-46.8-20.6c-2.4-0.3-3.7-1-3.4-3.6c0.1-1.2,0-2.4,0-3.5c0-5.3,0-5.3,5.4-5.3 c32.7,0,65.4-0.1,98.2,0.1c3.4,0,4.5-0.8,4.5-4.4c-0.1-28.3-0.2-56.5,0-84.8c0-4-1.1-5-5.1-5c-47.2,0.1-94.4,0.1-141.5,0.1 c-1.6,0.7-1.3,2.2-1.2,3.4c0.5,26.1-1.4,52.2-0.9,78.3c0.1,5,0,10,0,15c0,9.3,0.2,7.8-7.8,9.3c-19.9,3.7-36.6,13.2-50.2,28.2 c-8.5,9.4-14.1,20.2-17.9,32.1c-1.5,4.8-2,5-7,5.1c-1.4,0-2.9,0-4.3,0c-42.8,0-85.7,0-128.5,0c-6.6,0-7.4,0.7-7.4,6.7 c0,67.1,0,134.3,0,201.4c0,1.8-0.1,3.7,1.2,5.3c0,16.4,0.2,32.9,0,49.3c0,3.7,1.1,4.5,4.6,4.5c158.9-0.1,317.8-0.1,476.6,0 c4,0,4.7-1.2,4.7-4.8C695.6,421.3,695.6,336,695.6,250.7z M284.6,468.7c0,2.7-0.9,3.7-3.6,3.7c-9.5-0.1-18.9-0.1-28.4,0 c-3,0-3.4-1.3-3.4-3.8c0.1-19.6,0-39.1,0-58.7c0-19,0.1-38.1-0.1-57.1c0-3.3,0.9-4.2,4.2-4.2c9.2,0.2,18.4,0.1,27.6,0 c2.6,0,3.7,0.5,3.7,3.4C284.5,390.9,284.5,429.8,284.6,468.7z M284.7,305.9c0.1,2.7-1.1,3.4-3.5,3.3c-4.7-0.1-9.5,0-14.2,0 c-4.9,0-9.7-0.1-14.6,0c-2.1,0-3.1-0.4-3.1-2.8c0-6.3,0-12.6-0.1-18.9c0-2.3,0.9-2.9,3.1-2.9c9.7,0.1,19.4,0.1,29.2,0 c2.4,0,3.2,0.8,3.2,3.2C284.6,293.8,284.6,299.9,284.7,305.9z M358.9,469.2c0,2.4-0.9,3.2-3.2,3.2c-9.6-0.1-19.2-0.1-28.8,0 c-3.1,0-2.9-1.7-2.9-3.8c0-19.3,0-38.6,0-57.9s0.1-38.6-0.1-57.9c0-3.3,1-4.2,4.2-4.1c9.2,0.2,18.4,0.1,27.6,0 c2.3,0,3.2,0.6,3.2,3.1C358.8,390.9,358.8,430,358.9,469.2z M358.9,306.3c0,2.2-0.7,3-2.9,3c-4.9-0.1-9.7,0-14.6,0 c-4.7,0-9.5-0.1-14.2,0c-2.3,0.1-3.3-0.6-3.2-3.1c0.1-6.2,0-12.4-0.1-18.5c0-2.2,0.6-3,2.9-3c9.7,0.1,19.4,0.1,29.2,0.1 c2.3,0,2.9,0.9,2.9,3C358.8,294,358.8,300.2,358.9,306.3z M473.2,113c2.2-2.5,7.2-0.8,10.9-0.8c7.6-0.1,15.2,0,22.8,0 c10.2,0,20.5,0.1,30.7-0.1c2.6,0,3.5,0.7,3.4,3.3c-0.2,3-0.1,6,0,9c0.1,2.3-0.7,3.3-3.2,3.3c-20.7-0.1-41.4-0.1-62.2,0 c-2.4,0-3.3-1-3.1-3.3C472.8,120.6,470.9,115.6,473.2,113z M504.2,472.4c-34.2-0.1-68.3-0.1-102.5,0c-3.1,0-3.6-1.4-3.6-4.1 c0.1-19.3,0-38.6,0-58c0-19.2,0.1-38.4-0.1-57.6c0-3.2,0.7-4.3,4.1-4.2c8.8,0.2,17.6,0.2,26.4,0c3.4-0.1,4.5,0.8,4.4,4.3 c-0.2,18,0,36-0.2,54c0,3.5,0.9,4.5,4.4,4.4c10.4-0.2,20.8-0.2,31.1,0c3.1,0.1,4.1-0.8,4-4c-0.1-18.1,0-36.3-0.2-54.4 c0-3.5,0.9-4.5,4.4-4.4c9.2,0.2,18.4,0.2,27.6,0c2.6,0,3.4,0.7,3.4,3.3c0.3,39.2,0.3,78.3,0.3,117.3 C507.7,471.6,506.8,472.4,504.2,472.4z M398.1,287.8c0-2.1,0.5-3.1,2.8-3.1c9.7,0.1,19.4,0.1,29.1,0c2.2,0,3,0.8,2.9,3 c-0.1,6.2-0.1,12.3,0,18.5c0.1,2.5-0.9,3.1-3.2,3.1c-4.7-0.1-9.4,0-14.2,0c-4.9,0-9.7-0.1-14.6,0c-2.2,0.1-3-0.7-2.9-3 C398.2,300.1,398.2,294,398.1,287.8z M507.7,306.1c0,2.4-0.9,3.2-3.3,3.1c-9.7-0.1-19.4-0.1-29.1,0c-2.2,0-3-0.7-3-2.9 c0.1-6.2,0.1-12.3,0-18.5c-0.1-2.5,0.9-3.1,3.2-3.1c4.9,0.1,9.7,0,14.6,0c4.9,0,9.7,0.1,14.6,0c2.2-0.1,3.1,0.6,3,2.9 C507.6,293.8,507.6,300,507.7,306.1z M505.2,245.4c-17.5-0.1-34.9-0.1-52.4-0.1c-17.3,0-34.7,0-52,0c-4,0-4.2-0.4-2.2-3.9 c8.3-13.9,20.7-22.1,36.7-23.3c12.8-0.9,25.7-1.4,38.5,0.5c14.8,2.2,25.7,10.6,33.4,23.3C508.9,244.6,508.4,245.4,505.2,245.4z M582,468.7c0,3.1-1.2,3.7-4,3.7c-9.1-0.1-18.1-0.2-27.2,0c-3.2,0.1-4.3-0.9-4.3-4.2c0.1-19.3,0.1-38.6,0.1-57.9 c0-19.2,0.1-38.4-0.1-57.5c0-3.3,0.9-4.3,4.2-4.2c9.2,0.2,18.4,0.2,27.6,0c2.6,0,3.7,0.5,3.7,3.4C581.9,390.9,581.9,429.8,582,468.7 z M582.1,306.2c0,2.2-0.8,3-3,3c-9.8-0.1-19.7-0.1-29.5,0c-2,0-2.8-0.6-2.8-2.7c0.1-6.3,0.1-12.6,0-18.9c-0.3-2.2,0.5-2.9,2.8-2.9 c4.9,0.1,9.7,0,14.6,0v-0.1c4.9,0,9.7,0.1,14.6,0c2.3-0.1,3.3,0.6,3.3,3.1C582,293.9,582,300,582.1,306.2z M652.3,472.4 c-9.1-0.2-18.1-0.2-27.2,0c-2.9,0-3.9-0.8-3.9-3.8c0.1-38.8,0.1-77.5,0-116.3c0-3,0.9-3.8,3.8-3.7c9.2,0.2,18.4,0.2,27.6,0 c2.8,0,3.5,0.8,3.5,3.5c-0.1,19.4-0.1,38.9-0.1,58.3c0,19.3-0.1,38.6,0.1,57.9C656.2,471.4,655.6,472.5,652.3,472.4z M656.2,306.1 c0.1,2.5-0.9,3.1-3.2,3.1c-4.9-0.1-9.7,0-14.6,0c-4.6,0-9.2-0.1-13.8,0c-2.2,0.1-3.4-0.4-3.3-3c0.2-6.1,0.1-12.3,0-18.5 c-0.1-2.5,1-3.1,3.3-3.1c9.5,0.1,18.9,0.1,28.4,0c2.3,0,3.3,0.5,3.2,3C656,293.8,656,300,656.2,306.1z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsFile.ts": [
                {
                    "name": "file",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFile.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-file\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M22.92,489.08H356.1V367.57a11.47,11.47,0,0,1,11.46-11.46H489.08V22.93H22.92ZM169,187.13H343a11.46,11.46,0,0,1,0,22.93H169a11.46,11.46,0,0,1,0-22.93Zm0,53.55H343a11.46,11.46,0,0,1,0,22.92H169a11.46,11.46,0,0,1,0-22.92Zm0,53.55h116.7a11.46,11.46,0,0,1,0,22.93H169a11.46,11.46,0,0,1,0-22.93Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsFileChartLine.ts": [
                {
                    "name": "fileChartLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFileChartLine.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-file-chart-line\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M358.68,29.26H248.88V7.31A7.32,7.32,0,0,0,241.56,0H124.44a7.32,7.32,0,0,0-7.32,7.31V29.26H7.32A7.32,7.32,0,0,0,0,36.57V504.69A7.32,7.32,0,0,0,7.32,512H358.68a7.32,7.32,0,0,0,7.32-7.31V36.57A7.32,7.32,0,0,0,358.68,29.26ZM131.76,14.63H234.24V29.26H131.76Zm219.6,482.74H14.64V43.89H351.36ZM241.56,95.09a7.31,7.31,0,1,1,0,14.63H65.88a7.31,7.31,0,1,1,0-14.63Zm-183,65.83a7.32,7.32,0,0,1,7.32-7.31H183a7.31,7.31,0,1,1,0,14.63H65.88A7.32,7.32,0,0,1,58.56,160.91Zm148.3,231.15L280,309.66a7.32,7.32,0,0,1,11,9.71l-77.9,87.77a7.32,7.32,0,0,1-10.22.71l-66.1-56.29-66.1,56.29a7.32,7.32,0,1,1-9.5-11.13L132,336.38a7.32,7.32,0,0,1,9.5,0Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsFilter.ts": [
                {
                    "name": "filter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFilter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-filter\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M216,456a24,24,0,0,1-24-24V251.48L56.31,98.15A24,24,0,0,1,72,56H440a24,24,0,0,1,15.71,42.15L320,251.49V378.65a23.94,23.94,0,0,1-10.69,20l-80,53.34A24,24,0,0,1,216,456Zm-.77-226.53A23.89,23.89,0,0,1,224,248V417l64-42.67V248a23.87,23.87,0,0,1,8.77-18.55L421.94,88H90.06ZM440,88h0Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsFlag.ts": [
                {
                    "name": "flag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFlag.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-flag\\\" viewBox=\\\"0 0 670.9 512\\\">\\n  <path d=\\\"M36.7-0.1l272.9,512h-38.3L2.3-0.1H36.7z M360.4-0.1l46.7,102h121.5l139.4,256.4H378.3 l-28-57.4l71.3-42.8H212.7L74-0.1H360.4z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsFolder.ts": [
                {
                    "name": "folder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFolder.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-folder\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,97.48H209.5l-1-2.75a23.89,23.89,0,0,0-21.46-13.25H72a24,24,0,0,0-24,24V409.93a23.81,23.81,0,0,0,24,23.55H440a23.8,23.8,0,0,0,24-23.55V121A23.81,23.81,0,0,0,440,97.48Zm-8,32v40.45H235.31L220.9,129.48Zm0,272H80v-288H181.35l31.35,88.45H432Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsFolderAlt1.ts": [
                {
                    "name": "folderAlt1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFolderAlt1.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-folder-alt-1\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,129.49H208v-24a24,24,0,0,0-24-24H72a24,24,0,0,0-24,24v320a24,24,0,0,0,24,24H440a24,24,0,0,0,24-24v-272A24,24,0,0,0,440,129.49Zm-264-16v16H80v-16Zm256,304H80v-256H432Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsFolderAlt2.ts": [
                {
                    "name": "folderAlt2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsFolderAlt2.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-folder-alt-2\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,114.19H220.21L208.53,94.76a23.86,23.86,0,0,0-21.48-13.28H72a24,24,0,0,0-24,24V409.93a23.8,23.8,0,0,0,24,23.55H440a23.81,23.81,0,0,0,24-23.55V137.75A23.81,23.81,0,0,0,440,114.19Zm-8,32v39.35L249.69,163.26l-10.25-17.07Zm0,255.29H80v-288H182.5l47.8,79.65L432,217.78v183.7Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/video-player/video-player.component.ts": [
                {
                    "name": "GLOBAL_STRINGS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/video-player/video-player.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "libs/packages/components/src/lib/autocomplete-search/autocomplete-sample.data.ts": [
                {
                    "name": "GropupSampleAutocompleteData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/autocomplete-search/autocomplete-sample.data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    code: 'A',\n    elements: [\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001001',\n        value: 'Formula Grants'\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001002',\n        value: 'Formula Grants (Apportionments)'\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001003',\n        value: 'Formula Grants (Cooperative Agreements)'\n      },\n      {\n        code: 'A',\n        elements: null,\n        description: null,\n        element_id: '0001004',\n        value: 'Formula Grants (Health Incentive Grants)'\n      }\n    ],\n    description:\n      'Formula Grants - Allocations of money to States or their subdivisions in accordance with a distribution formula prescribed by law or administrative regulation, for activities of a continuing nature not confined to a specific project.',\n    element_id: '0001',\n    value: 'FORMULA GRANTS'\n  },\n  {\n    code: 'B',\n    elements: [\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003001',\n        value: 'Cooperative Agreements'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003002',\n        value: 'Cooperative Agreements (Discretionary Grants)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003003',\n        value: 'Project Grants'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003004',\n        value:\n          'Project Grants (Capacity Building and Complaint Processing, Training)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003005',\n        value: 'Project Grants (Contracts)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003006',\n        value: 'Project Grants (Cooperative Agreements or Contracts)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003007',\n        value: 'Project Grants (Cooperative Agreements)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003008',\n        value: 'Project Grants (Discretionary)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003009',\n        value: 'Project Grants (Fellowships)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003010',\n        value:\n          'Project Grants (for administration projects authorized under Section'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003011',\n        value:\n          'Project Grants (for collaborative design of curriculum, production of'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003012',\n        value: 'Project Grants (for specified projects)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003013',\n        value: 'Project Grants (including individual awards)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003014',\n        value: 'Project Grants (including travel grants)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003015',\n        value:\n          'Project Grants (Rehabilitation of existing indoor and outdoor recreat'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003016',\n        value: 'Project Grants (Special)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003017',\n        value: 'Project Grants (to capitalize loan funds)'\n      },\n      {\n        code: 'B',\n        elements: null,\n        description: null,\n        element_id: '0003018',\n        value: 'Project Grants (with Formula Distribution)'\n      }\n    ],\n    description:\n      'Project Grants - The funding, for fixed or known periods, of specific projects or the delivery of specific services or products without liability for damages for failure to perform. Project grants include fellowships, scholarships, research grants, training grants, traineeships, experimental and demonstration grants, evaluation grants, planning grants, technical assistance grants, survey grants, construction grants, and unsolicited contractual agreements.',\n    element_id: '0003',\n    value: 'PROJECT GRANTS'\n  },\n  {\n    code: 'C',\n    elements: [\n      {\n        code: 'C',\n        elements: null,\n        description: null,\n        element_id: '0005001',\n        value: 'Direct Payments for Specified Use'\n      },\n      {\n        code: 'C',\n        elements: null,\n        description: null,\n        element_id: '0005002',\n        value: 'Direct Payments for Specified Use (Cooperative Agreements)'\n      }\n    ],\n    description:\n      'Direct Payments for a Specified Use - Financial assistance provided directly to individuals, private firms, and other private institutions to encourage or subsidize a particular activity by conditioning the receipt of the on a particular performance by the recipient. This does not include solicited contracts for the procurement of goods and services for the Federal government.',\n    element_id: '0005',\n    value: 'DIRECT PAYMENTS FOR A SPECIFIED USE'\n  },\n  {\n    code: 'D',\n    elements: [\n      {\n        code: 'D',\n        elements: null,\n        description: null,\n        element_id: '0007001',\n        value: 'Direct Payments with Unrestricted Use'\n      }\n    ],\n    description:\n      'Direct Payments with Unrestricted Use - Financial assistance provided directly to beneficiaries who satisfy eligibility requirements with no restrictions imposed on the recipient as to how the money is spent. Included are payments under retirement, pension, and compensation programs.',\n    element_id: '0007',\n    value: 'DIRECT PAYMENTS WITH UNRESTRICTED USE'\n  },\n  {\n    code: 'E',\n    elements: [\n      {\n        code: 'E',\n        elements: null,\n        description: null,\n        element_id: '0009001',\n        value: 'Direct Loans'\n      }\n    ],\n    description:\n      'Direct Loans - Financial assistance provided through the lending of Federal monies for a specific period of time, with a reasonable expectation of repayment. Such loans may or may not require the payment of interest.',\n    element_id: '0009',\n    value: 'DIRECT LOANS'\n  },\n  {\n    code: 'F',\n    elements: [\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011001',\n        value: 'Guaranteed/Insured Loans'\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011002',\n        value:\n          'Guaranteed/Insured Loans (including Guaranty Participation Loans)'\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011003',\n        value:\n          'Guaranteed/Insured Loans (including Immediate Participation Loans)'\n      },\n      {\n        code: 'F',\n        elements: null,\n        description: null,\n        element_id: '0011004',\n        value: 'Loan Guarantees/Grants'\n      }\n    ],\n    description:\n      'Guaranteed/Insured Loans - Programs in which the Federal Government makes an arrangement to indemnify a lender against all or part of all of any defaults by those responsible for the repayment of loans.',\n    element_id: '0011',\n    value: 'GUARANTEED/INSURED LOANS'\n  },\n  {\n    code: 'G',\n    elements: [\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013001',\n        value: 'Insurance'\n      },\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013002',\n        value: 'Insurance (Guaranteed Surety Bonds)'\n      },\n      {\n        code: 'G',\n        elements: null,\n        description: null,\n        element_id: '0013003',\n        value: 'Insurance (Reimbursement)'\n      }\n    ],\n    description:\n      'Insurance - Financial assistance provided to assure reimbursement for losses sustained under specified conditions. Coverage may be provided directly by the Federal Government or through private carriers and may or may not involve the payment of premiums.',\n    element_id: '0013',\n    value: 'INSURANCE'\n  },\n  {\n    code: 'H',\n    elements: [\n      {\n        code: 'H',\n        elements: null,\n        description: null,\n        element_id: '0015001',\n        value: 'Sale, Exchange, or Donation of Property and Goods'\n      }\n    ],\n    description:\n      'Sale, Exchange, or Donation of Property or Goods - Programs that provide for the sale, exchange, or donation of Federal real property, personal property, commodities, and other goods including land, buildings, equipment, food, and drugs. This does not include the loan of, use of, or access to Federal facilities or property.',\n    element_id: '0015',\n    value: 'SALE, EXCHANGE, OR DONATION OF PROPERTY OR GOODS'\n  },\n  {\n    code: 'I',\n    elements: [\n      {\n        code: 'I',\n        elements: null,\n        description: null,\n        element_id: '0017001',\n        value: 'Use of Property, Facilities, and Equipment'\n      }\n    ],\n    description:\n      'Use of Property, Facilities, or Equipment - Programs that provide for the loan of, use of, or access to Federal facilities or property wherein the federally owned facilities or property do not remain in the possession of the recipient of the assistance.',\n    element_id: '0017',\n    value: 'USE OF PROPERTY, FACILITIES, OR EQUIPMENT'\n  },\n  {\n    code: 'J',\n    elements: [\n      {\n        code: 'J',\n        elements: null,\n        description: null,\n        element_id: '0019001',\n        value: 'Provision of Specialized Services'\n      }\n    ],\n    description:\n      'Provision of Specialized Services - Programs that provide Federal personnel to directly perform certain tasks for the benefit of communities or individuals. These services may be performed in conjunction with non-Federal personnel, but they involve more than consultation, advice, or counseling.',\n    element_id: '0019',\n    value: 'PROVISION OF SPECIALIZED SERVICES'\n  },\n  {\n    code: 'K',\n    elements: [\n      {\n        code: 'K',\n        elements: null,\n        description: null,\n        element_id: '0021001',\n        value: 'Advisory Services and Counseling'\n      },\n      {\n        code: 'K',\n        elements: null,\n        description: null,\n        element_id: '0021002',\n        value: 'Advisory Services on Compliance'\n      }\n    ],\n    description:\n      'Advisory Services and Counseling - Programs that provide Federal specialists to consult, advise, or counsel communities or individuals including conferences, workshops, or personal contacts. This may involve the use of published information, but only in a secondary capacity.',\n    element_id: '0021',\n    value: 'ADVISORY SERVICES AND COUNSELING'\n  },\n  {\n    code: 'L',\n    elements: [\n      {\n        code: 'L',\n        elements: null,\n        description: null,\n        element_id: '0023001',\n        value: 'Dissemination of Technical Information'\n      },\n      {\n        code: 'L',\n        elements: null,\n        description: null,\n        element_id: '0023002',\n        value: 'Information'\n      }\n    ],\n    description:\n      'Dissemination of Technical Information - Programs that provide for the publication and distribution of information or data of a specialized technical nature, frequently through clearinghouses or libraries. This does not include conventional public information services designed for general public consumption.',\n    element_id: '0023',\n    value: 'DISSEMINATION OF TECHNICAL INFORMATION'\n  },\n  {\n    code: 'M',\n    elements: [\n      {\n        code: 'M',\n        elements: null,\n        description: null,\n        element_id: '0025001',\n        value: 'Training'\n      }\n    ],\n    description:\n      'Training - Programs that provide instructional activities conducted directly by a Federal agency for individuals not employed by the Federal Government.',\n    element_id: '0025',\n    value: 'TRAINING'\n  },\n  {\n    code: 'N',\n    elements: [\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027020',\n        value: 'Resolution of Disputes'\n      },\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027001',\n        value: 'Investigation of Complaints'\n      },\n      {\n        code: 'N',\n        elements: null,\n        description: null,\n        element_id: '0027002',\n        value: 'Investigation of Complaints (Compliance Reviews)'\n      }\n    ],\n    description:\n      'Investigation of Complaints - Federal administrative agency activities that are initiated in response to requests, either formal or informal, to examine or investigate claims of violations of Federal statutes, policy, or procedure. Such claims must come from outside the Federal Government.',\n    element_id: '0027',\n    value: 'INVESTIGATION OF COMPLAINTS'\n  },\n  {\n    code: 'O',\n    elements: [\n      {\n        code: 'O',\n        elements: null,\n        description: null,\n        element_id: '0029001',\n        value: 'Federal Employment'\n      }\n    ],\n    description:\n      'Federal Employment - Programs that reflect the government-wide resposibilities of the Office of Personnel Management in the recruitment and hiring of Federal civilian agency personnel.',\n    element_id: '0029',\n    value: 'FEDERAL EMPLOYMENT'\n  },\n  {\n    code: 'Z',\n    elements: [\n      {\n        code: 'Z',\n        elements: null,\n        description: null,\n        element_id: '0090001',\n        value: 'Salaries and Expenses'\n      }\n    ],\n    description: null,\n    element_id: '0090',\n    value: 'SALARIES AND EXPENSES'\n  }\n]"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsHome.ts": [
                {
                    "name": "home",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsHome.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-home\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,208a15.89,15.89,0,0,1-8-2.18L256,98.52,72.06,205.82a16,16,0,1,1-16.12-27.64l192-112a16,16,0,0,1,16.12,0l192,112A16,16,0,0,1,448,208Zm0-80V80a16,16,0,0,0-16-16H352a16,16,0,0,0,0,32h64v32a16,16,0,0,0,32,0Zm0,296V256a16,16,0,0,0-32,0V416H320V328a24,24,0,0,0-24-24H216a24,24,0,0,0-24,24v88H96V256a16,16,0,0,0-32,0V424a24,24,0,0,0,24,24H200a24,24,0,0,0,24-24V336h64v88a24,24,0,0,0,24,24H424A24,24,0,0,0,448,424Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsInformationCircle.ts": [
                {
                    "name": "informationCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsInformationCircle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-information-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,512C114.8,512,0,397.2,0,256S114.8,0,256,0s256,114.8,256,256S397.2,512,256,512z M256,19.8c-130.2,0-236.2,106-236.2,236.2s106,236.2,236.2,236.2s236.2-106,236.2-236.2S386.2,19.8,256,19.8z M256,185.2c-6.6,0-12-1.9-16.2-5.7s-6.4-8.8-6.4-14.9c0-6.1,2.1-11.2,6.4-15.1c4.2-3.9,9.6-5.9,16.2-5.9c6.6,0,12,2,16.2,5.9s6.4,8.9,6.4,15.1c0,6.1-2.1,11.1-6.4,14.9C268,183.3,262.6,185.2,256,185.2z M237.6,368.4V212.5h36.5v155.9H237.6z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsInvoice.ts": [
                {
                    "name": "invoice",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsInvoice.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-invoice\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M521.22,423.72H464.14V61.89A61.7,61.7,0,0,0,402.62,0h-337q-2.09,0-4.38,0h-.06L60.16,0A60.33,60.33,0,0,0,0,60.5V97.1a8.8,8.8,0,0,0,8.78,8.83h94.43c0,16.22,0,37.64,0,83.91V451.59C103.2,485.3,128.14,512,161,512H451c43.63,0,79-35.57,79-79.45A8.8,8.8,0,0,0,521.22,423.72ZM102.77,88.28H17.56V60.5A42.56,42.56,0,0,1,95.24,36.18c3.74,6,6.24,13.44,7.49,22.4,0,.64,0,1.28,0,1.92Zm18,363.31V62.22c-.14-1.56-.31-3.08-.5-4.58a60.39,60.39,0,0,0-10.54-31.43,55.7,55.7,0,0,0-6.66-8.53H402.62a44.09,44.09,0,0,1,44,44.21V423.72H219.31a8.8,8.8,0,0,0-8.78,8.83v17.8a43.87,43.87,0,0,1-43.75,44H161C138.09,494.34,120.76,475.79,120.76,451.59ZM451,494.34H209.73a61.64,61.64,0,0,0,18.36-44v-9H511.82A61.57,61.57,0,0,1,451,494.34Zm-224.85-291A41,41,0,0,1,267,162.3h7.77v-7.8a8.44,8.44,0,1,1,16.88,0v7.8h32.07a8.49,8.49,0,0,1,0,17H267a24.11,24.11,0,0,0,0,48.21h32.41a41.08,41.08,0,0,1,0,82.16h-7.77v7.79a8.44,8.44,0,1,1-16.88,0v-7.79H242.69a8.49,8.49,0,0,1,0-17h56.72a24.11,24.11,0,0,0,0-48.21H267A41,41,0,0,1,226.15,203.38Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsLeaf.ts": [
                {
                    "name": "leaf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsLeaf.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-leaf\\\" viewBox=\\\"0 0 648.1 512\\\">\\n  <path d=\\\"M324.1,101.6v232.8H324H104.6C48.6,334.4,3.3,289,3.3,233V2.3h221.5C279.6,2.3,324.1,46.7,324.1,101.6z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/tabs/tabs.component.ts": [
                {
                    "name": "LEFT_ARROW",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "37",
                    "rawdescription": "CONSTANTS\nAdding in the constant values for keycodes\nto handle onKeyDown events",
                    "description": "<p>CONSTANTS\nAdding in the constant values for keycodes\nto handle onKeyDown events</p>\n"
                },
                {
                    "name": "RIGHT_ARROW",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/tabs/tabs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "39"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsLink.ts": [
                {
                    "name": "link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsLink.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-link\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M182.47,441.71a80,80,0,0,1-65.42-125.87l55.06-78.63a16,16,0,0,1,26.22,18.36L143.27,334.2a48,48,0,1,0,78.63,55.07L277,310.62A16,16,0,0,1,303.18,329l-55.06,78.64A80,80,0,0,1,182.47,441.71ZM339.89,276.56,395,197.92a80,80,0,0,0-131.07-91.78l-55.06,78.64A16,16,0,1,0,235,203.14L290.1,124.5a48,48,0,1,1,78.63,55.06L313.67,258.2a16,16,0,0,0,26.22,18.36Zm-116.66,55L315,200.53a16,16,0,0,0-26.22-18.36L197,313.23a16,16,0,0,0,26.22,18.36Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsLogIn.ts": [
                {
                    "name": "logIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsLogIn.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-log-in\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M432,160V80H80V432H432V352a16,16,0,0,1,32,0v88a24,24,0,0,1-24,24H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H440a24,24,0,0,1,24,24v88a16,16,0,0,1-32,0Zm-48,96a16,16,0,0,0-16-16H175.09L237,153.3A16,16,0,0,0,211,134.71l-80,112a16,16,0,0,0,0,18.59l80,112A16,16,0,1,0,237,358.71L175.09,272H368A16,16,0,0,0,384,256Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsLogOut.ts": [
                {
                    "name": "logOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsLogOut.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-log-out\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,464H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H440a24,24,0,0,1,24,24v88a16,16,0,0,1-32,0V80H80V432H432V352a16,16,0,0,1,32,0v88A24,24,0,0,1,440,464ZM381,246.7l-80-112a16,16,0,0,0-26,18.6L336.92,240H144a16,16,0,0,0,0,32H336.92L275,358.7a16,16,0,0,0,26,18.6l80-112A16,16,0,0,0,381,246.7Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsMessages.ts": [
                {
                    "name": "messages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsMessages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-messages\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,176H336V72a24,24,0,0,0-24-24H72A24,24,0,0,0,48,72V236.21a24,24,0,0,0,24,24H96V312a19,19,0,0,0,32.8,14.12L192,266.24v98a24,24,0,0,0,24,24h95.76a9.72,9.72,0,0,1,3,1.13l68.39,64.78A19,19,0,0,0,416,440V388.21h24a24,24,0,0,0,24-24V200A24,24,0,0,0,440,176ZM128,282.8V252.21a24,24,0,0,0-24-24H80V80H304V228.21H200a39.1,39.1,0,0,0-24.8,9.88Zm304,73.41H408a24,24,0,0,0-24,24V410.8l-47.19-44.7A39.1,39.1,0,0,0,312,356.21H224v-96h88a24,24,0,0,0,24-24V208h96Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsMobile.ts": [
                {
                    "name": "mobile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsMobile.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-mobile\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M376,48H136a24,24,0,0,0-24,24V440a24,24,0,0,0,24,24H376a24,24,0,0,0,24-24V72A24,24,0,0,0,376,48Zm-8,384H144V368H368Zm0-96H144V80H368ZM240,400a16,16,0,1,1,16,16A16,16,0,0,1,240,400Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsNewNote.ts": [
                {
                    "name": "newNote",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsNewNote.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-new-note\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,48H72A24,24,0,0,0,48,72V440a24,24,0,0,0,24,24H344a38.18,38.18,0,0,0,25-10.34L453.66,369A38.18,38.18,0,0,0,464,344V72A24,24,0,0,0,440,48ZM80,80H432l0,256H360a24,24,0,0,0-24,24v72H80ZM368,409.37V368h41.37ZM320,272H272v48a16,16,0,0,1-32,0V272H192a16,16,0,0,1,0-32h48V192a16,16,0,0,1,32,0v48h48a16,16,0,0,1,0,32Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsNewVersion.ts": [
                {
                    "name": "newVersion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsNewVersion.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-new-version\\\" viewBox=\\\"0 0 512 643.3\\\">\\n  <path d=\\\"M273.6,269.1L273.6,269.1h-63v-68.8c0-5-4.1-9.1-9.1-9.1s-9.1,4.1-9.1,9.1v77.9c0,5,4.1,9.1,9.1,9.1h72.1c5,0,9.1-4.1,9.1-9.1S278.6,269.1,273.6,269.1z M205.2,138.2c-73.1,0-132.6,59.5-132.6,132.6s59.5,132.6,132.6,132.6S337.8,344,337.8,270.8S278.3,138.2,205.2,138.2z M319.6,270.8c-0.1,63.2-51.3,114.4-114.5,114.5l0,0C142,385.2,90.7,334,90.7,270.8S142,156.3,205.2,156.3C268.4,156.4,319.6,207.6,319.6,270.8L319.6,270.8z M462.6,103c-5.4-25.6-26.5-45.3-52.7-48.9C405.8,23.6,379.7,0,348,0H62.4C28,0,0,28,0,62.4v416.8c0,31.7,23.6,57.8,54.1,61.9c3.5,26.2,23.3,47.3,48.8,52.7c6,28.2,31,49.4,61.1,49.4h285.5c34.5,0,62.4-28,62.4-62.4V164C512,134,490.8,109,462.6,103z M16.4,479.3V62.4c0-25.4,20.6-46,46-46H348c25.4,0,46,20.6,46,46v416.8c0,25.4-20.6,46-46,46H62.4C37,525.2,16.5,504.7,16.4,479.3z M70.9,541.7H348c34.5,0,62.4-28,62.4-62.4V70.9c21.1,4.2,37,22.8,37.1,45.1v416.8c0,25.4-20.6,46-46,46H116C93.6,578.8,75,562.8,70.9,541.7z M495.6,580.9c0,25.4-20.6,46-46,46H164c-20.4,0-37.6-13.3-43.7-31.7h281.2c34.5,0,62.4-28,62.4-62.4V120.4c18.4,6,31.6,23.3,31.6,43.7v416.8H495.6z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsNotCompleted.ts": [
                {
                    "name": "notCompleted",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsNotCompleted.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><svg width=\\\"50px\\\" height=\\\"50px\\\" viewBox=\\\"0 0 50 50\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><title>not completed</title><g id=\\\"Status-Examples\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke-dasharray=\\\"4\\\"><g id=\\\"Status-Tracker---Submitted-Example\\\" transform=\\\"translate(-801.000000, -1163.000000)\\\" stroke=\\\"#5D5D52\\\" stroke-width=\\\"2\\\"><g id=\\\"Oval-Copy-2\\\" transform=\\\"translate(802.000000, 1164.000000)\\\"><path d=\\\"M24,48 C37.254834,48 48,37.254834 48,24 C48,10.745166 37.254834,0 24,0 C10.745166,0 0,10.745166 0,24 C0,37.254834 10.745166,48 24,48 Z\\\"></path></g></g></g></svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsNote.ts": [
                {
                    "name": "note",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsNote.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-note\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,48H72A24,24,0,0,0,48,72V440a24,24,0,0,0,24,24H344a38.18,38.18,0,0,0,25-10.34L453.66,369A38.18,38.18,0,0,0,464,344V72A24,24,0,0,0,440,48ZM80,80H432l0,256H360a24,24,0,0,0-24,24v72H80ZM368,409.38V368h41.38ZM320,208H192a16,16,0,0,1,0-32H320a16,16,0,0,1,0,32Zm0,64H192a16,16,0,0,1,0-32H320a16,16,0,0,1,0,32Zm-64,64H192a16,16,0,0,1,0-32h64a16,16,0,0,1,0,32Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsOpenDoors.ts": [
                {
                    "name": "openDoors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsOpenDoors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-open-doors\\\" viewBox=\\\"0 0 517.2 512\\\">\\n  <path d=\\\"M145.2,196.3h17.1V307.2H145.2ZM511.5,5.5c-.1-.2-.1-.4-.2-.6a6.34,6.34,0,0,0-1.6-2.3c-.1-.1-.3-.2-.4-.4a6.47,6.47,0,0,0-.9-.8,3.38,3.38,0,0,0-1.2-.6.76.76,0,0,0-.4-.2,7.17,7.17,0,0,0-2.9-.6c-.1,0-.2-.1-.3-.1H8.7c-.1.1-.2.2-.3.2A7.17,7.17,0,0,0,5.5.7a.52.52,0,0,0-.4.2,5.17,5.17,0,0,0-1.3.6,6.47,6.47,0,0,0-.9.8l-.4.4A7,7,0,0,0,1,5l-.3.6a9.41,9.41,0,0,0-.6,3V503.5a8,8,0,0,0,.6,3c.1.2.1.4.2.6a6.34,6.34,0,0,0,1.6,2.3c.1.1.3.2.4.4a6.47,6.47,0,0,0,.9.8c.3.2.7.3,1,.5a3.55,3.55,0,0,0,.9.4,10.66,10.66,0,0,0,3,.6H503.6a8,8,0,0,0,3-.6c.3-.1.6-.3.9-.4s.7-.3,1-.5a6.47,6.47,0,0,0,.9-.8c.1-.1.3-.2.4-.4a8.68,8.68,0,0,0,1.6-2.3c.1-.2.1-.4.2-.6a10.47,10.47,0,0,0,.5-3V8.5A8,8,0,0,0,511.5,5.5ZM17.2,20.9,179.3,82.7V429.3L17.2,491.1ZM55,495l135.9-51.8a8.56,8.56,0,0,0,5.5-8V76.8a8.67,8.67,0,0,0-5.5-8L55,17.1H457.2L321.4,68.8a8.56,8.56,0,0,0-5.5,8V435.2a8.67,8.67,0,0,0,5.5,8L457.3,495Zm440-3.9L332.9,429.3V82.7L495,20.9ZM350,204.8h17.1V315.7H350ZM247.6,179.2h17.1v17.1H247.6Zm41.62,25.57,12.09-12.09,12.1,12.09-12.1,12.09Zm-87.85.11,12.09-12.09,12.09,12.09L213.46,217Zm53.13-.28a38.83,38.83,0,0,0-23.4,69.8V321a7.81,7.81,0,0,0,7.8,7.8h7.8v7.8h15.5v-7.8H270a7.81,7.81,0,0,0,7.8-7.8V274.3a38.72,38.72,0,0,0-23.3-69.7Zm7.7,108.7H246.7V297.8h15.5Zm3.8-49.8a7.73,7.73,0,0,0-3.9,6.7v12.1H246.6V270.2a7.73,7.73,0,0,0-3.9-6.7,23.07,23.07,0,0,1-11.7-20,23.35,23.35,0,0,1,46.7,0A23,23,0,0,1,266,263.5Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsPaperPlane.ts": [
                {
                    "name": "paperPlane",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPaperPlane.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-paper-plane\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M499.79,1,4.35,267.8a8.26,8.26,0,0,0,2.3,15.37l185.24,36.95,36.95,185.24a8.26,8.26,0,0,0,15.37,2.3L511,12.21A8.26,8.26,0,0,0,499.79,1ZM32.38,271.46,458.1,42.23,196.18,304.14ZM240.53,479.62l-32.67-163.8L469.75,53.94Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsPenPaper.ts": [
                {
                    "name": "penPaper",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPenPaper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-pen-paper\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M288,400H128a16,16,0,0,1,0-32H288a16,16,0,0,1,0,32Zm-80-64a16,16,0,0,0-16-16H128a16,16,0,0,0,0,32h64A16,16,0,0,0,208,336ZM440,80,234.71,306l72.35-15a22.75,22.75,0,0,0,11.54-6.24L473.45,130c9.25-8.88,8.71-24.77-.48-33.61L415.64,39c-8.89-9.19-24.68-9.75-33.59-.49L227.23,193.35A22.84,22.84,0,0,0,221,205l-15,72.32C202.29,293.91,218.1,309.72,234.71,306ZM398.6,67.24l46.16,46.17L297.9,260.27l-58.24,12.07,12.07-58.24ZM450.34,119h0ZM464,440V240a16,16,0,0,0-32,0V432H80V80H272a16,16,0,0,0,0-32H72A24,24,0,0,0,48,72V440a24,24,0,0,0,24,24H440A24,24,0,0,0,464,440Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsPentagon.ts": [
                {
                    "name": "pentagon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPentagon.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-pentagon\\\" viewBox=\\\"0 0 543.5 512\\\">\\n  <path d=\\\"M0,157.2l83.2,254.5h269.3l83.2-254.5L217.8,0L0,157.2z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsPhoto.ts": [
                {
                    "name": "photo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPhoto.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-photo\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,48H144a24,24,0,0,0-24,24v40H72a24,24,0,0,0-24,24V440a24,24,0,0,0,24,24H376a24,24,0,0,0,24-24V392h40a24,24,0,0,0,24-24V72A24,24,0,0,0,440,48Zm-72,96V346.55l-63.58-60.82a26.85,26.85,0,0,0-40-2.43l-50.67,48.87-22.49-21.51a23.82,23.82,0,0,0-33.39.2L80,387.22V144ZM271.84,432H80l94.73-92.86Zm46.3,0-81.22-77.69,46.25-44.62L368,390.84V432ZM432,360H400V136a24,24,0,0,0-24-24H152V80H432Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsPhotoAlt.ts": [
                {
                    "name": "photoAlt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPhotoAlt.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-photo-alt\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,48H144a24,24,0,0,0-24,24v40H72a24,24,0,0,0-24,24V440a24,24,0,0,0,24,24H376a24,24,0,0,0,24-24V392h40a24,24,0,0,0,24-24V72A24,24,0,0,0,440,48Zm-72,96V346.55l-63.58-60.82a26.85,26.85,0,0,0-40-2.43l-50.67,48.87-22.49-21.51a23.82,23.82,0,0,0-33.39.2L80,387.22V144ZM271.84,432H80l94.73-92.86Zm46.3,0-81.22-77.69,46.25-44.62L368,390.84V432ZM432,360H400V136a24,24,0,0,0-24-24H152V80H432Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsPrint.ts": [
                {
                    "name": "print",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsPrint.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-print\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M439.65,160H399.17a17.81,17.81,0,0,0,.83-3.86V67.87C400,56.73,390.53,48,378.44,48H133.57C121.48,48,112,56.73,112,67.87v88.27a18.41,18.41,0,0,0,.82,3.86H72.35A24.27,24.27,0,0,0,48,184.15V375.84A24.28,24.28,0,0,0,72.35,400H112v44c0,11.22,9.48,20,21.57,20H378.44c12.09,0,21.56-8.78,21.56-20V400h39.65A24.28,24.28,0,0,0,464,375.84V184.15A24.27,24.27,0,0,0,439.65,160ZM144,80H368v80H144ZM368,432H144V352H368Zm64-64H400V340c0-11.22-9.47-20-21.56-20H133.57c-12.09,0-21.57,8.78-21.57,20v28H80V192H432Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsQuestion.ts": [
                {
                    "name": "question",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsQuestion.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-question\\\" viewBox=\\\"0 0 324 512\\\">\\n  <path d=\\\"M152.31,416.62a36,36,0,0,1-36-36V284.89c0-19.88,15.46-36,45.69-36h0c49.62,0,90-39.68,90-88.44S211.62,72,162,72s-90,39.67-90,88.45a36,36,0,0,1-72,0C0,72,72.67,0,162,0S324,72,324,160.45c0,79.6-58.83,145.83-135.69,158.33v61.84A36,36,0,0,1,152.31,416.62Zm2.6,39.38a28,28,0,1,0,28.35,28A28.18,28.18,0,0,0,154.91,456Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsQuestionCircle.ts": [
                {
                    "name": "questionCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsQuestionCircle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-question-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M245.25,360.61a12,12,0,0,1-12-12V316.49a29.56,29.56,0,0,1,25.23-29.17A83.76,83.76,0,0,0,314,252.16c13.09-19,17.61-42.29,12.72-65.52C320.4,156.45,296,131.27,266,124c-32.48-7.91-64.39,2.88-85.33,28.79a12,12,0,0,1-18.77-15l.1-.12c26.52-32.81,68.59-46.94,109.64-37a106.38,106.38,0,0,1,78.64,81c6.25,29.73.41,59.58-16.45,84.07A107.83,107.83,0,0,1,262.26,311a5.71,5.71,0,0,0-5,5.48v32.13a12,12,0,0,1-12,12Zm2.4,17.94a12,12,0,1,0,11.28,12.68A12,12,0,0,0,247.65,378.55ZM256,512A256,256,0,0,1,75,75,256,256,0,0,1,437,437,254.33,254.33,0,0,1,256,512Zm0-489.07A233.07,233.07,0,0,0,91.19,420.81,233.07,233.07,0,1,0,420.81,91.19,231.55,231.55,0,0,0,256,22.93Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsReceipt.ts": [
                {
                    "name": "receipt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsReceipt.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-receipt\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M320,447a24,24,0,0,1-10.73-2.52L256,417.89l-53.27,26.63a24.1,24.1,0,0,1-21.46,0L128,417.89,82.73,440.52A24,24,0,0,1,48,419.05V72A24,24,0,0,1,72,48H440a24,24,0,0,1,24,24V419.05a24,24,0,0,1-34.73,21.47L384,417.89l-53.27,26.63A24,24,0,0,1,320,447Zm3.58-31.14h0ZM256,385a24,24,0,0,1,10.73,2.52L320,414.11l53.27-26.63a24.1,24.1,0,0,1,21.46,0L432,406.11V80H80V406.11l37.27-18.63a24.1,24.1,0,0,1,21.46,0L192,414.11l53.27-26.63A24,24,0,0,1,256,385Zm80-225a16,16,0,0,0-16-16H128a16,16,0,0,0,0,32H320A16,16,0,0,0,336,160Zm-48,64a16,16,0,0,0-16-16H128a16,16,0,0,0,0,32H272A16,16,0,0,0,288,224Zm-80,64a16,16,0,0,0-16-16H128a16,16,0,0,0,0,32h64A16,16,0,0,0,208,288Zm192,0a16,16,0,0,0-16-16H352a16,16,0,0,0,0,32h32A16,16,0,0,0,400,288Zm0,0a16,16,0,0,0-16-16H352a16,16,0,0,0,0,32h32A16,16,0,0,0,400,288Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsRequest.ts": [
                {
                    "name": "request",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsRequest.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-request\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,464H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H272a16,16,0,0,1,0,32H80V432H432V240a16,16,0,0,1,32,0V440A24,24,0,0,1,440,464ZM186.71,354.05l72.32-15a22.93,22.93,0,0,0,11.57-6.24L473.46,130c9.12-9.11,8.9-24.17-.49-33.59L415.64,39c-9.38-9.41-24.45-9.62-33.6-.5L179.14,241.44A22.87,22.87,0,0,0,173,253L158,325.3a24.56,24.56,0,0,0,23.94,29.23A24.67,24.67,0,0,0,186.71,354.05ZM398.6,67.23l46.16,46.18L249.92,308.25l-58.25,12.08,12.07-58.25ZM450.33,119h0Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsReset.ts": [
                {
                    "name": "reset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsReset.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-reset\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M511.92,177.87c-.32-4.68-9-115.19-130.7-158.71C300.42-10.66,122.15-25.7,25.84,130.8l-.47.76c-1.83,3.16-44.64,78-14.88,156C31,341.34,79,381.4,153.29,406.67a358.63,358.63,0,0,0,47.76,15.26q19.88,3.19,19.87,4.81V512L379.83,399.05,220.92,254.87V344.6c-16.63-4.72-37.69-9.09-37.88-9.17l-3.16-1.21c-51.61-17.37-83.95-42-96.11-73.28C67.38,218.8,91.13,173.55,93,170.21c86.65-139.93,254-81.41,261.29-78.75,69.47,24.85,78.75,83.1,79.67,90.68V476.75H512V180.39Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsResetFilter.ts": [
                {
                    "name": "resetFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsResetFilter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-reset-filter\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M511.92,177.87c-.32-4.68-9-115.19-130.7-158.71C300.42-10.66,122.15-25.7,25.84,130.8l-.47.76c-1.83,3.16-44.64,78-14.88,156C31,341.34,79,381.4,153.29,406.67a358.63,358.63,0,0,0,47.76,15.26q19.88,3.19,19.87,4.81V512L379.83,399.05,220.92,254.87V344.6c-16.63-4.72-37.69-9.09-37.88-9.17l-3.16-1.21c-51.61-17.37-83.95-42-96.11-73.28C67.38,218.8,91.13,173.55,93,170.21c86.65-139.93,254-81.41,261.29-78.75,69.47,24.85,78.75,83.1,79.67,90.68V476.75H512V180.39Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsRulerPencil.ts": [
                {
                    "name": "rulerPencil",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsRulerPencil.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-ruler-pencil\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M115.64,99.1a33,33,0,1,0-33-33A33,33,0,0,0,115.64,99.1Zm0-49.55A16.52,16.52,0,1,1,99.12,66.06,16.52,16.52,0,0,1,115.64,49.55ZM173.46,0H8.26A8.26,8.26,0,0,0,0,8.26V503.74A8.26,8.26,0,0,0,8.26,512h165.2a8.26,8.26,0,0,0,8.26-8.26V8.26A8.26,8.26,0,0,0,173.46,0ZM165.2,495.48H16.52V462.72H42.45a8.26,8.26,0,1,0,0-16.52H16.52V400.1H42.45a8.26,8.26,0,1,0,0-16.52H16.52V337.47H42.45a8.26,8.26,0,1,0,0-16.52H16.52V274.85H42.45a8.26,8.26,0,1,0,0-16.52H16.52V212.22H42.45a8.26,8.26,0,1,0,0-16.52H16.52V16.52H165.2ZM412.83,89.18s0-.08,0-.11A8.25,8.25,0,0,0,410.58,85L328,2.42a8.26,8.26,0,0,0-11.68,0L233.7,85a8.25,8.25,0,0,0-2.21,4.07s0,.08,0,.11a8.25,8.25,0,0,0-.17,1.66v412.9a8.26,8.26,0,0,0,8.26,8.26h165.2a8.26,8.26,0,0,0,8.26-8.26V90.84A8.25,8.25,0,0,0,412.83,89.18ZM396.48,99.1V429.42H247.8V99.1ZM247.8,445.94H396.48v16.52H247.8Zm74.34-426L384.8,82.58H259.48ZM247.8,495.48V479H396.48v16.52Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/accordion/accordion-base.ts": [
                {
                    "name": "SDS_ACCORDION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<SdsAccordionBase>('SDS_ACCORDION')",
                    "rawdescription": "Token used to provide a `SdsAccordion` to `SdsAccordionItem`.\nUsed primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.",
                    "description": "<p>Token used to provide a <code>SdsAccordion</code> to <code>SdsAccordionItem</code>.\nUsed primarily to avoid circular imports between <code>SdsAccordion</code> and <code>SdsAccordionItem</code>.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog.ts": [
                {
                    "name": "SDS_DIALOG_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('SdsDialogData')",
                    "rawdescription": "Injection token that can be used to access the data that was passed in to a dialog.",
                    "description": "<p>Injection token that can be used to access the data that was passed in to a dialog.</p>\n"
                },
                {
                    "name": "SDS_DIALOG_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<SdsDialogConfig>('sds-dialog-default-options')",
                    "rawdescription": "Injection token that can be used to specify default dialog options.",
                    "description": "<p>Injection token that can be used to specify default dialog options.</p>\n"
                },
                {
                    "name": "SDS_DIALOG_SCROLL_STRATEGY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<() => ScrollStrategy>('sds-dialog-scroll-strategy')",
                    "rawdescription": "Injection token that determines the scroll handling while the dialog is open.",
                    "description": "<p>Injection token that determines the scroll handling while the dialog is open.</p>\n"
                },
                {
                    "name": "SDS_DIALOG_SCROLL_STRATEGY_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  provide: SDS_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
                },
                {
                    "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<() => ScrollStrategy>('sds-slide-out-scroll-strategy')"
                },
                {
                    "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  provide: SDS_SLIDE_OUT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
                }
            ],
            "libs/packages/components/src/lib/menu/menu.component.ts": [
                {
                    "name": "SDS_MENU_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<SdsMenuInterface>(\n  'SDS_MENU_TOKEN'\n)",
                    "rawdescription": "Injection token used to provide the parent menu to menu items.",
                    "description": "<p>Injection token used to provide the parent menu to menu items.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/selected-result/selected-result.component.ts": [
                {
                    "name": "SDS_SelectedResult_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/selected-result/selected-result.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SDSSelectedResultComponent),\n  multi: true\n}"
                }
            ],
            "libs/packages/components/src/lib/truncate-text/truncates-text-base.ts": [
                {
                    "name": "SDS_TRUNCATED_TEXT_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/truncate-text/truncates-text-base.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>(\n  'SdsTruncatedTextData'\n)",
                    "rawdescription": "Used primarily to avoid circular imports between `SdsAccordion` and `SdsAccordionItem`.",
                    "description": "<p>Used primarily to avoid circular imports between <code>SdsAccordion</code> and <code>SdsAccordionItem</code>.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/menu/menu-animations.ts": [
                {
                    "name": "sdsMenuAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/menu/menu-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  transformMenu: trigger('transformMenu', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(0.8)'\n      })\n    ),\n    transition(\n      'void => enter',\n      group([\n        query(\n          '.sds-menu',\n          animate(\n            '100ms linear',\n            style({\n              opacity: 1\n            })\n          )\n        ),\n        animate(\n          '120ms cubic-bezier(0, 0, 0.2, 1)',\n          style({ transform: 'scale(1)' })\n        )\n      ])\n    ),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n  ])\n}"
                }
            ],
            "libs/packages/components/src/lib/toast/toast.module.ts": [
                {
                    "name": "SdsToastSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/toast/toast.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  toastComponent: SdsToastComponent,\n  timeOut: 6000,\n  toastClass: 'sds-toast',\n  positionClass: 'toast-bottom-left',\n}"
                }
            ],
            "libs/packages/components/src/lib/toolbar/toolbar-animations.ts": [
                {
                    "name": "sdsToolbarAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/toolbar/toolbar-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  /** Animation that expands and collapses the accordion item content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({ width: '0px', height: '0px', opacity: '0', visibility: 'hidden', marginLeft: '-1px', marginBottom: '-1px' })),\n    state('expanded', style({ width: '{{expandedWidth}}', height: '*', opacity: '1', visibility: 'visible', marginLeft: '-1px', marginBottom: '-1px' }), {\n      params: { expandedWidth: '300px' }\n    }),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(TOOLBAR_ANIMATION_TIMING)),\n  ])\n}"
                },
                {
                    "name": "TOOLBAR_ANIMATION_TIMING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/toolbar/toolbar-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                    "rawdescription": "Time and timing curve for accordion item animations.",
                    "description": "<p>Time and timing curve for accordion item animations.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/truncate-text/truncate-text-animations.ts": [
                {
                    "name": "sdsTruncateTextAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/truncate-text/truncate-text-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  container: trigger('container', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(0.8)'\n      })\n    ),\n    transition(\n      'void => enter',\n      group([\n        query(\n          '.sds-overlay',\n          animate(\n            '100ms linear',\n            style({\n              opacity: 1\n            })\n          )\n        ),\n        animate(\n          '120ms cubic-bezier(0, 0, 0.2, 1)',\n          style({ transform: 'scale(1)' })\n        )\n      ])\n    ),\n    transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n  ])\n}"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsSearch.ts": [
                {
                    "name": "search",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsSearch.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-search\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M459.32,436.69,345.51,322.89A167.24,167.24,0,0,0,384,216c0-92.63-75.36-168-168-168S48,123.37,48,216s75.37,168,168,168a167.24,167.24,0,0,0,106.89-38.49l113.8,113.81a16,16,0,0,0,22.63-22.63ZM80,216c0-75,61-136,136-136s136,61,136,136S291,352,216,352,80,291,80,216Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsSearchCircle.ts": [
                {
                    "name": "searchCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsSearchCircle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-search-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,0C114.62,0,0,114.62,0,256S114.62,512,256,512,512,397.38,512,256,397.38,0,256,0Zm0,497.48C122.64,497.48,14.52,389.36,14.52,256S122.64,14.52,256,14.52,497.48,122.64,497.48,256,389.36,497.48,256,497.48ZM409.1,359.81l-144-118a92.41,92.41,0,1,0-10.78,13.84L398,373.38a8.79,8.79,0,0,0,12.34-1.22h0A8.8,8.8,0,0,0,409.1,359.81ZM197.88,270.15a78.7,78.7,0,1,1,67.17-88.75A78.71,78.71,0,0,1,197.88,270.15Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsShare.ts": [
                {
                    "name": "share",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsShare.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-share\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M440,464H72a24,24,0,0,1-24-24V264a24,24,0,0,1,24-24h72c20.93.1,20.92,31.91,0,32H80V432H432V272H352c-20.93-.1-20.92-31.91,0-32h88a24,24,0,0,1,24,24V440A24,24,0,0,1,440,464Zm0-192h0ZM377.3,131l-112-80a16,16,0,0,0-18.6,0l-112,80c-17,12.26,1.51,38.09,18.6,26L240,95.09V368c.1,20.93,31.91,20.92,32,0V95.09L358.7,157C375.72,169.1,394.31,143.24,377.3,131Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsShip.ts": [
                {
                    "name": "ship",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsShip.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-ship\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M447.7,254.6c-1.1-7.6-5.8-14.2-12.5-17.8L352,216.2v-64.5c0-13.3-10.7-24-24-24h-56V95.6h16 c20.9-0.1,20.9-31.9,0-32h-64c-20.9,0.1-20.9,31.9,0,32h16v32.2h-56c-13.3,0-24,10.7-24,24l0,0V216l-79.5,19.3 c-15.8,4.7-21.6,24.9-11.2,37.5l57.3,103.2c10.2,18.3,38.1,2.8,28-15.5l-54-97.2l139.4-34v74.1c0.1,20.9,31.9,20.9,32,0v-74.1 l139.4,34l-54,97.2c-10.1,18.4,17.8,33.8,28,15.5l57.3-103.2C446.9,267.7,448.7,261.1,447.7,254.6z M192,159.7h128v48.6l-54.8-13.5 c-5.9-2.4-12.5-2.4-18.4,0L192,208.2V159.7z M397.8,440.4c-4.4,7.7-14.1,10.4-21.8,6l-23.7-13.5l-21.1,11.6 c-7.1,3.9-15.6,3.9-22.7-0.1l-20.6-11.6l-20.6,11.5c-7.1,4-15.8,4-22.9-0.1l-20.1-11.4l-20.8,11.5c-7.1,4-15.8,4-22.8-0.1 l-20.3-11.5l-24.9,13.6c-18.4,10-33.7-17.9-15.4-28.1l29.1-16c7.1-3.9,15.7-3.8,22.8,0.2l20.2,11.5l20.8-11.6c7.1-4,15.8-4,22.9,0.1 l20,11.4l20.5-11.5c7.1-4,15.7-4,22.8,0l20.7,11.6l21.1-11.6c7.1-3.9,15.7-3.9,22.8,0.1l28,15.9 C399.5,422.9,402.2,432.7,397.8,440.4z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsStackblitz.ts": [
                {
                    "name": "stackblitz",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsStackblitz.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-stackblitz\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M 337.3568 83.3448 L 137.984 296.7976 h 104.192 l -59.9808 150.3744 l 199.3728 -213.4528 H 276.8128 z M 346.368 93.764 l -24.7808 59.136 l 112.64 112.64 l -96.8704 97.7152 v 83.9168 L 518.7072 265.54 z M 182.1952 83.3448 v 83.9168 L 85.0432 265.54 l 112.64 112.0768 l -24.4992 59.9808 L 0.5632 265.54 z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsStar.ts": [
                {
                    "name": "star",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsStar.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-star\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M349.8,337.4L399.7,506L242.4,385.2L83.1,511.9l55.7-174.5L-0.1,204.3H177L242.4-0.1L317,204.3h194.9 L349.8,337.4z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsTablet.ts": [
                {
                    "name": "tablet",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsTablet.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-tablet\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M424,16H88A24,24,0,0,0,64,40V472a24,24,0,0,0,24,24H424a24,24,0,0,0,24-24V40A24,24,0,0,0,424,16Zm-8,32V368H96V48ZM96,464V400H416v64Zm176-32a16,16,0,1,1-16-16A16,16,0,0,1,272,432Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsTag.ts": [
                {
                    "name": "tag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsTag.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-tag\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M288,464h0a16,16,0,0,1-11.33-4.73L69.91,250.94a16.11,16.11,0,0,1-4.64-11.28V81.27a16,16,0,0,1,16-16H239.66a16.11,16.11,0,0,1,11.28,4.64L459.27,276.64a16,16,0,0,1,0,22.63l0,0-160,160A16,16,0,0,1,288,464ZM97.27,233.07,288.05,425.33,425.33,288.05,233.07,97.27H97.27ZM152,128a24,24,0,1,0,24,24A24,24,0,0,0,152,128Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsThumbDown.ts": [
                {
                    "name": "thumbDown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsThumbDown.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-thumb-down\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M410,112H208.47a22.52,22.52,0,0,0-11.11,3l-10.79,6.19A25.11,25.11,0,0,0,167.11,112H104.89C91.17,112,80,122.86,80,136.2V292.14c0,13.36,11.17,24.22,24.89,24.22h62.22a24.9,24.9,0,0,0,23.28-15.68h10.7l22.22,23.54v69.9c0,12.06,9.94,21.88,22.94,21.88C279,416,314,394.72,314,363V332h95.84A22.11,22.11,0,0,0,432,310V133.87A22,22,0,0,0,410,112ZM112,144h48V284.36H112ZM400,300H304a22,22,0,0,0-22,21.89V363c0,8.33-12.28,17.06-26.69,20V320.11c0-6-2.55-11.8-6.16-15.07L222,276.23a24.1,24.1,0,0,0-17.51-7.55H192V154.9L211.05,144H400Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsThumbUp.ts": [
                {
                    "name": "thumbUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsThumbUp.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-thumb-up\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M409.84,180H314V149c0-31.69-35-53-68.53-53a22,22,0,0,0-22.16,21.88v69.84l-22.22,23.6H190.32a24.84,24.84,0,0,0-23.21-15.67H104.89c-13.73,0-24.89,10.86-24.89,24.2V375.79C80,389.14,91.16,400,104.89,400h62.22a25,25,0,0,0,19.36-9.18l10.92,6.25A22.51,22.51,0,0,0,208.46,400H410a22,22,0,0,0,22-21.88V202A22.12,22.12,0,0,0,409.84,180ZM160,368H112V227.65h48V368Zm240,0H211l-19-10.9V243.32h12.49A24.21,24.21,0,0,0,222,235.77l26.36-28.05a21.6,21.6,0,0,0,6.93-15.83v-63C269.47,131.74,282,140.55,282,149V190.1A22,22,0,0,0,304,212h96Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsTrash.ts": [
                {
                    "name": "trash",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsTrash.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-trash\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M432,96H320V72a24,24,0,0,0-24-24H216a24,24,0,0,0-24,24V96H80a16,16,0,0,0,0,32H96V440a24,24,0,0,0,24,24H392a24,24,0,0,0,24-24V128h16a16,16,0,0,0,0-32ZM224,80h64V96H224ZM384,432H128V128H384ZM272,352V208a16,16,0,0,1,32,0V352a16,16,0,0,1-32,0Zm-64,0V208a16,16,0,0,1,32,0V352a16,16,0,0,1-32,0Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsTriangle.ts": [
                {
                    "name": "triangle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsTriangle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-triangle\\\" viewBox=\\\"0 0 589.6 512\\\">\\n  <path d=\\\"M566.4,0L457.6,512L0,147.1L566.4,0z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/accordion/accordion-item.component.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "Counter for generating unique element ids.",
                    "description": "<p>Counter for generating unique element ids.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-ref.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/dialog/dialog-ref.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "libs/packages/components/src/lib/toolbar/toolbar.component.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/toolbar/toolbar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "Counter for generating unique element ids.",
                    "description": "<p>Counter for generating unique element ids.</p>\n"
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsUnlink.ts": [
                {
                    "name": "unlink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUnlink.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-unlink\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M182.26,440.76A80,80,0,0,1,116.84,314.9l45.88-65.53a16,16,0,0,1,26.22,18.36l-45.89,65.53a48,48,0,0,0,78.64,55.06l45.88-65.53a16,16,0,0,1,26.22,18.36l-45.88,65.53A80,80,0,0,1,182.26,440.76Zm154-171.07a16,16,0,0,1-13.09-25.18L369,179a48,48,0,1,0-78.18-55.71l-.45.64-45.88,65.54a16,16,0,1,1-26.22-18.36l45.88-65.54a80,80,0,0,1,131.07,91.78h0l-45.88,65.54A16,16,0,0,1,336.24,269.69Zm11.37,66.74a16,16,0,0,1-9.18-2.91L155.12,204.79a16,16,0,0,1,18.39-26.19L356.82,307.34a16,16,0,0,1-9.21,29.09Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsUpload.ts": [
                {
                    "name": "upload",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUpload.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-upload\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M448,408a16,16,0,0,1-16,16H80a16,16,0,0,1,0-32H432A16,16,0,0,1,448,408ZM153.3,197,240,135.08V328a16,16,0,0,0,32,0V135.08L358.7,197a16,16,0,1,0,18.6-26l-112-80a16,16,0,0,0-18.6,0l-112,80a16,16,0,1,0,18.6,26Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsUser.ts": [
                {
                    "name": "user",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUser.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-user\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M256,240a96,96,0,1,1,96-96A96.1,96.1,0,0,1,256,240Zm0-160a64,64,0,1,0,64,64A64.07,64.07,0,0,0,256,80ZM416,456V350a78.07,78.07,0,0,0-78-78H174a78.07,78.07,0,0,0-78,78V456a16,16,0,0,0,32,0V350a46,46,0,0,1,46-46H338a46,46,0,0,1,46,46V456a16,16,0,0,0,32,0Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsUserCircle.ts": [
                {
                    "name": "userCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUserCircle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-user-circle\\\" viewBox=\\\"0 0 448 512\\\">\\n  <path d=\\\"M257,279.27A100.85,100.85,0,1,0,156.15,178.42,100.85,100.85,0,0,0,257,279.27Zm0-186.18a85.33,85.33,0,1,1-85.33,85.33A85.33,85.33,0,0,1,257,93.09ZM257,0C115.62,0,1,114.62,1,256S115.62,512,257,512,513,397.38,513,256,398.38,0,257,0Zm0,15.52c132.82,0,240.48,107.67,240.48,240.48a239.41,239.41,0,0,1-49.15,145.67c-28.3-62.14-98.49-91.37-191-91.37-92.83,0-163.15,29.44-191.25,92A239.42,239.42,0,0,1,16.52,256C16.52,123.18,124.18,15.52,257,15.52Zm0,481A239.88,239.88,0,0,1,77.15,415.62,7.74,7.74,0,0,0,78,414c23.36-59.43,89.25-88.17,179.34-88.17,89.14,0,154.68,28.18,178.63,86.39a7.73,7.73,0,0,0,1.65,2.5A239.9,239.9,0,0,1,257,496.48Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsUsers.ts": [
                {
                    "name": "users",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsUsers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-users\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M136,352a56,56,0,1,1,56-56A56.07,56.07,0,0,1,136,352Zm0-80a24,24,0,1,0,24,24A24,24,0,0,0,136,272Zm88,176V430.48A62.55,62.55,0,0,0,161.52,368h-51A62.55,62.55,0,0,0,48,430.48V448a16,16,0,0,0,32,0V430.48A30.51,30.51,0,0,1,110.48,400h51A30.51,30.51,0,0,1,192,430.48V448a16,16,0,0,0,32,0Zm152-96a56,56,0,1,1,56-56A56.07,56.07,0,0,1,376,352Zm0-80a24,24,0,1,0,24,24A24,24,0,0,0,376,272Zm88,176V430.48A62.55,62.55,0,0,0,401.52,368h-51A62.55,62.55,0,0,0,288,430.48V448a16,16,0,0,0,32,0V430.48A30.51,30.51,0,0,1,350.48,400h51A30.51,30.51,0,0,1,432,430.48V448a16,16,0,0,0,32,0ZM256,144a56,56,0,1,1,56-56A56.07,56.07,0,0,1,256,144Zm0-80a24,24,0,1,0,24,24A24,24,0,0,0,256,64Zm88,158.48A62.55,62.55,0,0,0,281.52,160h-51A62.55,62.55,0,0,0,168,222.48c.09,20.92,31.91,20.93,32,0A30.51,30.51,0,0,1,230.48,192h51A30.51,30.51,0,0,1,312,222.48a16,16,0,1,0,32,0Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsVideoCircle.ts": [
                {
                    "name": "videoCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsVideoCircle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-video-circle\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M225.2,352a16,16,0,0,1-16-16V176a16,16,0,0,1,16-16,15.64,15.64,0,0,1,9.3,3l112,80a16,16,0,0,1,3.7,22.3,16.24,16.24,0,0,1-3.7,3.7l-112,80A16.59,16.59,0,0,1,225.2,352Zm16-144.9v97.8L309.7,256Zm16,272.9c-123.5,0-224-100.5-224-224S133.7,32,257.2,32s224,100.5,224,224S380.7,480,257.2,480Zm0-416c-105.9,0-192,86.1-192,192s86.1,192,192,192,192-86.1,192-192S363,64,257.2,64Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsVideoPlay.ts": [
                {
                    "name": "videoPlay",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsVideoPlay.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-video-play\\\" viewBox=\\\"0 0 512 476\\\">\\n  <path d=\\\"M238,115.86a13,13,0,0,1-13-12.94v-90a12.95,12.95,0,0,1,25.9,0v90A13,13,0,0,1,238,115.86ZM178.57,370.72a13,13,0,0,1-12.95-13h0V190.32A12.95,12.95,0,0,1,185,179.11l145,83.73a13,13,0,0,1,0,22.43L185,369A12.94,12.94,0,0,1,178.57,370.72Zm12.95-158v122.6L297.7,274ZM278,39.47v26.3c115,22,190.35,133.12,168.32,248.11A212,212,0,0,1,387.9,424C305,506.75,170.75,506.64,88,423.76s-82.64-217.15.24-299.9a211.21,211.21,0,0,1,109.68-58.1V39.47C85.57,58.5,0,156.27,0,274,0,405.47,106.53,512,238,512S476,405.47,476,274C475.9,156.27,390.34,58.5,278,39.47Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsVideoSquare.ts": [
                {
                    "name": "videoSquare",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsVideoSquare.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-video-square\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M217.1,285a16,16,0,0,0,17-2l80-64.57a16,16,0,0,0,0-24.91l-80-64.57A16,16,0,0,0,208,141.38V270.52A16,16,0,0,0,217.1,285ZM240,174.85,278.52,206,240,237ZM448,46.52H64a16,16,0,0,0-16,16v288a16,16,0,0,0,16,16H448a16,16,0,0,0,16-16v-288A16,16,0,0,0,448,46.52Zm-16,288H80v-256H432Zm16,80H219.55a31.72,31.72,0,0,0-55.1,0H64a16,16,0,0,0,0,32H164.45a31.72,31.72,0,0,0,55.1,0H448a16,16,0,0,0,0-32Zm-256,0a16,16,0,1,1-16,16,16,16,0,0,1,16-16Z\\\"/>\\n</svg>\""
                }
            ],
            "libs/packages/components/src/lib/icon/custom-icons/sdsWorkspace.ts": [
                {
                    "name": "workspace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/packages/components/src/lib/icon/custom-icons/sdsWorkspace.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi sds-workspace\\\" viewBox=\\\"0 0 512 512\\\">\\n  <path d=\\\"M216,240H72a24,24,0,0,1-24-24V72A24,24,0,0,1,72,48H216a24,24,0,0,1,24,24V216A24,24,0,0,1,216,240ZM80,208H208V80H80Zm360,32H296a24,24,0,0,1-24-24V72a24,24,0,0,1,24-24H440a24,24,0,0,1,24,24V216A24,24,0,0,1,440,240ZM304,208H432V80H304ZM216,461.34H72a24,24,0,0,1-24-24v-144a24,24,0,0,1,24-24H216a24,24,0,0,1,24,24v144A24,24,0,0,1,216,461.34Zm-136-32H208v-128H80Zm360,32H296a24,24,0,0,1-24-24v-144a24,24,0,0,1,24-24H440a24,24,0,0,1,24,24v144A24,24,0,0,1,440,461.34Zm-136-32H432v-128H304Z\\\"/>\\n</svg>\""
                }
            ]
        },
        "groupedFunctions": {
            "libs/packages/components/src/lib/dialog/dialog.ts": [
                {
                    "name": "_applyConfigDefaults",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Applies default options to the dialog config.</p>\n",
                    "args": [
                        {
                            "name": "config",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "defaultOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "SdsDialogConfig",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14833,
                                "end": 14839,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "config"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 14827,
                                "end": 14832,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Config to be modified.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 14873,
                                "end": 14887,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "defaultOptions"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 14867,
                                "end": 14872,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Default options provided.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 14918,
                                "end": 14925,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The new configuration object.</p>\n"
                        }
                    ]
                },
                {
                    "name": "SDS_DIALOG_SCROLL_STRATEGY_FACTORY",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "overlay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ScrollStrategy",
                    "jsdoctags": [
                        {
                            "name": "overlay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SDS_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "overlay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ScrollStrategy",
                    "jsdoctags": [
                        {
                            "name": "overlay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SDS_SLIDE_OUT_SCROLL_STRATEGY_PROVIDER_FACTORY",
                    "file": "libs/packages/components/src/lib/dialog/dialog.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "overlay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ScrollStrategy",
                    "jsdoctags": [
                        {
                            "name": "overlay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/testing/event-objects.ts": [
                {
                    "name": "createFakeEvent",
                    "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a fake event object with any desired event type.</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "canBubble",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cancelable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "canBubble",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cancelable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createKeyboardEvent",
                    "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Dispatches a keydown event from an element.</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyCode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "key",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keyCode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMouseEvent",
                    "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "button",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTouchEvent",
                    "file": "libs/packages/components/src/lib/testing/event-objects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a browser TouchEvent with the specified pointer coordinates.</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/popover/debounce.decorator.ts": [
                {
                    "name": "debounce",
                    "file": "libs/packages/components/src/lib/popover/debounce.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Delays calling of a function for <code>delay</code> number of milliseconds.</p>\n",
                    "args": [
                        {
                            "name": "delay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MethodDecorator",
                    "jsdoctags": [
                        {
                            "name": "delay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/testing/dispatch-events.ts": [
                {
                    "name": "dispatchEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility to dispatch any event on a Node.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Event",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchFakeEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Shorthand to dispatch a fake event on a specified node.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "canBubble",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Event",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "canBubble",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchKeyboardEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Shorthand to dispatch a keyboard event with a specified key code.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyCode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "KeyboardEvent",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keyCode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchMouseEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Shorthand to dispatch a mouse event on the specified coordinates.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MouseEvent",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchTouchEvent",
                    "file": "libs/packages/components/src/lib/testing/dispatch-events.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Shorthand to dispatch a touch event on the specified coordinates.</p>\n",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-content.directives.ts": [
                {
                    "name": "getClosestDialog",
                    "file": "libs/packages/components/src/lib/dialog/dialog-content.directives.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Finds the closest SdsDialogRef to an element by looking at the DOM.</p>\n",
                    "args": [
                        {
                            "name": "element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "openDialogs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3907,
                                "end": 3914,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "element"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3901,
                                "end": 3906,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Element relative to which to look for a dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3973,
                                "end": 3984,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "openDialogs"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3967,
                                "end": 3972,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>References to the currently-open dialogs.</p>\n"
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/testing/element-focus.ts": [
                {
                    "name": "patchElementFocus",
                    "file": "libs/packages/components/src/lib/testing/element-focus.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Patches an elements focus and blur methods to emit events consistently and predictably.\nThis is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\nwhile others won&#39;t fire them at all if the browser window is not focused.</p>\n",
                    "args": [
                        {
                            "name": "element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/packages/components/src/lib/dialog/dialog-container.component.ts": [
                {
                    "name": "throwSdsDialogContentAlreadyAttachedError",
                    "file": "libs/packages/components/src/lib/dialog/dialog-container.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Throws an exception for the case when a ComponentPortal is\nattached to a DomPortalOutlet without an origin.</p>\n",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "libs/packages/components/src/lib/key-helper/key-helper.ts": [
                {
                    "name": "KEYS",
                    "childs": [
                        {
                            "name": "ENTER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "enter"
                        },
                        {
                            "name": "ALT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "alt"
                        },
                        {
                            "name": "UP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "up"
                        },
                        {
                            "name": "DOWN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "down"
                        },
                        {
                            "name": "LEFT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left"
                        },
                        {
                            "name": "RIGHT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right"
                        },
                        {
                            "name": "TAB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tab"
                        },
                        {
                            "name": "ESC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "esc"
                        },
                        {
                            "name": "SPACE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "space"
                        },
                        {
                            "name": "SHIFT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "shift"
                        },
                        {
                            "name": "BACKSPACE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "backspace"
                        },
                        {
                            "name": "ONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "TWO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "THREE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        },
                        {
                            "name": "FOUR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "4"
                        },
                        {
                            "name": "FIVE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "5"
                        },
                        {
                            "name": "SIX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "6"
                        },
                        {
                            "name": "SEVEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "7"
                        },
                        {
                            "name": "EIGHT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "8"
                        },
                        {
                            "name": "NINE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "9"
                        },
                        {
                            "name": "ZERO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "DELETE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "delete"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/packages/components/src/lib/key-helper/key-helper.ts"
                }
            ],
            "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts": [
                {
                    "name": "NavigationMode",
                    "childs": [
                        {
                            "name": "INTERNAL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EXTERNAL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EVENT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LABEL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/packages/components/src/lib/common-navigation/common-navigation-model.ts"
                }
            ],
            "libs/packages/components/src/lib/selected-result/models/sds-selected-item-model-helper.ts": [
                {
                    "name": "SelectionMode",
                    "childs": [
                        {
                            "name": "SINGLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "MULTIPLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/packages/components/src/lib/selected-result/models/sds-selected-item-model-helper.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "libs/packages/components/src/lib/dialog/dialog-config.ts": [
                {
                    "name": "DialogRole",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dialog\" | \"alertdialog\"",
                    "file": "libs/packages/components/src/lib/dialog/dialog-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Valid ARIA roles for a dialog element.</p>\n",
                    "kind": 183
                }
            ],
            "libs/packages/components/src/lib/menu/menu.component.ts": [
                {
                    "name": "MenuPositionX",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"before\" | \"after\"",
                    "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Menu Positions</p>\n",
                    "kind": 183
                },
                {
                    "name": "MenuPositionY",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"above\" | \"below\"",
                    "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "MenuSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/packages/components/src/lib/menu/menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Menu available sizes</p>\n",
                    "kind": 192
                }
            ],
            "libs/packages/components/src/lib/pagination/pagination.component.ts": [
                {
                    "name": "PaginationDisplayMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"results\"",
                    "file": "libs/packages/components/src/lib/pagination/pagination.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>pagination display modes.</p>\n",
                    "kind": 183
                }
            ],
            "libs/packages/components/src/lib/accordion/accordion-base.ts": [
                {
                    "name": "SdsAccordionDisplayMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"basic\"",
                    "file": "libs/packages/components/src/lib/accordion/accordion-base.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Accordion&#39;s display modes.</p>\n",
                    "kind": 183
                }
            ],
            "libs/packages/components/src/lib/accordion/accordion-item.component.ts": [
                {
                    "name": "SdsAccordionItemState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"expanded\" | \"collapsed\"",
                    "file": "libs/packages/components/src/lib/accordion/accordion-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Accordion Item&#39;s states.</p>\n",
                    "kind": 183
                }
            ],
            "libs/packages/components/src/lib/toolbar/toolbar.component.ts": [
                {
                    "name": "SdsToolbarState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"expanded\" | \"collapsed\"",
                    "file": "libs/packages/components/src/lib/toolbar/toolbar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Toolbar&#39;s states.</p>\n",
                    "kind": 183
                }
            ]
        }
    }
};

export default COMPONENTS;